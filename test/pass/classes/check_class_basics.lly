define f {}

# The call to f is to make sure classes don't always blindly inject self into
# every call that is made.

class One(a: Integer) { var @a = a  f() }
class Two(a: Integer, b: String) < One(a) { var @b = b }
class Three(a: Integer, b: String, c: List[Integer]) < Two(a, b) { var @c = c }

class AccessCheck {
    define g {
        AccessCheck::g(self)
        self.g()
    }
}

define assign_to_better {
    # The type is fixed by the first assignment, but assignments that have
    # 'better', more capable types should succeed.
    var v = One::new(1)
    v = Two::new(1, "2")
    v = Three::new(1, "2", [3])
}

define check_layout {
    var v = Three::new(1, "2", [3])
    if v.a != 1 || v.b != "2" || v.c != [3]:
        stderr.print("Variables may have been laid out incorrectly.")
}

assign_to_better()
check_layout()
