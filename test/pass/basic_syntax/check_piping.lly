# This test checks that call piping works.
enum Option[A] { Some(A) None }

class example {
    define add(v: integer) {}

    # add is a class method, so self is automatically expected and sent first.
    # This would not work with example::add, because that does not implicitly
    # get self.
    10 |> add
}

# Does piping to a generic function work?
define f[A](input: A) : A { return input }
define g(input: integer) : integer { return input * 2 }

if (10 |> f |> g) != 20:
    stderr.print("Pipe to a generic failed.")

# What about piping to the same thing?

if (10 |> g |> g) != 40:
    stderr.print("Multi pipe failed.")

# Ensure that the order of operations is correct.

var v: list[integer] = []

define h(input: integer) : integer
{
    v.push(input)
    return input
}

h(4) |> [h(1), h(2), h(3)].push

if v != [1, 2, 3, 4]:
    stderr.print("Order of operations failed.")

define i(input: Option[integer]) {}

i(10 |> Some)
