# This test exists because and_then requires lambdas to pull upvalue types.
# If that is not done, then this test will crash because B is not solved and
# default to any (despite having a String value inside).

define and_then[A, B, C](f: Function(A => B), g: Function(B => C)):Function(A => C)
{
    return {|a| g(f(a)) }
}

define piped_and_then[A, B, C](f: Function(A => B), g: Function(B => C)):Function(A => C)
{
    return {|a| a |> f |> g }
}

define f(a: String): String { return a.concat(a) }

and_then(f, f)("10")
piped_and_then(f, and_then(f, f))("10")
