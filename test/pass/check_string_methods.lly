var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write($"Test ^(total) (^(s)) failed.\n")
        failed += 1
    }
}

ok("1".ends_with("2") == false,     "String.ends_with '1' and '2'.")
ok("1".ends_with("12345") == false, "String.ends_with '1' and '12345'.")
ok("1".ends_with("1"),              "String.ends_with '1' and '1'.")
ok("ÀÈÌaÒÜ".ends_with("aÒÜ"),       "String.ends_with utf-8 success case.")

ok("12".find("1").is_some(),       "String.find with '12' and '1'.")
ok("ÀÈaÌÒÜ".find("ÈaÌ").is_some(), "String.find utf-8 success case.")
ok("1".find("12345").is_none(),    "String.find where needle exceeds haystack.")
ok("".find("").is_none(),          "String.find where haystack is empty.")
ok("1234".find("5").is_none(),     "String.find needle not in haystack.")

ok("<&>".html_encode() == "&lt;&amp;&gt;",     "String.html_encode full spectrum.")
ok("+<&>+".html_encode() == "+&lt;&amp;&gt;+", "String.html_encode without replacing start + end.")
ok("<+&+>".html_encode() == "&lt;+&amp;+&gt;", "String.html_encode with text interleaving replacements.")

ok("".is_alnum() == false,                    "String.is_alnum empty false case.")
ok("a".is_alnum(),                            "String.is_alnum with true case.")
ok("abc123()".is_alnum() == false,            "String.is_alnum denies partial alpha.")

ok("".is_alpha() == false,                    "String.is_alpha empty false case.")
ok("a".is_alpha(),                            "String.is_alpha with true case.")
ok("abc123".is_alpha() == false,              "String.is_alpha denies partial alpha.")

ok("".is_digit() == false,                    "String.is_digit empty false case.")
ok("123".is_digit(),                          "String.is_digit with true case.")
ok("abc123".is_digit() == false,              "String.is_digit denies partial digit.")

ok("".is_space() == false,                    "String.is_space empty false case.")
ok(" \t\r\n".is_space(),                      "String.is_space full spectrum true case.")
ok("abc ".is_space() == false,                "String.is_space denies partial space.")

ok("abc".lstrip("") == "abc",                 "String.lstrip empty remove string.")
ok("aabbab12".lstrip("ab") == "12",           "String.lstrip multi remove.")
ok("aaaaa".lstrip("a") == "",                 "String.lstrip removing all.")
ok("ÀÈaÌÒÜ".lstrip("ÀÈ") == "aÌÒÜ",           "String.lstrip with utf-8 chunk.")

ok("abc".lower() == "abc",                    "String.lower ignores 'abc'.")
ok("ABC".lower() == "abc",                    "String.lower basic success case.")

ok("+12345".parse_i().unwrap() == 12345,       "String.parse_i positive lead.")
ok("0001".parse_i().unwrap() == 1,             "String.parse_i leading zeroes.")
ok("9223372036854775807".parse_i().unwrap() == 9223372036854775807,
                                               "String.parse_i parses int max.")
ok("-9223372036854775808".parse_i().unwrap() == -9223372036854775808,
                                               "String.parse_i parses int min.")
ok("".parse_i().is_none(),                     "String.parse_i fails with empty string.")
ok("9223372036854775808".parse_i().is_none(),  "String.parse_i rejects int max + 1.")
ok("-9223372036854775809".parse_i().is_none(), "String.parse_i rejects int min - 1.")
ok("123abc".parse_i().is_none(),               "String.parse_i rejects '123abc'.")
ok("0".parse_i().is_some(),                    "String.parse_i parses 0.")

ok("abc".rstrip("") == "abc",                  "String.rstrip empty remove string.")
ok("12aabbab".rstrip("ab") == "12",            "String.rstrip multi remove.")
ok("aaaaa".rstrip("a") == "",                  "String.rstrip removing all.")
ok("ÀÈaÌÒÜ".rstrip("ÌÒÜ") == "ÀÈa",            "String.rstrip with utf-8 chunk.")

ok("1".starts_with("2") == false,              "String.starts_with '1' and '2'.")
ok("123".starts_with("12345") == false,        "String.starts_with '123' and '12345'.")
ok("1".starts_with("1"),                       "String.starts_with '1' and '1'.")
ok("ÀÈÌaÒÜ".starts_with("ÀÈ"),                 "String.starts_with utf-8 success case.")

ok("123".split(" ") == ["123"],                "String.split no match.")
ok("1 2 3".split(" ") == ["1", "2", "3"],      "String.split simple success case.")
ok("1 2 3".split() == ["1", "2", "3"],         "String.split default to split by ' '.")
ok("1ab2ab".split("ab") == ["1", "2", ""],     "String.split split by wide ascii.")
ok("1ÀÀ2À".split("À") == ["1", "", "2", ""],   "String.split with utf-8 chunk.")
ok("   ".split(" ") == ["", "", "", ""],       "String.split where all chars match.")
ok({||
    var result = false
    try:
        "a".split("")
    except ValueError:
        result = true
    result
    }(),                                       "String.split raises ValueError for empty string.")
ok("1 2 3".split(" ")[0].is_digit(),           "String.split doesn't generate a broken first string.")

ok("abc".trim() == "abc",                      "String.trim ignores non-spaces.")
ok(" \t\r\nabc\t\r\n ".trim() == "abc",        "String.trim spectrum removal.")
ok("    ".trim() == "",                        "String.trim removing everything.")

ok("ABC".upper() == "ABC",                     "String.upper ignores 'ABC'.")
ok("abc".upper() == "ABC",                     "String.upper basic success case.")

if failed == 0:
    print($"^(total) of ^(total) tests passed.")
else:
    stderr.write($"^(failed) tests have failed.\n")
