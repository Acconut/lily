enum Option[A] {
	::Some(A)
	::None
}

var opt: Option[integer] = Option::Some(10)

# Since the interpreter knows that 'opt' MUST be of type Option, it does not
# require Option::<x> for each case.
# This has an added benefit: Making an enum scoped that wasn't scoped
# will not break match code that uses that enum.

match opt: {
	case Some(s):
	case None:
		stderr.write("Failed.\n")
}
