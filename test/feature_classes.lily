import test

var t = test.t

t.scope(__file__)

t.interpret("Match against class.",
    """
    class One {}
    class Two < One {}
    class Three < Two {}

    define f(input: One): Integer {
        var out = 0

        match input: {
            case Three(t):
                out = 3
            case Two(t):
                out = 2
            else:
                out = 1
        }

        return out
    }

    var v: List[One] = [Three(), Two(), One(), Two(), Three()]

    if v.map(f) != [3, 2, 1, 2, 3]:
        raise Exception("Failed.")
    """)

t.interpret("Verify that inherited classes have the right layout.",
    """
    class First {
    	var @prop_1 = 10
    	var @prop_2 = 5.5
    	var @prop_3 = "1"
    }

    class Second < First {
    	var @prop_4 = 20
    	var @prop_5 = 55.55
    	var @prop_6 = "11"
    }

    class Third < Second {
    	var @prop_7 = 40
    	var @prop_8 = 777.777
    	var @prop_9 = "333"
    }

    var v = Third()
    var v2 = Second()
    var v3 = First()
    """)

t.interpret("Verify class basics.",
    """
    define f {}

    # The call to f is to make sure classes don't always blindly inject self into
    # every call that is made.

    class One(a: Integer) { var @a = a  f() }
    class Two(a: Integer, b: String) < One(a) { var @b = b }
    class Three(a: Integer, b: String, c: List[Integer]) < Two(a, b) { var @c = c }

    class Four {
        var @a: Integer = 10
        @a = 11

        var @b = 12
        @b = 13
    }

    class AccessCheck {
        define g {
            AccessCheck.g(self)
            self.g()
        }
    }

    define assign_to_better {
        # The type is fixed by the first assignment, but assignments that have
        # 'better', more capable types should succeed.
        var v = One(1)
        v = Two(1, "2")
        v = Three(1, "2", [3])
    }

    define check_layout {
        var v = Three(1, "2", [3])
        if v.a != 1 || v.b != "2" || v.c != [3]:
            raise Exception("Variables may have been laid out incorrectly.")
    }

    assign_to_better()
    check_layout()
    """)

t.interpret("Verify calls to class methods.",
    """
    class One {
        define check {}

        define clone: One {
            One.check(self)
            return One()
        }

        protected var @a = 1
        protected define f { }

        self.check()
    }

    class Two < One {
        One.check(self)
        self.check()

        @a += 1

        f()
        One.f(self)

        define add {
            if 1:
                @a += 1
        }
    }
    """)

t.interpret("Verify class generics.",
    """
    class Box[A](a: A)
    {
        var @a = a
    }

    class BoxTwo[A, B](a: A, b: B) < Box(a)
    {
        var @b = b
        define f {
            BoxTwo(1, 2)
        }
    }

    class Container[A](value: A) {
        var @v: List[A] = [value]
    }

    var v = Box(10)
    v = BoxTwo(1, "2")

    var v2 = BoxTwo([10], "20")
    var check: Integer = v2.a[0]

    var c: Container[Integer] = Container(10)
    c.v.push(10)
    """)

t.interpret("Check short class constructors.",
    """
    class Test1(var @x: Integer, y: Integer, var @z: Integer) {}

    var t1 = Test1(10, 20, 30)
    if t1.x != 10 || t1.z != 30:
        raise Exception("Failed.")
    """)

t.interpret("Verify class inheritance shorthand.",
    """
    class Base(var @index: Integer) {  }
    class NthBase(index: Integer, var @str: String) < Base(index) {  }

    var v = NthBase(1, "abc")

    if v.index != 1 || v.str != "abc":
        raise Exception("Failed.")
    """)

t.interpret("Verify class match by calling class methods.",
    """
    class Base { define base_str: String { return "B" } }
    class Left < Base { define left_str: String { return "L" } }
    class Right < Base { define right_str: String { return "R" } }
    class Up < Base {  }

    define f(input: Base): String {
        var out = ""

        match input: {
            case Left(l):
                out = l.left_str()
            case Right(r):
                out = r.right_str()
            else:
                out = input.base_str()
        }

        return out
    }

    var v: List[Base] = [Right(), Left(), Up(), Left(), Right()]

    if v.map(f) != ["R", "L", "B", "L", "R"]:
        raise Exception("Failed.")
    """)

t.interpret("Allow an inherited constructor to pass 'self'.",
    """
    class Parent(x: Parent) { }

    class Child < Parent(self) { }
    """)

t.interpret("Verify properties being naturally covariant.",
    """
    class One {}
    class Two < One {}

    class Test {
        var @a: One = Two()
        @a = One()
    }
    """)

t.interpret("Verify unrelated classes not marked as related by accident.",
    """
    # This ensures that the vm does not try to say that Alpha inherits from Beta
    # because Alpha was first (and there is no lineage).
    class Alpha(s: String) {
       var @s = s
       define upper: String {
          return @s.upper()
       }
    }
    class Beta(s: String) {
       var @a = Alpha(s)
       var @b = @a.upper()
    }
    var b = Beta("hello")
    """)

t.interpret("Verify subscript assignment to property.",
    """
    class Test {
        var @map = ["one" => ["1"]]

        define add(key: String, val: String) {
            if ! @map.has_key(key):
                @map[key] = []
            @map[key].push(val)
        }
    }
    """)

t.interpret("Verify that return of 'self' keeps type information.",
    """
    class First {
        define doit: self { }
    }

    class Second < First {
        define amethod {}
    }

    Second().doit().amethod()
    """)
