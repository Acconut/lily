import test

var t = test.t

t.scope(__file__)

t.interpret("Dynaload exception class within define.",
    """
    define f(g: ValueError) {

    }
    """)

t.interpret("Verify that dynaloaded classes have a proper name.",
    """
    try: {
        1 / 0
    except Exception as e:
        var v = "{0}".format(e)
        if v.starts_with("<DivisionByZeroError at ") == false ||
           v.ends_with(">") == false:
            raise Exception("Interpolation failed.")
    }
    """)

t.interpret("Check multiple dynaload in list expression.",
    """
    var v = [stdin, stdout, stderr]
    """)

t.interpret("Verify class dynaload on left side of pipe.",
    """
    var v = [
        ValueError    |> Dynamic,
        IOError("10") |> Dynamic,
        KeyError      |> Dynamic
        ]
    """)

t.interpret("Verify that generics are restored after dynaload.",
    """
    class Test[A, B]
    {
        Some(1).is_none()

        define abc(key: A): Test[A, B]
        {
            return self
        }
    }

    """)

t.interpret("Verify property can be used after dynaload.",
    """
    class Test {
        var @contents = [1, 2, 3]

        define check(source: String) {
            var f = File.open(source, "r")
            var lines: List[String] = []

            f.each_line(|l| l.encode().unwrap() |> lines.push )

            @contents.size()
        }
    }
    """)

t.interpret("Check dynaload method clashing with local define name.",
    """
    define ends_with(a: String, b: String) {  }

    var s = "".ends_with("")
    """)

t.interpret("Verify var dynaload first seen in a 'define' scope.",
    """
    define f {
        var a = stdout
    }

    var b = stdout
    """)

t.interpret("Verify dynaload within expression to condition.",
    """
    var a = 1, b = 2, c = 3

    if 1:
        var d = stdout

    if 1:
        var e = [stderr, stdin]

    """)
