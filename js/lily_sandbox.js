// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 21232;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([59,55,0,0,0,0,0,0,116,114,117,101,0,0,0,0,170,40,0,0,0,0,0,0,115,101,108,102,0,0,0,0,53,55,0,0,0,0,0,0,102,97,108,115,101,0,0,0,57,25,0,0,0,0,0,0,95,95,102,105,108,101,95,95,66,25,0,0,0,0,0,0,95,95,108,105,110,101,95,95,75,25,0,0,0,0,0,0,95,95,102,117,110,99,116,105,88,25,0,0,0,0,0,0,105,102,0,0,0,0,0,0,91,25,0,0,0,0,0,0,100,111,0,0,0,0,0,0,94,25,0,0,0,0,0,0,118,97,114,0,0,0,0,0,98,25,0,0,0,0,0,0,102,111,114,0,0,0,0,0,102,25,0,0,0,0,0,0,116,114,121,0,0,0,0,0,106,25,0,0,0,0,0,0,99,97,115,101,0,0,0,0,111,25,0,0,0,0,0,0,101,108,115,101,0,0,0,0,116,25,0,0,0,0,0,0,101,108,105,102,0,0,0,0,121,25,0,0,0,0,0,0,101,110,117,109,0,0,0,0,126,25,0,0,0,0,0,0,119,104,105,108,101,0,0,0,132,25,0,0,0,0,0,0,114,97,105,115,101,0,0,0,138,25,0,0,0,0,0,0,109,97,116,99,104,0,0,0,144,25,0,0,0,0,0,0,98,114,101,97,107,0,0,0,150,25,0,0,0,0,0,0,99,108,97,115,115,0,0,0,156,25,0,0,0,0,0,0,100,101,102,105,110,101,0,0,163,25,0,0,0,0,0,0,114,101,116,117,114,110,0,0,170,25,0,0,0,0,0,0,101,120,99,101,112,116,0,0,177,25,0,0,0,0,0,0,105,109,112,111,114,116,0,0,184,25,0,0,0,0,0,0,112,114,105,118,97,116,101,0,192,25,0,0,0,0,0,0,112,114,111,116,101,99,116,101,202,25,0,0,0,0,0,0,99,111,110,116,105,110,117,101,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,0,0,208,1,0,0,170,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,27,0,0,0,16,2,0,0,175,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,25,102,169,90,111,2,181,217,23,0,0,222,23,0,0,253,23,0,0,227,23,0,0,229,23,0,0,239,23,0,0,241,23,0,0,201,23,0,0,204,23,0,0,151,59,0,0,212,23,0,0,232,23,0,0,244,23,0,0,122,24,0,0,127,24,0,0,195,23,0,0,199,23,0,0,222,23,0,0,124,24,0,0,129,24,0,0,135,24,0,0,251,23,0,0,219,23,0,0,224,23,0,0,206,23,0,0,209,23,0,0,214,23,0,0,235,23,0,0,247,23,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,13,0,0,0,40,25,0,0,212,24,0,0,191,23,0,0,193,23,0,0,197,24,0,0,195,23,0,0,197,23,0,0,199,23,0,0,201,23,0,0,204,23,0,0,206,23,0,0,151,59,0,0,209,23,0,0,212,23,0,0,214,23,0,0,217,23,0,0,219,23,0,0,222,23,0,0,224,23,0,0,227,23,0,0,229,23,0,0,232,23,0,0,235,23,0,0,239,23,0,0,241,23,0,0,244,23,0,0,247,23,0,0,251,23,0,0,253,23,0,0,0,24,0,0,2,24,0,0,1,25,0,0,4,25,0,0,219,24,0,0,11,24,0,0,14,24,0,0,22,24,0,0,38,24,0,0,47,24,0,0,60,24,0,0,83,24,0,0,90,24,0,0,101,24,0,0,110,24,0,0,52,65,0,0,122,24,0,0,124,24,0,0,127,24,0,0,129,24,0,0,132,24,0,0,208,24,0,0,135,24,0,0,138,24,0,0,152,24,0,0,155,24,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,1,0,0,0,255,255,255,255,7,0,0,0,0,0,0,0,255,255,255,255,8,0,0,0,0,0,0,0,7,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,10,0,0,0,0,0,0,0,24,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,12,0,0,0,0,0,0,0,25,0,0,0,13,0,0,0,0,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,26,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,22,0,0,0,17,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,0,0,0,0,23,0,0,0,19,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,0,0,0,0,4,0,0,0,21,0,0,0,0,0,0,0,11,0,0,0,22,0,0,0,0,0,0,0,27,0,0,0,23,0,0,0,0,0,0,0,5,0,0,0,24,0,0,0,0,0,0,0,6,0,0,0,25,0,0,0,0,0,0,0,12,0,0,0,26,0,0,0,0,0,0,0,28,0,0,0,27,0,0,0,0,0,0,0,21,0,0,0,28,0,0,0,0,0,0,0,2,0,0,0,29,0,0,0,0,0,0,0,255,255,255,255,30,0,0,0,1,0,0,0,255,255,255,255,31,0,0,0,0,0,0,0,255,255,255,255,32,0,0,0,0,0,0,0,255,255,255,255,33,0,0,0,0,0,0,0,255,255,255,255,34,0,0,0,0,0,0,0,255,255,255,255,35,0,0,0,1,0,0,0,255,255,255,255,36,0,0,0,1,0,0,0,255,255,255,255,37,0,0,0,1,0,0,0,255,255,255,255,38,0,0,0,1,0,0,0,255,255,255,255,39,0,0,0,1,0,0,0,255,255,255,255,40,0,0,0,1,0,0,0,255,255,255,255,41,0,0,0,0,0,0,0,255,255,255,255,42,0,0,0,0,0,0,0,255,255,255,255,43,0,0,0,0,0,0,0,255,255,255,255,44,0,0,0,0,0,0,0,255,255,255,255,45,0,0,0,0,0,0,0,13,0,0,0,46,0,0,0,0,0,0,0,18,0,0,0,47,0,0,0,0,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,19,0,0,0,49,0,0,0,0,0,0,0,255,255,255,255,50,0,0,0,1,0,0,0,255,255,255,255,51,0,0,0,0,0,0,0,20,0,0,0,52,0,0,0,0,0,0,0,255,255,255,255,53,0,0,0,1,0,0,0,255,255,255,255,54,0,0,0,1,0,0,0,255,255,255,255,208,1,0,0,16,2,0,0,208,74,0,0,180,40,0,0,193,40,0,0,207,40,0,0,221,40,0,0,236,40,0,0,6,41,0,0,33,41,0,0,62,41,0,0,72,41,0,0,97,41,0,0,121,41,0,0,128,41,0,0,150,41,0,0,163,41,0,0,203,41,0,0,248,41,0,0,20,42,0,0,70,42,0,0,104,42,0,0,141,42,0,0,150,42,0,0,174,42,0,0,184,42,0,0,207,42,0,0,223,42,0,0,4,43,0,0,42,43,0,0,78,43,0,0,115,43,0,0,126,43,0,0,138,43,0,0,151,43,0,0,178,43,0,0,195,43,0,0,220,43,0,0,227,43,0,0,242,43,0,0,26,44,0,0,54,44,0,0,74,44,0,0,108,44,0,0,138,44,0,0,158,44,0,0,169,44,0,0,196,44,0,0,203,44,0,0,228,44,0,0,0,45,0,0,43,45,0,0,72,45,0,0,109,45,0,0,141,45,0,0,198,45,0,0,246,45,0,0,49,46,0,0,108,46,0,0,140,46,0,0,165,46,0,0,193,46,0,0,203,46,0,0,231,46,0,0,0,47,0,0,24,47,0,0,48,47,0,0,70,47,0,0,95,47,0,0,118,47,0,0,144,47,0,0,152,47,0,0,173,47,0,0,223,47,0,0,0,48,0,0,40,48,0,0,92,48,0,0,122,48,0,0,163,48,0,0,195,48,0,0,230,48,0,0,18,49,0,0,39,49,0,0,61,49,0,0,112,49,0,0,163,49,0,0,191,49,0,0,214,49,0,0,5,50,0,0,30,50,0,0,43,50,0,0,86,50,0,0,147,50,0,0,180,50,0,0,213,50,0,0,5,51,0,0,45,51,0,0,102,51,0,0,128,51,0,0,159,51,0,0,207,51,0,0,218,51,0,0,226,51,0,0,253,51,0,0,27,52,0,0,36,52,0,0,66,52,0,0,102,52,0,0,150,52,0,0,180,52,0,0,208,52,0,0,236,52,0,0,8,53,0,0,36,53,0,0,60,53,0,0,92,53,0,0,127,53,0,0,167,53,0,0,199,53,0,0,241,53,0,0,23,54,0,0,61,54,0,0,92,54,0,0,128,54,0,0,151,54,0,0,175,54,0,0,183,54,0,0,222,54,0,0,0,55,0,0,25,55,0,0,75,60,0,0,159,59,0,0,168,59,0,0,177,59,0,0,203,59,0,0,75,60,0,0,208,74,0,0,22,60,0,0,55,60,0,0,75,60,0,0,243,61,0,0,253,61,0,0,5,62,0,0,14,62,0,0,27,62,0,0,38,62,0,0,49,62,0,0,69,62,0,0,11,0,0,0,19,0,0,0,37,0,0,0,67,0,0,0,131,0,0,0,27,1,0,0,9,2,0,0,9,4,0,0,5,8,0,0,3,16,0,0,27,32,0,0,43,64,0,0,3,128,0,0,45,0,1,0,29,0,2,0,3,0,4,0,21,0,8,0,7,0,16,0,17,0,32,0,15,0,64,0,9,0,128,0,43,0,0,1,35,0,0,2,15,0,0,4,29,0,0,8,3,0,0,16,11,0,0,32,85,0,0,64,0,0,0,0,128,9,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,220,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,228,74,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,10,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,236,78,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,67,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,46,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,46,0,73,110,102,105,110,105,116,101,32,108,111,111,112,32,105,110,32,99,111,109,112,97,114,105,115,111,110,46,0,95,95,109,97,105,110,95,95,0,40,102,111,114,32,116,101,109,112,41,0,39,98,114,101,97,107,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,39,99,111,110,116,105,110,117,101,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,39,125,39,32,111,117,116,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,0,77,105,115,115,105,110,103,32,114,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,97,116,32,101,110,100,32,111,102,32,102,117,110,99,116,105,111,110,46,0,42,99,108,111,115,117,114,101,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,52,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,54,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,0,39,37,115,39,32,97,102,116,101,114,32,39,101,108,115,101,39,46,0,39,101,120,99,101,112,116,39,32,99,108,97,117,115,101,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,46,0,39,101,108,115,101,39,32,119,105,116,104,105,110,32,97,110,32,101,120,104,97,117,115,116,105,118,101,32,109,97,116,99,104,46,0,39,101,108,115,101,39,32,99,97,110,110,111,116,32,98,101,32,116,104,101,32,111,110,108,121,32,99,108,97,117,115,101,32,119,105,116,104,105,110,32,97,32,109,97,116,99,104,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,97,110,32,101,110,117,109,32,118,97,108,117,101,46,0,67,97,110,110,111,116,32,99,108,111,115,101,32,111,118,101,114,32,97,32,118,97,114,32,111,102,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,32,105,110,32,116,104,105,115,32,115,99,111,112,101,46,0,86,97,114,105,97,110,116,32,37,115,32,115,104,111,117,108,100,32,110,111,116,32,103,101,116,32,97,114,103,115,46,0,110,111,110,101,0,46,46,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,37,115,37,115,37,115,32,40,37,115,32,102,111,114,32,37,115,37,115,37,115,41,46,0,40,97,110,111,110,121,109,111,117,115,41,0,65,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,37,115,37,115,37,115,32,105,115,32,105,110,118,97,108,105,100,58,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,67,97,110,110,111,116,32,97,110,111,110,121,109,111,117,115,108,121,32,99,97,108,108,32,114,101,115,117,108,116,105,110,103,32,116,121,112,101,32,39,94,84,39,46,0,67,108,97,115,115,32,37,115,32,104,97,115,32,110,111,32,109,101,116,104,111,100,32,111,114,32,112,114,111,112,101,114,116,121,32,110,97,109,101,100,32,37,115,46,0,85,115,101,32,64,60,110,97,109,101,62,32,116,111,32,103,101,116,47,115,101,116,32,112,114,111,112,101,114,116,105,101,115,44,32,110,111,116,32,115,101,108,102,46,60,110,97,109,101,62,46,0,37,115,46,37,115,32,105,115,32,109,97,114,107,101,100,32,37,115,44,32,97,110,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,104,101,114,101,46,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,112,114,111,112,101,114,116,121,32,39,64,37,115,39,46,0,67,97,115,116,115,32,102,114,111,109,32,68,121,110,97,109,105,99,32,99,97,110,110,111,116,32,105,110,99,108,117,100,101,32,115,117,98,116,121,112,101,115,46,0,67,97,110,110,111,116,32,99,97,115,116,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,37,115,32,105,110,100,101,120,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,46,0,104,97,115,104,32,105,110,100,101,120,32,115,104,111,117,108,100,32,98,101,32,116,121,112,101,32,39,94,84,39,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,116,117,112,108,101,32,115,117,98,115,99,114,105,112,116,115,32,109,117,115,116,32,98,101,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,115,46,0,73,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,94,84,46,0,67,97,110,110,111,116,32,115,117,98,115,99,114,105,112,116,32,116,121,112,101,32,39,94,84,39,46,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,97,110,32,101,109,112,116,121,32,116,117,112,108,101,46,0,72,97,115,104,32,107,101,121,115,0,72,97,115,104,32,118,97,108,117,101,115,0,84,121,112,101,32,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,0,37,115,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,105,115,116,101,110,116,32,116,121,112,101,46,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,76,105,115,116,32,101,108,101,109,101,110,116,115,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,100,111,101,115,32,110,111,116,32,121,105,101,108,100,32,97,32,118,97,108,117,101,46,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,37,115,37,115,46,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,94,84,32,37,115,32,94,84,46,0,67,97,110,110,111,116,32,110,101,115,116,32,97,110,32,97,115,115,105,103,110,109,101,110,116,32,119,105,116,104,105,110,32,97,110,32,101,120,112,114,101,115,115,105,111,110,46,0,73,110,118,97,108,105,100,32,99,111,109,112,111,117,110,100,32,111,112,58,32,37,115,46,0,67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,76,101,102,116,32,115,105,100,101,32,111,102,32,37,115,32,105,115,32,110,111,116,32,97,115,115,105,103,110,97,98,108,101,46,0,69,120,112,101,99,116,101,100,32,116,121,112,101,32,39,105,110,116,101,103,101,114,39,44,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,67,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,94,84,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,116,121,112,101,46,0,39,114,101,116,117,114,110,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,114,101,116,117,114,110,32,101,120,112,101,99,116,101,100,32,116,121,112,101,32,39,94,84,39,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,39,114,97,105,115,101,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,73,110,118,97,108,105,100,32,99,108,97,115,115,32,39,37,115,39,32,103,105,118,101,110,32,116,111,32,114,97,105,115,101,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,34,34,34,0,78,101,119,108,105,110,101,32,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,115,116,114,105,110,103,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,73,110,118,97,108,105,100,32,117,116,102,45,56,32,115,101,113,117,101,110,99,101,32,111,110,32,108,105,110,101,32,37,100,46,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,0,78,101,115,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,46,0,77,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,0,78,101,119,108,105,110,101,32,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,0,67,111,109,109,101,110,116,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,0,69,120,112,101,99,116,101,100,32,39,34,39,32,97,102,116,101,114,32,39,36,39,46,0,39,46,46,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,116,111,107,101,110,32,40,101,120,112,101,99,116,101,100,32,49,32,111,114,32,51,32,100,111,116,115,41,46,0,70,111,117,110,100,32,63,62,32,98,117,116,32,110,111,116,32,101,120,112,101,99,116,105,110,103,32,116,97,103,115,46,0,84,97,103,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,105,110,99,108,117,100,101,100,32,102,105,108,101,115,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,108,97,109,98,100,97,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,39,92,37,100,39,0,68,111,117,98,108,101,32,118,97,108,117,101,32,119,105,116,104,32,66,121,116,101,32,115,117,102,102,105,120,46,0,66,121,116,101,32,118,97,108,117,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,115,105,103,110,46,0,66,121,116,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,73,110,116,101,103,101,114,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,68,111,117,98,108,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,69,120,112,101,99,116,101,100,32,97,32,98,97,115,101,32,49,48,32,110,117,109,98,101,114,32,97,102,116,101,114,32,101,120,112,111,110,101,110,116,46,0,69,120,112,111,110,101,110,116,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,77,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,98,121,116,101,32,108,105,116,101,114,97,108,46,0,68,111,99,115,116,114,105,110,103,32,108,105,110,101,32,100,111,101,115,32,110,111,116,32,115,116,97,114,116,32,119,105,116,104,32,102,117,108,108,32,39,35,35,35,39,46,0,68,111,99,115,116,114,105,110,103,32,104,97,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,105,110,100,101,110,116,97,116,105,111,110,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,99,111,109,109,101,110,116,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,60,63,108,105,108,121,0,70,105,108,101,115,32,105,110,32,116,101,109,112,108,97,116,101,32,109,111,100,101,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,39,60,63,108,105,108,121,39,46,0,63,108,105,108,121,0,44,0,125,0,94,0,58,0,33,0,33,61,0,37,0,37,61,0,42,61,0,47,0,47,61,0,43,0,43,61,0,45,0,45,61,0,60,0,60,61,0,60,60,0,60,60,61,0,62,0,62,61,0,62,62,0,62,62,61,0,61,0,61,61,0,123,0,97,32,108,97,109,98,100,97,0,61,62,0,97,32,108,97,98,101,108,0,97,32,112,114,111,112,101,114,116,121,32,110,97,109,101,0,97,32,115,116,114,105,110,103,0,97,32,98,121,116,101,115,116,114,105,110,103,0,97,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,116,114,105,110,103,0,97,32,98,121,116,101,0,97,110,32,105,110,116,101,103,101,114,0,97,32,100,111,117,98,108,101,0,97,32,100,111,99,115,116,114,105,110,103,0,38,0,38,38,0,124,0,124,124,0,64,40,0,124,62,0,105,110,118,97,108,105,100,32,116,111,107,101,110,0,63,62,0,101,110,100,32,111,102,32,102,105,108,101,0,37,48,51,100,0,39,92,37,99,39,0,39,37,99,39,0,39,92,37,48,51,100,39,0,37,103,0,37,112,0,91,0,44,32,0,93,40,0,32,40,0,46,46,46,0,41,0,32,61,62,32,0,93,0,91,46,46,46,93,0,98,117,105,108,116,45,105,110,32,0,60,37,115,102,117,110,99,116,105,111,110,32,37,115,37,115,37,115,62,0,60,91,0,93,62,0,117,110,105,116,0,111,112,101,110,0,99,108,111,115,101,100,0,60,37,115,32,102,105,108,101,32,97,116,32,37,112,62,0,40,0,60,37,115,37,115,37,115,32,97,116,32,37,112,62,0,95,95,102,105,108,101,95,95,0,95,95,108,105,110,101,95,95,0,95,95,102,117,110,99,116,105,111,110,95,95,0,105,102,0,100,111,0,118,97,114,0,102,111,114,0,116,114,121,0,99,97,115,101,0,101,108,115,101,0,101,108,105,102,0,101,110,117,109,0,119,104,105,108,101,0,114,97,105,115,101,0,109,97,116,99,104,0,98,114,101,97,107,0,99,108,97,115,115,0,100,101,102,105,110,101,0,114,101,116,117,114,110,0,101,120,99,101,112,116,0,105,109,112,111,114,116,0,112,114,105,118,97,116,101,0,112,114,111,116,101,99,116,101,100,0,99,111,110,116,105,110,117,101,0,110,101,119,0,108,105,108,121,95,37,115,95,37,115,95,37,115,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,100,101,99,108,97,114,97,116,105,111,110,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,93,39,44,32,110,111,116,32,39,37,115,39,46,0,67,108,97,115,115,32,37,115,32,101,120,112,101,99,116,115,32,37,100,32,116,121,112,101,40,115,41,44,32,98,117,116,32,103,111,116,32,37,100,32,116,121,112,101,40,115,41,46,0,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,0,78,117,109,101,114,105,99,32,115,99,111,111,112,32,116,121,112,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,46,0,67,108,97,115,115,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,60,110,101,119,62,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,110,32,101,110,117,109,32,104,101,114,101,46,0,65,32,99,108,97,115,115,32,119,105,116,104,32,116,104,101,32,110,97,109,101,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,65,110,32,101,110,117,109,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,118,97,114,105,97,110,116,115,46,0,69,120,112,101,99,116,101,100,32,39,125,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,110,111,116,32,39,37,115,39,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,102,117,110,99,116,105,111,110,32,104,101,114,101,46,0,77,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,32,119,105,116,104,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,37,115,39,46,0,68,111,99,115,116,114,105,110,103,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,102,117,110,99,116,105,111,110,32,111,114,32,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,46,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,44,39,46,0,69,120,112,101,99,116,101,100,32,97,32,107,101,121,32,61,62,32,118,97,108,117,101,32,112,97,105,114,32,98,101,102,111,114,101,32,39,44,39,46,0,83,117,98,115,99,114,105,112,116,115,32,99,97,110,110,111,116,32,99,111,110,116,97,105,110,32,39,44,39,46,0,79,112,116,105,111,110,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,37,115,39,32,111,114,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,99,108,111,115,105,110,103,32,116,111,107,101,110,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,80,114,111,112,101,114,116,105,101,115,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,32,40,39,118,97,114,39,32,107,101,121,119,111,114,100,32,109,105,115,115,105,110,103,63,41,0,80,114,111,112,101,114,116,121,32,37,115,32,105,115,32,110,111,116,32,105,110,32,99,108,97,115,115,32,37,115,46,37,115,0,39,115,101,108,102,39,32,109,117,115,116,32,98,101,32,117,115,101,100,32,119,105,116,104,105,110,32,97,32,99,108,97,115,115,46,0,37,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,67,97,110,110,111,116,32,105,109,112,108,105,99,105,116,108,121,32,117,115,101,32,116,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,111,102,32,97,110,32,101,110,117,109,46,0,67,108,97,115,115,32,37,115,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,37,115,46,37,115,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,65,116,116,101,109,112,116,32,116,111,32,117,115,101,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,118,97,108,117,101,32,39,37,115,39,46,0,39,99,111,110,116,105,110,117,101,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,118,97,114,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,98,117,116,32,103,111,116,32,39,37,115,39,46,0,65,110,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,114,101,113,117,105,114,101,100,32,104,101,114,101,46,0,65,32,109,101,116,104,111,100,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,0,80,114,111,112,101,114,116,121,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,105,110,32,99,108,97,115,115,32,37,115,46,0,37,115,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,67,108,97,115,115,32,112,114,111,112,101,114,116,105,101,115,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,64,46,0,67,97,110,110,111,116,32,117,115,101,32,97,32,99,108,97,115,115,32,112,114,111,112,101,114,116,121,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,39,105,109,112,111,114,116,39,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,116,104,101,32,115,97,110,100,98,111,120,46,0,39,101,120,99,101,112,116,39,32,111,117,116,115,105,100,101,32,39,116,114,121,39,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,39,114,101,116,117,114,110,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,102,117,110,99,116,105,111,110,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,37,115,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,114,101,116,117,114,110,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,32,40,110,111,32,114,101,116,117,114,110,32,116,121,112,101,32,103,105,118,101,110,41,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,65,32,99,108,97,115,115,32,99,97,110,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,105,116,115,101,108,102,33,0,39,37,115,39,32,99,97,110,110,111,116,32,98,101,32,105,110,104,101,114,105,116,101,100,32,102,114,111,109,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,104,101,114,101,32,102,111,114,32,105,110,104,101,114,105,116,101,100,32,110,101,119,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,99,108,97,115,115,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,102,111,114,32,97,32,66,111,111,108,101,97,110,46,0,39,37,115,39,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,118,97,114,105,97,110,116,32,110,97,109,101,100,32,39,37,115,39,46,0,79,110,108,121,32,118,97,114,105,97,110,116,115,32,116,104,97,116,32,116,97,107,101,32,110,111,32,97,114,103,117,109,101,110,116,115,32,99,97,110,32,98,101,32,100,101,102,97,117,108,116,32,97,114,103,117,109,101,110,116,115,46,0,39,98,114,101,97,107,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,0,77,97,116,99,104,32,98,108,111,99,107,32,99,97,110,110,111,116,32,98,101,32,105,110,32,97,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,77,97,116,99,104,32,112,97,116,116,101,114,110,32,110,111,116,32,101,120,104,97,117,115,116,105,118,101,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,32,99,97,115,101,40,115,41,32,97,114,101,32,109,105,115,115,105,110,103,58,10,0,42,32,37,115,0,37,115,32,105,115,32,110,111,116,32,97,32,109,101,109,98,101,114,32,111,102,32,101,110,117,109,32,37,115,46,0,65,108,114,101,97,100,121,32,104,97,118,101,32,97,32,99,97,115,101,32,102,111,114,32,118,97,114,105,97,110,116,32,37,115,46,0,95,0,39,114,97,105,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,39,101,108,105,102,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,39,101,108,115,101,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,39,99,97,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,117,116,115,105,100,101,32,111,102,32,39,109,97,116,99,104,39,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,46,0,39,101,120,99,101,112,116,39,32,116,121,112,101,32,99,97,110,110,111,116,32,104,97,118,101,32,115,117,98,116,121,112,101,115,46,0,97,115,0,69,120,112,101,99,116,101,100,32,39,97,115,39,44,32,110,111,116,32,39,37,115,39,46,0,76,111,111,112,32,118,97,114,32,109,117,115,116,32,98,101,32,116,121,112,101,32,105,110,116,101,103,101,114,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,105,110,0,69,120,112,101,99,116,101,100,32,39,105,110,39,44,32,110,111,116,32,39,37,115,39,46,0,40,102,111,114,32,115,116,97,114,116,41,0,40,102,111,114,32,101,110,100,41,0,98,121,0,69,120,112,101,99,116,101,100,32,39,98,121,39,44,32,110,111,116,32,39,37,115,39,46,0,40,102,111,114,32,115,116,101,112,41,0,70,111,114,32,114,97,110,103,101,32,118,97,108,117,101,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,97,110,32,97,115,115,105,103,110,109,101,110,116,46,0,69,120,112,101,99,116,101,100,32,39,119,104,105,108,101,39,44,32,110,111,116,32,39,37,115,39,46,0,40,115,101,108,102,41,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,100,101,102,105,110,101,46,0,39,115,101,108,102,39,32,114,101,116,117,114,110,32,116,121,112,101,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,99,108,97,115,115,32,109,101,116,104,111,100,115,46,0,65,32,112,114,111,112,101,114,116,121,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,118,97,114,105,97,110,116,46,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,115,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,32,40,116,111,111,32,115,104,111,114,116,41,46,0,67,97,110,110,111,116,32,100,101,99,108,97,114,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,67,108,97,115,115,32,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,65,32,98,117,105,108,116,45,105,110,32,99,108,97,115,115,32,110,97,109,101,100,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,78,111,110,45,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,102,111,108,108,111,119,115,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,46,0,84,121,112,101,32,39,94,84,39,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,32,118,97,108,117,101,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,61,62,39,32,111,114,32,39,41,39,32,97,102,116,101,114,32,118,97,114,97,114,103,115,46,0,78,117,109,101,114,105,99,32,115,99,111,111,112,105,110,103,32,116,121,112,101,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,116,111,32,116,104,101,32,98,97,99,107,101,110,100,46,0,84,111,111,32,109,97,110,121,32,103,101,110,101,114,105,99,115,46,0,73,110,118,97,108,105,100,32,103,101,110,101,114,105,99,32,110,97,109,101,32,40,119,97,110,116,101,100,32,37,115,44,32,103,111,116,32,37,115,41,46,0,69,109,112,116,121,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,46,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,97,32,115,105,110,103,108,101,32,101,120,112,114,101,115,115,105,111,110,46,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,99,111,109,109,97,110,100,32,100,111,101,115,32,110,111,116,32,114,101,116,117,114,110,32,97,32,118,97,108,117,101,46,0,40,108,97,109,98,100,97,41,0,67,97,110,110,111,116,32,105,110,102,101,114,32,116,121,112,101,32,111,102,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,124,39,44,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([110,111,116,32,39,37,115,39,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,98,108,111,99,107,40,115,41,32,97,116,32,101,110,100,32,111,102,32,112,97,114,115,105,110,103,46,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,37,115,46,0,37,115,46,0,58,32,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,10,0,84,114,97,99,101,98,97,99,107,58,10,0,32,32,32,32,102,114,111,109,32,91,67,93,58,32,105,110,32,37,115,37,115,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,58,32,105,110,32,37,115,37,115,37,115,10,0,115,101,108,102,0,85,110,105,116,0,82,0,115,116,100,105,110,0,70,105,108,101,0,82,0,115,116,100,101,114,114,0,70,105,108,101,0,82,0,115,116,100,111,117,116,0,70,105,108,101,0,70,0,112,114,105,110,116,0,91,65,93,40,65,41,0,70,0,99,97,108,108,116,114,97,99,101,0,58,76,105,115,116,91,83,116,114,105,110,103,93,0,70,0,97,115,115,101,114,116,0,40,66,111,111,108,101,97,110,44,42,83,116,114,105,110,103,41,0,78,0,65,115,115,101,114,116,105,111,110,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,67,2,66,111,111,108,101,97,110,0,109,0,116,111,95,105,0,40,66,111,111,108,101,97,110,41,58,73,110,116,101,103,101,114,0,109,0,116,111,95,115,0,40,66,111,111,108,101,97,110,41,58,83,116,114,105,110,103,0,67,1,66,121,116,101,0,109,0,116,111,95,105,0,40,66,121,116,101,41,58,73,110,116,101,103,101,114,0,67,4,66,121,116,101,83,116,114,105,110,103,0,109,0,101,97,99,104,95,98,121,116,101,0,40,66,121,116,101,83,116,114,105,110,103,44,70,117,110,99,116,105,111,110,40,66,121,116,101,41,41,0,109,0,101,110,99,111,100,101,0,40,66,121,116,101,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,109,0,115,105,122,101,0,40,66,121,116,101,83,116,114,105,110,103,41,58,73,110,116,101,103,101,114,0,109,0,115,108,105,99,101,0,40,66,121,116,101,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,66,121,116,101,83,116,114,105,110,103,0,78,1,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,67,1,68,111,117,98,108,101,0,109,0,116,111,95,105,0,40,68,111,117,98,108,101,41,58,73,110,116,101,103,101,114,0,67,1,68,121,110,97,109,105,99,0,109,0,60,110,101,119,62,0,91,65,93,40,65,41,58,68,121,110,97,109,105,99,0,69,4,69,105,116,104,101,114,0,91,65,44,32,66,93,0,109,0,105,115,95,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,109,0,105,115,95,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,109,0,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,65,93,0,109,0,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,66,93,0,86,0,76,101,102,116,0,40,65,41,0,86,0,82,105,103,104,116,0,40,66,41,0,78,3,69,120,99,101,112,116,105,111,110,0,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,69,120,99,101,112,116,105,111,110,0,51,0,109,101,115,115,97,103,101,0,83,116,114,105,110,103,0,51,0,116,114,97,99,101,98,97,99,107,0,76,105,115,116,91,83,116,114,105,110,103,93,0,67,7,70,105,108,101,0,109,0,99,108,111,115,101,0,40,70,105,108,101,41,0,109,0,101,97,99,104,95,108,105,110,101,0,40,70,105,108,101,44,70,117,110,99,116,105,111,110,40,66,121,116,101,83,116,114,105,110,103,41,41,0,109,0,111,112,101,110,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,70,105,108,101,0,109,0,112,114,105,110,116,0,91,65,93,40,70,105,108,101,44,65,41,0,109,0,114,101,97,100,0,40,70,105,108,101,44,42,73,110,116,101,103,101,114,41,58,66,121,116,101,83,116,114,105,110,103,0,109,0,114,101,97,100,95,108,105,110,101,0,40,70,105,108,101,41,58,66,121,116,101,83,116,114,105,110,103,0,109,0,119,114,105,116,101,0,91,65,93,40,70,105,108,101,44,65,41,0,67,1,70,117,110,99,116,105,111,110,0,109,0,100,111,99,0,40,70,117,110,99,116,105,111,110,40,49,41,41,58,83,116,114,105,110,103,0,67,9,72,97,115,104,0,109,0,99,108,101,97,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,0,109,0,100,101,108,101,116,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,0,109,0,101,97,99,104,95,112,97,105,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,41,41,0,109,0,103,101,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,44,66,41,58,66,0,109,0,104,97,115,95,107,101,121,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,58,66,111,111,108,101,97,110,0,109,0,107,101,121,115,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,76,105,115,116,91,65,93,0,109,0,109,97,112,95,118,97,108,117,101,115,0,91,65,44,66,44,67,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,66,61,62,67,41,41,58,72,97,115,104,91,65,44,67,93,0,109,0,109,101,114,103,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,72,97,115,104,91,65,44,66,93,46,46,46,41,58,72,97,115,104,91,65,44,66,93,0,109,0,114,101,106,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,61,62,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,66,93,0,109,0,115,101,108,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,61,62,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,66,93,0,109,0,115,105,122,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,73,110,116,101,103,101,114,0,78,1,73,110,100,101,120,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,73,110,100,101,120,69,114,114,111,114,0,67,4,73,110,116,101,103,101,114,0,109,0,116,111,95,98,111,111,108,0,40,73,110,116,101,103,101,114,41,58,66,111,111,108,101,97,110,0,109,0,116,111,95,98,121,116,101,0,40,73,110,116,101,103,101,114,41,58,66,121,116,101,0,109,0,116,111,95,100,0,40,73,110,116,101,103,101,114,41,58,68,111,117,98,108,101,0,109,0,116,111,95,115,0,40,73,110,116,101,103,101,114,41,58,83,116,114,105,110,103,0,78,1,73,79,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,73,79,69,114,114,111,114,0,78,1,75,101,121,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,75,101,121,69,114,114,111,114,0,67,1,56,76,105,115,116,0,109,0,99,108,101,97,114,0,91,65,93,40,76,105,115,116,91,65,93,41,0,109,0,99,111,117,110,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,73,110,116,101,103,101,114,0,109,0,100,101,108,101,116,101,95,97,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,41,0,109,0,101,97,99,104,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,41,41,58,76,105,115,116,91,65,93,0,109,0,101,97,99,104,95,105,110,100,101,120,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,73,110,116,101,103,101,114,41,41,58,76,105,115,116,91,65,93,0,109,0,102,105,108,108,0,91,65,93,40,73,110,116,101,103,101,114,44,65,41,58,76,105,115,116,91,65,93,0,109,0,102,111,108,100,0,91,65,93,40,76,105,115,116,91,65,93,44,65,44,70,117,110,99,116,105,111,110,40,65,44,65,61,62,65,41,41,58,65,0,109,0,105,110,115,101,114,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,44,65,41,0,109,0,106,111,105,110,0,91,65,93,40,76,105,115,116,91,65,93,44,42,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,109,97,112,0,91,65,44,66,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,76,105,115,116,91,66,93,0,109,0,112,111,112,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,109,0,112,117,115,104,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,109,0,114,101,106,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,109,0,115,101,108,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,109,0,115,105,122,101,0,91,65,93,40,76,105,115,116,91,65,93,41,58,73,110,116,101,103,101,114,0,109,0,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,109,0,115,108,105,99,101,0,91,65,93,40,76,105,115,116,91,65,93,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,76,105,115,116,91,65,93,0,109,0,117,110,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,69,8,79,112,116,105,111,110,0,91,65,93,0,109,0,97,110,100,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,66,93,41,58,79,112,116,105,111,110,91,66,93,0,109,0,97,110,100,95,116,104,101,110,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,79,112,116,105,111,110,91,66,93,41,41,58,79,112,116,105,111,110,91,66,93,0,109,0,105,115,95,110,111,110,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,109,0,105,115,95,115,111,109,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,109,0,109,97,112,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,79,112,116,105,111,110,91,66,93,0,109,0,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,65,93,41,58,79,112,116,105,111,110,91,65,93,0,109,0,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,79,112,116,105,111,110,91,65,93,41,41,58,79,112,116,105,111,110,91,65,93,0,109,0,117,110,119,114,97,112,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,65,0,109,0,117,110,119,114,97,112,95,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,65,41,58,65,0,109,0,117,110,119,114,97,112,95,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,65,41,41,58,65,0,86,0,83,111,109,101,0,40,65,41,0,86,0,78,111,110,101,0,0,78,1,82,117,110,116,105,109,101,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,82,117,110,116,105,109,101,69,114,114,111,114,0,67,16,83,116,114,105,110,103,0,109,0,102,111,114,109,97,116,0,40,83,116,114,105,110,103,44,49,46,46,46,41,58,83,116,114,105,110,103,0,109,0,101,110,100,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,102,105,110,100,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,0,104,116,109,108,95,101,110,99,111,100,101,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,105,115,95,97,108,110,117,109,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,105,115,95,97,108,112,104,97,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,105,115,95,100,105,103,105,116,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,105,115,95,115,112,97,99,101,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,108,111,119,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,108,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,112,97,114,115,101,95,105,0,40,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,0,114,101,112,108,97,99,101,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,114,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,115,108,105,99,101,0,40,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,83,116,114,105,110,103,0,109,0,115,112,108,105,116,0,40,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,76,105,115,116,91,83,116,114,105,110,103,93,0,109,0,115,116,97,114,116,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,0,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,116,111,95,98,121,116,101,115,116,114,105,110,103,0,40,83,116,114,105,110,103,41,58,66,121,116,101,83,116,114,105,110,103,0,109,0,116,114,105,109,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,0,117,112,112,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,67,2,84,117,112,108,101,0,109,0,109,101,114,103,101,0,40,84,117,112,108,101,91,49,93,44,84,117,112,108,101,91,50,93,41,58,84,117,112,108,101,91,49,44,50,93,0,109,0,112,117,115,104,0,91,65,93,40,84,117,112,108,101,91,49,93,44,65,41,58,84,117,112,108,101,91,49,44,65,93,0,78,1,86,97,108,117,101,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,86,97,108,117,101,69,114,114,111,114,0,102,97,108,115,101,0,116,114,117,101,0,101,114,114,111,114,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,255,255,255,255,255,255,255,255,255,255,255,73,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,103,105,118,101,110,46,0,69,114,114,110,111,32,37,100,58,32,37,115,32,40,37,115,41,46,0,67,97,110,110,111,116,32,114,101,109,111,118,101,32,107,101,121,32,102,114,111,109,32,104,97,115,104,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,46,0,37,108,108,100,0,67,97,110,110,111,116,32,100,101,108,101,116,101,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,108,105,115,116,32,40,109,105,110,105,109,117,109,58,32,37,100,41,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,115,116,32,40,109,97,120,105,109,117,109,58,32,37,100,41,0,82,101,112,101,97,116,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,62,61,32,48,32,40,37,100,32,103,105,118,101,110,41,46,0,80,111,112,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,83,104,105,102,116,32,111,110,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,117,110,119,114,97,112,32,99,97,108,108,101,100,32,111,110,32,78,111,110,101,46,0,70,111,114,109,97,116,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,46,46,46,57,57,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,101,109,112,116,121,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,110,111,116,32,110,117,109,101,114,105,99,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,38,97,109,112,59,0,38,108,116,59,0,38,103,116,59,0,67,97,110,110,111,116,32,115,112,108,105,116,32,98,121,32,101,109,112,116,121,32,115,116,114,105,110,103,46,0,32,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,32,9,13,10,0,119,0,114,0,73,110,116,101,103,101,114,0,68,111,117,98,108,101,0,83,116,114,105,110,103,0,66,121,116,101,0,66,121,116,101,83,116,114,105,110,103,0,66,111,111,108,101,97,110,0,70,117,110,99,116,105,111,110,0,68,121,110,97,109,105,99,0,76,105,115,116,0,72,97,115,104,0,84,117,112,108,101,0,70,105,108,101,0,63,0,42,0,126,49,0,126,50,0,1,82,97,110,100,111,109,0,0,67,2,82,97,110,100,111,109,0,109,0,60,110,101,119,62,0,40,42,73,110,116,101,103,101,114,41,58,82,97,110,100,111,109,0,109,0,98,101,116,119,101,101,110,0,40,82,97,110,100,111,109,44,73,110,116,101,103,101,114,44,73,110,116,101,103,101,114,41,58,73,110,116,101,103,101,114,0,73,110,116,101,114,118,97,108,32,114,97,110,103,101,32,105,115,32,101,109,112,116,121,46,0,114,97,110,100,111,109,0,70,0,103,101,116,101,110,118,0,40,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,82,0,97,114,103,118,0,76,105,115,116,91,83,116,114,105,110,103,93,0,90,0,115,121,115,0,69,114,114,111,114,0,83,121,110,116,97,120,69,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,0,1,2,3,5,8,7,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,69,120,99,101,112,116,105,111,110,0,73,79,69,114,114,111,114,0,75,101,121,69,114,114,111,114,0,82,117,110,116,105,109,101,69,114,114,111,114,0,86,97,108,117,101,69,114,114,111,114,0,73,110,100,101,120,69,114,114,111,114,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,65,115,115,101,114,116,105,111,110,69,114,114,111,114,0,37,100,58,0,91,67,93,0,37,115,58,37,115,32,102,114,111,109,32,37,115,37,115,37,115,0,65,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,46,0,70,117,110,99,116,105,111,110,32,99,97,108,108,32,114,101,99,117,114,115,105,111,110,32,108,105,109,105,116,32,114,101,97,99,104,101,100,46,0,102,111,114,32,108,111,111,112,32,115,116,101,112,32,99,97,110,110,111,116,32,98,101,32,48,46,0,83,117,98,115,99,114,105,112,116,32,105,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,37,100,0,115,116,100,111,117,116,0,112,114,105,110,116,0,73,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,91,116,114,121,105,116,93,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        }
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result == 'function') {
            result = Runtime.addFunction(result);
            lib.cached_functions = result;
          }
          return result;
        }
      }
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___divdi3"] = ___divdi3;

  function ___lock() {}

  function ___unlock() {}

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["___remdi3"] = ___remdi3;

  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;


   
  Module["___uremdi3"] = ___uremdi3;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_longjmp": _longjmp, "___buildEnvironment": ___buildEnvironment, "_dlsym": _dlsym, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_abort": _abort, "_getenv": _getenv, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "_dlclose": _dlclose, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_time": _time, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _longjmp=env._longjmp;
  var ___buildEnvironment=env.___buildEnvironment;
  var _dlsym=env._dlsym;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _abort=env._abort;
  var _getenv=env._getenv;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _dlclose=env._dlclose;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _time=env._time;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _lily_malloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _abort();
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function _lily_realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 return ($2|0);
}
function _lily_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _lily_new_options() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 100;
 HEAP8[$0>>0] = 4;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 2|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[665]|0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 1|0);
 HEAP8[$8>>0] = 1;
 return ($0|0);
}
function _lily_op_allow_sys($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  return;
 }
 $5 = $1&255;
 $6 = ((($0)) + 1|0);
 HEAP8[$6>>0] = $5;
 return;
}
function _lily_op_freeze($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2|0);
 HEAP16[$1>>1] = 1;
 return;
}
function _lily_op_get_allow_sys($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 return ($3|0);
}
function _lily_op_get_argv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_op_get_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_op_get_gc_multiplier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function _lily_op_get_gc_start($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_op_get_html_sender($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_free_options($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_free($0);
 return;
}
function _lily_instance_set_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_move_list_f(655360,$6,$2);
 return;
}
function _lily_instance_set_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_move_string($6,$2);
 return;
}
function _lily_instance_set_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_value_assign($6,$2);
 return;
}
function _lily_value_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & 524288;
 $11 = ($10|0)==(0);
 if (!($11)) {
  _lily_deref($0);
 }
 $12 = ((($1)) + 8|0);
 $13 = ((($0)) + 8|0);
 $14 = $12;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $13;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $24;
 return;
}
function _lily_deref($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 524288;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  return;
 }
 _lily_value_destroy($0);
 return;
}
function _lily_value_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 | 2;
 $3 = ($2<<16>>16)==(11);
 if ($3) {
  _destroy_list($0);
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 2359296;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _destroy_instance($0);
  return;
 }
 switch ($1<<16>>16) {
 case 3: case 5:  {
  _destroy_string($0);
  return;
  break;
 }
 case 7:  {
  _destroy_function($0);
  return;
  break;
 }
 case 10:  {
  _lily_destroy_hash($0);
  return;
  break;
 }
 case 8:  {
  _destroy_dynamic($0);
  return;
  break;
 }
 case 12:  {
  _destroy_file($0);
  return;
  break;
 }
 default: {
  $7 = $4 & 1048576;
  $8 = ($7|0)==(0);
  if ($8) {
   return;
  }
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 127]($10);
  return;
 }
 }
}
function _destroy_list($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($2)) + 16|0);
 if ($5) {
  $16 = HEAP32[$6>>2]|0;
  _lily_free($16);
  _lily_free($2);
  return;
 } else {
  $$012 = 0;
 }
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($$012<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_deref($9);
  $10 = HEAP32[$6>>2]|0;
  $11 = (($10) + ($$012<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_free($12);
  $13 = (($$012) + 1)|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   $$012 = $13;
  } else {
   break;
  }
 }
 $16 = HEAP32[$6>>2]|0;
 _lily_free($16);
 _lily_free($2);
 return;
}
function _destroy_instance($0) {
 $0 = $0|0;
 var $$020 = 0, $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[110]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ($4|0)==(0|0);
 do {
  if ($7) {
   $$020 = 1;
  } else {
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(-1);
   if ($10) {
    HEAP32[$3>>2] = $5;
    $$020 = 0;
    break;
   } else {
    $11 = ((($4)) + 8|0);
    HEAP32[$11>>2] = 0;
    $$020 = 1;
    break;
   }
  }
 } while(0);
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 $15 = ((($2)) + 16|0);
 if (!($14)) {
  $$021 = 0;
  while(1) {
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($$021<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   _lily_deref($18);
   $19 = HEAP32[$15>>2]|0;
   $20 = (($19) + ($$021<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   _lily_free($21);
   $22 = (($$021) + 1)|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = ($22>>>0)<($23>>>0);
   if ($24) {
    $$021 = $22;
   } else {
    break;
   }
  }
 }
 $25 = HEAP32[$15>>2]|0;
 _lily_free($25);
 $26 = ($$020|0)==(0);
 if ($26) {
  return;
 }
 _lily_free($2);
 return;
}
function _destroy_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_free($4);
 _lily_free($2);
 return;
}
function _destroy_function($0) {
 $0 = $0|0;
 var $$035 = 0, $$036 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[110]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ((($2)) + 12|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(-1);
 if ($9) {
  $10 = ((($2)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($11);
  $12 = ((($2)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_free($13);
  _lily_free($2);
  return;
 }
 $14 = ($4|0)==(0|0);
 do {
  if ($14) {
   $$035 = 1;
  } else {
   $15 = ((($4)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(-1);
   if ($17) {
    HEAP32[$3>>2] = $5;
    $$035 = 0;
    break;
   } else {
    $18 = ((($4)) + 8|0);
    HEAP32[$18>>2] = 0;
    $$035 = 1;
    break;
   }
  }
 } while(0);
 $19 = ((($2)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP16[$7>>1]|0;
 $22 = $21&65535;
 $23 = ($21<<16>>16)==(0);
 if (!($23)) {
  $$036 = 0;
  while(1) {
   $24 = (($20) + ($$036<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = ((($25)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + -1)|0;
    HEAP32[$27>>2] = $29;
    $30 = ($29|0)==(0);
    if ($30) {
     _lily_deref($25);
     _lily_free($25);
    }
   }
   $31 = (($$036) + 1)|0;
   $exitcond = ($31|0)==($22|0);
   if ($exitcond) {
    break;
   } else {
    $$036 = $31;
   }
  }
 }
 _lily_free($20);
 $32 = ($$035|0)==(0);
 if ($32) {
  return;
 }
 _lily_free($2);
 return;
}
function _destroy_dynamic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[110]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ($4|0)==(0|0);
 do {
  if (!($7)) {
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(-1);
   if (!($10)) {
    $14 = ((($4)) + 8|0);
    HEAP32[$14>>2] = 0;
    break;
   }
   HEAP32[$3>>2] = $5;
   $11 = ((($2)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_deref($12);
   $13 = HEAP32[$11>>2]|0;
   _lily_free($13);
   return;
  }
 } while(0);
 $15 = ((($2)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _lily_deref($16);
 $17 = HEAP32[$15>>2]|0;
 _lily_free($17);
 _lily_free($2);
 return;
}
function _destroy_file($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($2)) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   (_fclose($4)|0);
  }
 }
 _lily_free($2);
 return;
}
function _lily_dynamic_set_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_value_assign($3,$1);
 return;
}
function _lily_list_set_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_move_string($6,$2);
 return;
}
function _lily_list_set_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_value_assign($6,$2);
 return;
}
function _lily_list_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_variant_set_integer($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_integer($7,$2,$3);
 return;
}
function _lily_variant_set_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_move_string($6,$2);
 return;
}
function _lily_variant_set_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_value_assign($6,$2);
 return;
}
function _lily_variant_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_return_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)<(0);
 $9 = $8 << 31 >> 31;
 _lily_move_boolean($7,$1,$9);
 return;
}
function _lily_return_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_byte($7,$1);
 return;
}
function _lily_return_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_bytestring($7,$1);
 return;
}
function _lily_return_double($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_double($7,$1);
 return;
}
function _lily_return_empty_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_empty_variant($1,$7);
 return;
}
function _lily_return_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_file($7,$1);
 return;
}
function _lily_return_foreign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&65535;
 $4 = $3 | 655360;
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_move_foreign_f($4,$10,$2);
 return;
}
function _lily_return_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_hash_f(655360,$7,$1);
 return;
}
function _lily_return_instance($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&65535;
 $4 = $3 | 655360;
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_move_instance_f($4,$10,$2);
 return;
}
function _lily_return_integer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_move_integer($8,$1,$2);
 return;
}
function _lily_return_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_list_f(655360,$7,$1);
 return;
}
function _lily_return_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_string($7,$1);
 return;
}
function _lily_return_tuple($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_tuple_f(655360,$7,$1);
 return;
}
function _lily_return_unit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_move_unit($6);
 return;
}
function _lily_return_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_value_assign($7,$1);
 return;
}
function _lily_return_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&65535;
 $4 = $3 | 655360;
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_move_variant_f($4,$10,$2);
 return;
}
function _lily_return_value_noref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_value_assign_noref($7,$1);
 return;
}
function _lily_value_assign_noref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($1)) + 8|0);
 $6 = ((($0)) + 8|0);
 $7 = $5;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $17;
 return;
}
function _lily_result_return($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_value_assign_noref($13,$7);
 HEAP32[$7>>2] = 0;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + -1)|0;
 HEAP32[$1>>2] = $15;
 return;
}
function _lily_arg_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 return ($8|0);
}
function _lily_arg_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 return ($12|0);
}
function _lily_arg_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 return (+$6);
}
function _lily_arg_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_file_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_function($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_generic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 tempRet0 = ($11);
 return ($8|0);
}
function _lily_arg_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_string_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_tuple($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_result_boolean($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 return ($8|0);
}
function _lily_result_value($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_class_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 return ($6|0);
}
function _lily_arg_count($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_variant_for_id($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = HEAP16[$5>>1]|0;
 $9 = $8&65535;
 return ($9|0);
}
function _lily_result_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function _lily_result_drop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_deref($7);
 HEAP32[$7>>2] = 0;
 return;
}
function _lily_new_value_of_bytestring($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 524293;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_new_value_of_double($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 2;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = $0;
 return ($1|0);
}
function _lily_new_value_of_file($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 524300;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_new_value_of_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(16)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 return ($2|0);
}
function _lily_new_value_of_list($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 655369;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_new_value_of_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 524291;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_new_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 (_strcpy($3,$0)|0);
 $4 = (_new_sv($3,$1)|0);
 return ($4|0);
}
function _new_sv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(12)|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $1;
 return ($2|0);
}
function _lily_new_dynamic() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return ($0|0);
}
function _lily_new_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(16)|0);
 $3 = (_strchr($1,43)|0);
 $4 = ($3|0)!=(0|0);
 HEAP32[$2>>2] = 0;
 $5 = ((($2)) + 12|0);
 HEAP32[$5>>2] = $0;
 $6 = HEAP8[$1>>0]|0;
 $7 = ($6<<24>>24)==(114);
 $8 = $4 | $7;
 $9 = $8&1;
 $10 = ((($2)) + 4|0);
 HEAP8[$10>>0] = $9;
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(119);
 $13 = $4 | $12;
 $14 = $13&1;
 $15 = ((($2)) + 5|0);
 HEAP8[$15>>0] = $14;
 $16 = ((($2)) + 6|0);
 HEAP8[$16>>0] = 0;
 return ($2|0);
}
function _lily_new_list($0) {
 $0 = $0|0;
 var $$018 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(20)|0);
 $2 = $0 << 2;
 $3 = (_lily_malloc($2)|0);
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$1>>2] = 0;
 $5 = ((($1)) + 8|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($1)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ($0|0)>(0);
 if ($7) {
  $$018 = 0;
 } else {
  return ($1|0);
 }
 while(1) {
  $8 = (_lily_malloc(16)|0);
  HEAP32[$8>>2] = 0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($$018<<2)|0);
  HEAP32[$10>>2] = $8;
  $11 = (($$018) + 1)|0;
  $exitcond = ($11|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$018 = $11;
  }
 }
 return ($1|0);
}
function _lily_new_instance($0) {
 $0 = $0|0;
 var $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(24)|0);
 $2 = $0 << 2;
 $3 = (_lily_malloc($2)|0);
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$1>>2] = 0;
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($1)) + 6|0);
 HEAP16[$7>>1] = 0;
 $8 = ($0|0)>(0);
 if ($8) {
  $$019 = 0;
 } else {
  return ($1|0);
 }
 while(1) {
  $9 = (_lily_malloc(16)|0);
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + ($$019<<2)|0);
  HEAP32[$11>>2] = $9;
  $12 = (($$019) + 1)|0;
  $exitcond = ($12|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$019 = $12;
  }
 }
 return ($1|0);
}
function _lily_new_string_sized($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 _memcpy(($3|0),($0|0),($1|0))|0;
 $4 = (($3) + ($1)|0);
 HEAP8[$4>>0] = 0;
 $5 = (_new_sv($3,$1)|0);
 return ($5|0);
}
function _lily_new_string_take($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (_new_sv($0,$1)|0);
 return ($2|0);
}
function _lily_new_tuple($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_new_list($0)|0);
 return ($1|0);
}
function _lily_new_variant($0) {
 $0 = $0|0;
 var $$018 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(24)|0);
 $2 = $0 << 2;
 $3 = (_lily_malloc($2)|0);
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$1>>2] = 0;
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $0;
 $7 = ($0|0)>(0);
 if ($7) {
  $$018 = 0;
 } else {
  return ($1|0);
 }
 while(1) {
  $8 = (_lily_malloc(16)|0);
  HEAP32[$8>>2] = 0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($$018<<2)|0);
  HEAP32[$10>>2] = $8;
  $11 = (($$018) + 1)|0;
  $exitcond = ($11|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$018 = $11;
  }
 }
 return ($1|0);
}
function _lily_new_bytestring_sized($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_string_sized($0,$1)|0);
 return ($2|0);
}
function _lily_new_bytestring_take($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_new_string_take($0)|0);
 return ($1|0);
}
function _lily_new_bytestring($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_new_string($0)|0);
 return ($1|0);
}
function _lily_bytestring_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_bytestring_length($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_file_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_file_ensure_writeable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_IOError($0,16127,$vararg_buffer);
 }
 $5 = ((($1)) + 5|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 _lily_IOError($0,2934,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _lily_file_ensure_readable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_IOError($0,16127,$vararg_buffer);
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 _lily_IOError($0,2961,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _lily_string_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_string_length($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_list_num_values($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_value_copy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 524288;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
 }
 $8 = (_lily_malloc(16)|0);
 $9 = HEAP32[$0>>2]|0;
 HEAP32[$8>>2] = $9;
 $10 = ((($8)) + 8|0);
 $11 = ((($0)) + 8|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $10;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 return ($8|0);
}
function _lily_value_compare($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = 0;
 $4 = (_lily_value_compare_raw($0,$3,$1,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function _lily_value_compare_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0114 = 0, $$0118125 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP16[$2>>1]|0;
 $5 = HEAP16[$3>>1]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(100);
 if ($7) {
  _lily_RuntimeError($0,2988,$vararg_buffer);
 }
 $8 = ($4<<16>>16)==($5<<16>>16);
 if (!($8)) {
  $$0114 = 0;
  STACKTOP = sp;return ($$0114|0);
 }
 switch ($4<<16>>16) {
 case 1: case 6:  {
  $9 = ((($2)) + 8|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($3)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($12|0)==($19|0);
  $24 = ($15|0)==($22|0);
  $25 = $23 & $24;
  $26 = $25&1;
  $$0114 = $26;
  STACKTOP = sp;return ($$0114|0);
  break;
 }
 case 2:  {
  $27 = ((($2)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = ((($3)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $28 == $30;
  $32 = $31&1;
  $$0114 = $32;
  STACKTOP = sp;return ($$0114|0);
  break;
 }
 case 3:  {
  $33 = ((($2)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($3)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_strcmp($36,$40)|0);
  $42 = ($41|0)==(0);
  $43 = $42&1;
  $$0114 = $43;
  STACKTOP = sp;return ($$0114|0);
  break;
 }
 case 5:  {
  $44 = ((($2)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($3)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($45)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($47)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49|0)==($51|0);
  if ($52) {
   $53 = ((($47)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($45)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_memcmp($56,$54,$49)|0);
   $58 = ($57|0)==(0);
   $60 = $58;
  } else {
   $60 = 0;
  }
  $59 = $60&1;
  $$0114 = $59;
  STACKTOP = sp;return ($$0114|0);
  break;
 }
 default: {
  $61 = $4 | 2;
  $62 = ($61<<16>>16)==(11);
  if ($62) {
   $63 = (_subvalue_eq($0,$1,$2,$3)|0);
   $$0114 = $63;
   STACKTOP = sp;return ($$0114|0);
  }
  switch ($4<<16>>16) {
  case 10:  {
   $64 = ((($2)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($3)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($65)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($67)) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   $not$ = ($69|0)==($71|0);
   $$ = $not$&1;
   if (!($not$)) {
    $$0114 = $$;
    STACKTOP = sp;return ($$0114|0);
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 1)|0;
   HEAP32[$1>>2] = $73;
   $74 = ((($65)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)>(0);
   L27: do {
    if ($76) {
     $77 = ((($65)) + 24|0);
     $$0118125 = 0;
     while(1) {
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78) + ($$0118125<<2)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0|0);
      if (!($81)) {
       $82 = ((($80)) + 8|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (_lily_hash_find_value($67,$83)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        $$4 = 0;
        break L27;
       }
       $86 = ((($80)) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (_lily_value_compare_raw($0,$1,$87,$84)|0);
       $89 = ($88|0)==(0);
       if ($89) {
        $$4 = 0;
        break L27;
       }
      }
      $90 = (($$0118125) + 1)|0;
      $91 = HEAP32[$74>>2]|0;
      $92 = ($90|0)<($91|0);
      if ($92) {
       $$0118125 = $90;
      } else {
       $$4 = $$;
       break;
      }
     }
    } else {
     $$4 = $$;
    }
   } while(0);
   $93 = HEAP32[$1>>2]|0;
   $94 = (($93) + -1)|0;
   HEAP32[$1>>2] = $94;
   $$0114 = $$4;
   STACKTOP = sp;return ($$0114|0);
   break;
  }
  case 8:  {
   $95 = HEAP32[$1>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$1>>2] = $96;
   $97 = ((($2)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 16|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($3)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (_lily_value_compare_raw($0,$1,$100,$104)|0);
   $106 = HEAP32[$1>>2]|0;
   $107 = (($106) + -1)|0;
   HEAP32[$1>>2] = $107;
   STACKTOP = sp;return ($105|0);
   break;
  }
  default: {
   $108 = HEAP32[$2>>2]|0;
   $109 = $108 & 2097152;
   $110 = ($109|0)==(0);
   $111 = ((($2)) + 8|0);
   if ($110) {
    $115 = HEAP32[$111>>2]|0;
    $116 = ((($3)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($115|0)==($117|0);
    $119 = $118&1;
    $$0114 = $119;
    STACKTOP = sp;return ($$0114|0);
   }
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(0|0);
   if ($113) {
    $$0114 = 1;
    STACKTOP = sp;return ($$0114|0);
   }
   $114 = (_subvalue_eq($0,$1,$2,$3)|0);
   $$0114 = $114;
   STACKTOP = sp;return ($$0114|0);
  }
  }
 }
 }
 return (0)|0;
}
function _subvalue_eq($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03031 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  $$3 = 0;
  return ($$3|0);
 }
 $13 = ((($5)) + 16|0);
 $14 = HEAP32[$8>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$3 = 1;
  return ($$3|0);
 }
 $16 = ((($7)) + 16|0);
 $$03031 = 0;
 while(1) {
  $20 = HEAP32[$13>>2]|0;
  $21 = (($20) + ($$03031<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$16>>2]|0;
  $24 = (($23) + ($$03031<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$1>>2] = $27;
  $28 = (_lily_value_compare_raw($0,$1,$22,$25)|0);
  $29 = ($28|0)==(0);
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$1>>2] = $31;
  $18 = (($$03031) + 1)|0;
  if ($29) {
   $$3 = 0;
   label = 6;
   break;
  }
  $17 = HEAP32[$8>>2]|0;
  $19 = ($18>>>0)<($17>>>0);
  if ($19) {
   $$03031 = $18;
  } else {
   $$3 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$3|0);
 }
 return (0)|0;
}
function _lily_ctor_setup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 262144;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = ((($9)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 6|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($16<<16>>16)==(0);
  if (!($17)) {
   HEAP16[$15>>1] = 0;
   $storemerge = $14;
   HEAP32[$1>>2] = $storemerge;
   return;
  }
 }
 $18 = (_lily_new_instance($3)|0);
 _lily_return_instance($0,$2,$18);
 $storemerge = $18;
 HEAP32[$1>>2] = $storemerge;
 return;
}
function _lily_new_buffer_u16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(12)|0);
 $2 = $0 << 1;
 $3 = (_lily_malloc($2)|0);
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 8|0);
 HEAP32[$5>>2] = $0;
 return ($1|0);
}
function _lily_u16_write_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  $8 = $6 << 1;
  HEAP32[$5>>2] = $8;
  $9 = HEAP32[$0>>2]|0;
  $10 = $6 << 2;
  $11 = (_lily_realloc($9,$10)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + ($12<<1)|0);
 HEAP16[$14>>1] = $1;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$2>>2] = $16;
 return;
}
function _lily_u16_write_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = $7 << 1;
  HEAP32[$6>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  $11 = $7 << 2;
  $12 = (_lily_realloc($10,$11)|0);
  HEAP32[$0>>2] = $12;
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($13<<1)|0);
 HEAP16[$15>>1] = $1;
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + ($17<<1)|0);
 HEAP16[$19>>1] = $2;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($20) + 2)|0;
 HEAP32[$3>>2] = $21;
 return;
}
function _lily_u16_write_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 3)|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $8 << 1;
  HEAP32[$7>>2] = $10;
  $11 = HEAP32[$0>>2]|0;
  $12 = $8 << 2;
  $13 = (_lily_realloc($11,$12)|0);
  HEAP32[$0>>2] = $13;
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $1;
 $17 = HEAP32[$4>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + ($18<<1)|0);
 HEAP16[$20>>1] = $2;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) + 2)|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + ($22<<1)|0);
 HEAP16[$24>>1] = $3;
 $25 = HEAP32[$4>>2]|0;
 $26 = (($25) + 3)|0;
 HEAP32[$4>>2] = $26;
 return;
}
function _lily_u16_write_4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = $9 << 1;
  HEAP32[$8>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = $9 << 2;
  $14 = (_lily_realloc($12,$13)|0);
  HEAP32[$0>>2] = $14;
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + ($15<<1)|0);
 HEAP16[$17>>1] = $1;
 $18 = HEAP32[$5>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + ($19<<1)|0);
 HEAP16[$21>>1] = $2;
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) + 2)|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + ($23<<1)|0);
 HEAP16[$25>>1] = $3;
 $26 = HEAP32[$5>>2]|0;
 $27 = (($26) + 3)|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($27<<1)|0);
 HEAP16[$29>>1] = $4;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + 4)|0;
 HEAP32[$5>>2] = $31;
 return;
}
function _lily_u16_write_5($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 5)|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = $10 << 1;
  HEAP32[$9>>2] = $12;
  $13 = HEAP32[$0>>2]|0;
  $14 = $10 << 2;
  $15 = (_lily_realloc($13,$14)|0);
  HEAP32[$0>>2] = $15;
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + ($16<<1)|0);
 HEAP16[$18>>1] = $1;
 $19 = HEAP32[$6>>2]|0;
 $20 = (($19) + 1)|0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + ($20<<1)|0);
 HEAP16[$22>>1] = $2;
 $23 = HEAP32[$6>>2]|0;
 $24 = (($23) + 2)|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + ($24<<1)|0);
 HEAP16[$26>>1] = $3;
 $27 = HEAP32[$6>>2]|0;
 $28 = (($27) + 3)|0;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + ($28<<1)|0);
 HEAP16[$30>>1] = $4;
 $31 = HEAP32[$6>>2]|0;
 $32 = (($31) + 4)|0;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + ($32<<1)|0);
 HEAP16[$34>>1] = $5;
 $35 = HEAP32[$6>>2]|0;
 $36 = (($35) + 5)|0;
 HEAP32[$6>>2] = $36;
 return;
}
function _lily_u16_write_6($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 6)|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 if ($12) {
  $13 = $11 << 1;
  HEAP32[$10>>2] = $13;
  $14 = HEAP32[$0>>2]|0;
  $15 = $11 << 2;
  $16 = (_lily_realloc($14,$15)|0);
  HEAP32[$0>>2] = $16;
 }
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + ($17<<1)|0);
 HEAP16[$19>>1] = $1;
 $20 = HEAP32[$7>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + ($21<<1)|0);
 HEAP16[$23>>1] = $2;
 $24 = HEAP32[$7>>2]|0;
 $25 = (($24) + 2)|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + ($25<<1)|0);
 HEAP16[$27>>1] = $3;
 $28 = HEAP32[$7>>2]|0;
 $29 = (($28) + 3)|0;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + ($29<<1)|0);
 HEAP16[$31>>1] = $4;
 $32 = HEAP32[$7>>2]|0;
 $33 = (($32) + 4)|0;
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + ($33<<1)|0);
 HEAP16[$35>>1] = $5;
 $36 = HEAP32[$7>>2]|0;
 $37 = (($36) + 5)|0;
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + ($37<<1)|0);
 HEAP16[$39>>1] = $6;
 $40 = HEAP32[$7>>2]|0;
 $41 = (($40) + 6)|0;
 HEAP32[$7>>2] = $41;
 return;
}
function _lily_u16_write_prep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($1))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + ($1))|0;
  $15 = $10;
  while(1) {
   $14 = $15 << 1;
   $16 = ($13>>>0)>($14>>>0);
   if ($16) {
    $15 = $14;
   } else {
    break;
   }
  }
  HEAP32[$5>>2] = $14;
  $$lcssa = $14;
 } else {
  $$lcssa = $10;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = $$lcssa << 1;
 $19 = (_lily_realloc($17,$18)|0);
 HEAP32[$0>>2] = $19;
 return;
}
function _lily_u16_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 HEAP32[$1>>2] = $3;
 return ($6|0);
}
function _lily_u16_inject($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = $7 << 1;
  HEAP32[$6>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  $11 = $7 << 2;
  $12 = (_lily_realloc($10,$11)|0);
  HEAP32[$0>>2] = $12;
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) - ($1))|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + ($1<<1)|0);
 $17 = ((($16)) + 2|0);
 $18 = $14 << 1;
 _memmove(($17|0),($16|0),($18|0))|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + ($1<<1)|0);
 HEAP16[$22>>1] = $2;
 return;
}
function _lily_free_buffer_u16($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_ci_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 6|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($0)) + 4|0);
 HEAP16[$5>>1] = $2;
 $6 = ((($0)) + 8|0);
 HEAP16[$6>>1] = 0;
 return;
}
function _lily_ci_next($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + ($3))|0;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 $9 = ((($0)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==($8<<16>>16);
 if ($11) {
  $$1 = 0;
  return ($$1|0);
 }
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP16[$4>>1]|0;
 $14 = $13&65535;
 $15 = (($12) + ($14<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ((($0)) + 10|0);
 HEAP16[$17>>1] = $16;
 $18 = HEAP16[$15>>1]|0;
 do {
  switch ($18<<16>>16) {
  case 1: case 0:  {
   $19 = ((($0)) + 12|0);
   HEAP16[$19>>1] = 1;
   $20 = ((($0)) + 18|0);
   HEAP16[$20>>1] = 1;
   $21 = ((($0)) + 22|0);
   HEAP16[$21>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2:  {
   $22 = ((($0)) + 12|0);
   HEAP16[$22>>1] = 1;
   $23 = ((($0)) + 18|0);
   HEAP16[$23>>1] = 2;
   $24 = ((($0)) + 22|0);
   HEAP16[$24>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 24:  {
   $25 = ((($0)) + 26|0);
   HEAP16[$25>>1] = 1;
   HEAP16[$1>>1] = 2;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 25:  {
   $26 = ((($0)) + 14|0);
   HEAP16[$26>>1] = 1;
   $27 = ((($0)) + 18|0);
   HEAP16[$27>>1] = 1;
   $28 = ((($0)) + 26|0);
   HEAP16[$28>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 30: case 28: case 29:  {
   $29 = ((($0)) + 12|0);
   HEAP16[$29>>1] = 1;
   $30 = ((($0)) + 14|0);
   HEAP16[$30>>1] = 1;
   $31 = ((($0)) + 16|0);
   HEAP16[$31>>1] = 1;
   $32 = ((($0)) + 22|0);
   HEAP16[$32>>1] = 1;
   $33 = ((($15)) + 6|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ((($0)) + 24|0);
   HEAP16[$35>>1] = $34;
   $36 = HEAP16[$33>>1]|0;
   $37 = $36&65535;
   $38 = (($37) + 5)|0;
   $39 = $38&65535;
   HEAP16[$1>>1] = $39;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 31:  {
   $40 = ((($0)) + 12|0);
   HEAP16[$40>>1] = 1;
   $41 = ((($0)) + 18|0);
   HEAP16[$41>>1] = 1;
   HEAP16[$1>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 32:  {
   $42 = ((($0)) + 12|0);
   HEAP16[$42>>1] = 1;
   HEAP16[$1>>1] = 2;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 23: case 22:  {
   $43 = ((($0)) + 12|0);
   HEAP16[$43>>1] = 1;
   $44 = ((($0)) + 18|0);
   HEAP16[$44>>1] = 1;
   $45 = ((($0)) + 22|0);
   HEAP16[$45>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 34: case 33:  {
   $46 = ((($0)) + 12|0);
   HEAP16[$46>>1] = 1;
   $47 = ((($0)) + 16|0);
   HEAP16[$47>>1] = 1;
   $48 = ((($15)) + 4|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = ((($0)) + 18|0);
   HEAP16[$50>>1] = $49;
   $51 = ((($0)) + 22|0);
   HEAP16[$51>>1] = 1;
   $52 = HEAP16[$48>>1]|0;
   $53 = $52&65535;
   $54 = (($53) + 4)|0;
   $55 = $54&65535;
   HEAP16[$1>>1] = $55;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 35:  {
   $56 = ((($0)) + 12|0);
   HEAP16[$56>>1] = 1;
   $57 = ((($0)) + 14|0);
   HEAP16[$57>>1] = 1;
   $58 = ((($0)) + 16|0);
   HEAP16[$58>>1] = 1;
   $59 = ((($15)) + 6|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = ((($0)) + 18|0);
   HEAP16[$61>>1] = $60;
   $62 = ((($0)) + 22|0);
   HEAP16[$62>>1] = 1;
   $63 = HEAP16[$59>>1]|0;
   $64 = $63&65535;
   $65 = (($64) + 5)|0;
   $66 = $65&65535;
   HEAP16[$1>>1] = $66;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 36:  {
   $67 = ((($0)) + 12|0);
   HEAP16[$67>>1] = 1;
   $68 = ((($0)) + 14|0);
   HEAP16[$68>>1] = 1;
   $69 = ((($0)) + 16|0);
   HEAP16[$69>>1] = 1;
   $70 = ((($15)) + 6|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = ((($0)) + 18|0);
   HEAP16[$72>>1] = $71;
   $73 = ((($0)) + 22|0);
   HEAP16[$73>>1] = 1;
   $74 = HEAP16[$70>>1]|0;
   $75 = $74&65535;
   $76 = (($75) + 5)|0;
   $77 = $76&65535;
   HEAP16[$1>>1] = $77;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 64:  {
   $78 = ((($0)) + 12|0);
   HEAP16[$78>>1] = 1;
   $79 = ((($0)) + 14|0);
   HEAP16[$79>>1] = 1;
   $80 = ((($0)) + 18|0);
   HEAP16[$80>>1] = 1;
   $81 = ((($0)) + 22|0);
   HEAP16[$81>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 26:  {
   $82 = ((($0)) + 12|0);
   HEAP16[$82>>1] = 1;
   $83 = ((($0)) + 18|0);
   HEAP16[$83>>1] = 3;
   $84 = ((($0)) + 22|0);
   HEAP16[$84>>1] = 1;
   $85 = ((($0)) + 26|0);
   HEAP16[$85>>1] = 1;
   HEAP16[$1>>1] = 7;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 27:  {
   $86 = ((($0)) + 12|0);
   HEAP16[$86>>1] = 1;
   $87 = ((($0)) + 18|0);
   HEAP16[$87>>1] = 3;
   $88 = ((($0)) + 22|0);
   HEAP16[$88>>1] = 1;
   HEAP16[$1>>1] = 6;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 37:  {
   $89 = ((($0)) + 12|0);
   HEAP16[$89>>1] = 1;
   $90 = ((($0)) + 18|0);
   HEAP16[$90>>1] = 2;
   $91 = ((($0)) + 22|0);
   HEAP16[$91>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 38:  {
   $92 = ((($0)) + 12|0);
   HEAP16[$92>>1] = 1;
   $93 = ((($0)) + 18|0);
   HEAP16[$93>>1] = 3;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 40:  {
   $94 = ((($0)) + 12|0);
   HEAP16[$94>>1] = 1;
   $95 = ((($0)) + 14|0);
   HEAP16[$95>>1] = 1;
   $96 = ((($0)) + 18|0);
   HEAP16[$96>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 44: case 43: case 42: case 41: case 39:  {
   $97 = ((($0)) + 12|0);
   HEAP16[$97>>1] = 1;
   $98 = ((($0)) + 14|0);
   HEAP16[$98>>1] = 1;
   $99 = ((($0)) + 22|0);
   HEAP16[$99>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 45:  {
   $100 = ((($0)) + 12|0);
   HEAP16[$100>>1] = 1;
   $101 = ((($0)) + 14|0);
   HEAP16[$101>>1] = 1;
   $102 = ((($0)) + 22|0);
   HEAP16[$102>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 49:  {
   $103 = ((($0)) + 12|0);
   HEAP16[$103>>1] = 1;
   $104 = ((($0)) + 14|0);
   HEAP16[$104>>1] = 1;
   $105 = ((($0)) + 18|0);
   HEAP16[$105>>1] = 1;
   $106 = ((($0)) + 22|0);
   HEAP16[$106>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 50:  {
   $107 = ((($0)) + 12|0);
   HEAP16[$107>>1] = 1;
   $108 = ((($0)) + 14|0);
   HEAP16[$108>>1] = 1;
   $109 = ((($0)) + 18|0);
   HEAP16[$109>>1] = 2;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 51:  {
   $110 = ((($0)) + 12|0);
   HEAP16[$110>>1] = 1;
   $111 = ((($0)) + 26|0);
   HEAP16[$111>>1] = 1;
   HEAP16[$1>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 67: case 52:  {
   HEAP16[$1>>1] = 1;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 54:  {
   $112 = ((($0)) + 12|0);
   HEAP16[$112>>1] = 1;
   $113 = ((($0)) + 14|0);
   HEAP16[$113>>1] = 1;
   $114 = ((($0)) + 22|0);
   HEAP16[$114>>1] = 1;
   $115 = ((($0)) + 26|0);
   HEAP16[$115>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 53:  {
   $116 = ((($0)) + 12|0);
   HEAP16[$116>>1] = 1;
   $117 = ((($0)) + 14|0);
   HEAP16[$117>>1] = 1;
   $118 = ((($0)) + 24|0);
   HEAP16[$118>>1] = 1;
   $119 = ((($0)) + 26|0);
   HEAP16[$119>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 55:  {
   $120 = ((($0)) + 12|0);
   HEAP16[$120>>1] = 1;
   $121 = ((($0)) + 18|0);
   HEAP16[$121>>1] = 1;
   HEAP16[$1>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 48: case 47: case 46:  {
   $122 = ((($0)) + 12|0);
   HEAP16[$122>>1] = 1;
   $123 = ((($0)) + 14|0);
   HEAP16[$123>>1] = 1;
   $124 = ((($0)) + 22|0);
   HEAP16[$124>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 66:  {
   $125 = ((($0)) + 14|0);
   HEAP16[$125>>1] = 1;
   $126 = ((($0)) + 16|0);
   HEAP16[$126>>1] = 1;
   $127 = ((($15)) + 4|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = ((($0)) + 26|0);
   HEAP16[$129>>1] = $128;
   $130 = HEAP16[$127>>1]|0;
   $131 = $130&65535;
   $132 = (($131) + 3)|0;
   $133 = $132&65535;
   HEAP16[$1>>1] = $133;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 56:  {
   $134 = ((($0)) + 12|0);
   HEAP16[$134>>1] = 1;
   $135 = ((($0)) + 14|0);
   HEAP16[$135>>1] = 2;
   $136 = ((($0)) + 16|0);
   HEAP16[$136>>1] = 1;
   $137 = ((($15)) + 8|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = ((($0)) + 26|0);
   HEAP16[$139>>1] = $138;
   $140 = HEAP16[$137>>1]|0;
   $141 = $140&65535;
   $142 = (($141) + 5)|0;
   $143 = $142&65535;
   HEAP16[$1>>1] = $143;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 57:  {
   $144 = ((($0)) + 12|0);
   HEAP16[$144>>1] = 1;
   $145 = ((($0)) + 14|0);
   HEAP16[$145>>1] = 1;
   $146 = ((($0)) + 16|0);
   HEAP16[$146>>1] = 1;
   $147 = ((($15)) + 6|0);
   $148 = HEAP16[$147>>1]|0;
   $149 = ((($0)) + 22|0);
   HEAP16[$149>>1] = $148;
   $150 = HEAP16[$147>>1]|0;
   $151 = $150&65535;
   $152 = (($151) + 4)|0;
   $153 = $152&65535;
   HEAP16[$1>>1] = $153;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 58:  {
   $154 = ((($0)) + 12|0);
   HEAP16[$154>>1] = 1;
   $155 = ((($0)) + 14|0);
   HEAP16[$155>>1] = 1;
   $156 = ((($0)) + 22|0);
   HEAP16[$156>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 59:  {
   $157 = ((($0)) + 12|0);
   HEAP16[$157>>1] = 1;
   $158 = ((($0)) + 14|0);
   HEAP16[$158>>1] = 1;
   $159 = ((($0)) + 18|0);
   HEAP16[$159>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 60:  {
   $160 = ((($0)) + 12|0);
   HEAP16[$160>>1] = 1;
   $161 = ((($0)) + 14|0);
   HEAP16[$161>>1] = 1;
   $162 = ((($0)) + 22|0);
   HEAP16[$162>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 61:  {
   $163 = ((($0)) + 14|0);
   HEAP16[$163>>1] = 1;
   $164 = ((($0)) + 20|0);
   HEAP16[$164>>1] = 1;
   $165 = ((($0)) + 22|0);
   HEAP16[$165>>1] = 1;
   HEAP16[$1>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 62:  {
   $166 = ((($0)) + 12|0);
   HEAP16[$166>>1] = 1;
   $167 = ((($0)) + 14|0);
   HEAP16[$167>>1] = 1;
   $168 = ((($0)) + 18|0);
   HEAP16[$168>>1] = 1;
   $169 = ((($0)) + 22|0);
   HEAP16[$169>>1] = 1;
   HEAP16[$1>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 63:  {
   $170 = ((($0)) + 12|0);
   HEAP16[$170>>1] = 1;
   $171 = ((($0)) + 16|0);
   HEAP16[$171>>1] = 1;
   $172 = ((($15)) + 4|0);
   $173 = HEAP16[$172>>1]|0;
   $174 = ((($0)) + 20|0);
   HEAP16[$174>>1] = $173;
   $175 = ((($0)) + 22|0);
   HEAP16[$175>>1] = 1;
   $176 = HEAP16[$172>>1]|0;
   $177 = $176&65535;
   $178 = (($177) + 4)|0;
   $179 = $178&65535;
   HEAP16[$1>>1] = $179;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 65:  {
   $180 = ((($0)) + 12|0);
   HEAP16[$180>>1] = 1;
   $181 = ((($0)) + 16|0);
   HEAP16[$181>>1] = 1;
   $182 = ((($15)) + 4|0);
   $183 = HEAP16[$182>>1]|0;
   $184 = ((($0)) + 18|0);
   HEAP16[$184>>1] = $183;
   $185 = ((($0)) + 22|0);
   HEAP16[$185>>1] = 1;
   $186 = HEAP16[$182>>1]|0;
   $187 = $186&65535;
   $188 = (($187) + 4)|0;
   $189 = $188&65535;
   HEAP16[$1>>1] = $189;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  default: {
   $$1 = 0;
   return ($$1|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _lily_new_emit_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(120)|0);
 $3 = (_lily_new_buffer_u16(4)|0);
 HEAP32[$2>>2] = $3;
 $4 = (_lily_malloc(16)|0);
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_lily_new_type_maker()|0);
 $7 = ((($2)) + 104|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_new_type_system($6,$11,$15)|0);
 $17 = ((($2)) + 100|0);
 HEAP32[$17>>2] = $16;
 $18 = (_lily_new_buffer_u16(32)|0);
 $19 = ((($2)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($2)) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = (_new_storage_stack()|0);
 $22 = ((($2)) + 64|0);
 HEAP32[$22>>2] = $21;
 $23 = (_lily_malloc(16)|0);
 $24 = ((($2)) + 20|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($2)) + 24|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($2)) + 32|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 $31 = (_lily_new_string_pile()|0);
 $32 = ((($2)) + 96|0);
 HEAP32[$32>>2] = $31;
 $33 = HEAP32[$8>>2]|0;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$7>>2]|0;
 $37 = ((($36)) + 16|0);
 HEAP32[$37>>2] = $35;
 $38 = HEAP32[$12>>2]|0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$7>>2]|0;
 $42 = ((($41)) + 12|0);
 HEAP32[$42>>2] = $40;
 $43 = (_lily_malloc(32)|0);
 $44 = ((($2)) + 8|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($2)) + 40|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($2)) + 42|0);
 HEAP16[$46>>1] = 8;
 $47 = ((($2)) + 44|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($2)) + 46|0);
 HEAP16[$48>>1] = 4;
 $49 = ((($2)) + 52|0);
 HEAP16[$49>>1] = 0;
 $50 = ((($2)) + 54|0);
 HEAP16[$50>>1] = 4;
 $51 = ((($2)) + 76|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($2)) + 82|0);
 HEAP16[$52>>1] = 0;
 $53 = ((($2)) + 92|0);
 HEAP32[$53>>2] = $1;
 $54 = ((($2)) + 84|0);
 HEAP32[$54>>2] = 1;
 return ($2|0);
}
function _new_storage_stack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = (_new_storage()|0);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = (_new_storage()|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = (_new_storage()|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = (_new_storage()|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($0)) + 4|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 6|0);
 HEAP16[$14>>1] = 4;
 return ($0|0);
}
function _new_storage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 6|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 4|0);
 HEAP16[$4>>1] = 2;
 return ($0|0);
}
function _lily_free_emit_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$123 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 while(1) {
  $3 = ($$0|0)==(0|0);
  if ($3) {
   break;
  }
  $4 = ((($$0)) + 52|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$123 = $$0;
   label = 4;
   break;
  } else {
   $$0 = $5;
  }
 }
 if ((label|0) == 4) {
  while(1) {
   label = 0;
   $7 = ((($$123)) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   _lily_free($$123);
   $9 = ($8|0)==(0|0);
   if ($9) {
    break;
   } else {
    $$123 = $8;
    label = 4;
   }
  }
 }
 $10 = ((($0)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 _free_storage_stack($11);
 $12 = ((($0)) + 96|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_free_string_pile($13);
 $14 = ((($0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free($15);
 $16 = ((($0)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free($17);
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_free($19);
 $20 = ((($0)) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_free_type_system($21);
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_free($23);
 $24 = ((($0)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = HEAP32[$0>>2]|0;
  _lily_free_buffer_u16($27);
  $28 = ((($0)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  _lily_free_buffer_u16($29);
  _lily_free($0);
  return;
 }
 _lily_free_buffer_u16($25);
 $27 = HEAP32[$0>>2]|0;
 _lily_free_buffer_u16($27);
 $28 = ((($0)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 _lily_free_buffer_u16($29);
 _lily_free($0);
 return;
}
function _free_storage_stack($0) {
 $0 = $0|0;
 var $$07 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  $$07 = 0;
  while(1) {
   $4 = HEAP32[$0>>2]|0;
   $5 = (($4) + ($$07<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   _lily_free($6);
   $7 = (($$07) + 1)|0;
   $8 = HEAP16[$1>>1]|0;
   $9 = $8&65535;
   $10 = ($7|0)<($9|0);
   if ($10) {
    $$07 = $7;
   } else {
    break;
   }
  }
 }
 $11 = HEAP32[$0>>2]|0;
 _lily_free($11);
 _lily_free($0);
 return;
}
function _lily_emit_enter_main($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[431]|0;
 _lily_tm_add($2,$3);
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($0)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_tm_make($4,0,$8,1)|0);
 $10 = HEAP32[$5>>2]|0;
 $11 = (_lily_new_raw_var($10,$9,3017)|0);
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($11)) + 36|0);
 HEAP32[$13>>2] = 1;
 $14 = ((($11)) + 6|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 | 64;
 $18 = $17&65535;
 HEAP16[$14>>1] = $18;
 $19 = (_lily_malloc(56)|0);
 $20 = ((($11)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_new_native_function_val(0,$21)|0);
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$23>>2] = $11;
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($24)) + 28|0);
 HEAP32[$25>>2] = $22;
 $26 = HEAP32[$22>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$22>>2] = $27;
 $28 = HEAP32[$5>>2]|0;
 _lily_store_function($28,$11,$22);
 $29 = ((($19)) + 52|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($19)) + 48|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($19)) + 18|0);
 HEAP16[$31>>1] = 14;
 $32 = ((($19)) + 4|0);
 HEAP32[$32>>2] = $11;
 $33 = ((($19)) + 40|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($19)) + 44|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($19)) + 20|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($19)) + 24|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($19)) + 32|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($19)) + 14|0);
 HEAP16[$38>>1] = -1;
 $39 = ((($19)) + 16|0);
 HEAP8[$39>>0] = 0;
 $40 = ((($19)) + 10|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($0)) + 56|0);
 HEAP32[$41>>2] = $11;
 $42 = HEAP32[431]|0;
 $43 = ((($0)) + 60|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($0)) + 76|0);
 HEAP32[$44>>2] = $19;
 $45 = ((($0)) + 82|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = (($46) + 1)<<16>>16;
 HEAP16[$45>>1] = $47;
 $48 = ((($0)) + 68|0);
 HEAP32[$48>>2] = $19;
 $49 = ((($0)) + 72|0);
 HEAP32[$49>>2] = $19;
 return;
}
function _new_native_function_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(48)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 28|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($2)) + 32|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 12|0);
 HEAP16[$7>>1] = -1;
 $8 = ((($2)) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 14|0);
 HEAP16[$10>>1] = -1;
 $11 = ((($2)) + 36|0);
 HEAP32[$11>>2] = 0;
 return ($2|0);
}
function _lily_emit_new_local_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_new_raw_var($4,$1,$2)|0);
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$6>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($0)) + 82|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($5)) + 36|0);
 HEAP32[$18>>2] = $17;
 return ($5|0);
}
function _lily_emit_new_scoped_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_new_raw_var($4,$1,$2)|0);
 $6 = ((($0)) + 82|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(1);
 if ($8) {
  $9 = ((($0)) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($5)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = HEAP32[$9>>2]|0;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $18 = ((($5)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = $20 | 512;
  $22 = $21&65535;
  HEAP16[$18>>1] = $22;
  $32 = HEAP16[$6>>1]|0;
  $33 = $32&65535;
  $34 = ((($5)) + 36|0);
  HEAP32[$34>>2] = $33;
  return ($5|0);
 } else {
  $23 = ((($0)) + 72|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($5)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = HEAP32[$23>>2]|0;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$29>>2] = $31;
  $32 = HEAP16[$6>>1]|0;
  $33 = $32&65535;
  $34 = ((($5)) + 36|0);
  HEAP32[$34>>2] = $33;
  return ($5|0);
 }
 return (0)|0;
}
function _lily_emit_new_define_var($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_new_raw_var($6,$1,$3)|0);
 $8 = HEAP32[$5>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($7)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($7)) + 36|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($7)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = $17 | 64;
 $19 = $18&65535;
 HEAP16[$15>>1] = $19;
 $20 = ($2|0)==(0|0);
 if ($20) {
  $$0 = 0;
 } else {
  $21 = ((($2)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $$0 = $22;
 }
 $23 = ((($7)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_new_native_function_val($$0,$24)|0);
 $26 = ((($25)) + 36|0);
 HEAP32[$26>>2] = $4;
 $27 = HEAP32[$5>>2]|0;
 _lily_store_function($27,$7,$25);
 return ($7|0);
}
function _lily_emit_new_tied_dyna_var($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_new_raw_unlinked_var($6,$3,$4)|0);
 $8 = ((($7)) + 36|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($7)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 | 1088;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($7)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($2)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)==(5);
 if ($22) {
  $23 = ((($2)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$7>>2] = $24;
  HEAP32[$23>>2] = $7;
  $25 = (_new_foreign_function_val($1,0,$4)|0);
  $26 = ((($2)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($25)) + 44|0);
  HEAP32[$28>>2] = $27;
  $$0 = $25;
  $40 = ((($3)) + 10|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ((($$0)) + 14|0);
  HEAP16[$42>>1] = $41;
  $43 = HEAP32[$5>>2]|0;
  _lily_store_function($43,$7,$$0);
  return ($7|0);
 } else {
  $29 = ((($2)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$7>>2] = $30;
  HEAP32[$29>>2] = $7;
  $31 = ((($7)) + 40|0);
  HEAP32[$31>>2] = $2;
  $32 = ((($2)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_new_foreign_function_val($1,$33,$4)|0);
  $35 = ((($2)) + 52|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($34)) + 44|0);
  HEAP32[$39>>2] = $38;
  $$0 = $34;
  $40 = ((($3)) + 10|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ((($$0)) + 14|0);
  HEAP16[$42>>1] = $41;
  $43 = HEAP32[$5>>2]|0;
  _lily_store_function($43,$7,$$0);
  return ($7|0);
 }
 return (0)|0;
}
function _new_foreign_function_val($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(48)|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($3)) + 24|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($3)) + 28|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($3)) + 32|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 12|0);
 HEAP16[$8>>1] = -1;
 $9 = ((($3)) + 44|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($3)) + 14|0);
 HEAP16[$11>>1] = -1;
 $12 = ((($3)) + 36|0);
 HEAP32[$12>>2] = 0;
 return ($3|0);
}
function _lily_emit_new_dyna_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_new_raw_unlinked_var($5,$2,$3)|0);
 $7 = ((($0)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$7>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = ((($6)) + 36|0);
 HEAP32[$16>>2] = 1;
 $17 = ((($6)) + 6|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $19 | 512;
 $21 = $20&65535;
 HEAP16[$17>>1] = $21;
 $22 = ((($1)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$6>>2] = $23;
 HEAP32[$22>>2] = $6;
 return ($6|0);
}
function _lily_emit_get_storage_spot($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_get_storage($0,$1)|0);
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4&65535;
 return ($5|0);
}
function _get_storage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03648 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 10|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($3)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($9&65535)<($11&65535);
 L1: do {
  if ($12) {
   $13 = $9&65535;
   $14 = HEAP32[$3>>2]|0;
   $$03648 = $13;
   while(1) {
    $15 = (($14) + ($$03648<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    if ($19) {
     break;
    }
    $35 = ($18|0)==($1|0);
    if ($35) {
     $36 = ((($16)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==($5|0);
     if (!($38)) {
      label = 9;
      break;
     }
    }
    $39 = (($$03648) + 1)|0;
    $40 = HEAP16[$10>>1]|0;
    $41 = $40&65535;
    $42 = ($39|0)<($41|0);
    if ($42) {
     $$03648 = $39;
    } else {
     $$1 = $16;
     break L1;
    }
   }
   if ((label|0) == 9) {
    HEAP32[$36>>2] = $5;
    $$1 = $16;
    break;
   }
   HEAP32[$17>>2] = $1;
   $20 = HEAP32[$6>>2]|0;
   $21 = ((($20)) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($16)) + 8|0);
   HEAP32[$23>>2] = $22;
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[$25>>2] = $27;
   $28 = (($$03648) + 1)|0;
   $29 = HEAP16[$10>>1]|0;
   $30 = $29&65535;
   $31 = ($28|0)==($30|0);
   if ($31) {
    $32 = HEAP32[$2>>2]|0;
    _grow_storages($32);
   }
   $33 = $28&65535;
   $34 = ((($3)) + 4|0);
   HEAP16[$34>>1] = $33;
   $$1 = $16;
  } else {
   $$1 = 0;
  }
 } while(0);
 $43 = ((($$1)) + 16|0);
 HEAP32[$43>>2] = $5;
 $44 = ((($$1)) + 6|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $46 & 65533;
 $48 = $47&65535;
 HEAP16[$44>>1] = $48;
 return ($$1|0);
}
function _grow_storages($0) {
 $0 = $0|0;
 var $$017 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = $3 << 3;
 $7 = (_lily_realloc($5,$6)|0);
 $8 = HEAP16[$1>>1]|0;
 $9 = $8&65535;
 $10 = ($9>>>0)<($4>>>0);
 if ($10) {
  $$017 = $9;
 } else {
  HEAP32[$0>>2] = $7;
  $14 = $4&65535;
  HEAP16[$1>>1] = $14;
  return;
 }
 while(1) {
  $11 = (_new_storage()|0);
  $12 = (($7) + ($$017<<2)|0);
  HEAP32[$12>>2] = $11;
  $13 = (($$017) + 1)|0;
  $exitcond = ($13|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $13;
  }
 }
 HEAP32[$0>>2] = $7;
 $14 = $4&65535;
 HEAP16[$1>>1] = $14;
 return;
}
function _lily_emit_finalize_for_in($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$043$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($4|0)==(0|0);
 if ($10) {
  $11 = ((($9)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_lily_emit_new_local_var($0,$12,9350)|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $5&65535;
  $17 = ((($13)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18&65535;
  _lily_u16_write_4($15,42,$16,1,$19);
  $$0 = $13;
 } else {
  $$0 = $4;
 }
 $20 = ((($0)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = ((($9)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_lily_emit_new_local_var($0,$26,3026)|0);
  $$043$in = $27;
 } else {
  $$043$in = $1;
 }
 $28 = ((($0)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $5&65535;
 $31 = ((($2)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($3)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&65535;
 $37 = ((($$0)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38&65535;
 $40 = ((($$043$in)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&65535;
 _lily_u16_write_6($29,27,$30,$33,$36,$39,$42);
 if ($24) {
  $43 = HEAP32[$28>>2]|0;
  $44 = HEAP32[$40>>2]|0;
  $45 = $44&65535;
  $46 = ((($1)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47&65535;
  _lily_u16_write_4($43,40,$30,$45,$48);
 }
 $49 = HEAP32[$28>>2]|0;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51&65535;
 $53 = ((($0)) + 76|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 14|0);
 HEAP16[$55>>1] = $52;
 $56 = HEAP32[$28>>2]|0;
 $57 = HEAP32[$31>>2]|0;
 $58 = $57&65535;
 $59 = HEAP32[$34>>2]|0;
 $60 = $59&65535;
 $61 = HEAP32[$37>>2]|0;
 $62 = $61&65535;
 _lily_u16_write_5($56,26,$30,$58,$60,$62);
 $63 = HEAP32[$28>>2]|0;
 $64 = HEAP32[$40>>2]|0;
 $65 = $64&65535;
 _lily_u16_write_2($63,$65,6);
 $66 = HEAP32[$0>>2]|0;
 $67 = HEAP32[$28>>2]|0;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 65535)|0;
 $71 = $70&65535;
 _lily_u16_write_1($66,$71);
 if (!($24)) {
  return;
 }
 $72 = HEAP32[$28>>2]|0;
 $73 = HEAP32[$40>>2]|0;
 $74 = $73&65535;
 $75 = ((($1)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76&65535;
 _lily_u16_write_4($72,40,$30,$74,$77);
 return;
}
function _lily_emit_break($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 14|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(-1);
 if ($5) {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,3037,$vararg_buffer);
  // unreachable;
 } else {
  $8 = (_find_deepest_loop($0)|0);
  _write_pop_try_blocks_up_to($0,$8);
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_u16_write_2($10,24,1);
  $11 = HEAP32[$9>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 65535)|0;
  $15 = $14&65535;
  _inject_patch_into_block($0,$8,$15);
  STACKTOP = sp;return;
 }
}
function _find_deepest_loop($0) {
 $0 = $0|0;
 var $$0 = 0, $$012 = 0, $$01213 = 0, $$01214 = 0, $$off = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $$01213 = HEAP32[$1>>2]|0;
 $2 = ($$01213|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$01214 = $$01213;
 }
 while(1) {
  $3 = ((($$01214)) + 18|0);
  $4 = HEAP16[$3>>1]|0;
  $$off = (($4) + -3)<<16>>16;
  $switch = ($$off&65535)<(3);
  if ($switch) {
   $$0 = $$01214;
   label = 5;
   break;
  }
  $5 = ($4&65535)>(10);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = ((($$01214)) + 52|0);
  $$012 = HEAP32[$6>>2]|0;
  $7 = ($$012|0)==(0|0);
  if ($7) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $$01214 = $$012;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _write_pop_try_blocks_up_to($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$015 = 0, $$01519 = 0, $$016 = 0, $$01618 = 0, $$01620 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $$01618 = HEAP32[$2>>2]|0;
 $3 = ($$01618|0)==($1|0);
 if ($3) {
  return;
 } else {
  $$01519 = 0;$$01620 = $$01618;
 }
 while(1) {
  $4 = ((($$01620)) + 18|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = ($5<<16>>16)==(6);
  $7 = $6&1;
  $$$015 = (($7) + ($$01519))|0;
  $8 = ((($$01620)) + 52|0);
  $$016 = HEAP32[$8>>2]|0;
  $9 = ($$016|0)==($1|0);
  if ($9) {
   break;
  } else {
   $$01519 = $$$015;$$01620 = $$016;
  }
 }
 $10 = ($$$015|0)>(0);
 if (!($10)) {
  return;
 }
 $11 = ((($0)) + 12|0);
 $$017 = 0;
 while(1) {
  $12 = HEAP32[$11>>2]|0;
  _lily_u16_write_1($12,52);
  $13 = (($$017) + 1)|0;
  $exitcond = ($13|0)==($$$015|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $13;
  }
 }
 return;
}
function _inject_patch_into_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  _lily_u16_write_1($6,$2);
  return;
 }
 $7 = ((($1)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 _lily_u16_inject($6,$11,$2);
 $$09 = HEAP32[$7>>2]|0;
 $12 = ($$09|0)==(0|0);
 if ($12) {
  return;
 } else {
  $$010 = $$09;
 }
 while(1) {
  $13 = ((($$010)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (($14) + 1)<<16>>16;
  HEAP16[$13>>1] = $15;
  $16 = ((($$010)) + 48|0);
  $$0 = HEAP32[$16>>2]|0;
  $17 = ($$0|0)==(0|0);
  if ($17) {
   break;
  } else {
   $$010 = $$0;
  }
 }
 return;
}
function _lily_emit_continue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 14|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(-1);
 if ($5) {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,3069,$vararg_buffer);
  // unreachable;
 } else {
  $8 = (_find_deepest_loop($0)|0);
  _write_pop_try_blocks_up_to($0,$8);
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($9)) + 14|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ((($0)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) - ($16))|0;
  $18 = $17&65535;
  _lily_u16_write_2($14,24,$18);
  STACKTOP = sp;return;
 }
}
function _lily_emit_try($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1&65535;
 _lily_u16_write_3($3,51,$4,2);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 65535)|0;
 $10 = $9&65535;
 _lily_u16_write_1($5,$10);
 return;
}
function _lily_emit_except($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&65535;
 if ($4) {
  $17 = ((($1)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP16[$19>>1]|0;
  _lily_u16_write_5($6,53,$7,$20,0,4);
 } else {
  $8 = ((($2)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ((($2)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15&65535;
  _lily_u16_write_5($6,54,$7,$13,$16,4);
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 65535)|0;
 $26 = $25&65535;
 _lily_u16_write_1($21,$26);
 return;
}
function _get_unique_storage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 while(1) {
  $6 = (_get_storage($0,$1)|0);
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($5|0);
  if (!($10)) {
   break;
  }
 }
 return ($6|0);
}
function _lily_emit_enter_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_lily_malloc(56)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 48|0);
  HEAP32[$9>>2] = $7;
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($7)) + 52|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($7)) + 48|0);
  HEAP32[$12>>2] = 0;
  $$0 = $7;
 } else {
  $$0 = $5;
 }
 $13 = ((($$0)) + 18|0);
 $14 = $1&65535;
 HEAP16[$13>>1] = $14;
 $15 = ((($0)) + 112|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$$0>>2] = $20;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($$0)) + 40|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($$0)) + 44|0);
 HEAP32[$28>>2] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 $33 = ((($$0)) + 8|0);
 HEAP16[$33>>1] = $32;
 $34 = ((($$0)) + 36|0);
 HEAP32[$34>>2] = -1;
 $35 = HEAP32[$2>>2]|0;
 $36 = ((($35)) + 14|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ((($$0)) + 14|0);
 HEAP16[$38>>1] = $37;
 $39 = ((($$0)) + 16|0);
 HEAP8[$39>>0] = 0;
 $40 = ($1>>>0)<(11);
 if ($40) {
  $41 = HEAP32[$2>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($$0)) + 24|0);
  HEAP32[$44>>2] = $43;
  $45 = ((($$0)) + 17|0);
  HEAP8[$45>>0] = 1;
  $$off = (($1) + -3)|0;
  $46 = ($$off>>>0)<(3);
  if ($46) {
   $47 = ((($0)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50&65535;
   HEAP16[$38>>1] = $51;
   HEAP32[$2>>2] = $$0;
   return;
  }
  $52 = ($1|0)==(10);
  if (!($52)) {
   HEAP32[$2>>2] = $$0;
   return;
  }
  $53 = HEAP32[$15>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 28|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$24>>2] = $57;
  HEAP16[$38>>1] = -1;
  HEAP32[$2>>2] = $$0;
  return;
 }
 $58 = HEAP32[$15>>2]|0;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($1|0)==(12);
 if ($63) {
  $64 = ((($60)) + 28|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$24>>2] = $65;
 }
 $66 = HEAP32[$24>>2]|0;
 $67 = ((($62)) + 40|0);
 HEAP32[$67>>2] = $66;
 $68 = ((($0)) + 82|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = ($69&65535)>(1);
 if ($70) {
  $71 = HEAP32[$2>>2]|0;
  $72 = ((($71)) + 18|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = ($73<<16>>16)==(12);
  if (!($74)) {
   $75 = HEAP16[$13>>1]|0;
   $76 = ($75<<16>>16)==(12);
   if (!($76)) {
    $77 = ((($62)) + 6|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78&65535;
    $80 = $79 | 256;
    $81 = $80&65535;
    HEAP16[$77>>1] = $81;
   }
  }
 }
 $82 = ((($$0)) + 32|0);
 HEAP32[$82>>2] = 0;
 switch ($1|0) {
 case 14:  {
  break;
 }
 case 13:  {
  HEAP32[$28>>2] = 0;
  label = 16;
  break;
 }
 default: {
  label = 16;
 }
 }
 if ((label|0) == 16) {
  $83 = HEAP16[$68>>1]|0;
  $84 = (($83) + 1)<<16>>16;
  HEAP16[$68>>1] = $84;
 }
 $85 = ((($0)) + 72|0);
 HEAP32[$85>>2] = $$0;
 $86 = ((($0)) + 64|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 4|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = ((($$0)) + 10|0);
 HEAP16[$90>>1] = $89;
 $91 = ((($$0)) + 4|0);
 HEAP32[$91>>2] = $62;
 $92 = ((($0)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($$0)) + 20|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP32[$92>>2]|0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($$0)) + 24|0);
 HEAP32[$100>>2] = $99;
 HEAP16[$38>>1] = -1;
 $101 = ((($0)) + 56|0);
 HEAP32[$101>>2] = $62;
 HEAP32[$2>>2] = $$0;
 return;
}
function _lily_emit_leave_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,3104,$vararg_buffer);
  // unreachable;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 switch ($10<<16>>16) {
 case 3: case 5:  {
  $11 = ((($8)) + 14|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) - ($17))|0;
  $19 = $18&65535;
  _lily_u16_write_2($15,24,$19);
  break;
 }
 case 9:  {
  $20 = ((($8)) + 12|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ((($0)) + 52|0);
  HEAP16[$22>>1] = $21;
  label = 7;
  break;
 }
 case 6: case 7: case 8:  {
  $23 = HEAP32[$0>>2]|0;
  $24 = (_lily_u16_pop($23)|0);
  $25 = $24&65535;
  $26 = ((($0)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<1)|0);
  HEAP16[$29>>1] = 0;
  $cond = ($10<<16>>16)==(8);
  if ($cond) {
   label = 7;
  }
  break;
 }
 case 2:  {
  label = 7;
  break;
 }
 default: {
  $44 = ($10&65535)<(11);
  if (!($44)) {
   _leave_function($0,$8);
   $51 = HEAP32[$1>>2]|0;
   $52 = ((($51)) + 52|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$1>>2] = $53;
   STACKTOP = sp;return;
  }
 }
 }
 if ((label|0) == 7) {
  $30 = ((($8)) + 17|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $33 = ((($8)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($0)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($34|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$1>>2]|0;
    $41 = ((($40)) + 52|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 36|0);
    HEAP32[$43>>2] = $38;
   }
  }
 }
 $45 = HEAP32[$8>>2]|0;
 $46 = ((($8)) + 8|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47&65535;
 _write_patches_since($0,$48);
 $49 = ((($0)) + 112|0);
 $50 = HEAP32[$49>>2]|0;
 _lily_hide_block_vars($50,$45);
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$1>>2] = $53;
 STACKTOP = sp;return;
}
function _write_patches_since($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $$020 = (($4) + -1)|0;
 $9 = ($$020|0)<($1|0);
 if ($9) {
  return;
 } else {
  $$021 = $$020;
 }
 while(1) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (_lily_u16_pop($10)|0);
  $12 = $11&65535;
  $13 = ($11<<16>>16)==(0);
  if (!($13)) {
   $15 = HEAP32[$5>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($12<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = (($8) - ($12))|0;
   $21 = (($20) + ($19))|0;
   $22 = $21&65535;
   HEAP16[$17>>1] = $22;
  }
  $$0 = (($$021) + -1)|0;
  $14 = ($$0|0)<($1|0);
  if ($14) {
   break;
  } else {
   $$021 = $$0;
  }
 }
 return;
}
function _leave_function($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$059 = 0, $$059$in = 0, $$pn = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 switch ($3<<16>>16) {
 case 12:  {
  $4 = ((($1)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 6|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 96;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = $8 & 64;
   $12 = $11&65535;
   $13 = ($12&65535) >>> 6;
   $14 = (48 - ($13))<<16>>16;
   $15 = ((($1)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($16<<1)|0);
   HEAP16[$20>>1] = $14;
  }
  $21 = ((($0)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 88|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25&65535;
  $27 = ((($1)) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30&65535;
  _lily_u16_write_3($22,31,$26,$31);
  break;
 }
 case 13:  {
  $32 = ((($0)) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($0)) + 60|0);
  HEAP32[$39>>2] = $38;
  label = 6;
  break;
 }
 default: {
  label = 6;
 }
 }
 do {
  if ((label|0) == 6) {
   $40 = ((($0)) + 60|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[431]|0;
   $43 = ($41|0)==($42|0);
   if (!($43)) {
    $44 = HEAP32[430]|0;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($41|0)==($46|0);
    if (!($47)) {
     $54 = HEAP16[$2>>1]|0;
     $55 = ($54<<16>>16)==(11);
     if (!($55)) {
      break;
     }
     $56 = ((($1)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($0)) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($57|0)==($61|0);
     if ($62) {
      break;
     }
     $63 = ((($0)) + 92|0);
     $64 = HEAP32[$63>>2]|0;
     _lily_raise_syn($64,3128,$vararg_buffer);
     // unreachable;
    }
   }
   $48 = ((($0)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 88|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = $52&65535;
   _lily_u16_write_2($49,32,$53);
  }
 } while(0);
 _finalize_function_block($0,$1);
 $$pn = $1;
 while(1) {
  $$059$in = ((($$pn)) + 52|0);
  $$059 = HEAP32[$$059$in>>2]|0;
  $65 = ((($$059)) + 18|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = ($66&65535)<(11);
  if ($67) {
   $$pn = $$059;
  } else {
   break;
  }
 }
 $68 = ((($$059)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($0)) + 76|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 18|0);
 $73 = HEAP16[$72>>1]|0;
 switch ($73<<16>>16) {
 case 12:  {
  $74 = ((($71)) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($1)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($0)) + 112|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 32|0);
  HEAP32[$82>>2] = $77;
  $83 = HEAP32[$78>>2]|0;
  $84 = HEAP32[$76>>2]|0;
  _lily_add_class_method($83,$75,$84);
  break;
 }
 case 14:  {
  break;
 }
 default: {
  $85 = ((($1)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($0)) + 112|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 32|0);
  HEAP32[$91>>2] = $86;
 }
 }
 $92 = ((($0)) + 56|0);
 HEAP32[$92>>2] = $69;
 $93 = ((($69)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 16|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($0)) + 60|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($0)) + 72|0);
 HEAP32[$99>>2] = $$059;
 $100 = ((($1)) + 20|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($0)) + 12|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 4|0);
 HEAP32[$104>>2] = $101;
 $105 = HEAP16[$2>>1]|0;
 $106 = ($105<<16>>16)==(14);
 if ($106) {
  STACKTOP = sp;return;
 }
 $107 = ((($0)) + 82|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = (($108) + -1)<<16>>16;
 HEAP16[$107>>1] = $109;
 $110 = ((($1)) + 16|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = ($111<<24>>24)==(1);
 if (!($112)) {
  STACKTOP = sp;return;
 }
 $113 = HEAP16[$65>>1]|0;
 $114 = ($113<<16>>16)==(14);
 if ($114) {
  STACKTOP = sp;return;
 }
 $115 = ((($$059)) + 52|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 if ($117) {
  STACKTOP = sp;return;
 }
 $118 = HEAP32[$99>>2]|0;
 $119 = ((($118)) + 16|0);
 HEAP8[$119>>0] = 1;
 STACKTOP = sp;return;
}
function _finalize_function_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03739 = 0, $$038 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_create_code_block_for($0,$1)|0);
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 82|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8&65535)>(1);
 if ($9) {
  $10 = ((($1)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 112|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($11|0);
  if (!($18)) {
   $$03739 = $17;
   while(1) {
    $19 = HEAP32[$$03739>>2]|0;
    $20 = ((($$03739)) + 6|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 & 64;
    $23 = ($22<<16>>16)==(0);
    if ($23) {
     $24 = ((($$03739)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     _lily_free($25);
     _lily_free($$03739);
    } else {
     $26 = HEAP32[$12>>2]|0;
     $27 = ((($26)) + 16|0);
     $28 = HEAP32[$27>>2]|0;
     HEAP32[$$03739>>2] = $28;
     $29 = HEAP32[$12>>2]|0;
     $30 = ((($29)) + 16|0);
     HEAP32[$30>>2] = $$03739;
    }
    $31 = ($19|0)==($11|0);
    if ($31) {
     break;
    } else {
     $$03739 = $19;
    }
   }
  }
 }
 $32 = ((($1)) + 10|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ((($0)) + 64|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($33&65535)<($37&65535);
 if (!($38)) {
  $$lcssa = $36;
  $51 = HEAP16[$32>>1]|0;
  HEAP16[$$lcssa>>1] = $51;
  $52 = $6&65535;
  $53 = ((($2)) + 14|0);
  HEAP16[$53>>1] = $52;
  return;
 }
 $39 = $33&65535;
 $$038 = $39;$41 = $35;
 while(1) {
  $40 = HEAP32[$41>>2]|0;
  $42 = (($40) + ($$038<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 12|0);
  HEAP32[$44>>2] = 0;
  $45 = (($$038) + 1)|0;
  $46 = HEAP32[$34>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = ($45|0)<($49|0);
  if ($50) {
   $$038 = $45;$41 = $46;
  } else {
   $$lcssa = $47;
   break;
  }
 }
 $51 = HEAP16[$32>>1]|0;
 HEAP16[$$lcssa>>1] = $51;
 $52 = $6&65535;
 $53 = ((($2)) + 14|0);
 HEAP16[$53>>1] = $52;
 return;
}
function _create_code_block_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035 = 0, $$036 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 16|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $18 = ((($0)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($0)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) - ($21))|0;
  $$0 = $21;$$036 = $26;$$pn = $23;
 } else {
  _perform_closure_transform($0,$14);
  $27 = ((($0)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $$0 = 0;$$036 = $30;$$pn = $28;
 }
 $$035 = HEAP32[$$pn>>2]|0;
 $31 = $$036 << 1;
 $32 = (($31) + 2)|0;
 $33 = (_lily_malloc($32)|0);
 $34 = (($$035) + ($$0<<1)|0);
 _memcpy(($33|0),($34|0),($31|0))|0;
 $35 = $$036&65535;
 $36 = ((($14)) + 10|0);
 HEAP16[$36>>1] = $35;
 $37 = ((($14)) + 40|0);
 HEAP32[$37>>2] = $33;
 return ($14|0);
}
function _perform_closure_transform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0312 = 0, $$031313 = 0, $$031543 = 0, $$032014 = 0, $$0321 = 0, $$032638 = 0, $$032837 = 0, $$033030 = 0, $$0331 = 0, $$131616 = 0, $$1322 = 0, $$1327 = 0, $$1329 = 0, $$231722 = 0, $$2323 = 0, $$331826 = 0, $$3324 = 0, $$431932 = 0, $$lcssa = 0;
 var $$lcssa12 = 0, $$off = 0, $$off2 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $sum = 0, $switch1 = 0, $switch3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_lily_new_buffer_u16(8)|0);
  HEAP32[$3>>2] = $6;
 } else {
  $7 = ((($4)) + 4|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_get_unique_storage($0,$15)|0);
 $17 = (_find_closed_self_spot($0)|0);
 $18 = ((($0)) + 82|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ($19<<16>>16)==(2);
 do {
  if ($20) {
   $21 = HEAP32[$3>>2]|0;
   $22 = ((($1)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23&65535;
   $25 = ((($0)) + 44|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = ((($16)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28&65535;
   _lily_u16_write_4($21,60,$24,$26,$29);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 18|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = ($32<<16>>16)==(12);
   if ($33) {
    $34 = ((($30)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 6|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = $38 | 32;
    $40 = $39&65535;
    HEAP16[$36>>1] = $40;
    $41 = (($11) + 1)|0;
    $42 = ((($0)) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($41<<1)|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = (($11) + 2)|0;
    $48 = (($44) + ($47<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = (($11) + 3)|0;
    $51 = (($44) + ($50<<1)|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = HEAP32[$3>>2]|0;
    _lily_u16_write_4($53,48,$46,$49,$52);
    $54 = (($11) + 4)|0;
    $55 = ($17|0)==(-1);
    if (!($55)) {
     $56 = HEAP32[$3>>2]|0;
     $57 = $17&65535;
     _lily_u16_write_4($56,59,$46,$57,$52);
     $58 = ((($0)) + 20|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + ($17<<2)|0);
     HEAP32[$60>>2] = 0;
    }
    $61 = HEAP32[$8>>2]|0;
    $62 = ((($61)) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (_lily_find_property($63,3173)|0);
    $65 = ($64|0)==(0|0);
    if ($65) {
     $$0 = $54;
    } else {
     $66 = HEAP32[$3>>2]|0;
     $67 = ((($64)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68&65535;
     $70 = HEAP32[$27>>2]|0;
     $71 = $70&65535;
     _lily_u16_write_5($66,50,$46,$69,$52,$71);
     $$0 = $54;
    }
   } else {
    $$0 = $11;
   }
  } else {
   $72 = HEAP32[$8>>2]|0;
   $73 = ((($72)) + 52|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(0|0);
   if (!($75)) {
    $76 = ((($74)) + 18|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = ($77<<16>>16)==(12);
    if ($78) {
     $79 = ((($72)) + 18|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = ($80<<16>>16)==(13);
     if ($81) {
      $116 = HEAP32[$3>>2]|0;
      $117 = ((($1)) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $118&65535;
      $120 = ((($16)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121&65535;
      _lily_u16_write_4($116,63,$119,0,$122);
      $123 = HEAP32[$8>>2]|0;
      $124 = ((($123)) + 44|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)==(0|0);
      if ($126) {
       $$0 = $11;
       break;
      }
      $127 = HEAP32[$3>>2]|0;
      $128 = ((($0)) + 88|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = HEAP32[$129>>2]|0;
      $131 = $130&65535;
      $132 = $17&65535;
      $133 = ((($125)) + 8|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $134&65535;
      _lily_u16_write_4($127,58,$131,$132,$135);
      $$0 = $11;
      break;
     }
     $82 = ((($72)) + 40|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_lily_find_property($83,3173)|0);
     $85 = ((($83)) + 32|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($84|0)==(0|0);
     if ($87) {
      label = 16;
     } else {
      $88 = ($86|0)==(0|0);
      if ($88) {
       $$0312 = $84;
      } else {
       $89 = ((($84)) + 8|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ((($86)) + 48|0);
       $92 = HEAP16[$91>>1]|0;
       $93 = $92&65535;
       $94 = ($90>>>0)>($93>>>0);
       if ($94) {
        $$0312 = $84;
       } else {
        label = 16;
       }
      }
     }
     if ((label|0) == 16) {
      $95 = ((($0)) + 112|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($16)) + 12|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (_lily_add_class_property($96,$83,$98,3173,0)|0);
      $$0312 = $99;
     }
     $100 = HEAP32[$3>>2]|0;
     $101 = ((($1)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102&65535;
     $104 = ((($$0312)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105&65535;
     $107 = HEAP32[$8>>2]|0;
     $108 = ((($107)) + 44|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($109)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = $111&65535;
     $113 = ((($16)) + 8|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114&65535;
     _lily_u16_write_5($100,62,$103,$106,$112,$115);
     $$0 = $11;
     break;
    }
   }
   $136 = HEAP32[$3>>2]|0;
   $137 = ((($1)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138&65535;
   _lily_u16_write_2($136,63,$139);
   _write_closure_zap($0);
   $140 = HEAP32[$3>>2]|0;
   $141 = ((($16)) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142&65535;
   _lily_u16_write_1($140,$143);
   $$0 = $11;
  }
 } while(0);
 _ensure_params_in_closure($0);
 _setup_transform_table($0);
 $144 = HEAP16[$18>>1]|0;
 $145 = ($144<<16>>16)==(2);
 if ($145) {
  $146 = ((($0)) + 44|0);
  HEAP16[$146>>1] = 0;
 }
 $147 = ((($0)) + 12|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = HEAP32[$148>>2]|0;
 $150 = $$0&65535;
 $151 = ((($148)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $152&65535;
 _lily_ci_init($2,$149,$150,$153);
 $154 = ((($0)) + 24|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$2>>2]|0;
 $157 = HEAP32[$0>>2]|0;
 $158 = ((($157)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $159&65535;
 $161 = (_lily_ci_next($2)|0);
 $162 = ($161|0)==(0);
 if (!($162)) {
  $163 = ((($2)) + 26|0);
  $164 = ((($2)) + 4|0);
  $165 = ((($2)) + 8|0);
  $166 = $159 & 65535;
  while(1) {
   $167 = HEAP16[$163>>1]|0;
   $168 = ($167<<16>>16)==(0);
   if (!($168)) {
    $171 = HEAP16[$164>>1]|0;
    $172 = $171&65535;
    $173 = HEAP16[$165>>1]|0;
    $174 = $173&65535;
    $175 = (($174) + ($172))|0;
    $176 = $167&65535;
    $177 = (($175) - ($176))|0;
    $$031543 = $177;
    while(1) {
     $178 = (($156) + ($$031543<<1)|0);
     $179 = HEAP16[$178>>1]|0;
     $180 = ($179<<16>>16)==(0);
     if (!($180)) {
      $181 = $179 << 16 >> 16;
      $182 = HEAP32[$0>>2]|0;
      $183 = HEAP16[$164>>1]|0;
      $184 = $183&65535;
      $185 = (($184) + ($181))|0;
      _maybe_add_jump($182,$166,$185);
     }
     $186 = (($$031543) + 1)|0;
     $187 = ($186|0)<($175|0);
     if ($187) {
      $$031543 = $186;
     } else {
      break;
     }
    }
   }
   $169 = (_lily_ci_next($2)|0);
   $170 = ($169|0)==(0);
   if ($170) {
    break;
   }
  }
 }
 $188 = HEAP32[$0>>2]|0;
 _lily_u16_write_2($188,-1,0);
 $189 = HEAP32[$0>>2]|0;
 $190 = ((($189)) + 4|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $159 & 65535;
 $193 = HEAP32[$189>>2]|0;
 $194 = (($193) + ($192<<1)|0);
 $195 = HEAP16[$194>>1]|0;
 $196 = HEAP32[$147>>2]|0;
 $197 = HEAP32[$196>>2]|0;
 $198 = ((($196)) + 4|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = $199&65535;
 _lily_ci_init($2,$197,$150,$200);
 $201 = (_lily_ci_next($2)|0);
 $202 = ($201|0)==(0);
 L44: do {
  if (!($202)) {
   $203 = ((($2)) + 4|0);
   $204 = ((($2)) + 12|0);
   $205 = ((($2)) + 14|0);
   $206 = ((($2)) + 16|0);
   $207 = ((($2)) + 18|0);
   $208 = ((($2)) + 20|0);
   $209 = ((($2)) + 22|0);
   $210 = ((($2)) + 24|0);
   $211 = ((($2)) + 8|0);
   $212 = ((($2)) + 26|0);
   $213 = ((($1)) + 4|0);
   $214 = ((($0)) + 92|0);
   $215 = ((($1)) + 4|0);
   $216 = ((($0)) + 92|0);
   $217 = ((($1)) + 4|0);
   $218 = ((($16)) + 8|0);
   $219 = ((($1)) + 4|0);
   $$032638 = $160;$$032837 = $195;
   while(1) {
    $220 = HEAP16[$203>>1]|0;
    $221 = $220&65535;
    $222 = (($156) + ($221<<1)|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223&65535;
    $225 = (($221) + 1)|0;
    $226 = HEAP16[$204>>1]|0;
    $227 = $226&65535;
    $228 = (($225) + ($227))|0;
    $229 = HEAP16[$205>>1]|0;
    $230 = ($229<<16>>16)==(0);
    L48: do {
     if ($230) {
      $$0321 = $228;
     } else {
      switch ($223<<16>>16) {
      case 61:  {
       $231 = HEAP32[$218>>2]|0;
       $232 = $231&65535;
       $233 = (($156) + ($228<<1)|0);
       HEAP16[$233>>1] = $232;
       $234 = (($228) + 1)|0;
       $$0321 = $234;
       break L48;
       break;
      }
      case 56: case 30:  {
       label = 36;
       break;
      }
      default: {
      }
      }
      if ((label|0) == 36) {
       label = 0;
       $235 = (($156) + ($228<<1)|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = $236&65535;
       $238 = (($155) + ($237<<1)|0);
       $239 = HEAP16[$238>>1]|0;
       $240 = ($239<<16>>16)==(-1);
       if (!($240)) {
        $241 = HEAP32[$3>>2]|0;
        $242 = HEAP32[$219>>2]|0;
        $243 = $242&65535;
        _lily_u16_write_4($241,58,$243,$239,$236);
       }
      }
      $244 = HEAP16[$205>>1]|0;
      $245 = $244&65535;
      $246 = (($245) + ($228))|0;
      $$0321 = $246;
     }
    } while(0);
    $247 = HEAP16[$206>>1]|0;
    $248 = $247&65535;
    $249 = (($248) + ($$0321))|0;
    $250 = HEAP16[$207>>1]|0;
    $251 = ($250<<16>>16)==(0);
    if ($251) {
     $$1322 = $249;
    } else {
     $252 = HEAP16[$207>>1]|0;
     $253 = $252&65535;
     $254 = ($252<<16>>16)==(0);
     if ($254) {
      $$lcssa12 = $253;
     } else {
      $$131616 = 0;
      while(1) {
       $255 = (($$131616) + ($249))|0;
       $256 = (($156) + ($255<<1)|0);
       $257 = HEAP16[$256>>1]|0;
       $258 = $257&65535;
       $259 = (($155) + ($258<<1)|0);
       $260 = HEAP16[$259>>1]|0;
       $261 = ($260<<16>>16)==(-1);
       if (!($261)) {
        $262 = HEAP32[$3>>2]|0;
        $263 = HEAP32[$217>>2]|0;
        $264 = $263&65535;
        _lily_u16_write_4($262,58,$264,$260,$257);
       }
       $265 = (($$131616) + 1)|0;
       $266 = HEAP16[$207>>1]|0;
       $267 = $266&65535;
       $268 = ($265|0)<($267|0);
       if ($268) {
        $$131616 = $265;
       } else {
        $$lcssa12 = $267;
        break;
       }
      }
     }
     $269 = (($$lcssa12) + ($249))|0;
     $$1322 = $269;
    }
    $270 = HEAP16[$208>>1]|0;
    $271 = ($270<<16>>16)==(0);
    if ($271) {
     $$2323 = $$1322;
    } else {
     $$off = (($224) + -61)|0;
     $switch1 = ($$off>>>0)<(3);
     if (!($switch1)) {
      label = 48;
      break;
     }
     $272 = $270&65535;
     $273 = (($272) + ($$1322))|0;
     $$2323 = $273;
    }
    $275 = HEAP16[$209>>1]|0;
    $276 = ($275<<16>>16)==(0);
    $277 = $275&65535;
    $$0331 = $276 ? 0 : $$2323;
    $$3324 = (($277) + ($$2323))|0;
    $278 = HEAP16[$210>>1]|0;
    $279 = ($278<<16>>16)==(0);
    if (!($279)) {
     $280 = HEAP16[$203>>1]|0;
     $281 = $280&65535;
     $282 = (($156) + ($281<<1)|0);
     $283 = HEAP16[$282>>1]|0;
     $284 = $283&65535;
     $$off2 = (($284) + -28)|0;
     $switch3 = ($$off2>>>0)<(3);
     if (!($switch3)) {
      label = 55;
      break;
     }
     $285 = HEAP16[$210>>1]|0;
     $286 = ($285<<16>>16)==(0);
     if (!($286)) {
      $$231722 = 0;
      while(1) {
       $287 = (($$3324) + ($$231722))|0;
       $288 = (($156) + ($287<<1)|0);
       $289 = HEAP16[$288>>1]|0;
       $290 = $289&65535;
       $291 = (($155) + ($290<<1)|0);
       $292 = HEAP16[$291>>1]|0;
       $293 = ($292<<16>>16)==(-1);
       if (!($293)) {
        $294 = HEAP32[$3>>2]|0;
        $295 = HEAP32[$215>>2]|0;
        $296 = $295&65535;
        _lily_u16_write_4($294,58,$296,$292,$289);
       }
       $297 = (($$231722) + 1)|0;
       $298 = HEAP16[$210>>1]|0;
       $299 = $298&65535;
       $300 = ($297|0)<($299|0);
       if ($300) {
        $$231722 = $297;
       } else {
        break;
       }
      }
     }
    }
    $302 = HEAP16[$203>>1]|0;
    $303 = $302&65535;
    $304 = ($302<<16>>16)==($$032837<<16>>16);
    if ($304) {
     $305 = HEAP32[$3>>2]|0;
     $306 = ((($305)) + 4|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = $307&65535;
     $309 = $$032638&65535;
     $310 = (($309) + 1)|0;
     $311 = HEAP32[$0>>2]|0;
     $312 = HEAP32[$311>>2]|0;
     $313 = (($312) + ($310<<1)|0);
     HEAP16[$313>>1] = $308;
     $314 = (($309) + 2)|0;
     $315 = $314&65535;
     $316 = $314 & 65535;
     $317 = HEAP32[$0>>2]|0;
     $318 = HEAP32[$317>>2]|0;
     $319 = (($318) + ($316<<1)|0);
     $320 = HEAP16[$319>>1]|0;
     $$1327 = $315;$$1329 = $320;
    } else {
     $$1327 = $$032638;$$1329 = $$032837;
    }
    $321 = HEAP16[$203>>1]|0;
    $322 = $321&65535;
    $323 = HEAP16[$211>>1]|0;
    $324 = $323&65535;
    $325 = (($324) + ($322))|0;
    $326 = HEAP16[$212>>1]|0;
    $327 = $326&65535;
    $328 = (($325) - ($327))|0;
    $329 = ($303|0)<($328|0);
    if ($329) {
     $$331826 = $303;
     while(1) {
      $330 = HEAP32[$3>>2]|0;
      $331 = (($156) + ($$331826<<1)|0);
      $332 = HEAP16[$331>>1]|0;
      _lily_u16_write_1($330,$332);
      $333 = (($$331826) + 1)|0;
      $exitcond = ($333|0)==($328|0);
      if ($exitcond) {
       break;
      } else {
       $$331826 = $333;
      }
     }
     $$pr = HEAP16[$212>>1]|0;
     $334 = $$pr;
    } else {
     $334 = $326;
    }
    $335 = ($334<<16>>16)==(0);
    if (!($335)) {
     $336 = HEAP16[$212>>1]|0;
     $337 = ($336<<16>>16)==(0);
     if (!($337)) {
      $338 = $336&65535;
      $$033030 = 0;$355 = $338;
      while(1) {
       $339 = (($$033030) + ($328))|0;
       $340 = (($156) + ($339<<1)|0);
       $341 = HEAP16[$340>>1]|0;
       $342 = ($341<<16>>16)==(0);
       if ($342) {
        $360 = HEAP32[$3>>2]|0;
        _lily_u16_write_1($360,0);
       } else {
        $343 = $341&65535;
        $344 = HEAP16[$203>>1]|0;
        $345 = $344&65535;
        $346 = (($345) + ($343))|0;
        $347 = HEAP32[$0>>2]|0;
        $348 = HEAP32[$3>>2]|0;
        $349 = ((($348)) + 4|0);
        $350 = HEAP32[$349>>2]|0;
        $351 = $350&65535;
        $352 = HEAP16[$211>>1]|0;
        $353 = $352&65535;
        $354 = (($$033030) - ($355))|0;
        $356 = (($354) + ($353))|0;
        $357 = $356&65535;
        _lily_u16_write_2($347,$351,$357);
        $358 = HEAP32[$3>>2]|0;
        $359 = $346&65535;
        _lily_u16_write_1($358,$359);
       }
       $361 = (($$033030) + 1)|0;
       $362 = HEAP16[$212>>1]|0;
       $363 = $362&65535;
       $364 = ($361|0)<($363|0);
       if ($364) {
        $$033030 = $361;$355 = $363;
       } else {
        break;
       }
      }
     }
    }
    $365 = HEAP16[$209>>1]|0;
    $366 = ($365<<16>>16)==(0);
    if (!($366)) {
     $369 = $365&65535;
     $370 = (($369) + ($$0331))|0;
     $$431932 = $$0331;
     while(1) {
      $371 = (($156) + ($$431932<<1)|0);
      $372 = HEAP16[$371>>1]|0;
      $373 = $372&65535;
      $374 = (($155) + ($373<<1)|0);
      $375 = HEAP16[$374>>1]|0;
      $376 = ($375<<16>>16)==(-1);
      if (!($376)) {
       $377 = HEAP32[$3>>2]|0;
       $378 = HEAP32[$213>>2]|0;
       $379 = $378&65535;
       _lily_u16_write_4($377,59,$379,$375,$372);
      }
      $380 = (($$431932) + 1)|0;
      $381 = ($380|0)<($370|0);
      if ($381) {
       $$431932 = $380;
      } else {
       break;
      }
     }
    }
    $367 = (_lily_ci_next($2)|0);
    $368 = ($367|0)==(0);
    if ($368) {
     break L44;
    } else {
     $$032638 = $$1327;$$032837 = $$1329;
    }
   }
   if ((label|0) == 48) {
    $274 = HEAP32[$216>>2]|0;
    HEAP32[$vararg_buffer>>2] = $224;
    _lily_raise_syn($274,3182,$vararg_buffer);
    // unreachable;
   }
   else if ((label|0) == 55) {
    $301 = HEAP32[$214>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $284;
    _lily_raise_syn($301,3226,$vararg_buffer1);
    // unreachable;
   }
  }
 } while(0);
 $382 = $191 & 65535;
 $383 = HEAP32[$0>>2]|0;
 $384 = ((($383)) + 4|0);
 $385 = HEAP32[$384>>2]|0;
 $386 = ($382>>>0)<($385>>>0);
 if (!($386)) {
  $$lcssa = $384;
  HEAP32[$$lcssa>>2] = $192;
  STACKTOP = sp;return;
 }
 $387 = ($192>>>0)<($382>>>0);
 $$032014 = $382;$389 = $383;
 while(1) {
  $388 = HEAP32[$389>>2]|0;
  $390 = (($388) + ($$032014<<1)|0);
  $391 = HEAP16[$390>>1]|0;
  $392 = $391&65535;
  $393 = HEAP32[$3>>2]|0;
  $394 = HEAP32[$393>>2]|0;
  $395 = (($394) + ($392<<1)|0);
  $396 = HEAP16[$395>>1]|0;
  $397 = $396&65535;
  L115: do {
   if ($387) {
    $398 = HEAP32[$0>>2]|0;
    $399 = HEAP32[$398>>2]|0;
    $$031313 = $192;
    while(1) {
     $400 = (($399) + ($$031313<<1)|0);
     $401 = HEAP16[$400>>1]|0;
     $402 = ($396<<16>>16)==($401<<16>>16);
     if ($402) {
      break;
     }
     $421 = (($$031313) + 2)|0;
     $422 = ($421|0)<($382|0);
     if ($422) {
      $$031313 = $421;
     } else {
      break L115;
     }
    }
    $403 = (_count_transforms($0,$397)|0);
    $404 = $403 << 2;
    $405 = (($$031313) + 1)|0;
    $406 = HEAP32[$0>>2]|0;
    $407 = HEAP32[$406>>2]|0;
    $408 = (($407) + ($405<<1)|0);
    $409 = HEAP16[$408>>1]|0;
    $410 = $409&65535;
    $411 = (($$032014) + 1)|0;
    $412 = (($407) + ($411<<1)|0);
    $413 = HEAP16[$412>>1]|0;
    $414 = $413&65535;
    $sum = (($404) + ($392))|0;
    $415 = (($410) - ($sum))|0;
    $416 = (($415) + ($414))|0;
    $417 = $416&65535;
    $418 = HEAP32[$3>>2]|0;
    $419 = HEAP32[$418>>2]|0;
    $420 = (($419) + ($392<<1)|0);
    HEAP16[$420>>1] = $417;
   }
  } while(0);
  $423 = (($$032014) + 2)|0;
  $424 = HEAP32[$0>>2]|0;
  $425 = ((($424)) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = ($423>>>0)<($426>>>0);
  if ($427) {
   $$032014 = $423;$389 = $424;
  } else {
   $$lcssa = $425;
   break;
  }
 }
 HEAP32[$$lcssa>>2] = $192;
 STACKTOP = sp;return;
}
function _find_closed_self_spot($0) {
 $0 = $0|0;
 var $$01417 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $$2 = -1;
  return ($$2|0);
 }
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $$01417 = 0;
 while(1) {
  $6 = (($5) + ($$01417<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($7)) + 4|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10<<16>>16)==(1);
   if (!($11)) {
    $$2 = $$01417;
    label = 6;
    break;
   }
  }
  $12 = (($$01417) + 1)|0;
  $13 = HEAP16[$1>>1]|0;
  $14 = $13&65535;
  $15 = ($12|0)<($14|0);
  if ($15) {
   $$01417 = $12;
  } else {
   $$2 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$2|0);
 }
 return (0)|0;
}
function _write_closure_zap($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02627 = 0, $$028 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_u16_write_1($2,0);
 $5 = ((($0)) + 44|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  $$0$lcssa = 0;
  $29 = $$0$lcssa&65535;
  $30 = HEAP32[$1>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($4<<1)|0);
  HEAP16[$32>>1] = $29;
  return;
 }
 $8 = ((($0)) + 20|0);
 $9 = ((($0)) + 82|0);
 $$02627 = 0;$$028 = 0;
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + ($$02627<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$2 = $$028;
  } else {
   $14 = ((($12)) + 4|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = ($15<<16>>16)==(1);
   if ($16) {
    $17 = ((($12)) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP16[$9>>1]|0;
    $20 = $19&65535;
    $21 = ($18|0)==($20|0);
    if ($21) {
     $22 = (($$028) + 1)|0;
     $23 = HEAP32[$1>>2]|0;
     $24 = $$02627&65535;
     _lily_u16_write_1($23,$24);
     $$2 = $22;
    } else {
     $$2 = $$028;
    }
   } else {
    $$2 = $$028;
   }
  }
  $25 = (($$02627) + 1)|0;
  $26 = HEAP16[$5>>1]|0;
  $27 = $26&65535;
  $28 = ($25|0)<($27|0);
  if ($28) {
   $$02627 = $25;$$028 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 $29 = $$0$lcssa&65535;
 $30 = HEAP32[$1>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($4<<1)|0);
 HEAP16[$32>>1] = $29;
 return;
}
function _ensure_params_in_closure($0) {
 $0 = $0|0;
 var $$0 = 0, $$019 = 0, $$020 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 10|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + -1)|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ((($0)) + 112|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $$019 = HEAP32[$16>>2]|0;
 $17 = ($$019|0)==($4|0);
 if ($17) {
  return;
 }
 $18 = ((($0)) + 16|0);
 $19 = ((($4)) + 32|0);
 $$020 = $$019;
 while(1) {
  $20 = ((($$020)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & 4;
  $23 = ($22<<16>>16)==(0);
  if (!($23)) {
   $24 = ((($$020)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25>>>0)<($10>>>0);
   if ($26) {
    $27 = HEAP32[$18>>2]|0;
    $28 = HEAP32[$19>>2]|0;
    $29 = $28&65535;
    $30 = (_find_closed_sym_spot($0,$$020)|0);
    $31 = $30&65535;
    $32 = $25&65535;
    _lily_u16_write_4($27,59,$29,$31,$32);
   }
  }
  $$0 = HEAP32[$$020>>2]|0;
  $33 = ($$0|0)==($4|0);
  if ($33) {
   break;
  } else {
   $$020 = $$0;
  }
 }
 return;
}
function _setup_transform_table($0) {
 $0 = $0|0;
 var $$028 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7>>>0)<(0);
 $13 = ($4>>>0)<($11>>>0);
 $14 = ($7|0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  $17 = ((($0)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $11 << 1;
  $20 = (_lily_realloc($18,$19)|0);
  HEAP32[$17>>2] = $20;
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = $24;
  HEAP32[$25>>2] = $23;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
 }
 $28 = ((($0)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 << 1;
 _memset(($29|0),-1,($33|0))|0;
 $34 = ((($0)) + 44|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ($35<<16>>16)==(0);
 if ($36) {
  return;
 }
 $37 = ((($0)) + 20|0);
 $38 = ((($0)) + 82|0);
 $$028 = 0;
 while(1) {
  $39 = HEAP32[$37>>2]|0;
  $40 = (($39) + ($$028<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = ((($41)) + 4|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = ($44<<16>>16)==(1);
   if ($45) {
    $46 = ((($41)) + 36|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP16[$38>>1]|0;
    $49 = $48&65535;
    $50 = ($47|0)==($49|0);
    if ($50) {
     $51 = $$028&65535;
     $52 = ((($41)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP32[$28>>2]|0;
     $55 = (($54) + ($53<<1)|0);
     HEAP16[$55>>1] = $51;
     $56 = HEAP32[$37>>2]|0;
     $57 = (($56) + ($$028<<2)|0);
     HEAP32[$57>>2] = 0;
    }
   }
  }
  $58 = (($$028) + 1)|0;
  $59 = HEAP16[$34>>1]|0;
  $60 = $59&65535;
  $61 = ($58|0)<($60|0);
  if ($61) {
   $$028 = $58;
  } else {
   break;
  }
 }
 return;
}
function _maybe_add_jump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>($1|0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $$02023 = $1;
   while(1) {
    $7 = (($6) + ($$02023<<1)|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8&65535;
    $10 = ($9|0)>($2|0);
    if ($10) {
     break;
    }
    $not$ = ($9|0)==($2|0);
    if ($not$) {
     label = 8;
     break;
    }
    $12 = (($$02023) + 2)|0;
    $13 = ($12|0)<($4|0);
    if ($13) {
     $$02023 = $12;
    } else {
     break L1;
    }
   }
   if ((label|0) == 8) {
    return;
   }
   _lily_u16_inject($0,$$02023,0);
   $11 = $2&65535;
   _lily_u16_inject($0,$$02023,$11);
   return;
  }
 } while(0);
 $14 = $2&65535;
 _lily_u16_write_2($0,$14,0);
 return;
}
function _count_transforms($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$04857 = 0, $$049 = 0, $$055 = 0, $$1$ = 0, $$156 = 0, $$3 = 0, $$4$ = 0, $$454 = 0, $$6 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$50 = 0, $not$51 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1&65535;
 $7 = ((($4)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 _lily_ci_init($2,$5,$6,$9);
 (_lily_ci_next($2)|0);
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($10) + ($15<<1)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = (($15) + 1)|0;
 $19 = ((($2)) + 12|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($18) + ($21))|0;
 switch ($17<<16>>16) {
 case 30: case 56:  {
  $23 = (($10) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = (($12) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $not$ = ($27<<16>>16)!=(-1);
  $$ = $not$&1;
  $$049 = $$;
  break;
 }
 default: {
  $$049 = 0;
 }
 }
 $28 = ((($2)) + 14|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = ((($2)) + 16|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($30) + ($22))|0;
 $35 = (($34) + ($33))|0;
 $36 = ((($2)) + 18|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($37<<16>>16)==(0);
 if ($38) {
  $$3 = $$049;
 } else {
  $39 = HEAP16[$36>>1]|0;
  $40 = $39&65535;
  $$04857 = 0;$$156 = $$049;
  while(1) {
   $41 = (($$04857) + ($35))|0;
   $42 = (($10) + ($41<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43&65535;
   $45 = (($12) + ($44<<1)|0);
   $46 = HEAP16[$45>>1]|0;
   $not$51 = ($46<<16>>16)!=(-1);
   $47 = $not$51&1;
   $$1$ = (($47) + ($$156))|0;
   $48 = (($$04857) + 1)|0;
   $49 = ($48|0)<($40|0);
   if ($49) {
    $$04857 = $48;$$156 = $$1$;
   } else {
    $$3 = $$1$;
    break;
   }
  }
 }
 $50 = HEAP16[$36>>1]|0;
 $51 = $50&65535;
 $52 = ((($2)) + 20|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = ((($2)) + 22|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $$off = (($17) + -28)<<16>>16;
 $switch = ($$off&65535)<(3);
 if (!($switch)) {
  $$6 = $$3;
  STACKTOP = sp;return ($$6|0);
 }
 $58 = ((($2)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59<<16>>16)==(0);
 if ($60) {
  $$6 = $$3;
  STACKTOP = sp;return ($$6|0);
 }
 $61 = (($51) + ($35))|0;
 $62 = (($61) + ($54))|0;
 $63 = (($62) + ($57))|0;
 $64 = HEAP16[$58>>1]|0;
 $65 = $64&65535;
 $$055 = 0;$$454 = $$3;
 while(1) {
  $66 = (($63) + ($$055))|0;
  $67 = (($10) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = (($12) + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $not$50 = ($71<<16>>16)!=(-1);
  $72 = $not$50&1;
  $$4$ = (($72) + ($$454))|0;
  $73 = (($$055) + 1)|0;
  $74 = ($73|0)<($65|0);
  if ($74) {
   $$055 = $73;$$454 = $$4$;
  } else {
   $$6 = $$4$;
   break;
  }
 }
 STACKTOP = sp;return ($$6|0);
}
function _find_closed_sym_spot($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $$09 = -1;
  return ($$09|0);
 }
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $$010 = 0;
 while(1) {
  $7 = (($6) + ($$010<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$09 = $$010;
   label = 5;
   break;
  }
  $10 = (($$010) + 1)|0;
  $11 = HEAP16[$2>>1]|0;
  $12 = $11&65535;
  $13 = ($10|0)<($12|0);
  if ($13) {
   $$010 = $10;
  } else {
   $$09 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$09|0);
 }
 return (0)|0;
}
function _lily_emit_change_block_to($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$055 = 0, $$off = 0, $$off56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($3)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)==($11|0);
 if (!($12)) {
  $13 = ((($3)) + 17|0);
  HEAP8[$13>>0] = 0;
 }
 $$off = (($1) + -1)|0;
 $14 = ($$off>>>0)<(2);
 L4: do {
  if ($14) {
   $15 = ($5<<16>>16)==(2);
   if ($15) {
    $16 = ($1|0)==(1);
    $$ = $16 ? 6516 : 6511;
    $17 = ((($0)) + 92|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[$vararg_buffer>>2] = $$;
    _lily_raise_syn($18,3270,$vararg_buffer);
    // unreachable;
   }
  } else {
   $$off56 = (($1) + -7)|0;
   $19 = ($$off56>>>0)<(2);
   if ($19) {
    switch ($5<<16>>16) {
    case 8:  {
     $20 = ((($0)) + 92|0);
     $21 = HEAP32[$20>>2]|0;
     _lily_raise_syn($21,3289,$vararg_buffer1);
     // unreachable;
     break;
    }
    case 6:  {
     $22 = HEAP32[$8>>2]|0;
     _lily_u16_write_1($22,52);
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
   }
  }
 } while(0);
 $23 = HEAP32[$3>>2]|0;
 $24 = ((($0)) + 112|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($23|0)==($29|0);
 if (!($30)) {
  _lily_hide_block_vars($25,$23);
 }
 $31 = HEAP32[$6>>2]|0;
 $32 = HEAP32[$8>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31|0)==($34|0);
 if ($35) {
  $$055 = -1;
 } else {
  _lily_u16_write_2($32,24,1);
  $36 = HEAP32[$8>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + -1)|0;
  $$055 = $39;
 }
 $40 = HEAP32[$0>>2]|0;
 $41 = (_lily_u16_pop($40)|0);
 $42 = $41&65535;
 $43 = ($41<<16>>16)==(0);
 if (!($43)) {
  $44 = HEAP32[$8>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = ((($44)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) - ($42))|0;
  $52 = (($51) + ($50))|0;
  $53 = $52&65535;
  HEAP16[$46>>1] = $53;
 }
 $54 = ($$055|0)==(-1);
 if ($54) {
  $57 = HEAP32[$2>>2]|0;
  $58 = ((($57)) + 18|0);
  $59 = $1&65535;
  HEAP16[$58>>1] = $59;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$0>>2]|0;
 $56 = $$055&65535;
 _lily_u16_write_1($55,$56);
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + 18|0);
 $59 = $1&65535;
 HEAP16[$58>>1] = $59;
 STACKTOP = sp;return;
}
function _lily_emit_variant_decompose($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_u16_pop($1)|0);
 $3 = $2&65535;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 88|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 _lily_u16_write_2($7,57,$11);
 $12 = ($3|0)<($5|0);
 if (!($12)) {
  return;
 }
 $$012 = $3;
 while(1) {
  $13 = HEAP32[$6>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($$012<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  _lily_u16_write_1($13,$16);
  $17 = (($$012) + 1)|0;
  $exitcond = ($17|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$012 = $17;
  }
 }
 return;
}
function _lily_emit_add_match_case($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03638 = 0, $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 52|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($5&65535)<($8&65535);
 L1: do {
  if ($9) {
   $10 = ((($0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $$03638 = $6;
   while(1) {
    $16 = (($11) + ($$03638<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    $14 = (($$03638) + 1)|0;
    if ($18) {
     $$0 = 1;
     break L1;
    }
    $12 = HEAP16[$7>>1]|0;
    $13 = $12&65535;
    $15 = ($14|0)<($13|0);
    if ($15) {
     $$03638 = $14;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($21|0)!=($25|0);
 $or$cond = $$0 & $26;
 if ($or$cond) {
  $27 = ((($19)) + 17|0);
  HEAP8[$27>>0] = 0;
 }
 $28 = (($6) + ($1))|0;
 $29 = ((($0)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($28<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$037 = 0;
  return ($$037|0);
 }
 HEAP32[$31>>2] = 1;
 if ($$0) {
  _write_match_exit_jump($0);
 }
 _write_match_jump($0,$1);
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 112|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($35|0)==($41|0);
 if ($42) {
  $$037 = 1;
  return ($$037|0);
 }
 _lily_hide_block_vars($37,$35);
 $$037 = 1;
 return ($$037|0);
}
function _write_match_exit_jump($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_u16_write_2($2,24,1);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 65535)|0;
 $8 = $7&65535;
 _lily_u16_write_1($3,$8);
 return;
}
function _write_match_jump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1))|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (5 - ($5))|0;
 $12 = (($11) + ($10))|0;
 $13 = $12&65535;
 $14 = HEAP32[$8>>2]|0;
 $15 = (($14) + ($6<<1)|0);
 HEAP16[$15>>1] = $13;
 return;
}
function _lily_emit_do_match_else($0) {
 $0 = $0|0;
 var $$ = 0, $$032$ = 0, $$03235 = 0, $$03334 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 _write_match_exit_jump($0);
 $10 = ((($0)) + 52|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($4&65535)<($11&65535);
 if ($12) {
  $$03235 = 0;$$03334 = $5;
 } else {
  $23 = ($9|0)==(1);
  $$ = $23 ? 3321 : 3356;
  $24 = ((($0)) + 92|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_raise_syn($25,$$,$vararg_buffer);
  // unreachable;
 }
 while(1) {
  $13 = HEAP32[$6>>2]|0;
  $14 = (($13) + ($$03334<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($9|0);
  $$032$ = $16 ? $$03235 : 1;
  $17 = ($15|0)==(0);
  if ($17) {
   $18 = (($$03334) - ($5))|0;
   HEAP32[$14>>2] = 1;
   _write_match_jump($0,$18);
  }
  $19 = (($$03334) + 1)|0;
  $20 = HEAP16[$10>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if ($22) {
   $$03235 = $$032$;$$03334 = $19;
  } else {
   break;
  }
 }
 $phitmp = ($$032$|0)==(0);
 if ($phitmp) {
  $23 = ($9|0)==(1);
  $$ = $23 ? 3321 : 3356;
  $24 = ((($0)) + 92|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_raise_syn($25,$$,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _lily_emit_eval_match_expr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$044 = 0, $$143 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond48 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 _eval_enforce_value($0,$2,0,3405);
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 4;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $14 = ((($0)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_raise_syn($15,3436,$vararg_buffer);
  // unreachable;
 }
 $16 = ((($9)) + 48|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ((($0)) + 52|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($21) + ($18))|0;
 $23 = ((($0)) + 54|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($22>>>0)>($25>>>0);
 if ($26) {
  _grow_match_cases($0);
 }
 $27 = HEAP16[$19>>1]|0;
 $28 = ((($4)) + 12|0);
 HEAP16[$28>>1] = $27;
 $29 = ($17<<16>>16)==(0);
 $30 = HEAP16[$19>>1]|0;
 $31 = $30&65535;
 if ($29) {
  $$lcssa = $31;
 } else {
  $32 = ((($0)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP16[$19>>1]|0;
  $35 = $34&65535;
  $$044 = 0;$37 = $31;
  while(1) {
   $36 = (($37) + ($$044))|0;
   $38 = (($33) + ($36<<2)|0);
   HEAP32[$38>>2] = 0;
   $39 = (($$044) + 1)|0;
   $exitcond48 = ($39|0)==($18|0);
   if ($exitcond48) {
    $$lcssa = $35;
    break;
   } else {
    $$044 = $39;$37 = $35;
   }
  }
 }
 $40 = (($$lcssa) + ($18))|0;
 $41 = $40&65535;
 HEAP16[$19>>1] = $41;
 $42 = ((($0)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 5)|0;
 $47 = ((($4)) + 28|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$42>>2]|0;
 $49 = (($18) + 5)|0;
 _lily_u16_write_prep($48,$49);
 $50 = HEAP32[$42>>2]|0;
 $51 = ((($0)) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = $53&65535;
 $55 = HEAP32[$2>>2]|0;
 $56 = ((($55)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57&65535;
 $59 = ((($9)) + 8|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = (($61) + 1)|0;
 $63 = $62&65535;
 _lily_u16_write_5($50,56,$54,$58,$63,$17);
 $64 = ($17<<16>>16)==(0);
 if ($64) {
  STACKTOP = sp;return;
 } else {
  $$143 = 0;
 }
 while(1) {
  $65 = HEAP32[$42>>2]|0;
  _lily_u16_write_1($65,0);
  $66 = (($$143) + 1)|0;
  $exitcond = ($66|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $$143 = $66;
  }
 }
 STACKTOP = sp;return;
}
function _eval_enforce_value($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _eval_tree($0,$1,$2);
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,$3,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _grow_match_cases($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 54|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3 << 3;
 $9 = $8 & 262136;
 $10 = (_lily_realloc($7,$9)|0);
 HEAP32[$6>>2] = $10;
 return;
}
function _eval_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc117 = 0, $trunc118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $trunc = $4&255;
 do {
  switch ($trunc<<24>>24) {
  case 17: case 18: case 19: case 6: case 7:  {
   _emit_nonlocal_var($0,$1);
   return;
   break;
  }
  case 16:  {
   _emit_literal($0,$1);
   return;
   break;
  }
  case 26:  {
   _emit_integer($0,$1);
   return;
   break;
  }
  case 25:  {
   _emit_byte($0,$1);
   return;
   break;
  }
  case 24:  {
   _emit_boolean($0,$1);
   return;
   break;
  }
  case 0:  {
   _eval_call($0,$1,$2);
   return;
   break;
  }
  case 27:  {
   $5 = ($4&65535)>(5375);
   if ($5) {
    $6 = ((($1)) + 20|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($7)) + 4|0);
    $9 = HEAP16[$8>>1]|0;
    $10 = $9 & 253;
    $11 = $10 | 2;
    $12 = ($11<<16>>16)==(7);
    L17: do {
     if ($12) {
      _eval_assign($0,$1);
     } else {
      $trunc118 = $9&255;
      switch ($trunc118<<24>>24) {
      case 1:  {
       _eval_sub_assign($0,$1);
       break L17;
       break;
      }
      case 8:  {
       _eval_oo_assign($0,$1);
       break L17;
       break;
      }
      case 13:  {
       _eval_property_assign($0,$1);
       break L17;
       break;
      }
      case 21:  {
       _eval_upvalue_assign($0,$1);
       break L17;
       break;
      }
      default: {
       _eval_assign($0,$1);
       break L17;
      }
      }
     }
    } while(0);
    _assign_post_check($0,$1);
    return;
   }
   $13 = ($4&65535) >>> 8;
   $trunc117 = $13&255;
   switch ($trunc117<<24>>24) {
   case 18: case 19:  {
    _eval_logical_op($0,$1);
    return;
    break;
   }
   case 20:  {
    _eval_func_pipe($0,$1,$2);
    return;
    break;
   }
   default: {
    $14 = ((($1)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 4|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = $17 & 255;
    $19 = ($18<<16>>16)==(5);
    if (!($19)) {
     _eval_tree($0,$15,0);
    }
    $20 = ((($1)) + 24|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23 & 255;
    $25 = ($24<<16>>16)==(5);
    if (!($25)) {
     $26 = HEAP32[$14>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 12|0);
     $29 = HEAP32[$28>>2]|0;
     _eval_tree($0,$21,$29);
    }
    _emit_binary_op($0,$1);
    return;
   }
   }
   break;
  }
  case 4:  {
   $30 = ((($1)) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   _eval_tree($0,$31,$2);
   $32 = ((($31)) + 12|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = ((($1)) + 12|0);
   HEAP16[$34>>1] = $33;
   $35 = HEAP32[$31>>2]|0;
   HEAP32[$1>>2] = $35;
   return;
   break;
  }
  case 9:  {
   _eval_unary_op($0,$1);
   return;
   break;
  }
  case 22:  {
   _eval_interpolation($0,$1);
   return;
   break;
  }
  case 2:  {
   _eval_build_list($0,$1,$2);
   return;
   break;
  }
  case 3:  {
   _eval_build_hash($0,$1,$2);
   return;
   break;
  }
  case 12:  {
   _eval_build_tuple($0,$1,$2);
   return;
   break;
  }
  case 1:  {
   _eval_subscript($0,$1);
   return;
   break;
  }
  case 11:  {
   _eval_typecast($0,$1);
   return;
   break;
  }
  case 8:  {
   _eval_oo_access($0,$1);
   return;
   break;
  }
  case 13:  {
   _eval_property($0,$1);
   return;
   break;
  }
  case 14:  {
   _eval_variant($0,$1,$2);
   return;
   break;
  }
  case 15:  {
   _eval_lambda($0,$1,$2);
   return;
   break;
  }
  case 20:  {
   _eval_self($0,$1);
   return;
   break;
  }
  case 21:  {
   _eval_upvalue($0,$1);
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _emit_nonlocal_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $trunc = $3&255;
 switch ($trunc<<24>>24) {
 case 7:  {
  $$0 = 39;
  break;
 }
 case 19:  {
  $4 = ((($1)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  _ensure_valid_scope($0,$5);
  label = 3;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $$0 = 41;
 }
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_get_storage($0,$9)|0);
 $11 = ($$0|0)==(39);
 if (!($11)) {
  $12 = ((($10)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = $14 | 2;
  $16 = $15&65535;
  HEAP16[$12>>1] = $16;
 }
 $17 = HEAP32[$6>>2]|0;
 $18 = ((($17)) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 & 256;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  $22 = ((($0)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $$0&65535;
  $25 = ((($1)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26&65535;
  $28 = ((($17)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29&65535;
  $31 = ((($10)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32&65535;
  _lily_u16_write_4($23,$24,$27,$30,$33);
  HEAP32[$1>>2] = $10;
  return;
 } else {
  _emit_create_function($0,$17,$10);
  HEAP32[$1>>2] = $10;
  return;
 }
}
function _emit_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_get_storage($0,$3)|0);
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 $10 = ((($1)) + 16|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ((($4)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13&65535;
 _lily_u16_write_4($6,41,$9,$11,$14);
 HEAP32[$1>>2] = $4;
 return;
}
function _emit_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 16|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($8)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 _lily_u16_write_4($10,42,$13,$15,$18);
 HEAP32[$1>>2] = $8;
 return;
}
function _emit_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 16|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($8)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 _lily_u16_write_4($10,44,$13,$15,$18);
 HEAP32[$1>>2] = $8;
 return;
}
function _emit_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 16|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($8)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 _lily_u16_write_4($10,43,$13,$15,$18);
 HEAP32[$1>>2] = $8;
 return;
}
function _eval_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 255;
 $9 = ($8<<16>>16)==(14);
 if ($9) {
  _eval_variant($0,$1,$2);
  STACKTOP = sp;return;
 } else {
  _process_call($0,$3,$1,$2);
  $10 = ((($0)) + 100|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_ts_scope_restore($11,$3);
  STACKTOP = sp;return;
 }
}
function _eval_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$062 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $trunc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $trunc = $5&255;
 switch ($trunc<<24>>24) {
 case 5: case 7:  {
  break;
 }
 default: {
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 16|0);
  HEAP32[$10>>2] = $7;
  $11 = HEAP32[$8>>2]|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13&65535) >>> 8;
  $15 = $14&65535;
  $16 = (_opname($15)|0);
  HEAP32[$vararg_buffer>>2] = $16;
  _lily_raise_syn($11,4587,$vararg_buffer);
  // unreachable;
 }
 }
 $17 = ((($1)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 _eval_tree($0,$18,$22);
 $23 = HEAP32[$2>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = HEAP32[$17>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$25>>2] = $31;
 }
 $32 = HEAP32[$2>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 6|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = $36 & 65534;
 $38 = $37&65535;
 HEAP16[$34>>1] = $38;
 $39 = HEAP32[$2>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$17>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($40)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 8|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = ((($42)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($44|0)==($50|0);
 if (!($51)) {
  $52 = (_type_matchup($0,$44,$41)|0);
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = ((($1)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$43>>2]|0;
   $57 = HEAP32[$49>>2]|0;
   _bad_assign_error($0,$55,$56,$57);
  }
 }
 $$off = (($48) + -1)<<16>>16;
 $not$ = ($$off&65535)>(1);
 $58 = ((($1)) + 4|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59&65535)>(5631);
 if ($60) {
  $61 = HEAP32[$2>>2]|0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 & 255;
  $65 = ($64<<16>>16)==(7);
  if ($65) {
   _eval_tree($0,$61,0);
  }
  _emit_op_for_compound($0,$1);
  $66 = HEAP32[$1>>2]|0;
  $$062 = $66;
 } else {
  $$062 = $42;
 }
 $67 = (_assign_optimize_check($1)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $86 = HEAP32[$2>>2]|0;
  $87 = ((($86)) + 4|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 & 255;
  $90 = ($89<<16>>16)==(7);
  $91 = ((($0)) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $not$&1;
  $94 = $90 ? 40 : $93;
  $95 = ((($1)) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96&65535;
  $98 = ((($$062)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99&65535;
  $101 = ((($40)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102&65535;
  _lily_u16_write_4($92,$94,$97,$100,$103);
  HEAP32[$1>>2] = $$062;
  STACKTOP = sp;return;
 }
 $69 = HEAP32[$17>>2]|0;
 $70 = ((($69)) + 12|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = ($71<<16>>16)==(0);
 if ($72) {
  $73 = ((($0)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + -1)|0;
  $$0 = $77;
 } else {
  $78 = $71&65535;
  $$0 = $78;
 }
 $79 = ((($40)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80&65535;
 $82 = ((($0)) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($$0<<1)|0);
 HEAP16[$85>>1] = $81;
 HEAP32[$1>>2] = $$062;
 STACKTOP = sp;return;
}
function _eval_sub_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_determine_left_type($0,$3)|0);
 $9 = ((($1)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 & 255;
 $14 = ($13<<16>>16)==(5);
 if (!($14)) {
  _eval_tree($0,$10,$8);
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($5)) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & 255;
 $20 = ($19<<16>>16)==(5);
 if (!($20)) {
  _eval_tree($0,$5,0);
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + 6|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 & 2;
  $25 = ($24<<16>>16)==(0);
  if (!($25)) {
   $26 = ((($1)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($0)) + 92|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 16|0);
   HEAP32[$30>>2] = $27;
   $31 = HEAP32[$28>>2]|0;
   $32 = ((($1)) + 4|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = ($33&65535) >>> 8;
   $35 = $34&65535;
   $36 = (_opname($35)|0);
   HEAP32[$vararg_buffer>>2] = $36;
   _lily_raise_syn($31,4587,$vararg_buffer);
   // unreachable;
  }
 }
 $37 = ((($7)) + 4|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 & 255;
 $40 = ($39<<16>>16)==(5);
 if (!($40)) {
  _eval_tree($0,$7,0);
 }
 _check_valid_subscript($0,$5,$7);
 $41 = HEAP32[$5>>2]|0;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_get_subscript_result($0,$43,$7)|0);
 $45 = HEAP32[$9>>2]|0;
 $46 = (_type_matchup($0,$44,$45)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = ((($1)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($0)) + 92|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 16|0);
  HEAP32[$52>>2] = $49;
  $53 = HEAP32[$48>>2]|0;
  $54 = ((($16)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  _bad_assign_error($0,$53,$44,$55);
 }
 $56 = HEAP32[$9>>2]|0;
 $57 = ((($1)) + 4|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = ($58&65535)>(5631);
 if (!($59)) {
  $$pn = $56;
  $$0 = HEAP32[$$pn>>2]|0;
  $78 = ((($0)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($1)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81&65535;
  $83 = HEAP32[$5>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $85&65535;
  $87 = HEAP32[$7>>2]|0;
  $88 = ((($87)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89&65535;
  $91 = ((($$0)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92&65535;
  _lily_u16_write_5($79,38,$82,$86,$90,$93);
  HEAP32[$1>>2] = $$0;
  STACKTOP = sp;return;
 }
 $60 = (_get_storage($0,$44)|0);
 $61 = ((($0)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($1)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64&65535;
 $66 = HEAP32[$5>>2]|0;
 $67 = ((($66)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68&65535;
 $70 = HEAP32[$7>>2]|0;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72&65535;
 $74 = ((($60)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75&65535;
 _lily_u16_write_5($62,37,$65,$69,$73,$76);
 $77 = HEAP32[$2>>2]|0;
 HEAP32[$77>>2] = $60;
 _emit_op_for_compound($0,$1);
 $$pn = $1;
 $$0 = HEAP32[$$pn>>2]|0;
 $78 = ((($0)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($1)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81&65535;
 $83 = HEAP32[$5>>2]|0;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85&65535;
 $87 = HEAP32[$7>>2]|0;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89&65535;
 $91 = ((($$0)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92&65535;
 _lily_u16_write_5($79,38,$82,$86,$90,$93);
 HEAP32[$1>>2] = $$0;
 STACKTOP = sp;return;
}
function _eval_oo_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _eval_oo_access_for_item($0,$3);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _ensure_valid_scope($0,$6);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(4);
 if (!($12)) {
  $13 = ((($1)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 92|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($1)) + 4|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ($20&65535) >>> 8;
  $22 = $21&65535;
  $23 = (_opname($22)|0);
  HEAP32[$vararg_buffer>>2] = $23;
  _lily_raise_syn($18,4587,$vararg_buffer);
  // unreachable;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = (_get_solved_property_type($0,$24)|0);
 $26 = ((($1)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 _eval_tree($0,$27,$25);
 $28 = HEAP32[$26>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($25|0)==($31|0);
 if (!($32)) {
  $33 = (_type_matchup($0,$25,$28)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $35 = ((($1)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($0)) + 92|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 16|0);
   HEAP32[$39>>2] = $36;
   $40 = HEAP32[$35>>2]|0;
   _bad_assign_error($0,$40,$25,$31);
  }
 }
 $41 = ((($1)) + 4|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = ($42&65535)>(5631);
 if ($43) {
  $44 = HEAP32[$2>>2]|0;
  _oo_property_read($0,$44);
  _emit_op_for_compound($0,$1);
  $45 = HEAP32[$1>>2]|0;
  $$0 = $45;
 } else {
  $$0 = $29;
 }
 $46 = ((($0)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($1)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49&65535;
 $51 = HEAP32[$2>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55&65535;
 $57 = ((($51)) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61&65535;
 $63 = ((($$0)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64&65535;
 _lily_u16_write_5($47,50,$50,$56,$62,$65);
 HEAP32[$1>>2] = $$0;
 STACKTOP = sp;return;
}
function _eval_property_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$047 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(13);
 if ($6) {
  _maybe_close_over_class_self($0);
 }
 $7 = ((($1)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 _ensure_valid_scope($0,$10);
 $11 = HEAP32[$7>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 _eval_tree($0,$17,$15);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$7>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 6|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 & 1;
 $28 = ($27<<16>>16)==(0);
 if ($28) {
  $$0 = $15;
 } else {
  $29 = ((($24)) + 12|0);
  HEAP32[$29>>2] = $21;
  $30 = HEAP16[$25>>1]|0;
  $31 = $30&65535;
  $32 = $31 & 65534;
  $33 = $32&65535;
  HEAP16[$25>>1] = $33;
  $$0 = $21;
 }
 $34 = HEAP32[$16>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($$0|0)==($37|0);
 if (!($38)) {
  $39 = (_type_matchup($0,$$0,$34)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = ((($1)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($0)) + 92|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 16|0);
   HEAP32[$45>>2] = $42;
   $46 = HEAP32[$41>>2]|0;
   _bad_assign_error($0,$46,$$0,$21);
  }
 }
 $47 = HEAP32[$16>>2]|0;
 $48 = ((($1)) + 4|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = ($49&65535)>(5631);
 if ($50) {
  $51 = HEAP32[$7>>2]|0;
  _eval_tree($0,$51,0);
  _emit_op_for_compound($0,$1);
  $$pn = $1;
 } else {
  $$pn = $47;
 }
 $$047 = HEAP32[$$pn>>2]|0;
 $52 = ((($0)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($1)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55&65535;
 $57 = HEAP32[$7>>2]|0;
 $58 = ((($57)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61&65535;
 $63 = ((($0)) + 76|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68&65535;
 $70 = ((($$047)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71&65535;
 _lily_u16_write_5($53,50,$56,$62,$69,$72);
 HEAP32[$1>>2] = $$047;
 return;
}
function _eval_upvalue_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$034 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 _eval_tree($0,$3,0);
 $4 = ((($1)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_find_closed_sym_spot($0,$7)|0);
 $9 = ($8|0)==(-1);
 if ($9) {
  _checked_close_over_var($0,$7);
  $10 = ((($0)) + 44|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = (($12) + -1)|0;
  $$0 = $13;
 } else {
  $$0 = $8;
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($1)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16&65535)>(5631);
 if ($17) {
  $18 = HEAP32[$4>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_get_storage($0,$22)|0);
  $24 = ((($0)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27&65535;
  $29 = $$0&65535;
  $30 = ((($23)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31&65535;
  _lily_u16_write_4($25,58,$28,$29,$32);
  $33 = HEAP32[$4>>2]|0;
  HEAP32[$33>>2] = $23;
  _emit_op_for_compound($0,$1);
  $$pn = $1;
 } else {
  $$pn = $14;
 }
 $$034 = HEAP32[$$pn>>2]|0;
 $34 = ((($0)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37&65535;
 $39 = $$0&65535;
 $40 = ((($$034)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&65535;
 _lily_u16_write_4($35,59,$38,$39,$42);
 $43 = HEAP32[$2>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$1>>2] = $44;
 return;
}
function _assign_post_check($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 4|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & 255;
  $8 = ($7<<16>>16)!=(27);
  $9 = ($6&65535)<(5376);
  $or$cond = $9 | $8;
  if ($or$cond) {
   $10 = ((($0)) + 92|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_raise_syn($11,4476,$vararg_buffer);
   // unreachable;
  }
  $$pr = HEAP32[$2>>2]|0;
  $12 = ($$pr|0)==(0|0);
  if (!($12)) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _eval_logical_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$mask = 0, $$neg = 0, $$unshifted = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 8;
 $5 = ($4<<16>>16)==(19);
 $6 = $5&1;
 $7 = ((($1)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  label = 3;
 } else {
  $10 = ((($8)) + 4|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 & 255;
  $13 = ($12<<16>>16)==(27);
  $14 = ($11&65535) >>> 8;
  $15 = ($14<<16>>16)==($4<<16>>16);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $$0 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $$0 = $18;
 }
 $19 = ((($1)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 & 255;
 $24 = ($23<<16>>16)==(5);
 if (!($24)) {
  _eval_tree($0,$20,0);
 }
 $25 = HEAP32[$19>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 & 255;
 $29 = ($28<<16>>16)==(27);
 if ($29) {
  $30 = HEAP16[$2>>1]|0;
  $$unshifted = $30 ^ $27;
  $31 = ($$unshifted&65535)<(256);
  if (!($31)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $32 = HEAP32[$19>>2]|0;
  _emit_jump_if($0,$32,$6);
 }
 $33 = ((($1)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 4|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 & 255;
 $38 = ($37<<16>>16)==(5);
 if (!($38)) {
  _eval_tree($0,$34,0);
 }
 $39 = HEAP32[$33>>2]|0;
 _emit_jump_if($0,$39,$6);
 $40 = ($$0|0)==(-1);
 if ($40) {
  return;
 }
 $41 = ((($0)) + 112|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_get_storage($0,$46)|0);
 $48 = HEAP16[$2>>1]|0;
 $$mask = $48 & -256;
 $49 = ($$mask<<16>>16)==(4608);
 $50 = ((($0)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($1)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53&65535;
 $55 = $49&1;
 $56 = ((($47)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57&65535;
 _lily_u16_write_4($51,43,$54,$55,$58);
 $59 = HEAP32[$50>>2]|0;
 _lily_u16_write_2($59,24,0);
 $60 = HEAP32[$50>>2]|0;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + -1)|0;
 _write_patches_since($0,$$0);
 $64 = HEAP32[$50>>2]|0;
 $65 = HEAP32[$52>>2]|0;
 $66 = $65&65535;
 $67 = $55 ^ 1;
 $68 = HEAP32[$56>>2]|0;
 $69 = $68&65535;
 _lily_u16_write_4($64,43,$66,$67,$69);
 $70 = HEAP32[$50>>2]|0;
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $$neg = (1 - ($62))|0;
 $73 = (($$neg) + 1)|0;
 $74 = (($73) + ($72))|0;
 $75 = $74&65535;
 $76 = HEAP32[$70>>2]|0;
 $77 = (($76) + ($63<<1)|0);
 HEAP16[$77>>1] = $75;
 HEAP32[$1>>2] = $47;
 return;
}
function _eval_func_pipe($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($1)) + 14|0);
 HEAP16[$8>>1] = 2;
 _eval_call($0,$1,$2);
 return;
}
function _emit_binary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$079 = 0, $$08094 = 0, $$mask = 0, $$mask81 = 0, $$mask82 = 0, $$mask83 = 0, $$mask84 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond89 = 0, $trunc = 0, $trunc95 = 0, $trunc96 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($9|0)==($13|0);
 L1: do {
  if ($16) {
   $17 = ((($1)) + 4|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = ($18&65535) >>> 8;
   $trunc95 = $19&255;
   switch ($trunc95<<24>>24) {
   case 0:  {
    $20 = ((($11)) + 8|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = ($21<<16>>16)==(1);
    if ($22) {
     $$08094 = 2;
    } else {
     $23 = ($21<<16>>16)==(2);
     if ($23) {
      $$08094 = 12;
     } else {
      break L1;
     }
    }
    break;
   }
   case 1:  {
    $24 = ((($11)) + 8|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==(1);
    if ($26) {
     $$08094 = 3;
    } else {
     $27 = ($25<<16>>16)==(2);
     if ($27) {
      $$08094 = 13;
     } else {
      break L1;
     }
    }
    break;
   }
   case 9:  {
    $28 = ((($11)) + 8|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = ($29<<16>>16)==(1);
    if ($30) {
     $$08094 = 5;
    } else {
     $31 = ($29<<16>>16)==(2);
     if ($31) {
      $$08094 = 14;
     } else {
      break L1;
     }
    }
    break;
   }
   case 10:  {
    $32 = ((($11)) + 8|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = ($33<<16>>16)==(1);
    if ($34) {
     $$08094 = 6;
    } else {
     $35 = ($33<<16>>16)==(2);
     if ($35) {
      $$08094 = 15;
     } else {
      break L1;
     }
    }
    break;
   }
   case 8:  {
    $36 = ((($11)) + 8|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = ($37<<16>>16)==(1);
    if ($38) {
     $$08094 = 4;
    } else {
     label = 12;
    }
    break;
   }
   default: {
    label = 12;
   }
   }
   L13: do {
    if ((label|0) == 12) {
     $39 = HEAP16[$17>>1]|0;
     $$mask = $39 & -256;
     $40 = ($$mask<<16>>16)==(2816);
     if ($40) {
      $41 = ((($11)) + 8|0);
      $42 = HEAP16[$41>>1]|0;
      $43 = ($42<<16>>16)==(1);
      if ($43) {
       $$08094 = 7;
       break;
      }
     }
     $44 = HEAP16[$17>>1]|0;
     $$mask81 = $44 & -256;
     $45 = ($$mask81<<16>>16)==(3072);
     if ($45) {
      $46 = ((($11)) + 8|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = ($47<<16>>16)==(1);
      if ($48) {
       $$08094 = 8;
       break;
      }
     }
     $49 = HEAP16[$17>>1]|0;
     $$mask82 = $49 & -256;
     $50 = ($$mask82<<16>>16)==(3328);
     if ($50) {
      $51 = ((($11)) + 8|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==(1);
      if ($53) {
       $$08094 = 9;
       break;
      }
     }
     $54 = HEAP16[$17>>1]|0;
     $$mask83 = $54 & -256;
     $55 = ($$mask83<<16>>16)==(3584);
     if ($55) {
      $56 = ((($11)) + 8|0);
      $57 = HEAP16[$56>>1]|0;
      $58 = ($57<<16>>16)==(1);
      if ($58) {
       $$08094 = 10;
       break;
      }
     }
     $59 = HEAP16[$17>>1]|0;
     $$mask84 = $59 & -256;
     $60 = ($$mask84<<16>>16)==(3840);
     if ($60) {
      $61 = ((($11)) + 8|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = ($62<<16>>16)==(1);
      if ($63) {
       $$08094 = 11;
       break;
      }
     }
     $64 = HEAP16[$17>>1]|0;
     $65 = ($64&65535) >>> 8;
     $trunc96 = $65&255;
     switch ($trunc96<<24>>24) {
     case 2:  {
      $$08094 = 16;
      break L13;
      break;
     }
     case 4:  {
      $$08094 = 19;
      break L13;
      break;
     }
     case 3:  {
      $$08094 = 18;
      break L13;
      break;
     }
     case 6:  {
      $$08094 = 21;
      break L13;
      break;
     }
     case 5:  {
      $$08094 = 20;
      break L13;
      break;
     }
     default: {
      $66 = ($65<<16>>16)==(7);
      if ($66) {
       $$08094 = 17;
       break L13;
      } else {
       break L1;
      }
     }
     }
    }
   } while(0);
   $86 = ((($1)) + 4|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = ($87&65535) >>> 8;
   $trunc = $88&255;
   switch ($trunc<<24>>24) {
   case 10: case 9: case 1: case 0:  {
    $89 = HEAP32[$8>>2]|0;
    $90 = ((($89)) + 12|0);
    $$0$in = $90;
    break;
   }
   case 7: case 6: case 5: case 4: case 3: case 2:  {
    $91 = ((($0)) + 112|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 64|0);
    $$0$in = $93;
    break;
   }
   default: {
    $94 = ((($0)) + 112|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 44|0);
    $$0$in = $96;
   }
   }
   $$0 = HEAP32[$$0$in>>2]|0;
   $97 = ((($4)) + 4|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = ($98<<16>>16)==(2);
   $100 = ($11|0)==($$0|0);
   $or$cond = $100 & $99;
   do {
    if ($or$cond) {
     $$079 = $4;
    } else {
     $101 = ((($7)) + 4|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = ($102<<16>>16)==(2);
     $104 = ($15|0)==($$0|0);
     $or$cond89 = $104 & $103;
     if ($or$cond89) {
      $$079 = $7;
      break;
     } else {
      $105 = ((($$0)) + 12|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (_get_storage($0,$106)|0);
      $108 = ((($107)) + 6|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = $109&65535;
      $111 = $110 | 2;
      $112 = $111&65535;
      HEAP16[$108>>1] = $112;
      $$079 = $107;
      break;
     }
    }
   } while(0);
   $113 = ((($0)) + 12|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($1)) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116&65535;
   $118 = ((($4)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119&65535;
   $121 = ((($7)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122&65535;
   $124 = ((($$079)) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $125&65535;
   _lily_u16_write_5($114,$$08094,$117,$120,$123,$126);
   HEAP32[$1>>2] = $$079;
   STACKTOP = sp;return;
  }
 } while(0);
 $67 = ((($1)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($0)) + 92|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($70)) + 16|0);
 HEAP32[$71>>2] = $68;
 $72 = HEAP32[$69>>2]|0;
 $73 = HEAP32[$2>>2]|0;
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($1)) + 4|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = ($78&65535) >>> 8;
 $80 = $79&65535;
 $81 = (_opname($80)|0);
 $82 = HEAP32[$5>>2]|0;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($83)) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$vararg_buffer>>2] = $76;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $81;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $85;
 _lily_raise_syn($72,4447,$vararg_buffer);
 // unreachable;
}
function _eval_unary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$036 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 255;
 $7 = ($6<<16>>16)==(5);
 if (!($7)) {
  _eval_tree($0,$3,0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15&65535) >>> 8;
 $17 = ((($0)) + 112|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($13|0)==($20|0);
 if ($21) {
  $22 = ($16<<16>>16)==(16);
  if ($22) {
   $$036 = 22;
   label = 9;
  } else {
   label = 8;
  }
 } else {
  $23 = ((($18)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($13|0)==($24|0);
  if ($25) {
   $26 = ($16<<16>>16)==(17);
   if ($26) {
    $$036 = 23;
    label = 9;
   } else {
    $27 = ($16<<16>>16)==(16);
    if ($27) {
     $$036 = 22;
     label = 9;
    } else {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $28 = ((($1)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($0)) + 92|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = $29;
  $33 = HEAP32[$30>>2]|0;
  $34 = HEAP16[$14>>1]|0;
  $35 = ($34&65535) >>> 8;
  $36 = $35&65535;
  $37 = (_opname($36)|0);
  $38 = ((($13)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $37;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  _lily_raise_syn($33,4422,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $40 = ((($13)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_get_storage($0,$41)|0);
  $43 = ((($42)) + 6|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = $45 | 2;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
  $48 = ((($0)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($1)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51&65535;
  $53 = HEAP32[$2>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56&65535;
  $58 = ((($42)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59&65535;
  _lily_u16_write_4($49,$$036,$52,$57,$60);
  HEAP32[$1>>2] = $42;
  STACKTOP = sp;return;
 }
}
function _eval_interpolation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$045 = 0, $$04547 = 0, $$04548 = 0, $$049 = 0, $$050 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 24|0);
 $$049 = HEAP32[$2>>2]|0;
 $3 = ($$049|0)==(0|0);
 L1: do {
  if (!($3)) {
   $4 = ((($0)) + 96|0);
   $5 = ((($0)) + 108|0);
   $6 = ((($1)) + 8|0);
   $7 = ((($0)) + 92|0);
   $$050 = $$049;
   while(1) {
    $8 = ((($$050)) + 4|0);
    $9 = HEAP16[$8>>1]|0;
    $10 = $9 & 255;
    $11 = ($10<<16>>16)==(23);
    if ($11) {
     $12 = HEAP32[$4>>2]|0;
     $13 = ((($$050)) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_lily_sp_get($12,$14)|0);
     $16 = HEAP32[$5>>2]|0;
     $17 = HEAP32[$6>>2]|0;
     $18 = (_lily_parser_interp_eval($16,$17,$15)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      break;
     }
     HEAP32[$$050>>2] = $18;
    } else {
     _emit_literal($0,$$050);
    }
    $25 = ((($$050)) + 32|0);
    $$0 = HEAP32[$25>>2]|0;
    $26 = ($$0|0)==(0|0);
    if ($26) {
     break L1;
    } else {
     $$050 = $$0;
    }
   }
   $20 = ((($$050)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$7>>2]|0;
   $23 = ((($22)) + 16|0);
   HEAP32[$23>>2] = $21;
   $24 = HEAP32[$7>>2]|0;
   HEAP32[$vararg_buffer>>2] = 19155;
   _lily_raise_syn($24,4373,$vararg_buffer);
   // unreachable;
  }
 } while(0);
 $27 = ((($0)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($1)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30&65535;
 $32 = ((($1)) + 14|0);
 $33 = HEAP16[$32>>1]|0;
 _lily_u16_write_3($28,65,$31,$33);
 $34 = HEAP32[$27>>2]|0;
 $35 = HEAP16[$32>>1]|0;
 $36 = $35&65535;
 $37 = (($36) + 1)|0;
 _lily_u16_write_prep($34,$37);
 $$04547 = HEAP32[$2>>2]|0;
 $38 = ($$04547|0)==(0|0);
 if ($38) {
  $46 = ((($0)) + 112|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_get_storage($0,$51)|0);
  $53 = HEAP32[$27>>2]|0;
  $54 = ((($52)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55&65535;
  _lily_u16_write_1($53,$56);
  HEAP32[$1>>2] = $52;
  STACKTOP = sp;return;
 } else {
  $$04548 = $$04547;
 }
 while(1) {
  $39 = HEAP32[$27>>2]|0;
  $40 = HEAP32[$$04548>>2]|0;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42&65535;
  _lily_u16_write_1($39,$43);
  $44 = ((($$04548)) + 32|0);
  $$045 = HEAP32[$44>>2]|0;
  $45 = ($$045|0)==(0|0);
  if ($45) {
   break;
  } else {
   $$04548 = $$045;
  }
 }
 $46 = ((($0)) + 112|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (_get_storage($0,$51)|0);
 $53 = HEAP32[$27>>2]|0;
 $54 = ((($52)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55&65535;
 _lily_u16_write_1($53,$56);
 HEAP32[$1>>2] = $52;
 STACKTOP = sp;return;
}
function _eval_build_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$049 = 0, $$04950 = 0, $$04952 = 0, $$1 = 0, $$2$lcssa = 0, $$251 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 14|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  _make_empty_list_or_hash($0,$1,$2);
  return;
 }
 $6 = ($2|0)==(0|0);
 if ($6) {
  label = 7;
 } else {
  $7 = ((($2)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==(9);
  if ($11) {
   $12 = ((($2)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 7;
   } else {
    $16 = ((($14)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ($19<<16>>16)==(-2);
    if ($20) {
     label = 7;
    } else {
     $$1 = $14;
    }
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = ((($0)) + 100|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $$1 = $24;
 }
 $25 = ((($1)) + 24|0);
 $$04950 = HEAP32[$25>>2]|0;
 $26 = ($$04950|0)==(0|0);
 if ($26) {
  $$2$lcssa = $$1;
 } else {
  $27 = ((($0)) + 100|0);
  $$04952 = $$04950;$$251 = $$1;
  while(1) {
   _eval_tree($0,$$04952,$$251);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$$04952>>2]|0;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_lily_ts_unify($28,$$251,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _inconsistent_type_error($0,$$04952,$$251,4359);
   }
   $34 = ((($$04952)) + 32|0);
   $$049 = HEAP32[$34>>2]|0;
   $35 = ($$049|0)==(0|0);
   if ($35) {
    $$2$lcssa = $32;
    break;
   } else {
    $$04952 = $$049;$$251 = $32;
   }
  }
 }
 $36 = ((($$2$lcssa)) + 6|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 & 4096;
 $39 = ($38<<16>>16)==(0);
 if ($39) {
  $$3 = $$2$lcssa;
 } else {
  $40 = ((($0)) + 104|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_lily_tm_make_dynamicd_copy($41,$$2$lcssa)|0);
  $$3 = $42;
 }
 $43 = ((($0)) + 104|0);
 $44 = HEAP32[$43>>2]|0;
 _lily_tm_add($44,$$3);
 $45 = HEAP32[$43>>2]|0;
 $46 = ((($0)) + 112|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 76|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_lily_tm_make($45,0,$49,1)|0);
 $51 = (_get_storage($0,$50)|0);
 $52 = HEAP32[$25>>2]|0;
 $53 = ((($1)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP16[$3>>1]|0;
 $56 = $55&65535;
 _write_build_op($0,33,$52,$54,$56,$51);
 HEAP32[$1>>2] = $51;
 return;
}
function _eval_build_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$079 = 0, $$084 = 0, $$087 = 0, $$1 = 0, $$180$lcssa = 0, $$18085 = 0, $$2$lcssa = 0, $$281 = 0, $$286 = 0, $$3 = 0, $$382 = 0, $$83 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($2|0)==(0|0);
 if ($9) {
  $$079 = $8;$$1 = $8;
 } else {
  $10 = ((($2)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(10);
  if ($14) {
   $15 = ((($2)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($16)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==(0|0);
   $$ = $20 ? $8 : $17;
   $21 = ($19|0)==(0|0);
   $$83 = $21 ? $8 : $19;
   $$079 = $$83;$$1 = $$;
  } else {
   $$079 = $8;$$1 = $8;
  }
 }
 $22 = ((($1)) + 24|0);
 $$084 = HEAP32[$22>>2]|0;
 $23 = ($$084|0)==(0|0);
 if ($23) {
  $$180$lcssa = $$079;$$2$lcssa = $$1;
 } else {
  $24 = ((($0)) + 100|0);
  $$087 = $$084;$$18085 = $$079;$$286 = $$1;
  while(1) {
   $25 = ((($$087)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   _eval_tree($0,$$087,$$286);
   $27 = HEAP32[$24>>2]|0;
   $28 = HEAP32[$$087>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_lily_ts_unify($27,$$286,$30)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    _inconsistent_type_error($0,$$087,$$286,4232);
    $$3 = $$286;
   } else {
    _ensure_valid_key_type($0,$1,$31);
    $$3 = $31;
   }
   _eval_tree($0,$26,$$18085);
   $33 = HEAP32[$24>>2]|0;
   $34 = HEAP32[$26>>2]|0;
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_lily_ts_unify($33,$$18085,$36)|0);
   $38 = ($37|0)==(0|0);
   if ($38) {
    _inconsistent_type_error($0,$26,$$18085,4242);
    $$281 = $$18085;
   } else {
    $$281 = $37;
   }
   $39 = HEAP32[$25>>2]|0;
   $40 = ((($39)) + 32|0);
   $$0 = HEAP32[$40>>2]|0;
   $41 = ($$0|0)==(0|0);
   if ($41) {
    $$180$lcssa = $$281;$$2$lcssa = $$3;
    break;
   } else {
    $$087 = $$0;$$18085 = $$281;$$286 = $$3;
   }
  }
 }
 $42 = ((($$180$lcssa)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 & 4096;
 $45 = ($44<<16>>16)==(0);
 if ($45) {
  $$382 = $$180$lcssa;
 } else {
  $46 = ((($0)) + 104|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_lily_tm_make_dynamicd_copy($47,$$180$lcssa)|0);
  $$382 = $48;
 }
 $49 = HEAP32[$3>>2]|0;
 $50 = ((($49)) + 80|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($0)) + 104|0);
 $53 = HEAP32[$52>>2]|0;
 _lily_tm_add($53,$$2$lcssa);
 $54 = HEAP32[$52>>2]|0;
 _lily_tm_add($54,$$382);
 $55 = HEAP32[$52>>2]|0;
 $56 = (_lily_tm_make($55,0,$51,2)|0);
 $57 = (_get_storage($0,$56)|0);
 $58 = HEAP32[$22>>2]|0;
 $59 = ((($1)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($1)) + 14|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 _write_build_op($0,35,$58,$60,$63,$57);
 HEAP32[$1>>2] = $57;
 return;
}
function _eval_build_tuple($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04958 = 0, $$051 = 0, $$05157 = 0, $$05159 = 0, $$1$lcssa = 0, $$15255 = 0, $$15255$in = 0, $$154 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 14|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,4202,$vararg_buffer);
  // unreachable;
 }
 $8 = ($2|0)==(0|0);
 do {
  if ($8) {
   $$0 = 0;
  } else {
   $9 = ((($2)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 8|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(11);
   if ($13) {
    $14 = HEAP16[$3>>1]|0;
    $15 = ((($2)) + 10|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($14&65535)>($16&65535);
    if (!($17)) {
     $$0 = $2;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 $18 = ((($1)) + 24|0);
 $$05157 = HEAP32[$18>>2]|0;
 $19 = ($$05157|0)==(0|0);
 if (!($19)) {
  $20 = ($$0|0)==(0|0);
  $21 = ((($$0)) + 16|0);
  $$04958 = 0;$$05159 = $$05157;
  while(1) {
   if ($20) {
    _eval_tree($0,$$05159,0);
   } else {
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + ($$04958<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    _eval_tree($0,$$05159,$28);
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     $30 = HEAP32[$$05159>>2]|0;
     $31 = ((($30)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($28|0)==($32|0);
     if (!($33)) {
      (_type_matchup($0,$28,$$05159)|0);
     }
    }
   }
   $34 = (($$04958) + 1)|0;
   $35 = ((($$05159)) + 32|0);
   $$051 = HEAP32[$35>>2]|0;
   $36 = ($$051|0)==(0|0);
   if ($36) {
    break;
   } else {
    $$04958 = $34;$$05159 = $$051;
   }
  }
 }
 $22 = HEAP16[$3>>1]|0;
 $23 = ($22<<16>>16)==(0);
 $24 = ((($0)) + 104|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $$1$lcssa = 0;$$lcssa = $25;
 } else {
  $$15255$in = $18;$$154 = 0;$40 = $25;
  while(1) {
   $$15255 = HEAP32[$$15255$in>>2]|0;
   $37 = HEAP32[$$15255>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   _lily_tm_add($40,$39);
   $41 = (($$154) + 1)|0;
   $42 = ((($$15255)) + 32|0);
   $43 = HEAP16[$3>>1]|0;
   $44 = $43&65535;
   $45 = ($41|0)<($44|0);
   $46 = HEAP32[$24>>2]|0;
   if ($45) {
    $$15255$in = $42;$$154 = $41;$40 = $46;
   } else {
    $$1$lcssa = $41;$$lcssa = $46;
    break;
   }
  }
 }
 $47 = ((($0)) + 112|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 84|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_lily_tm_make($$lcssa,0,$50,$$1$lcssa)|0);
 $52 = (_get_storage($0,$51)|0);
 $53 = HEAP32[$18>>2]|0;
 $54 = ((($1)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP16[$3>>1]|0;
 $57 = $56&65535;
 _write_build_op($0,34,$53,$55,$57,$52);
 HEAP32[$1>>2] = $52;
 STACKTOP = sp;return;
}
function _eval_subscript($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 255;
 $9 = ($8<<16>>16)==(5);
 if (!($9)) {
  _eval_tree($0,$3,0);
 }
 $10 = ((($5)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 255;
 $13 = ($12<<16>>16)==(5);
 if (!($13)) {
  _eval_tree($0,$5,0);
 }
 _check_valid_subscript($0,$3,$5);
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_get_subscript_result($0,$16,$5)|0);
 $18 = (_get_storage($0,$17)|0);
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($1)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22&65535;
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26&65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30&65535;
 $32 = ((($18)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33&65535;
 _lily_u16_write_5($20,37,$23,$27,$31,$34);
 $35 = HEAP32[$3>>2]|0;
 $36 = ((($35)) + 6|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 & 2;
 $39 = ($38<<16>>16)==(0);
 if ($39) {
  HEAP32[$1>>2] = $18;
  return;
 }
 $40 = ((($18)) + 6|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = $42 | 2;
 $44 = $43&65535;
 HEAP16[$40>>1] = $44;
 HEAP32[$1>>2] = $18;
 return;
}
function _eval_typecast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 _eval_tree($0,$3,$10);
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($17<<16>>16)==(8);
 if (!($18)) {
  $42 = ((($1)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($0)) + 92|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 16|0);
  HEAP32[$46>>2] = $43;
  $47 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $13;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $10;
  _lily_raise_syn($47,3987,$vararg_buffer1);
  // unreachable;
 }
 $19 = ((($10)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 46|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  $26 = (_get_storage($0,$7)|0);
  $27 = ((($0)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($1)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30&65535;
  $32 = HEAP32[$19>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = HEAP32[$3>>2]|0;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37&65535;
  $39 = ((($26)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40&65535;
  _lily_u16_write_5($28,64,$31,$34,$38,$41);
  HEAP32[$1>>2] = $26;
  STACKTOP = sp;return;
 } else {
  $24 = ((($0)) + 92|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_raise_syn($25,3943,$vararg_buffer);
  // unreachable;
 }
}
function _eval_oo_access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _eval_oo_access_for_item($0,$1);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(4);
 if ($6) {
  _oo_property_read($0,$1);
  return;
 } else {
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_get_storage($0,$9)|0);
  $11 = ((($0)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14&65535;
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18&65535;
  $20 = ((($10)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&65535;
  _lily_u16_write_4($12,41,$15,$19,$22);
  HEAP32[$1>>2] = $10;
  return;
 }
}
function _eval_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _ensure_valid_scope($0,$3);
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 18|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(13);
 if ($8) {
  _maybe_close_over_class_self($0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 1;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_get_storage($0,$25)|0);
  $27 = ((($0)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($1)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30&65535;
  $32 = HEAP32[$2>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34&65535;
  $36 = ((($0)) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41&65535;
  $43 = ((($26)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44&65535;
  _lily_u16_write_5($28,49,$31,$35,$42,$45);
  HEAP32[$1>>2] = $26;
  STACKTOP = sp;return;
 } else {
  $14 = ((($1)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 92|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 16|0);
  HEAP32[$18>>2] = $15;
  $19 = HEAP32[$16>>2]|0;
  $20 = HEAP32[$2>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  _lily_raise_syn($19,3898,$vararg_buffer);
  // unreachable;
 }
}
function _eval_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $trunc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 27: case 0:  {
   $6 = ((($1)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 6|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11 & 16;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $18 = ((($9)) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    _process_call($0,$3,$1,$2);
    $22 = ((($0)) + 100|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 24|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_lily_ts_resolve_with($23,$21,$25)|0);
    $27 = HEAP32[$22>>2]|0;
    _lily_ts_scope_restore($27,$3);
    $$1 = $26;
    break L1;
   } else {
    $14 = ((($0)) + 92|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($9)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    HEAP32[$vararg_buffer>>2] = $17;
    _lily_raise_syn($15,3536,$vararg_buffer);
    // unreachable;
   }
   break;
  }
  default: {
   $28 = ((($1)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 6|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 & 16;
   $33 = ($32<<16>>16)==(0);
   if ($33) {
    $34 = ((($29)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    _verify_argument_count($0,$1,$35,-1,0);
   }
   $36 = ((($0)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($1)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39&65535;
   $41 = ((($29)) + 8|0);
   $42 = HEAP16[$41>>1]|0;
   _lily_u16_write_3($37,45,$40,$42);
   $43 = ((($29)) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 46|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = ($46<<16>>16)==(0);
   $48 = ((($44)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   if ($47) {
    $$1 = $49;
   } else {
    $50 = ((($0)) + 100|0);
    $51 = HEAP32[$50>>2]|0;
    _lily_ts_scope_save($51,$3);
    $52 = ($2|0)==(0|0);
    if (!($52)) {
     $53 = ((($2)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = HEAP32[$43>>2]|0;
     $56 = ($54|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      (_lily_ts_check($57,$49,$2)|0);
     }
    }
    $58 = HEAP32[$50>>2]|0;
    $59 = ((($58)) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (_lily_ts_resolve_with($58,$49,$60)|0);
    $62 = HEAP32[$50>>2]|0;
    _lily_ts_scope_restore($62,$3);
    $$1 = $61;
   }
  }
  }
 } while(0);
 $63 = ((($0)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66&65535;
 $68 = ((($1)) + 12|0);
 HEAP16[$68>>1] = $67;
 $69 = (_get_storage($0,$$1)|0);
 $70 = HEAP32[$63>>2]|0;
 $71 = ((($69)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72&65535;
 _lily_u16_write_1($70,$73);
 HEAP32[$1>>2] = $69;
 STACKTOP = sp;return;
}
function _eval_lambda($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_sp_get($6,$8)|0);
 $10 = ($2|0)==(0|0);
 if ($10) {
  $$0 = 0;
 } else {
  $11 = ((($2)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)==(7);
  $$ = $15 ? $2 : 0;
  $$0 = $$;
 }
 $16 = ((($0)) + 108|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_lily_parser_lambda_eval($17,$19,$9,$$0)|0);
 HEAP32[$3>>2] = $4;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_get_storage($0,$22)|0);
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $29 = ((($0)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$18>>2]|0;
  $32 = $31&65535;
  $33 = ((($20)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34&65535;
  $36 = ((($23)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37&65535;
  _lily_u16_write_4($30,41,$32,$35,$38);
  HEAP32[$1>>2] = $23;
  return;
 } else {
  _emit_create_function($0,$20,$23);
  HEAP32[$1>>2] = $23;
  return;
 }
}
function _eval_self($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $5;
 return;
}
function _eval_upvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 44|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 L1: do {
  if ($6) {
   $$0$lcssa = 0;
  } else {
   $7 = ((($0)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $$024 = 0;
   while(1) {
    $9 = (($8) + ($$024<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==($3|0);
    if ($11) {
     $$0$lcssa = $$024;
     break L1;
    }
    $12 = (($$024) + 1)|0;
    $13 = HEAP16[$4>>1]|0;
    $14 = $13&65535;
    $15 = ($12|0)<($14|0);
    if ($15) {
     $$024 = $12;
    } else {
     $$0$lcssa = $12;
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP16[$4>>1]|0;
 $17 = $16&65535;
 $18 = ($$0$lcssa|0)==($17|0);
 if ($18) {
  $19 = HEAP32[$2>>2]|0;
  _checked_close_over_var($0,$19);
 }
 $20 = ((($0)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 HEAP8[$22>>0] = 1;
 $23 = ((($3)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_get_storage($0,$24)|0);
 $26 = ((($0)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 $31 = $$0$lcssa&65535;
 $32 = ((($25)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33&65535;
 _lily_u16_write_4($27,58,$30,$31,$34);
 HEAP32[$1>>2] = $25;
 return;
}
function _checked_close_over_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(11);
 if (!($6)) {
  _close_over_sym($0,$1);
  STACKTOP = sp;return;
 }
 $7 = ((($3)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(11);
 if (!($11)) {
  _close_over_sym($0,$1);
  STACKTOP = sp;return;
 }
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 6|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 & 1024;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  _close_over_sym($0,$1);
  STACKTOP = sp;return;
 } else {
  $18 = ((($0)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  _lily_raise_syn($19,3475,$vararg_buffer);
  // unreachable;
 }
}
function _close_over_sym($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($0)) + 46|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($3<<16>>16)==($5<<16>>16);
 if ($6) {
  _grow_closed_syms($0);
 }
 $7 = HEAP16[$2>>1]|0;
 $8 = $7&65535;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $1;
 $12 = HEAP16[$2>>1]|0;
 $13 = (($12) + 1)<<16>>16;
 HEAP16[$2>>1] = $13;
 $14 = ((($1)) + 6|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 | 4;
 $18 = $17&65535;
 HEAP16[$14>>1] = $18;
 $19 = ((($0)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 16|0);
 HEAP8[$21>>0] = 1;
 return;
}
function _grow_closed_syms($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 46|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3 << 3;
 $9 = $8 & 262136;
 $10 = (_lily_realloc($7,$9)|0);
 HEAP32[$6>>2] = $10;
 return;
}
function _emit_create_function($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 _lily_u16_write_4($4,61,0,$7,$10);
 $11 = ((($0)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 HEAP8[$13>>0] = 1;
 return;
}
function _process_call($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 _begin_call($0,$4,$2);
 $5 = ((($0)) + 100|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_ts_scope_save($6,$1);
 $7 = ((($2)) + 14|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + -1)|0;
 _validate_and_prep_call($0,$4,$3,$10);
 _eval_verify_call_args($0,$4);
 STACKTOP = sp;return;
}
function _verify_argument_count($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond19 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $5 = sp + 84|0;
 $6 = sp + 80|0;
 $7 = sp + 76|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 88|0;
 $11 = sp + 8|0;
 $12 = sp;
 _get_func_min_max($2,$5,$6);
 $13 = ($3|0)==(-1);
 $14 = HEAP32[$5>>2]|0;
 $15 = ($14>>>0)>($3>>>0);
 $or$cond = $13 | $15;
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16>>>0)<($3>>>0);
 $or$cond19 = $or$cond | $17;
 if (!($or$cond19)) {
  STACKTOP = sp;return;
 }
 $18 = ($4|0)==(0);
 if ($18) {
  $$015 = $3;
 } else {
  $19 = ((($1)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = ($24<<16>>16)==(1);
  if ($25) {
   $26 = (($14) + -1)|0;
   HEAP32[$5>>2] = $26;
   $27 = (($3) + -1)|0;
   $28 = HEAP32[$6>>2]|0;
   $29 = ($28|0)==(-1);
   if ($29) {
    $$015 = $27;
   } else {
    $30 = (($28) + -1)|0;
    HEAP32[$6>>2] = $30;
    $$015 = $27;
   }
  } else {
   $$015 = $3;
  }
 }
 $31 = $11;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = $12;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = ($$015|0)==(-1);
 if ($39) {
  (_strncpy($10,3568,8)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $$015;
  (_snprintf($10,8,16111,$vararg_buffer)|0);
 }
 $40 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $40;
 (_snprintf($11,8,16111,$vararg_buffer1)|0);
 $41 = HEAP32[$6>>2]|0;
 $42 = ($40|0)==($41|0);
 if ($42) {
  $$0 = 19155;
 } else {
  $43 = ($41|0)==(-1);
  if ($43) {
   $$0 = 6105;
  } else {
   HEAP32[$vararg_buffer4>>2] = $41;
   (_snprintf($12,8,16111,$vararg_buffer4)|0);
   $$0 = 3573;
  }
 }
 _get_error_name($1,$7,$8,$9);
 $44 = ((($1)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($0)) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 16|0);
 HEAP32[$48>>2] = $45;
 $49 = HEAP32[$46>>2]|0;
 $50 = HEAP32[$7>>2]|0;
 $51 = HEAP32[$8>>2]|0;
 $52 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $50;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $51;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $52;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $10;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = $11;
 $vararg_ptr14 = ((($vararg_buffer7)) + 20|0);
 HEAP32[$vararg_ptr14>>2] = $$0;
 $vararg_ptr15 = ((($vararg_buffer7)) + 24|0);
 HEAP32[$vararg_ptr15>>2] = $12;
 _lily_raise_syn($49,3576,$vararg_buffer7);
 // unreachable;
}
function _get_func_min_max($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5) + -1)|0;
 HEAP32[$1>>2] = $6;
 HEAP32[$2>>2] = $6;
 $7 = ((($0)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $28 = $9 & 512;
  $29 = ($28|0)==(0);
  if ($29) {
   return;
  }
  HEAP32[$2>>2] = -1;
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$1>>2] = $31;
  return;
 }
 $12 = HEAP16[$3>>1]|0;
 $13 = ($12&65535)>(1);
 L8: do {
  if ($13) {
   $14 = ((($0)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $$016 = 1;
   while(1) {
    $16 = (($15) + ($$016<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 8|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = ($21<<16>>16)==(-4);
    if ($22) {
     $$0$lcssa = $$016;
     break L8;
    }
    $23 = (($$016) + 1)|0;
    $24 = HEAP16[$3>>1]|0;
    $25 = $24&65535;
    $26 = ($23|0)<($25|0);
    if ($26) {
     $$016 = $23;
    } else {
     $$0$lcssa = $23;
     break;
    }
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 $27 = (($$0$lcssa) + -1)|0;
 HEAP32[$1>>2] = $27;
 return;
}
function _get_error_name($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 19155;
 HEAP32[$2>>2] = 19155;
 $4 = ((($0)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $trunc = $5&255;
 switch ($trunc<<24>>24) {
 case 27:  {
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = $7;
  break;
 }
 case 14:  {
  $$0 = $0;
  break;
 }
 default: {
  $8 = ((($0)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
 }
 }
 $10 = ((($$0)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 255;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  HEAP32[$3>>2] = 3629;
  return;
 }
 $14 = ((($$0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP16[$16>>1]|0;
 switch ($17<<16>>16) {
 case 1:  {
  $18 = ((($15)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = ((($19)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$1>>2] = $22;
   HEAP32[$2>>2] = 16692;
  }
  $23 = ((($15)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$3>>2] = $24;
  break;
 }
 case 3:  {
  $25 = ((($15)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$3>>2] = $26;
  break;
 }
 case 4:  {
  $27 = ((($15)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$1>>2] = $30;
  HEAP32[$2>>2] = 16692;
  $31 = ((($15)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$3>>2] = $32;
  break;
 }
 default: {
  HEAP32[$3>>2] = 3629;
 }
 }
 $33 = HEAP32[$3>>2]|0;
 $34 = (_strcmp($33,6924)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  return;
 }
 HEAP32[$2>>2] = 19155;
 HEAP32[$3>>2] = 19155;
 return;
}
function _begin_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$071 = 0, $$072 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, $trunc = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($1)) + 18|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($2)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 255;
 $trunc = $8&255;
 switch ($trunc<<24>>24) {
 case 6: case 17: case 18:  {
  $10 = ((($6)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 & 256;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $$072 = $11;
   label = 9;
  } else {
   $16 = HEAP32[$10>>2]|0;
   $17 = ((($16)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_get_storage($0,$18)|0);
   $20 = HEAP32[$5>>2]|0;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   _emit_create_function($0,$22,$19);
   $$072 = $19;
   label = 9;
  }
  break;
 }
 case 19:  {
  $23 = ((($6)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  _ensure_valid_scope($0,$24);
  $25 = HEAP32[$5>>2]|0;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $$072 = $27;
  label = 9;
  break;
 }
 case 8:  {
  _eval_oo_access_for_item($0,$6);
  $28 = ((($6)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = ($31<<16>>16)==(4);
  if ($32) {
   _oo_property_read($0,$6);
   $33 = HEAP32[$6>>2]|0;
   $$072 = $33;
   label = 9;
  } else {
   $$072 = $29;
   label = 9;
  }
  break;
 }
 case 14:  {
  $36 = ((($6)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $$072 = $37;
   label = 9;
  } else {
   $$071 = $37;$$1 = $39;
  }
  break;
 }
 default: {
  _eval_tree($0,$6,0);
  $34 = HEAP32[$5>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $$072 = $35;
  label = 9;
 }
 }
 if ((label|0) == 9) {
  $41 = ((($$072)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $$071 = $$072;$$1 = $42;
 }
 $43 = ((($$1)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 8|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = ($46<<16>>16)!=(7);
 $48 = ($9<<16>>16)!=(14);
 $or$cond5 = $48 & $47;
 if ($or$cond5) {
  $49 = ((($2)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($0)) + 92|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 16|0);
  HEAP32[$53>>2] = $50;
  $54 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer>>2] = $$1;
  _lily_raise_syn($54,3712,$vararg_buffer);
  // unreachable;
 }
 HEAP32[$1>>2] = $$071;
 $55 = ((($1)) + 8|0);
 HEAP32[$55>>2] = $$1;
 $56 = ((($$1)) + 6|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57 & 512;
 $59 = ($58<<16>>16)==(0);
 if ($59) {
  $74 = ((($1)) + 12|0);
  HEAP32[$74>>2] = 0;
  $75 = ((($1)) + 16|0);
  HEAP16[$75>>1] = -1;
  STACKTOP = sp;return;
 } else {
  $60 = ((($$1)) + 10|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = (($62) + -1)|0;
  $64 = ((($$1)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($63<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($1)) + 12|0);
  HEAP32[$71>>2] = $70;
  $72 = $63&65535;
  $73 = ((($1)) + 16|0);
  HEAP16[$73>>1] = $72;
  STACKTOP = sp;return;
 }
}
function _validate_and_prep_call($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, $trunc = 0, $trunc36 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 255;
 $11 = ($10<<16>>16)==(8);
 $12 = ($10<<16>>16)==(18);
 $13 = $11 | $12;
 $14 = $13&1;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($3))|0;
 _verify_argument_count($0,$5,$16,$17,$14);
 $trunc = $9&255;
 switch ($trunc<<24>>24) {
 case 8: case 18:  {
  _push_first_tree_value($0,$1);
  break;
 }
 default: {
 }
 }
 $18 = HEAP32[$15>>2]|0;
 $19 = ((($18)) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 & 1024;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  return;
 }
 $trunc36 = $9&255;
 switch ($trunc36<<24>>24) {
 case 5: case 17: case 21:  {
  $23 = ((($0)) + 100|0);
  $24 = HEAP32[$23>>2]|0;
  (_lily_ts_check($24,$18,$18)|0);
  return;
  break;
 }
 default: {
 }
 }
 $25 = ((($18)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 $29 = ($2|0)!=(0|0);
 $or$cond5 = $29 & $28;
 if (!($or$cond5)) {
  return;
 }
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ((($27)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($33<<16>>16)==($37<<16>>16);
 if (!($38)) {
  return;
 }
 $39 = ((($0)) + 100|0);
 $40 = HEAP32[$39>>2]|0;
 (_lily_ts_check($40,$27,$2)|0);
 return;
}
function _eval_verify_call_args($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$0$in1 = 0, $$02 = 0, $$03 = 0, $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $$0$in1 = ((($5)) + 32|0);
 $$02 = HEAP32[$$0$in1>>2]|0;
 $6 = ($$02|0)==(0|0);
 if (!($6)) {
  $$03 = $$02;
  while(1) {
   _eval_call_arg($0,$1,$$03);
   $$0$in = ((($$03)) + 32|0);
   $$0 = HEAP32[$$0$in>>2]|0;
   $7 = ($$0|0)==(0|0);
   if ($7) {
    break;
   } else {
    $$03 = $$0;
   }
  }
 }
 $8 = ((($0)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_ts_default_incomplete_solves($9);
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & 512;
 $15 = ($14<<16>>16)==(0);
 if (!($15)) {
  $16 = ((($11)) + 10|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = (($18) + -1)|0;
  $20 = ((($11)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 6|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 & 1024;
  $27 = ($26<<16>>16)==(0);
  if ($27) {
   $$033 = $23;
  } else {
   $28 = HEAP32[$8>>2]|0;
   $29 = (_lily_ts_resolve($28,$23)|0);
   $$033 = $29;
  }
  $30 = HEAP32[$10>>2]|0;
  $31 = ((($30)) + 10|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = (($33) + 65534)|0;
  $35 = $34&65535;
  _write_varargs($0,$1,$$033,$35);
 }
 $36 = HEAP32[$2>>2]|0;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 & 255;
 $42 = ($41<<16>>16)==(14);
 if ($42) {
  $43 = ((($38)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  _write_build_enum($0,$1,$44);
  $45 = ((($1)) + 18|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ((($0)) + 40|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = (($50) - ($47))|0;
  $52 = $51&65535;
  HEAP16[$48>>1] = $52;
  return;
 } else {
  _write_call($0,$1);
  $45 = ((($1)) + 18|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ((($0)) + 40|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = (($50) - ($47))|0;
  $52 = $51&65535;
  HEAP16[$48>>1] = $52;
  return;
 }
}
function _eval_call_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$060 = 0, $$061 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($1)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (_get_expected_type($1,$6)|0);
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(-4);
 if ($12) {
  $13 = ((($7)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $$0 = $15;
 } else {
  $$0 = $7;
 }
 $16 = ((($$0)) + 6|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & 1024;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  $$060 = $$0;
 } else {
  $20 = ((($0)) + 100|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_lily_ts_resolve_with($21,$$0,$23)|0);
  $$060 = $24;
 }
 _eval_tree($0,$2,$$060);
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 6|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 & 1024;
 $31 = ($30<<16>>16)==(0);
 L7: do {
  if ($31) {
   $$1 = $27;
  } else {
   $32 = ((($2)) + 4|0);
   $33 = HEAP16[$32>>1]|0;
   $trunc = $33&255;
   switch ($trunc<<24>>24) {
   case 6: case 19:  {
    break;
   }
   default: {
    $$1 = $27;
    break L7;
   }
   }
   $34 = ((($0)) + 100|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_lily_ts_resolve_with($35,$$0,$37)|0);
   $39 = HEAP32[$34>>2]|0;
   _lily_ts_scope_save($39,$3);
   $40 = HEAP32[$34>>2]|0;
   (_lily_ts_check($40,$27,$38)|0);
   $41 = HEAP32[$34>>2]|0;
   $42 = (_lily_ts_resolve_with($41,$27,$37)|0);
   $43 = HEAP32[$34>>2]|0;
   _lily_ts_scope_restore($43,$3);
   $44 = ($42|0)==($38|0);
   if ($44) {
    label = 9;
   } else {
    $45 = HEAP32[$34>>2]|0;
    $46 = (_lily_ts_type_greater_eq($45,$42,$38)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $$061 = $27;
    } else {
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $$061 = $42;
   }
   $$1 = $$061;
  }
 } while(0);
 $48 = HEAP16[$16>>1]|0;
 $49 = $48 & 1024;
 $50 = ($49<<16>>16)==(0);
 if ($50) {
  label = 13;
 } else {
  $51 = ((($0)) + 100|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_lily_ts_check($52,$$0,$$1)|0);
  $54 = ($53|0)==(0);
  if ($54) {
   label = 13;
  }
 }
 do {
  if ((label|0) == 13) {
   $55 = HEAP16[$16>>1]|0;
   $56 = $55 & 1024;
   $57 = ($56<<16>>16)==(0);
   if ($57) {
    $58 = ((($0)) + 100|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_lily_ts_type_greater_eq($59,$$0,$$1)|0);
    $61 = ($60|0)==(0);
    if (!($61)) {
     break;
    }
   }
   _bad_arg_error($0,$1,$$0,$$1);
   STACKTOP = sp;return;
  }
 } while(0);
 $62 = HEAP32[$2>>2]|0;
 _add_value($0,$1,$62);
 STACKTOP = sp;return;
}
function _write_varargs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_get_storage($0,$2)|0);
 $5 = ((($1)) + 18|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $3&65535;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 $17 = $9&65535;
 _lily_u16_write_3($11,33,$16,$17);
 _write_call_values($0,$1,$3);
 $18 = HEAP32[$10>>2]|0;
 $19 = ((($4)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 _lily_u16_write_1($18,$21);
 $22 = ((($0)) + 40|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (($24) - ($9))|0;
 $26 = $25&65535;
 HEAP16[$22>>1] = $26;
 $27 = HEAP16[$5>>1]|0;
 $28 = $27&65535;
 $29 = (($28) - ($9))|0;
 $30 = $29&65535;
 HEAP16[$5>>1] = $30;
 _add_value($0,$1,$4);
 return;
}
function _write_build_enum($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ((($1)) + 18|0);
 $13 = HEAP16[$12>>1]|0;
 _lily_u16_write_4($4,36,$9,$11,$13);
 _write_call_values($0,$1,0);
 return;
}
function _write_call($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$065 = 0, $$06771 = 0, $$068 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 & 64;
 $14 = ($13|0)==(0);
 $15 = $12 & 1024;
 $16 = $15&65535;
 $17 = ($16&65535) >>> 10;
 $18 = (29 - ($17))<<16>>16;
 $$065 = $14 ? 30 : $18;
 $19 = HEAP32[430]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($9|0)==($21|0);
 do {
  if ($22) {
   $23 = ((($0)) + 40|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = ((($1)) + 18|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $29 = (($25) - ($28))|0;
   $30 = ((($0)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($29<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$4>>2] = $33;
  } else {
   $34 = HEAP32[$3>>2]|0;
   $35 = ((($34)) + 24|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 & 255;
   $40 = ($39<<16>>16)==(17);
   if ($40) {
    $41 = ((($0)) + 76|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 44|0);
    $44 = HEAP32[$43>>2]|0;
    HEAP32[$4>>2] = $44;
    break;
   }
   $45 = ((($9)) + 6|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46 & 9216;
   $48 = ($47<<16>>16)==(0);
   if ($48) {
    $$068 = $9;
   } else {
    $49 = ((($0)) + 100|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_lily_ts_resolve($50,$9)|0);
    $$068 = $51;
   }
   $52 = ((($0)) + 40|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53&65535;
   $55 = ((($1)) + 18|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = (($54) - ($57))|0;
   $59 = ($56<<16>>16)==(0);
   if ($59) {
    label = 13;
   } else {
    $60 = ((($0)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $$06771 = 0;
    while(1) {
     $62 = (($58) + ($$06771))|0;
     $63 = (($61) + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = HEAP16[$65>>1]|0;
     $67 = ($66<<16>>16)==(2);
     if ($67) {
      $68 = ((($64)) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==($$068|0);
      if ($70) {
       $$2 = $64;
       break;
      }
     }
     $71 = (($$06771) + 1)|0;
     $72 = ($71|0)<($57|0);
     if ($72) {
      $$06771 = $71;
     } else {
      $$2 = 0;
      break;
     }
    }
    $73 = ($$2|0)==(0|0);
    if ($73) {
     label = 13;
    } else {
     $$3 = $$2;
    }
   }
   if ((label|0) == 13) {
    $74 = (_get_storage($0,$$068)|0);
    $75 = ((($74)) + 6|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = $76&65535;
    $78 = $77 | 2;
    $79 = $78&65535;
    HEAP16[$75>>1] = $79;
    $$3 = $74;
   }
   HEAP32[$4>>2] = $$3;
  }
 } while(0);
 $80 = ((($0)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($4)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83&65535;
 $85 = ((($2)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86&65535;
 $88 = ((($1)) + 18|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = HEAP32[$4>>2]|0;
 $91 = ((($90)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92&65535;
 _lily_u16_write_5($81,$$065,$84,$87,$89,$93);
 $94 = HEAP32[$80>>2]|0;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 65535)|0;
 $98 = $97&65535;
 $99 = ((($4)) + 12|0);
 HEAP16[$99>>1] = $98;
 _write_call_values($0,$1,0);
 return;
}
function _write_call_values($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 18|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $2&65535;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = ((($0)) + 40|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ((($0)) + 12|0);
 $13 = (($11) + ($6))|0;
 $14 = (($13) - ($5))|0;
 $15 = ((($0)) + 8|0);
 $$016 = 0;
 while(1) {
  $16 = HEAP32[$12>>2]|0;
  $17 = (($14) + ($$016))|0;
  $18 = HEAP32[$15>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22&65535;
  _lily_u16_write_1($16,$23);
  $24 = (($$016) + 1)|0;
  $exitcond = ($24|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$016 = $24;
  }
 }
 return;
}
function _add_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 40|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($0)) + 42|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($4<<16>>16)==($6<<16>>16);
 if ($7) {
  _grow_call_values($0);
 }
 $8 = HEAP16[$3>>1]|0;
 $9 = $8&65535;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 HEAP32[$12>>2] = $2;
 $13 = HEAP16[$3>>1]|0;
 $14 = (($13) + 1)<<16>>16;
 HEAP16[$3>>1] = $14;
 $15 = ((($1)) + 18|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (($16) + 1)<<16>>16;
 HEAP16[$15>>1] = $17;
 return;
}
function _grow_call_values($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 42|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3 << 3;
 $9 = $8 & 262136;
 $10 = (_lily_realloc($7,$9)|0);
 HEAP32[$6>>2] = $10;
 return;
}
function _get_expected_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($1) + 1)|0;
 $6 = ($4|0)>($5|0);
 if (!($6)) {
  $21 = ((($0)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $$0 = $22;
  return ($$0|0);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(-4);
 if (!($17)) {
  $$0 = $12;
  return ($$0|0);
 }
 $18 = ((($12)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $$0 = $20;
 return ($$0|0);
}
function _bad_arg_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _get_error_name($8,$4,$5,$6);
 $9 = ((($0)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($10)) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($0)) + 100|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_ts_resolve_as_question($18);
 $19 = HEAP32[$17>>2]|0;
 $20 = ((($2)) + 6|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 & 8192;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  $24 = ((($19)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_lily_ts_resolve_with($19,$2,$25)|0);
  $$0 = $26;
 } else {
  $$0 = $2;
 }
 $27 = ((($1)) + 18|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = (($29) + 1)|0;
 $31 = HEAP32[$4>>2]|0;
 $32 = HEAP32[$5>>2]|0;
 $33 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $30;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $31;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $32;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $33;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $$0;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 _lily_mb_add_fmt($12,3641,$vararg_buffer);
 $34 = HEAP32[$9>>2]|0;
 $35 = (_lily_mb_get($12)|0);
 _lily_raise_syn($34,$35,$vararg_buffer6);
 // unreachable;
}
function _push_first_tree_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 255;
 $9 = ($8<<16>>16)==(18);
 if ($9) {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   _maybe_close_over_class_self($0);
  }
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $$0$in = $18;$$029 = $17;
 } else {
  $19 = ((($5)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 12|0);
  $$0$in = $22;$$029 = $21;
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $23 = (_get_expected_type($1,0)|0);
 $24 = ((($0)) + 100|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_lily_ts_check($25,$23,$$0)|0);
 $27 = ($26|0)==(1);
 if ($27) {
  _add_value($0,$1,$$029);
  return;
 } else {
  _bad_arg_error($0,$1,$23,$$0);
  return;
 }
}
function _maybe_close_over_class_self($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $$0$in = $1;
 while(1) {
  $$0 = HEAP32[$$0$in>>2]|0;
  $2 = ((($$0)) + 18|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = ($3<<16>>16)==(12);
  $5 = ((($$0)) + 52|0);
  if ($4) {
   break;
  } else {
   $$0$in = $5;
  }
 }
 $6 = ((($$0)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_find_closed_sym_spot($0,$7)|0);
 $9 = ($8|0)==(-1);
 if ($9) {
  _close_over_sym($0,$7);
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $19 = ((($0)) + 72|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  HEAP8[$21>>0] = 1;
  return;
 }
 $14 = ((($7)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_get_storage($0,$15)|0);
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 44|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($0)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 16|0);
 HEAP8[$21>>0] = 1;
 return;
}
function _ensure_valid_scope($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$034 = 0, $$034$in = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 24;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4 & 8;
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(4);
 $15 = ((($1)) + 32|0);
 $16 = ((($1)) + 40|0);
 $$0$in = $14 ? $15 : $16;
 $$034$in = ((($1)) + 16|0);
 $$0 = HEAP32[$$0$in>>2]|0;
 $$034 = HEAP32[$$034$in>>2]|0;
 $17 = ($11|0)!=(0);
 $$not = $17 ^ 1;
 $18 = ($10|0)==($$0|0);
 $or$cond = $18 | $$not;
 if ($or$cond) {
  $19 = ($11|0)==(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = ($10|0)==(0|0);
  if (!($20)) {
   $21 = (_lily_class_greater_eq($$0,$10)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    STACKTOP = sp;return;
   }
  }
 }
 $23 = $17 ? 6584 : 6592;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($$0)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$034;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $23;
 _lily_raise_syn($25,3854,$vararg_buffer);
 // unreachable;
}
function _eval_oo_access_for_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(13);
 if ($6) {
  $7 = ((($1)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & 255;
  $12 = ($11<<16>>16)==(20);
  if ($12) {
   _maybe_close_over_class_self($0);
  }
 }
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 & 255;
 $18 = ($17<<16>>16)==(5);
 if (!($18)) {
  _eval_tree($0,$14,0);
 }
 $19 = HEAP32[$13>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($26<<16>>16)==(3);
 if ($27) {
  $28 = ((($24)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $$0 = $29;
 } else {
  $$0 = $24;
 }
 $30 = ((($0)) + 96|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($1)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_lily_sp_get($31,$33)|0);
 $35 = ((($0)) + 108|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_lily_find_or_dl_member($36,$$0,$34)|0);
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = HEAP32[$13>>2]|0;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($0)) + 92|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 16|0);
  HEAP32[$44>>2] = $41;
  $45 = HEAP32[$42>>2]|0;
  $46 = ((($$0)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer>>2] = $47;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $34;
  _lily_raise_syn($45,3757,$vararg_buffer);
  // unreachable;
 }
 $48 = ((($37)) + 4|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = ($49<<16>>16)==(4);
 if (!($50)) {
  $62 = ((($1)) + 20|0);
  HEAP32[$62>>2] = $37;
  _ensure_valid_scope($0,$37);
  STACKTOP = sp;return;
 }
 $51 = HEAP32[$13>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 & 255;
 $55 = ($54<<16>>16)==(20);
 if ($55) {
  $56 = ((($51)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($0)) + 92|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 16|0);
  HEAP32[$60>>2] = $57;
  $61 = HEAP32[$58>>2]|0;
  HEAP32[$vararg_buffer2>>2] = 19155;
  _lily_raise_syn($61,3802,$vararg_buffer2);
  // unreachable;
 } else {
  $62 = ((($1)) + 20|0);
  HEAP32[$62>>2] = $37;
  _ensure_valid_scope($0,$37);
  STACKTOP = sp;return;
 }
}
function _oo_property_read($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_get_solved_property_type($0,$1)|0);
 $5 = (_get_storage($0,$4)|0);
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18&65535;
 $20 = ((($5)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21&65535;
 _lily_u16_write_5($7,49,$10,$13,$19,$22);
 HEAP32[$1>>2] = $5;
 return;
}
function _get_solved_property_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 1024;
 $9 = ($8<<16>>16)==(0);
 if ($9) {
  $$0 = $5;
  return ($$0|0);
 }
 $10 = ((($0)) + 100|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_ts_resolve_by_second($11,$16,$5)|0);
 $$0 = $17;
 return ($$0|0);
}
function _check_valid_subscript($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 switch ($9<<16>>16) {
 case 5: case 9:  {
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($16<<16>>16)==(1);
  if ($17) {
   STACKTOP = sp;return;
  } else {
   $18 = ((($1)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($0)) + 92|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 16|0);
   HEAP32[$22>>2] = $19;
   $23 = HEAP32[$20>>2]|0;
   $24 = HEAP32[$1>>2]|0;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer>>2] = $30;
   _lily_raise_syn($23,4023,$vararg_buffer);
   // unreachable;
  }
  break;
 }
 case 10:  {
  $31 = ((($5)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$2>>2]|0;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)==($36|0);
  if ($37) {
   STACKTOP = sp;return;
  } else {
   $38 = ((($1)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($0)) + 92|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 16|0);
   HEAP32[$42>>2] = $39;
   $43 = HEAP32[$40>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $33;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $36;
   _lily_raise_syn($43,4051,$vararg_buffer1);
   // unreachable;
  }
  break;
 }
 case 11:  {
  $44 = ((($2)) + 4|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 255;
  $47 = ($46<<16>>16)==(26);
  if (!($47)) {
   $48 = ((($1)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 92|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 16|0);
   HEAP32[$52>>2] = $49;
   $53 = HEAP32[$50>>2]|0;
   HEAP32[$vararg_buffer5>>2] = 19155;
   _lily_raise_syn($53,4098,$vararg_buffer5);
   // unreachable;
  }
  $54 = ((($2)) + 16|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = HEAP32[$1>>2]|0;
  $58 = ((($57)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($55<<16>>16)<(0);
  if ($60) {
   $65 = ((($1)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($0)) + 92|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 16|0);
   HEAP32[$69>>2] = $66;
   $70 = HEAP32[$67>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $56;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $59;
   _lily_raise_syn($70,4141,$vararg_buffer8);
   // unreachable;
  }
  $61 = ((($59)) + 10|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = ($56|0)<($63|0);
  if ($64) {
   STACKTOP = sp;return;
  } else {
   $65 = ((($1)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($0)) + 92|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 16|0);
   HEAP32[$69>>2] = $66;
   $70 = HEAP32[$67>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $56;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $59;
   _lily_raise_syn($70,4141,$vararg_buffer8);
   // unreachable;
  }
  break;
 }
 default: {
  $71 = ((($1)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($0)) + 92|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 16|0);
  HEAP32[$75>>2] = $72;
  $76 = HEAP32[$73>>2]|0;
  $77 = HEAP32[$1>>2]|0;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $79;
  _lily_raise_syn($76,4174,$vararg_buffer12);
  // unreachable;
 }
 }
}
function _get_subscript_result($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 switch ($6<<16>>16) {
 case 9:  {
  $7 = ((($1)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
  return ($$0|0);
  break;
 }
 case 10:  {
  $10 = ((($1)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
  return ($$0|0);
  break;
 }
 case 11:  {
  $14 = ((($2)) + 16|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = ((($1)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $$0 = $20;
  return ($$0|0);
  break;
 }
 case 5:  {
  $21 = ((($0)) + 112|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 56|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $$0 = $26;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _type_matchup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($1|0);
 if ($6) {
  return 1;
 } else {
  $7 = ((($0)) + 100|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_ts_type_greater_eq($8,$1,$5)|0);
  $not$ = ($9|0)!=(0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _write_build_op($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$020 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + 5)|0;
 _lily_u16_write_prep($7,$8);
 $9 = HEAP32[$6>>2]|0;
 $10 = $1&65535;
 $11 = $3&65535;
 _lily_u16_write_2($9,$10,$11);
 $12 = ($1|0)==(35);
 if ($12) {
  $13 = HEAP32[$6>>2]|0;
  $14 = ((($5)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP16[$21>>1]|0;
  _lily_u16_write_1($13,$22);
 }
 $23 = HEAP32[$6>>2]|0;
 $24 = $4&65535;
 _lily_u16_write_1($23,$24);
 $25 = ($2|0)==(0|0);
 $26 = HEAP32[$6>>2]|0;
 if ($25) {
  $$lcssa = $26;
  $36 = ((($5)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37&65535;
  _lily_u16_write_1($$lcssa,$38);
  return;
 } else {
  $$020 = $2;$31 = $26;
 }
 while(1) {
  $27 = HEAP32[$$020>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29&65535;
  _lily_u16_write_1($31,$30);
  $32 = ((($$020)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  $35 = HEAP32[$6>>2]|0;
  if ($34) {
   $$lcssa = $35;
   break;
  } else {
   $$020 = $33;$31 = $35;
  }
 }
 $36 = ((($5)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37&65535;
 _lily_u16_write_1($$lcssa,$38);
 return;
}
function _inconsistent_type_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 92|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[$6>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $12;
 _lily_raise_syn($9,4289,$vararg_buffer);
 // unreachable;
}
function _ensure_valid_key_type($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($2)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)==(-6);
  if ($8) {
   label = 3;
  } else {
   $$09 = $2;
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $9 = ((($0)) + 112|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 68|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$010 = 0;
  } else {
   $$09 = $14;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $16 = ((($$09)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 & 1;
  $21 = ($20<<16>>16)==(0);
  if ($21) {
   $$010 = $$09;
  } else {
   STACKTOP = sp;return;
  }
 }
 $22 = ((($1)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 16|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[$24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $$010;
 _lily_raise_syn($27,4254,$vararg_buffer);
 // unreachable;
}
function _make_empty_list_or_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$052 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($2|0)==(0|0);
 L1: do {
  if ($9) {
   label = 8;
  } else {
   $10 = ((($2)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP16[$12>>1]|0;
   switch ($13<<16>>16) {
   case 10:  {
    break;
   }
   case 9:  {
    $30 = ((($2)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 8|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = ($36<<16>>16)==(-6);
    if ($37) {
     label = 8;
     break L1;
    } else {
     $$049 = $32;
     label = 9;
     break L1;
    }
    break;
   }
   default: {
    label = 8;
    break L1;
   }
   }
   $14 = ((($2)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($15)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   _ensure_valid_key_type($0,$1,$16);
   $19 = ($18|0)==(0|0);
   if ($19) {
    label = 5;
   } else {
    $20 = ((($18)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 8|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = ($23<<16>>16)==(-6);
    if ($24) {
     label = 5;
    } else {
     $$050 = $18;
    }
   }
   if ((label|0) == 5) {
    $$050 = $8;
   }
   $25 = ((($0)) + 104|0);
   $26 = HEAP32[$25>>2]|0;
   _lily_tm_add($26,$16);
   $27 = HEAP32[$25>>2]|0;
   _lily_tm_add($27,$$050);
   $28 = HEAP32[$3>>2]|0;
   $29 = ((($28)) + 80|0);
   $$0$in = $29;$$051 = 2;$$052 = 35;
  }
 } while(0);
 if ((label|0) == 8) {
  $$049 = $8;
  label = 9;
 }
 if ((label|0) == 9) {
  $38 = ((($0)) + 104|0);
  $39 = HEAP32[$38>>2]|0;
  _lily_tm_add($39,$$049);
  $40 = HEAP32[$3>>2]|0;
  $41 = ((($40)) + 76|0);
  $$0$in = $41;$$051 = 1;$$052 = 33;
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $42 = ((($0)) + 104|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_lily_tm_make($43,0,$$0,$$051)|0);
 $45 = (_get_storage($0,$44)|0);
 $46 = ((($1)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($1)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 _write_build_op($0,$$052,$47,$49,0,$45);
 HEAP32[$1>>2] = $45;
 return;
}
function _opname($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (608 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _emit_jump_if($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2&65535;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 _lily_u16_write_4($4,25,$5,$9,3);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 65535)|0;
 $15 = $14&65535;
 _lily_u16_write_1($10,$15);
 return;
}
function _emit_op_for_compound($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 8;
 $trunc = $4&255;
 switch ($trunc<<24>>24) {
 case 26:  {
  $$0 = 2560;
  break;
 }
 case 25:  {
  $$0 = 2304;
  break;
 }
 case 24:  {
  $$0 = 2048;
  break;
 }
 case 22:  {
  $$0 = 0;
  break;
 }
 case 23:  {
  $$0 = 256;
  break;
 }
 case 27:  {
  $$0 = 2816;
  break;
 }
 case 28:  {
  $$0 = 3072;
  break;
 }
 default: {
  $5 = $4&65535;
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_opname($5)|0);
  HEAP32[$vararg_buffer>>2] = $8;
  _lily_raise_syn($7,4524,$vararg_buffer);
  // unreachable;
 }
 }
 $9 = HEAP16[$2>>1]|0;
 $10 = $9 & 255;
 $11 = $10 | $$0;
 HEAP16[$2>>1] = $11;
 _emit_binary_op($0,$1);
 $12 = HEAP16[$2>>1]|0;
 $13 = ($4 << 8)&65535;
 $14 = $12 & 255;
 $15 = $14 | $13;
 HEAP16[$2>>1] = $15;
 STACKTOP = sp;return;
}
function _bad_assign_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $1;
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _lily_raise_syn($7,4549,$vararg_buffer);
 // unreachable;
}
function _determine_left_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $trunc = $3&255;
 switch ($trunc<<24>>24) {
 case 5: case 7:  {
  $4 = ((($1)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $$3 = $7;
  return ($$3|0);
  break;
 }
 case 1:  {
  $8 = ((($1)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_determine_left_type($0,$9)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$3 = 0;
   return ($$3|0);
  }
  $14 = ((($12)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP16[$16>>1]|0;
  switch ($17<<16>>16) {
  case 10:  {
   $18 = ((($12)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $$3 = $21;
   return ($$3|0);
   break;
  }
  case 11:  {
   $22 = ((($11)) + 4|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 & 255;
   $25 = ($24<<16>>16)==(26);
   if (!($25)) {
    $$3 = 0;
    return ($$3|0);
   }
   $26 = ((($11)) + 16|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = ($27<<16>>16)<(0);
   if ($29) {
    $$3 = 0;
    return ($$3|0);
   }
   $30 = ((($12)) + 10|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = ($28|0)>($32|0);
   if ($33) {
    $$3 = 0;
    return ($$3|0);
   }
   $34 = ((($12)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($28<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$3 = $37;
   return ($$3|0);
   break;
  }
  case 9:  {
   $38 = ((($12)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $$3 = $40;
   return ($$3|0);
   break;
  }
  case 5:  {
   $41 = ((($0)) + 112|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $$3 = $46;
   return ($$3|0);
   break;
  }
  default: {
   $$3 = $12;
   return ($$3|0);
  }
  }
  break;
 }
 case 8:  {
  $47 = ((($1)) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_determine_left_type($0,$48)|0);
  $50 = ($49|0)==(0|0);
  if ($50) {
   $$3 = 0;
   return ($$3|0);
  }
  $51 = ((($0)) + 96|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($1)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_lily_sp_get($52,$54)|0);
  $56 = ((($49)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_lily_find_property($57,$55)|0);
  $59 = ($58|0)==(0|0);
  if ($59) {
   $$3 = 0;
   return ($$3|0);
  }
  $60 = ((($58)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 6|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 & 1024;
  $65 = ($64<<16>>16)==(0);
  if ($65) {
   $$3 = $61;
   return ($$3|0);
  }
  $66 = ((($0)) + 100|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_lily_ts_resolve_by_second($67,$49,$61)|0);
  $$3 = $68;
  return ($$3|0);
  break;
 }
 case 13:  {
  $69 = ((($1)) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $$3 = $72;
  return ($$3|0);
  break;
 }
 default: {
  $$3 = 0;
  return ($$3|0);
 }
 }
 return (0)|0;
}
function _assign_optimize_check($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0$in = 0, $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0;
 var $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & 255;
 $6 = ($5<<16>>16)==(7);
 if ($6) {
  return 0;
 } else {
  $$pn = $0;
 }
 L3: while(1) {
  $$0$in = ((($$pn)) + 24|0);
  $$0 = HEAP32[$$0$in>>2]|0;
  $7 = ((($$0)) + 4|0);
  $8 = HEAP16[$7>>1]|0;
  $trunc = $8&255;
  switch ($trunc<<24>>24) {
  case 4:  {
   $$pn = $$0;
   break;
  }
  case 27:  {
   label = 3;
   break L3;
   break;
  }
  case 5:  {
   label = 5;
   break L3;
   break;
  }
  default: {
   break L3;
  }
  }
 }
 if ((label|0) == 5) {
  return 0;
 }
 if ((label|0) == 3) {
  $9 = $8 & -512;
  $switch = ($9<<16>>16)==(4608);
  if ($switch) {
   return 0;
  }
 }
 $10 = HEAP16[$7>>1]|0;
 $11 = $10 & 255;
 $12 = ($11<<16>>16)==(27);
 $13 = ($10&65535)>(5375);
 $or$cond = $13 & $12;
 $14 = $or$cond&1;
 $$ = $14 ^ 1;
 return ($$|0);
}
function _lily_emit_eval_expr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 _eval_tree($0,$2,0);
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _lily_emit_eval_interp_expr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 _eval_tree($0,$2,0);
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_emit_eval_expr_to_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 _eval_tree($0,$3,0);
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(1);
 if ($14) {
  $17 = ((($0)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($3)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20&65535;
  $22 = HEAP32[$3>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24&65535;
  $26 = ((($2)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27&65535;
  _lily_u16_write_4($18,0,$21,$25,$28);
  STACKTOP = sp;return;
 } else {
  $15 = ((($0)) + 92|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _lily_raise_syn($16,4622,$vararg_buffer);
  // unreachable;
 }
}
function _lily_emit_eval_condition($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 18|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 255;
 $$off = (($9) + -24)<<16>>16;
 $switch = ($$off&65535)<(3);
 if ($switch) {
  $10 = ((($2)) + 16|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==(0);
  if (!($12)) {
   $18 = ($6<<16>>16)==(4);
   if ($18) {
    $20 = ((($0)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 14|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25&65535;
    $27 = (($26) - ($23))|0;
    $28 = $27&65535;
    _lily_u16_write_2($21,24,$28);
    return;
   } else {
    $19 = HEAP32[$0>>2]|0;
    _lily_u16_write_1($19,0);
    return;
   }
  }
 }
 _eval_enforce_value($0,$2,0,4666);
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 _ensure_valid_condition_type($0,$15);
 $16 = ($6<<16>>16)==(4);
 $17 = $16&1;
 _emit_jump_if($0,$2,$17);
 return;
}
function _ensure_valid_condition_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP16[$4>>1]|0;
 switch ($5<<16>>16) {
 case 1: case 2: case 3: case 6: case 9:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($7,4703,$vararg_buffer);
  // unreachable;
 }
 }
}
function _lily_emit_eval_lambda_body($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$020 = 0;$12 = 1;
 } else {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $$020 = $6;$12 = $7;
 }
 $8 = HEAP32[$1>>2]|0;
 _eval_tree($0,$8,$$020);
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = ((($0)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($9)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16&65535;
  $18 = ((($10)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  _lily_u16_write_3($14,31,$17,$20);
  return;
 }
 if ($12) {
  return;
 }
 HEAP32[$9>>2] = 0;
 return;
}
function _lily_emit_eval_return($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[431]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $39 = ((($0)) + 72|0);
  $40 = HEAP32[$39>>2]|0;
  _write_pop_try_blocks_up_to($0,$40);
  $41 = ((($0)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($0)) + 88|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = $45&65535;
  _lily_u16_write_2($42,32,$46);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 _eval_enforce_value($0,$6,$3,4737);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($3|0);
 if (!($10)) {
  $11 = (_type_matchup($0,$3,$6)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($0)) + 92|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 16|0);
   HEAP32[$17>>2] = $14;
   $18 = HEAP32[$15>>2]|0;
   $19 = HEAP32[$6>>2]|0;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer>>2] = $3;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $21;
   _lily_raise_syn($18,4771,$vararg_buffer);
   // unreachable;
  }
 }
 $22 = ((($0)) + 72|0);
 $23 = HEAP32[$22>>2]|0;
 _write_pop_try_blocks_up_to($0,$23);
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($6)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&65535;
 $29 = HEAP32[$6>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 _lily_u16_write_3($25,31,$28,$32);
 $33 = HEAP32[$24>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 76|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 36|0);
 HEAP32[$38>>2] = $35;
 STACKTOP = sp;return;
}
function _lily_emit_setup_call($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$in38 = 0, $$039 = 0, $$1 = 0, $$1$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $strcmpload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 60|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0|0);
 if ($11) {
  $12 = (_get_storage($0,$1)|0);
  $13 = ((($0)) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 44|0);
  HEAP32[$15>>2] = $12;
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 88|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $20&65535;
  $22 = ((($1)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 8|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = ((($12)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27&65535;
  _lily_u16_write_4($17,46,$21,$25,$28);
 }
 $29 = ((($3)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==($4|0);
 if (!($31)) {
  _write_optargs($0,$3,$4);
 }
 if (!($11)) {
  return;
 }
 $32 = ((($1)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  return;
 }
 $37 = ((($0)) + 112|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 32|0);
 $42 = ((($0)) + 76|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47&65535;
 $49 = ((($0)) + 12|0);
 $50 = ((($0)) + 88|0);
 $$037$in38 = $41;$$039 = $35;
 while(1) {
  $$1$in = $$037$in38;
  while(1) {
   $$1 = HEAP32[$$1$in>>2]|0;
   $51 = ((($$1)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $strcmpload = HEAP8[$52>>0]|0;
   $53 = ($strcmpload<<24>>24)==(0);
   if ($53) {
    break;
   } else {
    $$1$in = $$1;
   }
  }
  $54 = HEAP32[$49>>2]|0;
  $55 = HEAP32[$50>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $56&65535;
  $58 = ((($$039)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59&65535;
  $61 = ((($$1)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62&65535;
  _lily_u16_write_5($54,50,$57,$60,$48,$63);
  $64 = HEAP32[$$039>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   break;
  } else {
   $$037$in38 = $$1;$$039 = $64;
  }
 }
 return;
}
function _write_optargs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$056$lcssa = 0, $$05657 = 0, $$05659 = 0, $$060 = 0, $$158 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($0)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 $10 = (($4) - ($2))|0;
 $11 = (($10|0) / 3)&-1;
 $12 = (($11) + 1)|0;
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 65535)|0;
 $22 = $21&65535;
 $23 = $12&65535;
 _lily_u16_write_3($14,66,$22,$23);
 $24 = ($10|0)<(-2);
 $25 = HEAP32[$13>>2]|0;
 if ($24) {
  $$lcssa = $25;
 } else {
  $$060 = 0;$26 = $25;
  while(1) {
   _lily_u16_write_1($26,0);
   $27 = (($$060) + 1)|0;
   $28 = ($$060|0)<($11|0);
   $29 = HEAP32[$13>>2]|0;
   if ($28) {
    $$060 = $27;$26 = $29;
   } else {
    $$lcssa = $29;
    break;
   }
  }
 }
 $30 = ((($$lcssa)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $$05657 = (($31) + -1)|0;
 $32 = ($4|0)==($2|0);
 if ($32) {
  $$056$lcssa = $$05657;
  $51 = HEAP32[$13>>2]|0;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) - ($16))|0;
  $55 = $54&65535;
  $56 = HEAP32[$51>>2]|0;
  $57 = (($56) + ($$056$lcssa<<1)|0);
  HEAP16[$57>>1] = $55;
  return;
 } else {
  $$05659 = $$05657;$$158 = $2;
 }
 while(1) {
  $33 = (($5) + ($$158<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = (($$158) + 1)|0;
  $36 = (($5) + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = (($$158) + 2)|0;
  $39 = (($5) + ($38<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = HEAP32[$13>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($16))|0;
  $45 = $44&65535;
  $46 = HEAP32[$41>>2]|0;
  $47 = (($46) + ($$05659<<1)|0);
  HEAP16[$47>>1] = $45;
  $48 = HEAP32[$13>>2]|0;
  _lily_u16_write_4($48,$37,$9,$40,$34);
  $49 = (($$158) + 3)|0;
  $$056 = (($$05659) + -1)|0;
  $50 = ($49|0)==($4|0);
  if ($50) {
   $$056$lcssa = $$056;
   break;
  } else {
   $$05659 = $$056;$$158 = $49;
  }
 }
 $51 = HEAP32[$13>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) - ($16))|0;
 $55 = $54&65535;
 $56 = HEAP32[$51>>2]|0;
 $57 = (($56) + ($$056$lcssa<<1)|0);
 HEAP16[$57>>1] = $55;
 return;
}
function _lily_emit_raise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 _eval_enforce_value($0,$2,0,4816);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_class_greater_eq_id(19,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($0)) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($7)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  _lily_raise_syn($11,4849,$vararg_buffer);
  // unreachable;
 } else {
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($2)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17&65535;
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&65535;
  _lily_u16_write_3($15,55,$18,$22);
  $23 = HEAP32[$14>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 36|0);
  HEAP32[$28>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _lily_reset_main($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _lily_prepare_main($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_u16_write_1($10,67);
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13&65535;
 $15 = ((($4)) + 10|0);
 HEAP16[$15>>1] = $14;
 $16 = HEAP32[$9>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($4)) + 40|0);
 HEAP32[$18>>2] = $17;
 $19 = $8&65535;
 $20 = ((($4)) + 14|0);
 HEAP16[$20>>1] = $19;
 return;
}
function _lily_new_expr_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(36)|0);
 $1 = (_lily_malloc(40)|0);
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_malloc(40)|0);
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = $1;
 $5 = (_lily_malloc(40)|0);
 $6 = ((($5)) + 36|0);
 HEAP32[$6>>2] = $3;
 $7 = (_lily_malloc(40)|0);
 $8 = ((($7)) + 36|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $7;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 $12 = ((($0)) + 32|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$0>>2] = 0;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = 0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP16[$11+8>>1]=0|0;
 _add_save_entry($0);
 return ($0|0);
}
function _add_save_entry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(20)|0);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$2>>2] = $1;
  $5 = ((($1)) + 16|0);
  HEAP32[$5>>2] = 0;
 } else {
  $6 = ((($3)) + 12|0);
  HEAP32[$6>>2] = $1;
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($1)) + 16|0);
  HEAP32[$8>>2] = $7;
 }
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function _lily_free_expr_state($0) {
 $0 = $0|0;
 var $$01819 = 0, $$020 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$020 = $2;
  while(1) {
   $4 = ((($$020)) + 36|0);
   $5 = HEAP32[$4>>2]|0;
   _lily_free($$020);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$020 = $5;
   }
  }
 }
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _lily_free($0);
  return;
 } else {
  $$01819 = $8;
 }
 while(1) {
  $10 = ((($$01819)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($$01819);
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $$01819 = $11;
  }
 }
 _lily_free($0);
 return;
}
function _lily_es_collect_arg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 _push_tree_arg($4,$5);
 HEAP32[$0>>2] = 0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = 0;
 return;
}
function _push_tree_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $1;
 } else {
  $$0 = $4;
  while(1) {
   $6 = ((($$0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    break;
   } else {
    $$0 = $7;
   }
  }
  HEAP32[$6>>2] = $1;
 }
 $9 = ((($1)) + 28|0);
 HEAP32[$9>>2] = $0;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 14|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (($12) + 1)<<16>>16;
 HEAP16[$11>>1] = $13;
 return;
}
function _lily_es_enter_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = $1&65535;
 $10 = HEAP16[$8>>1]|0;
 $11 = $9 & 255;
 $12 = $10 & -256;
 $13 = $12 | $11;
 HEAP16[$8>>1] = $13;
 $14 = ((($3)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($3)) + 12|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($3)) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($3)) + 14|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($3)) + 24|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$3>>2] = 0;
 _merge_value($0,$3);
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $$0 = $24;
 } else {
  $28 = ((($24)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   _add_save_entry($0);
  }
  $31 = HEAP32[$23>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$23>>2] = $33;
  $$0 = $33;
 }
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($$0)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($0)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$$0>>2] = $37;
 $38 = ((($$0)) + 8|0);
 HEAP32[$38>>2] = $3;
 $39 = ((($0)) + 20|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = (($40) + 1)<<16>>16;
 HEAP16[$39>>1] = $41;
 HEAP32[$0>>2] = 0;
 HEAP32[$36>>2] = 0;
 return;
}
function _add_new_tree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(40)|0);
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 HEAP32[$5>>2] = $1;
 return;
}
function _merge_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = $1;
  HEAP32[$2>>2] = $1;
  return;
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $trunc = $6&255;
 switch ($trunc<<24>>24) {
 case 27:  {
  $7 = ((($3)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   HEAP32[$7>>2] = $1;
   $10 = ((($1)) + 28|0);
   HEAP32[$10>>2] = $3;
   return;
  }
  $11 = ((($8)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 & 255;
  $14 = ($13<<16>>16)==(9);
  if ($14) {
   _merge_unary($0,$8,$1);
   return;
  } else {
   _merge_absorb($0,$8,$1);
   HEAP32[$7>>2] = $1;
   $15 = ((($1)) + 28|0);
   HEAP32[$15>>2] = $3;
   return;
  }
  break;
 }
 case 9:  {
  _merge_unary($0,$3,$1);
  return;
  break;
 }
 default: {
  _merge_absorb($0,$3,$1);
  return;
 }
 }
}
function _merge_unary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ((($$0)) + 4|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & 255;
  $6 = ($5<<16>>16)==(9);
  if (!($6)) {
   label = 4;
   break;
  }
  $7 = ((($$0)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   label = 4;
   break;
  }
  $12 = ((($8)) + 4|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 & 255;
  $15 = ($14<<16>>16)==(9);
  $16 = ((($$0)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  if ($15) {
   $$0 = $17;
  } else {
   $18 = $17;$20 = $16;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = ((($$0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $18 = $11;$20 = $10;
 }
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[$20>>2] = $2;
  $21 = ((($2)) + 28|0);
  HEAP32[$21>>2] = $$0;
  return;
 }
 _merge_absorb($0,$18,$2);
 HEAP32[$20>>2] = $2;
 $21 = ((($2)) + 28|0);
 HEAP32[$21>>2] = $$0;
 return;
}
function _merge_absorb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if ($5) {
  HEAP32[$3>>2] = $2;
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==($1|0);
  if ($7) {
   HEAP32[$0>>2] = $2;
  }
 }
 $8 = ((($1)) + 28|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($2)) + 24|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($2)) + 14|0);
 HEAP16[$10>>1] = 1;
 $11 = ((($2)) + 32|0);
 HEAP32[$11>>2] = 0;
 return;
}
function _lily_es_leave_tree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 _push_tree_arg($4,$5);
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($10)) + 8|0);
  HEAP32[$14>>2] = 0;
 } else {
  HEAP32[$1>>2] = $12;
 }
 $15 = ((($0)) + 20|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (($16) + -1)<<16>>16;
 HEAP16[$15>>1] = $17;
 return;
}
function _lily_es_get_saved_tree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_es_push_binary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 27;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = (_priority_for_op($1)|0);
 $20 = ((($3)) + 6|0);
 HEAP8[$20>>0] = $19;
 $21 = $1&65535;
 $22 = HEAP16[$8>>1]|0;
 $23 = ($21 << 8)&65535;
 $24 = $22 & 255;
 $25 = $24 | $23;
 HEAP16[$8>>1] = $25;
 $26 = ((($3)) + 20|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($3)) + 24|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($0)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 & 255;
 $33 = ($32&65535)<(27);
 if ($33) {
  $34 = HEAP32[$0>>2]|0;
  $35 = ($34|0)==($29|0);
  if ($35) {
   HEAP32[$0>>2] = $3;
  }
  $36 = ((($29)) + 28|0);
  HEAP32[$36>>2] = $3;
  HEAP32[$26>>2] = $29;
  HEAP32[$28>>2] = $3;
  return;
 }
 $37 = ($32<<16>>16)==(27);
 if (!($37)) {
  return;
 }
 $38 = HEAP8[$20>>0]|0;
 $39 = ((($29)) + 6|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = (($38) + -1)<<24>>24;
 $42 = ($41&255)<($40&255);
 if ($42) {
  $$0 = $29;
  while(1) {
   $45 = ((($$0)) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if ($47) {
    label = 17;
    break;
   }
   $48 = ((($46)) + 6|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($38&255)>($49&255);
   if ($50) {
    label = 12;
    break;
   } else {
    $$0 = $46;
   }
  }
  if ((label|0) == 12) {
   $$pr = HEAP32[$45>>2]|0;
   $51 = ($$pr|0)==(0|0);
   if ($51) {
    label = 17;
   } else {
    $52 = ((($$pr)) + 20|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($$0|0);
    if ($54) {
     HEAP32[$52>>2] = $3;
    } else {
     $55 = ((($$pr)) + 24|0);
     HEAP32[$55>>2] = $3;
    }
    $56 = ((($29)) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$18>>2] = $57;
   }
  }
  if ((label|0) == 17) {
   HEAP32[$45>>2] = $3;
   HEAP32[$0>>2] = $3;
  }
  HEAP32[$26>>2] = $$0;
 } else {
  $43 = ((($29)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$26>>2] = $44;
  HEAP32[$43>>2] = $3;
  HEAP32[$18>>2] = $29;
 }
 HEAP32[$28>>2] = $3;
 return;
}
function _priority_for_op($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 28: case 27: case 23: case 22: case 25: case 26: case 21:  {
   $$0 = 0;
   break;
  }
  case 19:  {
   $$0 = 1;
   break;
  }
  case 18:  {
   $$0 = 2;
   break;
  }
  case 7: case 2:  {
   $$0 = 3;
   break;
  }
  case 6: case 4: case 5: case 3:  {
   $$0 = 4;
   break;
  }
  case 20:  {
   $$0 = 5;
   break;
  }
  case 14:  {
   $$0 = 6;
   break;
  }
  case 15:  {
   $$0 = 7;
   break;
  }
  case 13:  {
   $$0 = 8;
   break;
  }
  case 12: case 11:  {
   $$0 = 9;
   break;
  }
  case 1: case 0:  {
   $$0 = 10;
   break;
  }
  case 8: case 10: case 9:  {
   $$0 = 11;
   break;
  }
  default: {
   $$0 = -1;
  }
  }
 } while(0);
 return ($$0|0);
}
function _lily_es_enter_typecast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_es_enter_tree($0,11);
 _push_type($0,$1);
 _lily_es_collect_arg($0);
 return;
}
function _push_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 10;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_unary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 9;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = $1&65535;
 $21 = HEAP16[$8>>1]|0;
 $22 = ($20 << 8)&65535;
 $23 = $21 & 255;
 $24 = $23 | $22;
 HEAP16[$8>>1] = $24;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_local_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 5;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_global_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 7;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_upvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 21;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_defined_func($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 6;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 18;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_static_func($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 19;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_inherited_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 17;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = $1;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _add_new_tree($0);
 }
 $8 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $8;
 $9 = ((($4)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & -256;
 $12 = $11 | 16;
 HEAP16[$9>>1] = $12;
 $13 = ((($4)) + 32|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($4)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($4)) + 12|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($4)) + 28|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 20|0);
 HEAP32[$20>>2] = $1;
 $21 = ((($4)) + 16|0);
 HEAP16[$21>>1] = $2;
 _merge_value($0,$4);
 return;
}
function _lily_es_push_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 24;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 16|0);
 HEAP16[$19>>1] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 25;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = $1&255;
 $20 = ((($3)) + 16|0);
 HEAP16[$20>>1] = $19;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 26;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 16|0);
 HEAP16[$19>>1] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 13;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -256;
 $11 = $10 | 14;
 HEAP16[$8>>1] = $11;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_self($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _add_new_tree($0);
 }
 $6 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($2)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & -256;
 $10 = $9 | 20;
 HEAP16[$7>>1] = $10;
 $11 = ((($2)) + 32|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($2)) + 12|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($2)) + 28|0);
 HEAP32[$17>>2] = 0;
 _merge_value($0,$2);
 return;
}
function _lily_es_push_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _add_new_tree($0);
 }
 $9 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($5)) + 4|0);
 $11 = $1&65535;
 $12 = HEAP16[$10>>1]|0;
 $13 = $11 & 255;
 $14 = $12 & -256;
 $15 = $14 | $13;
 HEAP16[$10>>1] = $15;
 $16 = ((($5)) + 32|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 8|0);
 $18 = ((($5)) + 12|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($5)) + 28|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($5)) + 16|0);
 HEAP32[$20>>2] = $3;
 HEAP32[$17>>2] = $2;
 _merge_value($0,$5);
 return;
}
function _lily_new_generic_pool() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = (_lily_malloc(16)|0);
 $2 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 8|0);
 HEAP16[$3>>1] = 4;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 10|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 12|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 14|0);
 HEAP16[$7>>1] = 4;
 return ($0|0);
}
function _lily_free_generic_pool($0) {
 $0 = $0|0;
 var $$01516 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 L1: do {
  if (!($3)) {
   $$01516 = 0;
   while(1) {
    $4 = HEAP32[$0>>2]|0;
    $5 = (($4) + ($$01516<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if ($7) {
     break L1;
    }
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    _lily_free($9);
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_free($11);
    _lily_free($6);
    $12 = (($$01516) + 1)|0;
    $13 = HEAP16[$1>>1]|0;
    $14 = $13&65535;
    $15 = ($12|0)<($14|0);
    if ($15) {
     $$01516 = $12;
    } else {
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP32[$0>>2]|0;
 _lily_free($16);
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_free($18);
 _lily_free($0);
 return;
}
function _lily_gp_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge$in44 = 0;
 var $storemerge$in47 = 0, $storemerge45 = 0, $storemerge46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = (_find_in_cache($0,$1,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_lily_new_raw_class($1)|0);
  $7 = (_lily_new_raw_type($6)|0);
  $8 = ((($7)) + 6|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = $10 | 1024;
  $12 = $11&65535;
  HEAP16[$8>>1] = $12;
  $13 = $2&65535;
  $14 = ((($7)) + 8|0);
  HEAP16[$14>>1] = $13;
  $15 = ((($6)) + 8|0);
  HEAP16[$15>>1] = -5;
  $16 = ((($6)) + 12|0);
  HEAP32[$16>>2] = $7;
  $17 = ((($6)) + 56|0);
  HEAP32[$17>>2] = $7;
  $18 = HEAP32[$3>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  HEAP32[$20>>2] = $6;
  $21 = (($18) + 1)|0;
  $22 = ((($0)) + 8|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = ($21|0)==($24|0);
  if ($25) {
   $26 = $24 << 1;
   $27 = $26&65535;
   HEAP16[$22>>1] = $27;
   $28 = HEAP32[$0>>2]|0;
   $29 = $24 << 3;
   $30 = $29 & 262136;
   $31 = (_lily_realloc($28,$30)|0);
   $storemerge$in44 = HEAP32[$3>>2]|0;
   $storemerge45 = (($storemerge$in44) + 1)|0;
   HEAP32[$3>>2] = $storemerge45;
   $32 = HEAP16[$22>>1]|0;
   $33 = $32&65535;
   $34 = ($storemerge45|0)<($33|0);
   if ($34) {
    $35 = HEAP16[$22>>1]|0;
    $36 = $35&65535;
    $$promoted = HEAP32[$3>>2]|0;
    $storemerge$in47 = $$promoted;$storemerge46 = $storemerge45;
    while(1) {
     $37 = (($31) + ($storemerge46<<2)|0);
     HEAP32[$37>>2] = 0;
     $storemerge = (($storemerge$in47) + 1)|0;
     $38 = ($storemerge|0)<($36|0);
     if ($38) {
      $storemerge$in47 = $storemerge;$storemerge46 = $storemerge;
     } else {
      break;
     }
    }
    HEAP32[$3>>2] = $storemerge;
   }
   HEAP32[$0>>2] = $31;
   $$0 = $6;
  } else {
   $$0 = $6;
  }
 } else {
  $$0 = $4;
 }
 $39 = ((($0)) + 12|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = ((($0)) + 14|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = ($40<<16>>16)==($42<<16>>16);
 if (!($43)) {
  $52 = HEAP16[$39>>1]|0;
  $53 = $52&65535;
  $54 = ((($0)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $$0;
  $57 = HEAP16[$39>>1]|0;
  $58 = (($57) + 1)<<16>>16;
  HEAP16[$39>>1] = $58;
  STACKTOP = sp;return;
 }
 $44 = $42&65535;
 $45 = $44 << 1;
 $46 = $45&65535;
 HEAP16[$41>>1] = $46;
 $47 = ((($0)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $44 << 3;
 $50 = $49 & 262136;
 $51 = (_lily_realloc($48,$50)|0);
 HEAP32[$47>>2] = $51;
 $52 = HEAP16[$39>>1]|0;
 $53 = $52&65535;
 $54 = ((($0)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($53<<2)|0);
 HEAP32[$56>>2] = $$0;
 $57 = HEAP16[$39>>1]|0;
 $58 = (($57) + 1)<<16>>16;
 HEAP16[$39>>1] = $58;
 STACKTOP = sp;return;
}
function _find_in_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$014$lcssa = 0, $$0144 = 0, $$015 = 0, $$03 = 0, $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $$03 = HEAP32[$3>>2]|0;
 $4 = ($$03|0)==(0|0);
 L1: do {
  if ($4) {
   $$014$lcssa = 0;
  } else {
   $5 = HEAP8[$1>>0]|0;
   $$0144 = 0;$$05 = $$03;
   while(1) {
    $6 = ((($$05)) + 16|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==($5<<24>>24);
    if ($9) {
     $$015 = $$05;
     break;
    }
    $10 = (($$0144) + 1)|0;
    $11 = HEAP32[$0>>2]|0;
    $12 = (($11) + ($10<<2)|0);
    $$0 = HEAP32[$12>>2]|0;
    $13 = ($$0|0)==(0|0);
    if ($13) {
     $$014$lcssa = $10;
     break L1;
    } else {
     $$0144 = $10;$$05 = $$0;
    }
   }
   return ($$015|0);
  }
 } while(0);
 HEAP32[$2>>2] = $$014$lcssa;
 $$015 = 0;
 return ($$015|0);
}
function _lily_gp_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01516 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($0)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($4&65535)<($6&65535);
 if (!($7)) {
  $$2 = 0;
  return ($$2|0);
 }
 $8 = $4&65535;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $$01516 = $8;
 while(1) {
  $15 = (($10) + ($$01516<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==($2<<24>>24);
  $13 = (($$01516) + 1)|0;
  if ($20) {
   $$2 = $16;
   label = 5;
   break;
  }
  $11 = HEAP16[$5>>1]|0;
  $12 = $11&65535;
  $14 = ($13|0)<($12|0);
  if ($14) {
   $$01516 = $13;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_gp_num_in_scope($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($3) - ($6))|0;
 return ($7|0);
}
function _lily_gp_save($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 HEAP32[$1>>2] = $4;
 return;
}
function _lily_gp_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&65535;
 $3 = ((($0)) + 12|0);
 HEAP16[$3>>1] = $2;
 return;
}
function _lily_gp_save_and_hide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 12|0);
 $6 = HEAP16[$5>>1]|0;
 HEAP16[$2>>1] = $6;
 return;
}
function _lily_gp_restore_and_unhide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($0)) + 12|0);
 HEAP16[$4>>1] = $3;
 $5 = $1&65535;
 HEAP16[$2>>1] = $5;
 return;
}
function _lily_new_lex_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep78 = 0, $scevgep79 = 0, $scevgep80 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(80)|0);
 $3 = (_lily_op_get_data($0)|0);
 $4 = ((($2)) + 72|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_op_get_html_sender($0)|0);
 $6 = ((($2)) + 68|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($2)) + 28|0);
 HEAP16[$7>>1] = 0;
 HEAP32[$2>>2] = 0;
 $8 = ((($2)) + 64|0);
 HEAP32[$8>>2] = $1;
 $9 = (_lily_malloc(128)|0);
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (_lily_malloc(128)|0);
 $12 = ((($2)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($2)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 56|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($2)) + 40|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((($2)) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = (_lily_malloc(256)|0);
 $22 = ((($2)) + 34|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($2)) + 32|0);
 HEAP16[$23>>1] = 128;
 $24 = ((($2)) + 30|0);
 HEAP16[$24>>1] = 128;
 $25 = ((($2)) + 20|0);
 HEAP32[$25>>2] = 0;
 _memset(($21|0),31,256)|0;
 $scevgep80 = ((($21)) + 97|0);
 dest=$scevgep80; stop=dest+26|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep79 = ((($21)) + 65|0);
 dest=$scevgep79; stop=dest+26|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep78 = ((($21)) + 48|0);
 dest=$scevgep78; stop=dest+10|0; do { HEAP8[dest>>0]=17|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep = ((($21)) + 194|0);
 dest=$scevgep; stop=dest+51|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $26 = ((($21)) + 66|0);
 HEAP8[$26>>0] = 28;
 $27 = ((($21)) + 95|0);
 HEAP8[$27>>0] = 15;
 $28 = ((($21)) + 40|0);
 HEAP8[$28>>0] = 0;
 $29 = ((($21)) + 41|0);
 HEAP8[$29>>0] = 1;
 $30 = ((($21)) + 34|0);
 HEAP8[$30>>0] = 16;
 $31 = ((($21)) + 39|0);
 HEAP8[$31>>0] = 30;
 $32 = ((($21)) + 64|0);
 HEAP8[$32>>0] = 24;
 $33 = ((($21)) + 63|0);
 HEAP8[$33>>0] = 27;
 $34 = ((($21)) + 35|0);
 HEAP8[$34>>0] = 22;
 $35 = ((($21)) + 61|0);
 HEAP8[$35>>0] = 20;
 $36 = ((($21)) + 46|0);
 HEAP8[$36>>0] = 23;
 $37 = ((($21)) + 44|0);
 HEAP8[$37>>0] = 2;
 $38 = ((($21)) + 43|0);
 HEAP8[$38>>0] = 13;
 $39 = ((($21)) + 45|0);
 HEAP8[$39>>0] = 14;
 $40 = ((($21)) + 123|0);
 HEAP8[$40>>0] = 18;
 $41 = ((($21)) + 125|0);
 HEAP8[$41>>0] = 3;
 $42 = ((($21)) + 60|0);
 HEAP8[$42>>0] = 12;
 $43 = ((($21)) + 62|0);
 HEAP8[$43>>0] = 11;
 $44 = ((($21)) + 58|0);
 HEAP8[$44>>0] = 6;
 $45 = ((($21)) + 33|0);
 HEAP8[$45>>0] = 7;
 $46 = ((($21)) + 42|0);
 HEAP8[$46>>0] = 9;
 $47 = ((($21)) + 47|0);
 HEAP8[$47>>0] = 10;
 $48 = ((($21)) + 38|0);
 HEAP8[$48>>0] = 25;
 $49 = ((($21)) + 37|0);
 HEAP8[$49>>0] = 8;
 $50 = ((($21)) + 124|0);
 HEAP8[$50>>0] = 26;
 $51 = ((($21)) + 91|0);
 HEAP8[$51>>0] = 4;
 $52 = ((($21)) + 93|0);
 HEAP8[$52>>0] = 19;
 $53 = ((($21)) + 36|0);
 HEAP8[$53>>0] = 29;
 $54 = ((($21)) + 10|0);
 HEAP8[$54>>0] = 21;
 $55 = ((($2)) + 48|0);
 HEAP32[$55>>2] = 52;
 HEAP32[$13>>2] = $21;
 return ($2|0);
}
function _lily_rewind_lex_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$119 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  while(1) {
   $3 = ((($$0)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $$0 = $4;
   }
  }
  HEAP32[$0>>2] = $$0;
  $$119 = $$0;
  while(1) {
   $6 = ((($$119)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _close_entry($$119);
    HEAP32[$6>>2] = 0;
   }
   $9 = ((($$119)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_free($10);
   HEAP32[$9>>2] = 0;
   $11 = ((($$119)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$119 = $12;
   }
  }
 }
 $14 = ((($0)) + 28|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($0)) + 56|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 40|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ((($0)) + 34|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_free($23);
 HEAP32[$22>>2] = 0;
 return;
}
function _close_entry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $trunc = $2&65535;
 switch ($trunc<<16>>16) {
 case 0:  {
  $3 = ((($0)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  (_fclose($4)|0);
  return;
  break;
 }
 case 2:  {
  $5 = ((($0)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_free($6);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _lily_free_lex_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$120 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  while(1) {
   $3 = ((($$0)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$120 = $$0;
    break;
   } else {
    $$0 = $4;
   }
  }
  while(1) {
   $6 = ((($$120)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _close_entry($$120);
   }
   $9 = ((($$120)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($$120)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_free($12);
   _lily_free($$120);
   $13 = ($10|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$120 = $10;
   }
  }
 }
 $14 = ((($0)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free($15);
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free($17);
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_free($19);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_free($21);
 _lily_free($0);
 return;
}
function _lily_pop_lex_entry($0) {
 $0 = $0|0;
 var $$041 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _close_entry($1);
 $2 = ((($1)) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $53 = ((($0)) + 20|0);
  HEAP32[$53>>2] = 0;
  return;
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 (_strcpy($7,$9)|0);
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 12|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($0)) + 34|0);
 HEAP16[$15>>1] = $14;
 HEAP32[$0>>2] = $4;
 $16 = ((($4)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 56|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($4)) + 32|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 40|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $22;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = ((($4)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 16;
 $34 = ((($0)) + 48|0);
 HEAP32[$34>>2] = $33;
 $35 = ($33|0)==(35);
 if (!($35)) {
  return;
 }
 $36 = HEAP16[$15>>1]|0;
 $37 = $36&65535;
 $38 = HEAP32[$6>>2]|0;
 $$041 = $37;
 while(1) {
  $39 = (($$041) + -1)|0;
  $40 = (($38) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = (4884 + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = ($44<<24>>24)==(0);
  $$1 = $45 ? $$041 : $39;
  $not$ = $45 ^ 1;
  $46 = ($$1|0)!=(0);
  $or$cond = $46 & $not$;
  if ($or$cond) {
   $$041 = $$1;
  } else {
   break;
  }
 }
 $47 = ((($0)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($38) + ($$1)|0);
 $50 = (($37) - ($$1))|0;
 (_strncpy($48,$49,$50)|0);
 $51 = HEAP32[$47>>2]|0;
 $52 = (($51) + ($50)|0);
 HEAP8[$52>>0] = 0;
 return;
}
function _lily_scan_interpolation_piece($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $4;
 HEAP32[$3>>2] = 0;
 $$cast = $4;
 $5 = HEAP8[$$cast>>0]|0;
 $6 = ($5<<24>>24)==(94);
 if ($6) {
  $7 = ((($$cast)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(40);
  if ($9) {
   $10 = ((($$cast)) + 2|0);
   HEAP32[$2>>2] = $10;
   $11 = ((($0)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($0)) + 24|0);
   HEAP32[$13>>2] = $12;
   _scan_interpolation($0,$2,$3);
   $14 = HEAP32[$2>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $15;
   $$0 = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + -1|0);
  HEAP32[$2>>2] = $17;
  _scan_quoted_raw($0,$2,$3,80);
  $$0 = 0;
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18)|0);
 HEAP8[$21>>0] = 0;
 $22 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $22;
 STACKTOP = sp;return ($$0|0);
}
function _scan_interpolation($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 64|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 64|0);
 $12 = ((($0)) + 64|0);
 $$0 = 1;$storemerge = $8;
 L1: while(1) {
  HEAP32[$4>>2] = $storemerge;
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  switch ($14<<24>>24) {
  case 40:  {
   $15 = (($$0) + 1)|0;
   $$1 = $15;
   break;
  }
  case 36:  {
   $16 = ((($13)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(34);
   if ($18) {
    label = 5;
    break L1;
   } else {
    label = 6;
   }
   break;
  }
  default: {
   label = 6;
  }
  }
  L6: do {
   if ((label|0) == 6) {
    label = 0;
    $20 = HEAP32[$3>>2]|0;
    $21 = HEAP8[$20>>0]|0;
    switch ($21<<24>>24) {
    case 10:  {
     label = 11;
     break L1;
     break;
    }
    case 35:  {
     label = 12;
     break L1;
     break;
    }
    case 34:  {
     break;
    }
    default: {
     $$1 = $$0;
     break L6;
    }
    }
    $22 = ((($20)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(34);
    if ($24) {
     $25 = ((($20)) + 2|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(34);
     if ($27) {
      label = 9;
      break L1;
     }
    }
    _scan_quoted_raw($0,$3,$4,36);
    $$1 = $$0;
   }
  } while(0);
  $31 = HEAP32[$3>>2]|0;
  $32 = HEAP8[$31>>0]|0;
  $33 = HEAP32[$4>>2]|0;
  $34 = (($6) + ($33)|0);
  HEAP8[$34>>0] = $32;
  $35 = HEAP8[$31>>0]|0;
  $36 = ($35<<24>>24)==(41);
  if ($36) {
   $37 = ($$1|0)==(1);
   if ($37) {
    label = 17;
    break;
   }
   $38 = (($$1) + -1)|0;
   $$2 = $38;
  } else {
   $$2 = $$1;
  }
  $39 = HEAP32[$3>>2]|0;
  $40 = ((($39)) + 1|0);
  HEAP32[$3>>2] = $40;
  $41 = HEAP32[$4>>2]|0;
  $42 = (($41) + 1)|0;
  $$0 = $$2;$storemerge = $42;
 }
 if ((label|0) == 5) {
  $19 = HEAP32[$12>>2]|0;
  _lily_raise_syn($19,5288,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $28 = HEAP32[$9>>2]|0;
  _lily_raise_syn($28,5325,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $29 = HEAP32[$10>>2]|0;
  _lily_raise_syn($29,5377,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $30 = HEAP32[$11>>2]|0;
  _lily_raise_syn($30,5410,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 17) {
  HEAP32[$1>>2] = $31;
  $43 = HEAP32[$4>>2]|0;
  HEAP32[$2>>2] = $43;
  STACKTOP = sp;return;
 }
}
function _scan_quoted_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$ph = 0, $$061 = 0, $$062 = 0, $$old = 0, $$old64 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond65 = 0, $or$cond68 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(34);
 if ($11) {
  $12 = ((($6)) + 2|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(34);
  $15 = $3 & 64;
  $16 = ($15|0)==(0);
  $or$cond = $16 & $14;
  if ($or$cond) {
   $17 = ((($0)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$5>>2] = $12;
   $$061 = $18;$$062 = 1;
  } else {
   $$061 = 0;$$062 = 0;
  }
 } else {
  $$061 = 0;$$062 = 0;
 }
 $19 = $3 & 32;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = ($$062|0)!=(0);
  $22 = $21 ? 3 : 1;
  $23 = HEAP32[$7>>2]|0;
  $24 = HEAP32[$2>>2]|0;
  $25 = (($23) + ($24)|0);
  (_strncpy($25,5140,$22)|0);
  $26 = HEAP32[$2>>2]|0;
  $27 = (($26) + ($22))|0;
  HEAP32[$2>>2] = $27;
 }
 $28 = HEAP32[$5>>2]|0;
 $29 = ((($28)) + 1|0);
 HEAP32[$5>>2] = $29;
 $30 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = $30;
 $31 = ($$062|0)==(0);
 $$old = $3 & 64;
 $$old64 = ($$old|0)==(0);
 $32 = $3 & 64;
 $33 = ($32|0)==(0);
 $34 = $3 & 66;
 $35 = ($34|0)==(0);
 $36 = $3 & 64;
 $37 = ($36|0)==(0);
 $38 = $3 & 64;
 $39 = ($38|0)==(0);
 $40 = ($$062|0)==(0);
 $41 = ((($0)) + 64|0);
 $42 = ((($0)) + 64|0);
 $43 = ((($0)) + 8|0);
 $$0$ph = $8;
 L8: while(1) {
  L10: while(1) {
   $44 = HEAP32[$5>>2]|0;
   $45 = HEAP8[$44>>0]|0;
   switch ($45<<24>>24) {
   case 92:  {
    _collect_escape($0,$5,$4,$3);
    continue L10;
    break;
   }
   case 10:  {
    if ($39) {
     break L10;
    }
    break;
   }
   default: {
   }
   }
   $58 = HEAP32[$5>>2]|0;
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)==(34);
   do {
    if ($60) {
     if ($31) {
      if ($$old64) {
       label = 21;
       break L8;
      } else {
       break;
      }
     }
     $61 = ((($58)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = ($62<<24>>24)==(34);
     if ($63) {
      $64 = ((($58)) + 2|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = ($65<<24>>24)==(34);
      $or$cond65 = $33 & $66;
      if ($or$cond65) {
       label = 21;
       break L8;
      }
     }
    }
   } while(0);
   $69 = HEAP32[$5>>2]|0;
   $70 = HEAP8[$69>>0]|0;
   $71 = ($70<<24>>24)==(94);
   if ($71) {
    $72 = ((($69)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)!=(40);
    $or$cond68 = $35 | $74;
    if (!($or$cond68)) {
     if (!($37)) {
      break L8;
     }
     $75 = HEAP32[$4>>2]|0;
     $76 = (($$0$ph) + ($75)|0);
     HEAP8[$76>>0] = 94;
     $77 = (($75) + 1)|0;
     $78 = (($$0$ph) + ($77)|0);
     HEAP8[$78>>0] = 40;
     $79 = (($75) + 2)|0;
     HEAP32[$4>>2] = $79;
     $80 = HEAP32[$5>>2]|0;
     $81 = ((($80)) + 2|0);
     HEAP32[$5>>2] = $81;
     _scan_interpolation($0,$5,$4);
     continue;
    }
   }
   $82 = HEAP32[$5>>2]|0;
   $83 = HEAP8[$82>>0]|0;
   $84 = ($83<<24>>24)==(0);
   if ($84) {
    break L8;
   }
   $85 = HEAP32[$4>>2]|0;
   $86 = (($$0$ph) + ($85)|0);
   HEAP8[$86>>0] = $83;
   $87 = (($85) + 1)|0;
   HEAP32[$4>>2] = $87;
   $88 = HEAP32[$5>>2]|0;
   $89 = ((($88)) + 1|0);
   HEAP32[$5>>2] = $89;
  }
  if ($40) {
   label = 12;
   break;
  }
  $47 = (_read_line($0)|0);
  $48 = ($47|0)==(0);
  if ($48) {
   label = 14;
   break;
  }
  $50 = HEAP32[$4>>2]|0;
  $51 = (($47) + 3)|0;
  $52 = (($51) + ($50))|0;
  _ensure_label_size($0,$52);
  $53 = HEAP32[$7>>2]|0;
  $54 = HEAP32[$43>>2]|0;
  HEAP32[$5>>2] = $54;
  $55 = HEAP32[$4>>2]|0;
  $56 = (($53) + ($55)|0);
  HEAP8[$56>>0] = 10;
  $57 = (($55) + 1)|0;
  HEAP32[$4>>2] = $57;
  $$0$ph = $53;
 }
 if ((label|0) == 12) {
  $46 = HEAP32[$41>>2]|0;
  _lily_raise_syn($46,5144,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $49 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $$061;
  _lily_raise_syn($49,5175,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 1|0);
  HEAP32[$5>>2] = $68;
 }
 $90 = ($$062|0)!=(0);
 if ($90) {
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 2|0);
  HEAP32[$5>>2] = $92;
 }
 if ($20) {
  $93 = $90 ? 3 : 1;
  $94 = HEAP32[$7>>2]|0;
  $95 = HEAP32[$4>>2]|0;
  $96 = (($94) + ($95)|0);
  (_strncpy($96,5140,$93)|0);
  $97 = (($95) + ($93))|0;
  HEAP32[$4>>2] = $97;
 }
 $98 = $3 & 1;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = HEAP32[$4>>2]|0;
  $101 = (($$0$ph) + ($100)|0);
  HEAP8[$101>>0] = 0;
 }
 $102 = $3 & 16;
 $103 = ($102|0)==(0);
 if (!($103)) {
  $111 = HEAP32[$5>>2]|0;
  HEAP32[$1>>2] = $111;
  $112 = HEAP32[$4>>2]|0;
  HEAP32[$2>>2] = $112;
  STACKTOP = sp;return;
 }
 $104 = ((($0)) + 60|0);
 $105 = HEAP32[$104>>2]|0;
 if ($99) {
  $106 = (_lily_get_string_literal($105,$$0$ph)|0);
  $107 = ((($0)) + 56|0);
  HEAP32[$107>>2] = $106;
  $111 = HEAP32[$5>>2]|0;
  HEAP32[$1>>2] = $111;
  $112 = HEAP32[$4>>2]|0;
  HEAP32[$2>>2] = $112;
  STACKTOP = sp;return;
 } else {
  $108 = HEAP32[$4>>2]|0;
  $109 = (_lily_get_bytestring_literal($105,$$0$ph,$108)|0);
  $110 = ((($0)) + 56|0);
  HEAP32[$110>>2] = $109;
  $111 = HEAP32[$5>>2]|0;
  HEAP32[$1>>2] = $111;
  $112 = HEAP32[$4>>2]|0;
  HEAP32[$2>>2] = $112;
  STACKTOP = sp;return;
 }
}
function _collect_escape($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 4|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = $3 & 4;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_scan_escape($0,$7,$4)|0);
  $12 = $3 & 1;
  $13 = ($12|0)==(0);
  $14 = ($11<<24>>24)<(1);
  $or$cond = $13 & $14;
  if ($or$cond) {
   $15 = ((($0)) + 64|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_raise_syn($16,5263,$vararg_buffer);
   // unreachable;
  }
  $17 = (($6) + ($8)|0);
  HEAP8[$17>>0] = $11;
  $18 = (($8) + 1)|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($7) + ($19)|0);
  $$0 = $20;$$035 = $18;
  HEAP32[$1>>2] = $$0;
  HEAP32[$2>>2] = $$035;
  STACKTOP = sp;return;
 } else {
  $21 = HEAP8[$7>>0]|0;
  $22 = (($6) + ($8)|0);
  HEAP8[$22>>0] = $21;
  $23 = (($8) + 1)|0;
  $24 = ((($7)) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  switch ($25<<24>>24) {
  case 34: case 92:  {
   break;
  }
  default: {
   $$0 = $24;$$035 = $23;
   HEAP32[$1>>2] = $$0;
   HEAP32[$2>>2] = $$035;
   STACKTOP = sp;return;
  }
  }
  $26 = HEAP8[$24>>0]|0;
  $27 = (($6) + ($23)|0);
  HEAP8[$27>>0] = $26;
  $28 = (($8) + 2)|0;
  $29 = ((($7)) + 2|0);
  $$0 = $29;$$035 = $28;
  HEAP32[$1>>2] = $$0;
  HEAP32[$2>>2] = $$035;
  STACKTOP = sp;return;
 }
}
function _read_line($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 65535;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_read_file_line($1)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  $7 = (_read_str_line($1)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _ensure_label_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 30|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)>($1|0);
 if ($5) {
  return;
 } else {
  $$0 = $4;
 }
 while(1) {
  $6 = ($$0|0)<($1|0);
  $7 = $$0 << 1;
  if ($6) {
   $$0 = $7;
  } else {
   break;
  }
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_realloc($9,$$0)|0);
 HEAP32[$8>>2] = $10;
 $11 = $$0&65535;
 HEAP16[$2>>1] = $11;
 return;
}
function _read_file_line($0) {
 $0 = $0|0;
 var $$$053 = 0, $$0 = 0, $$053 = 0, $$055 = 0, $$057 = 0, $$1 = 0, $$156 = 0, $$158 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $6;$$053 = 0;$$055 = $3;$$057 = 0;
 L1: while(1) {
  $9 = (_fgetc($8)|0);
  $10 = (($$057) + 2)|0;
  $11 = ($10|0)==($$0|0);
  if ($11) {
   _lily_grow_lexer_buffers($1);
   $12 = HEAP32[$2>>2]|0;
   $13 = HEAP16[$4>>1]|0;
   $14 = $13&65535;
   $$1 = $14;$$156 = $12;
  } else {
   $$1 = $$0;$$156 = $$055;
  }
  $15 = ($9|0)==(-1);
  if ($15) {
   label = 5;
   break;
  }
  $24 = $9&255;
  $25 = (($$156) + ($$057)|0);
  HEAP8[$25>>0] = $24;
  switch ($9|0) {
  case 10: case 13:  {
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $34 = $9 & 128;
  $35 = ($34>>>0)>(127);
  $$$053 = $35 ? 1 : $$053;
  $36 = (($$057) + 1)|0;
  $$0 = $$1;$$053 = $$$053;$$055 = $$156;$$057 = $36;
 }
 if ((label|0) == 5) {
  $16 = (($$156) + ($$057)|0);
  HEAP8[$16>>0] = 10;
  $17 = (($$057) + 1)|0;
  $18 = (($$156) + ($17)|0);
  HEAP8[$18>>0] = 0;
  $19 = ($$057|0)!=(0);
  $20 = $19&1;
  $21 = ((($1)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20))|0;
  HEAP32[$21>>2] = $23;
  $$158 = $$057;
 }
 else if ((label|0) == 7) {
  $26 = ($9|0)==(13);
  $27 = ((($1)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  if ($26) {
   HEAP8[$25>>0] = 10;
   $30 = (_fgetc($8)|0);
   $31 = ($30|0)==(10);
   if (!($31)) {
    (_ungetc($30,$8)|0);
   }
  }
  $32 = (($$057) + 1)|0;
  $33 = (($$156) + ($32)|0);
  HEAP8[$33>>0] = 0;
  $$158 = $32;
 }
 $37 = ($$053|0)==(0);
 if ($37) {
  STACKTOP = sp;return ($$158|0);
 }
 $38 = (_lily_is_valid_utf8($$156)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($1)) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer>>2] = $43;
  _lily_raise_err($41,5228,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$158|0);
 }
 return (0)|0;
}
function _read_str_line($0) {
 $0 = $0|0;
 var $$ = 0, $$$052 = 0, $$0 = 0, $$052 = 0, $$054 = 0, $$056 = 0, $$058 = 0, $$1 = 0, $$155 = 0, $$157 = 0, $$159 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;$$052 = 0;$$054 = $3;$$056 = $6;$$058 = 0;
 L1: while(1) {
  $9 = (($$058) + 2)|0;
  $10 = ($9|0)==($$056|0);
  if ($10) {
   _lily_grow_lexer_buffers($1);
   $11 = HEAP32[$2>>2]|0;
   $12 = HEAP16[$4>>1]|0;
   $13 = $12&65535;
   $$155 = $11;$$157 = $13;
  } else {
   $$155 = $$054;$$157 = $$056;
  }
  $14 = HEAP8[$$0>>0]|0;
  $15 = ($14<<24>>24)==(0);
  $16 = (($$155) + ($$058)|0);
  if ($15) {
   label = 5;
   break;
  }
  HEAP8[$16>>0] = $14;
  $24 = HEAP8[$$0>>0]|0;
  switch ($24<<24>>24) {
  case 10: case 13:  {
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $37 = ($24<<24>>24)<(0);
  $$$052 = $37 ? 1 : $$052;
  $38 = (($$058) + 1)|0;
  $39 = ((($$0)) + 1|0);
  $$0 = $39;$$052 = $$$052;$$054 = $$155;$$056 = $$157;$$058 = $38;
 }
 if ((label|0) == 5) {
  HEAP8[$16>>0] = 10;
  $17 = (($$058) + 1)|0;
  $18 = (($$155) + ($17)|0);
  HEAP8[$18>>0] = 0;
  $19 = ($$058|0)!=(0);
  $20 = $19&1;
  $21 = ((($1)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20))|0;
  HEAP32[$21>>2] = $23;
  $$159 = $$058;$$2 = $$0;
 }
 else if ((label|0) == 7) {
  $25 = ((($1)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = HEAP8[$$0>>0]|0;
  $29 = ($28<<24>>24)==(13);
  if ($29) {
   HEAP8[$16>>0] = 10;
   $30 = ((($$0)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(10);
   $33 = ((($$0)) + 2|0);
   $$ = $32 ? $33 : $30;
   $$1 = $$;
  } else {
   $34 = ((($$0)) + 1|0);
   $$1 = $34;
  }
  $35 = (($$058) + 1)|0;
  $36 = (($$155) + ($35)|0);
  HEAP8[$36>>0] = 0;
  $$159 = $35;$$2 = $$1;
 }
 HEAP32[$7>>2] = $$2;
 $40 = ($$052|0)==(0);
 if ($40) {
  STACKTOP = sp;return ($$159|0);
 }
 $41 = (_lily_is_valid_utf8($$155)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $43 = ((($1)) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($1)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer>>2] = $46;
  _lily_raise_err($44,5228,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$159|0);
 }
 return (0)|0;
}
function _lily_grow_lexer_buffers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = ((($0)) + 30|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==($2<<16>>16);
 if ($7) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_lily_realloc($9,$4)|0);
  HEAP32[$8>>2] = $10;
  $11 = $4&65535;
  HEAP16[$5>>1] = $11;
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_realloc($13,$4)|0);
 HEAP32[$12>>2] = $14;
 $15 = $4&65535;
 HEAP16[$1>>1] = $15;
 return;
}
function _scan_escape($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$032$lcssa = 0, $$033 = 0, $$42 = 0, $$off = 0, $$off36 = 0, $$off36$1 = 0, $$off36$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 1|0);
 HEAP32[$2>>2] = 2;
 $4 = HEAP8[$3>>0]|0;
 switch ($4<<24>>24) {
 case 110:  {
  $$033 = 10;
  break;
 }
 case 114:  {
  $$033 = 13;
  break;
 }
 case 116:  {
  $$033 = 9;
  break;
 }
 case 39:  {
  $$033 = $4;
  break;
 }
 case 34:  {
  $$033 = $4;
  break;
 }
 case 92:  {
  $$033 = $4;
  break;
 }
 case 98:  {
  $$033 = 8;
  break;
 }
 case 97:  {
  $$033 = 7;
  break;
 }
 default: {
  $$off = (($4) + -48)<<24>>24;
  $5 = ($$off&255)<(10);
  if (!($5)) {
   $17 = ((($0)) + 64|0);
   $18 = HEAP32[$17>>2]|0;
   _lily_raise_syn($18,5263,$vararg_buffer);
   // unreachable;
  }
  $6 = HEAP8[$3>>0]|0;
  $$off36 = (($6) + -48)<<24>>24;
  $7 = ($$off36&255)>(9);
  if ($7) {
   $$0$lcssa = 0;$$032$lcssa = -1;
  } else {
   $8 = $6 << 24 >> 24;
   $9 = (($8) + -48)|0;
   $10 = ($9|0)>(255);
   if ($10) {
    $$0$lcssa = 0;$$032$lcssa = -1;
   } else {
    $11 = ((($1)) + 2|0);
    $12 = HEAP8[$11>>0]|0;
    $$off36$1 = (($12) + -48)<<24>>24;
    $13 = ($$off36$1&255)>(9);
    if ($13) {
     $$0$lcssa = $9;$$032$lcssa = 0;
    } else {
     $19 = $12 << 24 >> 24;
     $20 = ($9*10)|0;
     $21 = (($20) + -48)|0;
     $22 = (($21) + ($19))|0;
     $23 = ($22|0)>(255);
     if ($23) {
      $$0$lcssa = $9;$$032$lcssa = 0;
     } else {
      $24 = ((($1)) + 3|0);
      $25 = HEAP8[$24>>0]|0;
      $$off36$2 = (($25) + -48)<<24>>24;
      $26 = ($$off36$2&255)>(9);
      if ($26) {
       $$0$lcssa = $22;$$032$lcssa = 1;
      } else {
       $27 = $25 << 24 >> 24;
       $28 = ($22*10)|0;
       $29 = (($28) + -48)|0;
       $30 = (($29) + ($27))|0;
       $31 = ($30|0)>(255);
       $$ = $31 ? 1 : 2;
       $$42 = $31 ? $22 : $30;
       $$0$lcssa = $$42;$$032$lcssa = $$;
      }
     }
    }
   }
  }
  $14 = HEAP32[$2>>2]|0;
  $15 = (($$032$lcssa) + ($14))|0;
  HEAP32[$2>>2] = $15;
  $16 = $$0$lcssa&255;
  $$033 = $16;
 }
 }
 STACKTOP = sp;return ($$033|0);
}
function _lily_lexer_digit_rescan($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($3) + 1)|0;
 $5 = $4&65535;
 $6 = ((($0)) + 34|0);
 HEAP16[$6>>1] = $5;
 _lily_lexer($0);
 return;
}
function _lily_lexer($0) {
 $0 = $0|0;
 var $$0 = 0, $$096 = 0, $$99 = 0, $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = ((($0)) + 34|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 L1: while(1) {
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = (($11) + ($10)|0);
  $storemerge = $12;
  L3: while(1) {
   HEAP32[$3>>2] = $storemerge;
   $13 = HEAP8[$storemerge>>0]|0;
   switch ($13<<24>>24) {
   case 9: case 32:  {
    break;
   }
   default: {
    break L3;
   }
   }
   $14 = ((($storemerge)) + 1|0);
   $storemerge = $14;
  }
  $15 = $storemerge;
  $16 = $12;
  $17 = (($15) - ($16))|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($17))|0;
  HEAP32[$1>>2] = $19;
  $20 = HEAP32[$3>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($8) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)==(15);
  if ($25) {
   label = 6;
   break;
  }
  $42 = ($24<<24>>24)<(7);
  if ($42) {
   label = 10;
   break;
  }
  L9: do {
   switch ($24<<24>>24) {
   case 29:  {
    label = 22;
    break L1;
    break;
   }
   case 16:  {
    label = 25;
    break L1;
    break;
   }
   case 30:  {
    label = 26;
    break L1;
    break;
   }
   case 28:  {
    label = 27;
    break L1;
    break;
   }
   case 21:  {
    $45 = (_read_line($0)|0);
    $46 = ($45|0)==(0);
    if ($46) {
     label = 14;
     break L1;
    }
    HEAP32[$1>>2] = 0;
    break;
   }
   case 22:  {
    $47 = ((($20)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    switch ($48<<24>>24) {
    case 91:  {
     _scan_multiline_comment($0,$3);
     $49 = HEAP32[$3>>2]|0;
     $50 = HEAP32[$9>>2]|0;
     $51 = (($49) - ($50))|0;
     HEAP32[$1>>2] = $51;
     break L9;
     break;
    }
    case 35:  {
     $52 = ((($20)) + 2|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = ($53<<24>>24)==(35);
     if ($54) {
      label = 18;
      break L1;
     }
     break;
    }
    default: {
    }
    }
    $58 = (_read_line($0)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     label = 21;
     break L1;
    }
    HEAP32[$1>>2] = 0;
    break;
   }
   default: {
    label = 29;
    break L1;
   }
   }
  } while(0);
 }
 L19: do {
  if ((label|0) == 10) {
   $43 = $24 << 24 >> 24;
   $44 = (($19) + 1)|0;
   HEAP32[$1>>2] = $44;
   HEAP32[$2>>2] = $43;
  }
  else if ((label|0) == 14) {
   HEAP32[$2>>2] = 54;
   HEAP32[$1>>2] = 0;
  }
  else if ((label|0) == 18) {
   _scan_docstring($0,$3);
   $55 = HEAP32[$3>>2]|0;
   $56 = HEAP32[$9>>2]|0;
   $57 = (($55) - ($56))|0;
   HEAP32[$1>>2] = $57;
   HEAP32[$2>>2] = 43;
  }
  else if ((label|0) == 21) {
   HEAP32[$2>>2] = 54;
   HEAP32[$1>>2] = 0;
  }
  else if ((label|0) == 22) {
   $60 = ((($20)) + 1|0);
   HEAP32[$3>>2] = $60;
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)==(34);
   if ($62) {
    _scan_quoted($0,$3,22);
    $65 = HEAP32[$3>>2]|0;
    $66 = HEAP32[$9>>2]|0;
    $67 = (($65) - ($66))|0;
    HEAP32[$1>>2] = $67;
    HEAP32[$2>>2] = 39;
    break;
   } else {
    $63 = ((($0)) + 64|0);
    $64 = HEAP32[$63>>2]|0;
    _lily_raise_syn($64,5447,$vararg_buffer);
    // unreachable;
   }
  }
  else if ((label|0) == 25) {
   _scan_quoted($0,$3,0);
   $68 = HEAP32[$3>>2]|0;
   $69 = HEAP32[$9>>2]|0;
   $70 = (($68) - ($69))|0;
   HEAP32[$1>>2] = $70;
   HEAP32[$2>>2] = 37;
  }
  else if ((label|0) == 26) {
   _scan_single_quote($0,$3);
   $71 = HEAP32[$3>>2]|0;
   $72 = HEAP32[$9>>2]|0;
   $73 = (($71) - ($72))|0;
   HEAP32[$1>>2] = $73;
   HEAP32[$2>>2] = 40;
  }
  else if ((label|0) == 27) {
   $74 = ((($20)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = ($75<<24>>24)==(34);
   if ($76) {
    HEAP32[$3>>2] = $74;
    $77 = HEAP32[$1>>2]|0;
    $78 = (($77) + 1)|0;
    HEAP32[$1>>2] = $78;
    _scan_quoted($0,$3,1);
    $79 = HEAP32[$3>>2]|0;
    $80 = HEAP32[$9>>2]|0;
    $81 = (($79) - ($80))|0;
    HEAP32[$1>>2] = $81;
    HEAP32[$2>>2] = 38;
   } else {
    label = 6;
   }
  }
  else if ((label|0) == 29) {
   $82 = $24 << 24 >> 24;
   $83 = ($24<<24>>24)<(11);
   if ($83) {
    $84 = (($19) + 1)|0;
    HEAP32[$1>>2] = $84;
    $85 = HEAP32[$9>>2]|0;
    $86 = (($85) + ($84)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ($87<<24>>24)==(61);
    if ($88) {
     $89 = (($19) + 2)|0;
     HEAP32[$1>>2] = $89;
     $90 = (($82) + -7)|0;
     $91 = (724 + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     HEAP32[$2>>2] = $92;
     break;
    } else {
     $93 = (($82) + -7)|0;
     $94 = (740 + ($93<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     HEAP32[$2>>2] = $95;
     break;
    }
   }
   switch ($24<<24>>24) {
   case 17:  {
    _scan_number($0,$1,$2,$20);
    break L19;
    break;
   }
   case 23:  {
    $96 = ((($20)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = (($8) + ($98)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)==(17);
    if ($101) {
     _scan_number($0,$1,$2,$20);
     break L19;
    }
    HEAP32[$3>>2] = $96;
    $102 = HEAP32[$1>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$1>>2] = $103;
    HEAP32[$2>>2] = 44;
    $104 = HEAP8[$96>>0]|0;
    $105 = ($104<<24>>24)==(46);
    if (!($105)) {
     break L19;
    }
    $106 = ((($20)) + 2|0);
    HEAP32[$3>>2] = $106;
    $107 = HEAP32[$1>>2]|0;
    $108 = (($107) + 1)|0;
    HEAP32[$1>>2] = $108;
    $109 = HEAP8[$106>>0]|0;
    $110 = ($109<<24>>24)==(46);
    if ($110) {
     $111 = (($107) + 2)|0;
     HEAP32[$1>>2] = $111;
     HEAP32[$2>>2] = 50;
     break L19;
    } else {
     $112 = ((($0)) + 64|0);
     $113 = HEAP32[$112>>2]|0;
     _lily_raise_syn($113,5471,$vararg_buffer1);
     // unreachable;
    }
    break;
   }
   case 13:  {
    $114 = ((($20)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = (($8) + ($116)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(17);
    if ($119) {
     _scan_number($0,$1,$2,$20);
     break L19;
    }
    $120 = ($115<<24>>24)==(61);
    if ($120) {
     $121 = ((($20)) + 2|0);
     HEAP32[$3>>2] = $121;
     $122 = HEAP32[$1>>2]|0;
     $123 = (($122) + 2)|0;
     HEAP32[$1>>2] = $123;
     HEAP32[$2>>2] = 16;
     break L19;
    } else {
     HEAP32[$3>>2] = $114;
     $124 = HEAP32[$1>>2]|0;
     $125 = (($124) + 1)|0;
     HEAP32[$1>>2] = $125;
     HEAP32[$2>>2] = 15;
     break L19;
    }
    break;
   }
   case 14:  {
    $126 = ((($20)) + 1|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = (($8) + ($128)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = ($130<<24>>24)==(17);
    if ($131) {
     _scan_number($0,$1,$2,$20);
     break L19;
    }
    $132 = ($127<<24>>24)==(61);
    if ($132) {
     $133 = ((($20)) + 2|0);
     HEAP32[$3>>2] = $133;
     $134 = HEAP32[$1>>2]|0;
     $135 = (($134) + 2)|0;
     HEAP32[$1>>2] = $135;
     HEAP32[$2>>2] = 18;
     break L19;
    } else {
     HEAP32[$3>>2] = $126;
     $136 = HEAP32[$1>>2]|0;
     $137 = (($136) + 1)|0;
     HEAP32[$1>>2] = $137;
     HEAP32[$2>>2] = 17;
     break L19;
    }
    break;
   }
   case 18:  {
    $138 = (($19) + 1)|0;
    HEAP32[$1>>2] = $138;
    $139 = HEAP32[$3>>2]|0;
    $140 = ((($139)) + 1|0);
    HEAP32[$3>>2] = $140;
    $141 = HEAP8[$140>>0]|0;
    $142 = ($141<<24>>24)==(124);
    if ($142) {
     _scan_lambda($0,$3);
     $143 = HEAP32[$3>>2]|0;
     $144 = HEAP32[$9>>2]|0;
     $145 = (($143) - ($144))|0;
     HEAP32[$1>>2] = $145;
     HEAP32[$2>>2] = 30;
     break L19;
    } else {
     HEAP32[$2>>2] = 29;
     break L19;
    }
    break;
   }
   case 25:  {
    $146 = (($19) + 1)|0;
    HEAP32[$1>>2] = $146;
    $147 = HEAP32[$3>>2]|0;
    $148 = ((($147)) + 1|0);
    HEAP32[$3>>2] = $148;
    $149 = HEAP8[$148>>0]|0;
    $150 = ($149<<24>>24)==(38);
    if ($150) {
     $151 = HEAP32[$1>>2]|0;
     $152 = (($151) + 1)|0;
     HEAP32[$1>>2] = $152;
     $153 = HEAP32[$3>>2]|0;
     $154 = ((($153)) + 1|0);
     HEAP32[$3>>2] = $154;
     HEAP32[$2>>2] = 46;
     break L19;
    } else {
     HEAP32[$2>>2] = 45;
     break L19;
    }
    break;
   }
   case 26:  {
    $155 = (($19) + 1)|0;
    HEAP32[$1>>2] = $155;
    $156 = HEAP32[$3>>2]|0;
    $157 = ((($156)) + 1|0);
    HEAP32[$3>>2] = $157;
    $158 = HEAP8[$157>>0]|0;
    switch ($158<<24>>24) {
    case 124:  {
     $159 = HEAP32[$1>>2]|0;
     $160 = (($159) + 1)|0;
     HEAP32[$1>>2] = $160;
     $161 = HEAP32[$3>>2]|0;
     $162 = ((($161)) + 1|0);
     HEAP32[$3>>2] = $162;
     HEAP32[$2>>2] = 48;
     break L19;
     break;
    }
    case 62:  {
     $163 = HEAP32[$1>>2]|0;
     $164 = (($163) + 1)|0;
     HEAP32[$1>>2] = $164;
     $165 = HEAP32[$3>>2]|0;
     $166 = ((($165)) + 1|0);
     HEAP32[$3>>2] = $166;
     HEAP32[$2>>2] = 51;
     break L19;
     break;
    }
    default: {
     HEAP32[$2>>2] = 47;
     break L19;
    }
    }
    break;
   }
   default: {
    $$off = (($24) + -11)<<24>>24;
    $167 = ($$off&255)<(2);
    if ($167) {
     $168 = ($24<<24>>24)==(11);
     $169 = (($19) + 1)|0;
     HEAP32[$1>>2] = $169;
     $$99 = $168 ? 23 : 19;
     HEAP32[$2>>2] = $$99;
     $170 = HEAP32[$3>>2]|0;
     $171 = ((($170)) + 1|0);
     HEAP32[$3>>2] = $171;
     $172 = HEAP8[$171>>0]|0;
     $173 = ($172<<24>>24)==(61);
     if ($173) {
      $174 = HEAP32[$2>>2]|0;
      $175 = (($174) + 1)|0;
      HEAP32[$2>>2] = $175;
      $176 = HEAP32[$1>>2]|0;
      $177 = (($176) + 1)|0;
      HEAP32[$1>>2] = $177;
      break L19;
     }
     $178 = HEAP8[$170>>0]|0;
     $179 = ($172<<24>>24)==($178<<24>>24);
     if (!($179)) {
      $192 = ($172<<24>>24)==(91);
      $193 = HEAP32[$2>>2]|0;
      $194 = ($193|0)==(19);
      $or$cond3 = $192 & $194;
      if (!($or$cond3)) {
       break L19;
      }
      $195 = HEAP32[$1>>2]|0;
      $196 = (($195) + 1)|0;
      HEAP32[$1>>2] = $196;
      HEAP32[$2>>2] = 31;
      break L19;
     }
     $180 = HEAP32[$1>>2]|0;
     $181 = (($180) + 1)|0;
     HEAP32[$1>>2] = $181;
     $182 = HEAP32[$3>>2]|0;
     $183 = ((($182)) + 1|0);
     HEAP32[$3>>2] = $183;
     $184 = HEAP8[$183>>0]|0;
     $185 = ($184<<24>>24)==(61);
     if ($185) {
      $186 = HEAP32[$1>>2]|0;
      $187 = (($186) + 1)|0;
      HEAP32[$1>>2] = $187;
      $188 = HEAP32[$2>>2]|0;
      $189 = (($188) + 3)|0;
      HEAP32[$2>>2] = $189;
      break L19;
     } else {
      $190 = HEAP32[$2>>2]|0;
      $191 = (($190) + 2)|0;
      HEAP32[$2>>2] = $191;
      break L19;
     }
    }
    switch ($24<<24>>24) {
    case 20:  {
     $197 = (($19) + 1)|0;
     HEAP32[$1>>2] = $197;
     $198 = HEAP32[$9>>2]|0;
     $199 = (($198) + ($197)|0);
     $200 = HEAP8[$199>>0]|0;
     switch ($200<<24>>24) {
     case 61:  {
      HEAP32[$2>>2] = 28;
      $201 = HEAP32[$1>>2]|0;
      $202 = (($201) + 1)|0;
      HEAP32[$1>>2] = $202;
      break L19;
      break;
     }
     case 62:  {
      HEAP32[$2>>2] = 34;
      $203 = HEAP32[$1>>2]|0;
      $204 = (($203) + 1)|0;
      HEAP32[$1>>2] = $204;
      break L19;
      break;
     }
     default: {
      HEAP32[$2>>2] = 27;
      break L19;
     }
     }
     break;
    }
    case 19:  {
     $205 = (($19) + 1)|0;
     HEAP32[$1>>2] = $205;
     $206 = HEAP32[$3>>2]|0;
     $207 = ((($206)) + 1|0);
     HEAP32[$3>>2] = $207;
     $208 = HEAP8[$207>>0]|0;
     $209 = ($208<<24>>24)==(62);
     if ($209) {
      $210 = HEAP32[$1>>2]|0;
      $211 = (($210) + 1)|0;
      HEAP32[$1>>2] = $211;
      HEAP32[$2>>2] = 32;
      break L19;
     } else {
      HEAP32[$2>>2] = 33;
      break L19;
     }
     break;
    }
    case 24:  {
     $212 = ((($20)) + 1|0);
     HEAP32[$3>>2] = $212;
     $213 = HEAP32[$1>>2]|0;
     $214 = (($213) + 1)|0;
     HEAP32[$1>>2] = $214;
     $215 = HEAP8[$212>>0]|0;
     $216 = ($215<<24>>24)==(40);
     if ($216) {
      $217 = (($213) + 2)|0;
      HEAP32[$1>>2] = $217;
      HEAP32[$2>>2] = 49;
      break L19;
     }
     $218 = $215&255;
     $219 = (($8) + ($218)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($220<<24>>24)==(15);
     if (!($221)) {
      HEAP32[$2>>2] = 52;
      break L19;
     }
     $222 = ((($0)) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $$0 = 0;
     while(1) {
      $224 = HEAP32[$3>>2]|0;
      $225 = HEAP8[$224>>0]|0;
      $226 = (($223) + ($$0)|0);
      HEAP8[$226>>0] = $225;
      $227 = (($$0) + 1)|0;
      $228 = HEAP32[$3>>2]|0;
      $229 = ((($228)) + 1|0);
      HEAP32[$3>>2] = $229;
      $230 = HEAP8[$229>>0]|0;
      $231 = $230&255;
      $232 = (4884 + ($231)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = ($233<<24>>24)==(0);
      if ($234) {
       break;
      } else {
       $$0 = $227;
      }
     }
     $235 = HEAP32[$1>>2]|0;
     $236 = (($235) + ($227))|0;
     HEAP32[$1>>2] = $236;
     $237 = (($223) + ($227)|0);
     HEAP8[$237>>0] = 0;
     HEAP32[$2>>2] = 36;
     break L19;
     break;
    }
    case 27:  {
     $238 = ((($20)) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP32[$1>>2]|0;
     $240 = (($239) + 1)|0;
     HEAP32[$1>>2] = $240;
     $241 = HEAP8[$238>>0]|0;
     $242 = ($241<<24>>24)==(62);
     if (!($242)) {
      HEAP32[$2>>2] = 52;
      break L19;
     }
     $243 = ((($0)) + 52|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ($244|0)==(1);
     if ($245) {
      $246 = ((($0)) + 64|0);
      $247 = HEAP32[$246>>2]|0;
      _lily_raise_syn($247,5521,$vararg_buffer3);
      // unreachable;
     }
     $248 = HEAP32[$0>>2]|0;
     $249 = ((($248)) + 48|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = ($250|0)==(0|0);
     if ($251) {
      $254 = HEAP32[$1>>2]|0;
      $255 = (($254) + 1)|0;
      HEAP32[$1>>2] = $255;
      HEAP32[$2>>2] = 53;
      break L19;
     } else {
      $252 = ((($0)) + 64|0);
      $253 = HEAP32[$252>>2]|0;
      _lily_raise_syn($253,5554,$vararg_buffer5);
      // unreachable;
     }
     break;
    }
    default: {
     HEAP32[$2>>2] = 52;
     break L19;
    }
    }
   }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $26 = ((($0)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $$096 = 0;
  while(1) {
   $28 = HEAP32[$3>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = (($27) + ($$096)|0);
   HEAP8[$30>>0] = $29;
   $31 = (($$096) + 1)|0;
   $32 = HEAP32[$3>>2]|0;
   $33 = ((($32)) + 1|0);
   HEAP32[$3>>2] = $33;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = (4884 + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    break;
   } else {
    $$096 = $31;
   }
  }
  $39 = HEAP32[$1>>2]|0;
  $40 = (($39) + ($31))|0;
  HEAP32[$1>>2] = $40;
  $41 = (($27) + ($31)|0);
  HEAP8[$41>>0] = 0;
  HEAP32[$2>>2] = 35;
 }
 $256 = HEAP32[$1>>2]|0;
 $257 = $256&65535;
 HEAP16[$4>>1] = $257;
 $258 = HEAP32[$2>>2]|0;
 $259 = ((($0)) + 48|0);
 HEAP32[$259>>2] = $258;
 STACKTOP = sp;return;
}
function _scan_multiline_comment($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 2|0);
 $6 = ((($0)) + 64|0);
 $7 = ((($0)) + 8|0);
 $$0 = $5;
 while(1) {
  $8 = HEAP8[$$0>>0]|0;
  $9 = ($8<<24>>24)==(93);
  if ($9) {
   $10 = ((($$0)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(35);
   if ($12) {
    label = 4;
    break;
   }
   $$pr = HEAP8[$$0>>0]|0;
   $14 = $$pr;
  } else {
   $14 = $8;
  }
  $15 = ($14<<24>>24)==(10);
  if (!($15)) {
   $20 = ((($$0)) + 1|0);
   $$0 = $20;
   continue;
  }
  $16 = (_read_line($0)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 9;
   break;
  }
  $18 = HEAP32[$7>>2]|0;
  $$0 = $18;
 }
 if ((label|0) == 4) {
  $13 = ((($$0)) + 2|0);
  HEAP32[$1>>2] = $13;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $19 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $3;
  _lily_raise_syn($19,5963,$vararg_buffer);
  // unreachable;
 }
}
function _scan_docstring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$058 = 0, $$060 = 0, $$159 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($2) - ($5))|0;
 $7 = ((($0)) + 64|0);
 $8 = ((($0)) + 12|0);
 $9 = ((($0)) + 64|0);
 $$0 = 0;$$060 = $4;
 L1: while(1) {
  $$058 = 0;
  L3: while(1) {
   $10 = (($$060) + ($$058)|0);
   $11 = HEAP8[$10>>0]|0;
   switch ($11<<24>>24) {
   case 35:  {
    break L3;
    break;
   }
   case 9: case 32:  {
    break;
   }
   default: {
    label = 5;
    break L1;
   }
   }
   $12 = (($$058) + 1)|0;
   $$058 = $12;
  }
  $22 = (($$058) + 1)|0;
  $23 = (($$060) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)==(35);
  if (!($25)) {
   label = 8;
   break;
  }
  $26 = (($$058) + 2)|0;
  $27 = (($$060) + ($26)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)==(35);
  if (!($29)) {
   label = 8;
   break;
  }
  $31 = ($$058|0)==($6|0);
  if (!($31)) {
   label = 10;
   break;
  }
  $33 = (($$058) + 3)|0;
  $$159 = $33;
  L10: while(1) {
   $34 = (($$060) + ($$159)|0);
   $35 = HEAP8[$34>>0]|0;
   switch ($35<<24>>24) {
   case 9: case 32:  {
    break;
   }
   default: {
    break L10;
   }
   }
   $36 = (($$159) + 1)|0;
   $$159 = $36;
  }
  $37 = (_strlen($$060)|0);
  $38 = (($37) - ($$159))|0;
  $39 = (($38) + ($$0))|0;
  _ensure_label_size($0,$39);
  $40 = HEAP32[$8>>2]|0;
  $41 = (($40) + ($$0)|0);
  $42 = HEAP32[$3>>2]|0;
  $43 = (($42) + ($$159)|0);
  (_strcpy($41,$43)|0);
  $44 = (_read_line($0)|0);
  $45 = ($44|0)==(0);
  if ($45) {
   label = 16;
   break;
  }
  $46 = HEAP32[$3>>2]|0;
  $$0 = $39;$$060 = $46;
 }
 if ((label|0) == 5) {
  $13 = (($$0) + -1)|0;
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13)|0);
  HEAP8[$16>>0] = 0;
  $17 = (_lily_malloc($$0)|0);
  $18 = ((($0)) + 16|0);
  HEAP32[$18>>2] = $17;
  $19 = HEAP32[$14>>2]|0;
  (_strcpy($17,$19)|0);
  $20 = HEAP32[$3>>2]|0;
  $21 = (($20) + ($$058)|0);
  HEAP32[$1>>2] = $21;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $30 = HEAP32[$9>>2]|0;
  _lily_raise_syn($30,5876,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $32 = HEAP32[$7>>2]|0;
  _lily_raise_syn($32,5923,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _scan_quoted($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = 0;
 _scan_quoted_raw($0,$1,$3,$2);
 STACKTOP = sp;return;
}
function _scan_single_quote($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(92);
 if ($6) {
  $7 = (_scan_escape($0,$4,$2)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (($4) + ($8)|0);
  $$0 = $7;$$014 = $9;
 } else {
  $10 = ((($3)) + 2|0);
  $$0 = $5;$$014 = $10;
 }
 $11 = HEAP8[$$014>>0]|0;
 $12 = ($11<<24>>24)==(39);
 if ($12) {
  $15 = ((($$014)) + 1|0);
  HEAP32[$1>>2] = $15;
  $16 = $$0&255;
  $17 = ((($0)) + 40|0);
  $18 = $17;
  $19 = $18;
  HEAP32[$19>>2] = $16;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $13 = ((($0)) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_raise_syn($14,5846,$vararg_buffer);
  // unreachable;
 }
}
function _scan_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 44|0;
 $6 = HEAP8[$3>>0]|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $7;
 HEAP32[$5>>2] = 1;
 $8 = $7&65535;
 $9 = ((($0)) + 28|0);
 HEAP16[$9>>1] = $8;
 switch ($6<<24>>24) {
 case 43: case 45:  {
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$4>>2] = $11;
  $12 = ((($3)) + 1|0);
  $$0 = $12;
  break;
 }
 default: {
  $$0 = $3;
 }
 }
 $13 = HEAP8[$$0>>0]|0;
 $14 = ($13<<24>>24)==(48);
 L4: do {
  if ($14) {
   $15 = HEAP32[$4>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$4>>2] = $16;
   $17 = ((($$0)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   switch ($18<<24>>24) {
   case 98:  {
    $19 = (_scan_binary($4,$17)|0);
    $20 = tempRet0;
    $41 = $20;$43 = $19;
    break L4;
    break;
   }
   case 99:  {
    $21 = (_scan_octal($4,$17)|0);
    $22 = tempRet0;
    $41 = $22;$43 = $21;
    break L4;
    break;
   }
   case 120:  {
    $23 = (_scan_hex($4,$17)|0);
    $24 = tempRet0;
    $41 = $24;$43 = $23;
    break L4;
    break;
   }
   default: {
    $25 = (_scan_decimal($0,$4,$5,$17)|0);
    $26 = tempRet0;
    $41 = $26;$43 = $25;
    break L4;
   }
   }
  } else {
   $27 = (_scan_decimal($0,$4,$5,$$0)|0);
   $28 = tempRet0;
   $41 = $28;$43 = $27;
  }
 } while(0);
 $29 = HEAP32[$4>>2]|0;
 $30 = ((($0)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)==(116);
 $35 = HEAP32[$5>>2]|0;
 $36 = ($35|0)==(0);
 if ($34) {
  if ($36) {
   $37 = ((($0)) + 64|0);
   $38 = HEAP32[$37>>2]|0;
   _lily_raise_syn($38,5638,$vararg_buffer);
   // unreachable;
  }
  switch ($6<<24>>24) {
  case 43: case 45:  {
   $39 = ((($0)) + 64|0);
   $40 = HEAP32[$39>>2]|0;
   _lily_raise_syn($40,5669,$vararg_buffer1);
   // unreachable;
   break;
  }
  default: {
  }
  }
  $42 = ($41>>>0)>(0);
  $44 = ($43>>>0)>(255);
  $45 = ($41|0)==(0);
  $46 = $45 & $44;
  $47 = $42 | $46;
  if ($47) {
   $48 = ((($0)) + 64|0);
   $49 = HEAP32[$48>>2]|0;
   _lily_raise_syn($49,5701,$vararg_buffer3);
   // unreachable;
  }
  $50 = ((($0)) + 40|0);
  $51 = $50;
  $52 = $51;
  HEAP32[$52>>2] = $43;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $41;
  HEAP32[$2>>2] = 40;
  $55 = HEAP32[$4>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$4>>2] = $56;
  $98 = HEAP32[$4>>2]|0;
  HEAP32[$1>>2] = $98;
  STACKTOP = sp;return;
 }
 if ($36) {
  $81 = (($29) - ($7))|0;
  $82 = ((($0)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($31) + ($7)|0);
  (_strncpy($83,$84,$81)|0);
  $85 = HEAP32[$82>>2]|0;
  $86 = (($85) + ($81)|0);
  HEAP8[$86>>0] = 0;
  $87 = (___errno_location()|0);
  HEAP32[$87>>2] = 0;
  $88 = HEAP32[$82>>2]|0;
  $89 = (+_strtod($88,0));
  $90 = HEAP32[$87>>2]|0;
  $91 = ($90|0)==(34);
  if ($91) {
   $92 = ((($0)) + 64|0);
   $93 = HEAP32[$92>>2]|0;
   _lily_raise_syn($93,5754,$vararg_buffer9);
   // unreachable;
  }
  $94 = ((($0)) + 60|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_lily_get_double_literal($95,$89)|0);
  $97 = ((($0)) + 56|0);
  HEAP32[$97>>2] = $96;
  HEAP32[$2>>2] = 42;
  $98 = HEAP32[$4>>2]|0;
  HEAP32[$1>>2] = $98;
  STACKTOP = sp;return;
 }
 $57 = ($6<<24>>24)==(45);
 do {
  if ($57) {
   $65 = ($41>>>0)<(2147483648);
   $66 = ($43>>>0)<(1);
   $67 = ($41|0)==(-2147483648);
   $68 = $67 & $66;
   $69 = $65 | $68;
   if ($69) {
    $70 = (_i64Subtract(0,0,($43|0),($41|0))|0);
    $71 = tempRet0;
    $77 = $70;$80 = $71;
    break;
   } else {
    $72 = ((($0)) + 64|0);
    $73 = HEAP32[$72>>2]|0;
    _lily_raise_syn($73,5726,$vararg_buffer7);
    // unreachable;
   }
  } else {
   $58 = ($41|0)>(-1);
   $59 = ($43>>>0)>(4294967295);
   $60 = ($41|0)==(-1);
   $61 = $60 & $59;
   $62 = $58 | $61;
   if ($62) {
    $77 = $43;$80 = $41;
   } else {
    $63 = ((($0)) + 64|0);
    $64 = HEAP32[$63>>2]|0;
    _lily_raise_syn($64,5726,$vararg_buffer5);
    // unreachable;
   }
  }
 } while(0);
 $74 = ((($0)) + 40|0);
 $75 = $74;
 $76 = $75;
 HEAP32[$76>>2] = $77;
 $78 = (($75) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $80;
 HEAP32[$2>>2] = 41;
 $98 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $98;
 STACKTOP = sp;return;
}
function _scan_lambda($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph = 0, $$0$ph48 = 0, $$046$ph = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 24|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $6;
 HEAP32[$3>>2] = 0;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 40|0);
 $13 = ((($0)) + 64|0);
 $14 = ((($0)) + 8|0);
 $$0$ph = $10;$$046$ph = 1;
 L1: while(1) {
  $$0$ph48 = $$0$ph;
  L3: while(1) {
   L5: while(1) {
    $15 = HEAP32[$2>>2]|0;
    $16 = HEAP8[$15>>0]|0;
    switch ($16<<24>>24) {
    case 10:  {
     break L5;
     break;
    }
    case 35:  {
     $17 = ((($15)) + 1|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(91);
     if (!($19)) {
      break L5;
     }
     break;
    }
    default: {
    }
    }
    $32 = HEAP32[$2>>2]|0;
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(35);
    if ($34) {
     $35 = ((($32)) + 1|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)==(91);
     if ($37) {
      $38 = HEAP32[$7>>2]|0;
      _scan_multiline_comment($0,$2);
      $39 = HEAP32[$7>>2]|0;
      $40 = ($39|0)==($38|0);
      if ($40) {
       continue;
      }
      $41 = (($39) - ($38))|0;
      $42 = HEAP32[$3>>2]|0;
      $43 = HEAP32[$11>>2]|0;
      $44 = (_strlen($43)|0);
      $45 = (($41) + 3)|0;
      $46 = (($45) + ($42))|0;
      $47 = (($46) + ($44))|0;
      _ensure_label_size($0,$47);
      $48 = HEAP32[$5>>2]|0;
      $49 = HEAP32[$3>>2]|0;
      $50 = (($48) + ($49)|0);
      _memset(($50|0),10,($41|0))|0;
      $51 = (($49) + ($41))|0;
      HEAP32[$3>>2] = $51;
      continue;
     }
    }
    $52 = HEAP32[$2>>2]|0;
    $53 = HEAP8[$52>>0]|0;
    switch ($53<<24>>24) {
    case 123:  {
     label = 16;
     break L3;
     break;
    }
    case 125:  {
     label = 17;
     break L3;
     break;
    }
    case 34:  {
     _scan_quoted_raw($0,$2,$3,52);
     continue L5;
     break;
    }
    case 39:  {
     _scan_single_quote($0,$2);
     $54 = HEAP32[$3>>2]|0;
     $55 = (($54) + 7)|0;
     _ensure_label_size($0,$55);
     $56 = $12;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $59 = (($56) + 4)|0;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = $58 & 255;
     HEAP32[$vararg_buffer1>>2] = $62;
     (_sprintf($4,5632,$vararg_buffer1)|0);
     $63 = HEAP32[$5>>2]|0;
     $64 = HEAP32[$3>>2]|0;
     $65 = (($63) + ($64)|0);
     (_strcpy($65,$4)|0);
     $66 = (_strlen($4)|0);
     $67 = (($66) + ($64))|0;
     HEAP32[$3>>2] = $67;
     continue L5;
     break;
    }
    default: {
     $$1 = $$046$ph;
     break L3;
    }
    }
   }
   $20 = (_read_line($0)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    label = 7;
    break L1;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = (($20) + 3)|0;
   $26 = (($25) + ($24))|0;
   _ensure_label_size($0,$26);
   $27 = HEAP32[$5>>2]|0;
   $28 = HEAP32[$14>>2]|0;
   HEAP32[$2>>2] = $28;
   $29 = HEAP32[$3>>2]|0;
   $30 = (($27) + ($29)|0);
   HEAP8[$30>>0] = 10;
   $31 = (($29) + 1)|0;
   HEAP32[$3>>2] = $31;
   $$0$ph48 = $27;
  }
  if ((label|0) == 16) {
   label = 0;
   $68 = (($$046$ph) + 1)|0;
   $$1 = $68;
  }
  else if ((label|0) == 17) {
   label = 0;
   $69 = ($$046$ph|0)==(1);
   if ($69) {
    label = 20;
    break;
   }
   $70 = (($$046$ph) + -1)|0;
   $$1 = $70;
  }
  $71 = HEAP32[$2>>2]|0;
  $72 = HEAP8[$71>>0]|0;
  $73 = HEAP32[$3>>2]|0;
  $74 = (($$0$ph48) + ($73)|0);
  HEAP8[$74>>0] = $72;
  $75 = HEAP32[$2>>2]|0;
  $76 = ((($75)) + 1|0);
  HEAP32[$2>>2] = $76;
  $77 = HEAP32[$3>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$3>>2] = $78;
  $$0$ph = $$0$ph48;$$046$ph = $$1;
 }
 if ((label|0) == 7) {
  $22 = HEAP32[$13>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  _lily_raise_syn($22,5590,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $79 = HEAP32[$3>>2]|0;
  $80 = (($$0$ph48) + ($79)|0);
  HEAP8[$80>>0] = 125;
  $81 = HEAP32[$3>>2]|0;
  $82 = (($81) + 1)|0;
  $83 = (($$0$ph48) + ($82)|0);
  HEAP8[$83>>0] = 0;
  $84 = HEAP32[$2>>2]|0;
  $85 = ((($84)) + 1|0);
  HEAP32[$1>>2] = $85;
  STACKTOP = sp;return;
 }
}
function _scan_binary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$023 = 0, $$02529 = 0, $$1$lcssa = 0, $$12430 = 0, $$131 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, $switch27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$0$in = $2;$$pn = $1;
 while(1) {
  $$0 = (($$0$in) + 1)|0;
  $$023 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$023>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$0$in = $$0;$$pn = $$023;
  } else {
   break;
  }
 }
 $5 = HEAP8[$$023>>0]|0;
 $6 = $5 & -2;
 $switch27 = ($6<<24>>24)==(48);
 if ($switch27) {
  $$02529 = 0;$$12430 = $$023;$$131 = $$0;$13 = $5;$8 = 0;$9 = 0;
 } else {
  $$1$lcssa = $$0;$25 = 0;$26 = 0;
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($25);
  return ($26|0);
 }
 while(1) {
  $7 = (($$02529) + 1)|0;
  $10 = (_bitshift64Shl(($8|0),($9|0),1)|0);
  $11 = tempRet0;
  $12 = $13 << 24 >> 24;
  $14 = ($12|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (_i64Add(($10|0),($11|0),-48,-1)|0);
  $17 = tempRet0;
  $18 = (_i64Add(($16|0),($17|0),($12|0),($15|0))|0);
  $19 = tempRet0;
  $20 = ((($$12430)) + 1|0);
  $21 = (($$131) + 1)|0;
  $22 = HEAP8[$20>>0]|0;
  $23 = $22 & -2;
  $switch = ($23<<24>>24)!=(48);
  $24 = ($7|0)==(65);
  $or$cond = $24 | $switch;
  if ($or$cond) {
   $$1$lcssa = $21;$25 = $19;$26 = $18;
   break;
  } else {
   $$02529 = $7;$$12430 = $20;$$131 = $21;$13 = $22;$8 = $18;$9 = $19;
  }
 }
 HEAP32[$0>>2] = $$1$lcssa;
 tempRet0 = ($25);
 return ($26|0);
}
function _scan_octal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$024 = 0, $$02631 = 0, $$1$lcssa = 0, $$12532 = 0, $$133 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$not = 0, $or$cond$not29 = 0, $or$cond28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$0$in = $2;$$pn = $1;
 while(1) {
  $$0 = (($$0$in) + 1)|0;
  $$024 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$024>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$0$in = $$0;$$pn = $$024;
  } else {
   break;
  }
 }
 $5 = HEAP8[$$024>>0]|0;
 $6 = $5 & -8;
 $or$cond$not29 = ($6<<24>>24)==(48);
 if ($or$cond$not29) {
  $$02631 = 0;$$12532 = $$024;$$133 = $$0;$13 = $5;$8 = 0;$9 = 0;
 } else {
  $$1$lcssa = $$0;$25 = 0;$26 = 0;
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($25);
  return ($26|0);
 }
 while(1) {
  $7 = (($$02631) + 1)|0;
  $10 = (_bitshift64Shl(($8|0),($9|0),3)|0);
  $11 = tempRet0;
  $12 = $13 << 24 >> 24;
  $14 = ($12|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (_i64Add(($10|0),($11|0),-48,-1)|0);
  $17 = tempRet0;
  $18 = (_i64Add(($16|0),($17|0),($12|0),($15|0))|0);
  $19 = tempRet0;
  $20 = (($$133) + 1)|0;
  $21 = ((($$12532)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 & -8;
  $or$cond$not = ($23<<24>>24)!=(48);
  $24 = ($7|0)==(23);
  $or$cond28 = $24 | $or$cond$not;
  if ($or$cond28) {
   $$1$lcssa = $20;$25 = $19;$26 = $18;
   break;
  } else {
   $$02631 = $7;$$12532 = $21;$$133 = $20;$13 = $22;$8 = $18;$9 = $19;
  }
 }
 HEAP32[$0>>2] = $$1$lcssa;
 tempRet0 = ($25);
 return ($26|0);
}
function _scan_hex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$030 = 0, $$030$in = 0, $$031 = 0, $$03444 = 0, $$1$lcssa = 0, $$13245 = 0, $$146 = 0, $$off = 0, $$off41 = 0, $$off42 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$030$in = $2;$$pn = $1;
 while(1) {
  $$030 = (($$030$in) + 1)|0;
  $$031 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$031>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$030$in = $$030;$$pn = $$031;
  } else {
   $$03444 = 0;$$13245 = $$031;$$146 = $$030;$10 = 0;$9 = 0;
   break;
  }
 }
 while(1) {
  $5 = HEAP8[$$13245>>0]|0;
  $$off = (($5) + -48)<<24>>24;
  $6 = ($$off&255)<(10);
  if ($6) {
   $17 = 48;$18 = 0;
  } else {
   $$off41 = (($5) + -97)<<24>>24;
   $7 = ($$off41&255)<(6);
   if ($7) {
    $17 = 87;$18 = 0;
   } else {
    $$off42 = (($5) + -65)<<24>>24;
    $8 = ($$off42&255)<(6);
    if ($8) {
     $17 = 55;$18 = 0;
    } else {
     $$1$lcssa = $$146;$27 = $10;$28 = $9;
     label = 7;
     break;
    }
   }
  }
  $11 = (_bitshift64Shl(($9|0),($10|0),4)|0);
  $12 = tempRet0;
  $13 = HEAP8[$$13245>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)<(0);
  $16 = $15 << 31 >> 31;
  $19 = (_i64Subtract(($11|0),($12|0),($17|0),($18|0))|0);
  $20 = tempRet0;
  $21 = (_i64Add(($19|0),($20|0),($14|0),($16|0))|0);
  $22 = tempRet0;
  $23 = (($$03444) + 1)|0;
  $24 = (($$146) + 1)|0;
  $25 = ((($$13245)) + 1|0);
  $26 = ($23|0)==(17);
  if ($26) {
   $$1$lcssa = $24;$27 = $22;$28 = $21;
   label = 7;
   break;
  } else {
   $$03444 = $23;$$13245 = $25;$$146 = $24;$10 = $22;$9 = $21;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($27);
  return ($28|0);
 }
 return (0)|0;
}
function _scan_decimal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02942 = 0, $$031$ = 0, $$03139 = 0, $$041 = 0, $$1 = 0, $$13040 = 0, $$132 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $5;
 $6 = HEAP8[$3>>0]|0;
 $7 = ($6<<24>>24)==(48);
 if ($7) {
  $$02942 = $3;
  while(1) {
   $8 = HEAP32[$4>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$4>>2] = $9;
   $10 = ((($$02942)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(48);
   if ($12) {
    $$02942 = $10;
   } else {
    $$03139 = 0;$$041 = 0;$$13040 = $10;$17 = 0;$18 = 0;
    break;
   }
  }
 } else {
  $$03139 = 0;$$041 = 0;$$13040 = $3;$17 = 0;$18 = 0;
 }
 L4: while(1) {
  $13 = HEAP8[$$13040>>0]|0;
  $$off = (($13) + -48)<<24>>24;
  $14 = ($$off&255)<(10);
  if ($14) {
   $15 = HEAP32[$2>>2]|0;
   $16 = ($15|0)==(0);
   $19 = (___muldi3(($17|0),($18|0),10,0)|0);
   $20 = tempRet0;
   $21 = $13 << 24 >> 24;
   $22 = ($21|0)<(0);
   $23 = $22 << 31 >> 31;
   $24 = (_i64Add(($19|0),($20|0),-48,-1)|0);
   $25 = tempRet0;
   $26 = (_i64Add(($24|0),($25|0),($21|0),($23|0))|0);
   $27 = tempRet0;
   $28 = $16 ? $17 : $26;
   $29 = $16 ? $18 : $27;
   $30 = $16&1;
   $31 = $30 ^ 1;
   $$031$ = (($31) + ($$03139))|0;
   $$1 = $$041;$$132 = $$031$;$44 = $28;$45 = $29;
  } else {
   switch ($13<<24>>24) {
   case 101:  {
    label = 9;
    break L4;
    break;
   }
   case 46:  {
    break;
   }
   default: {
    $42 = $18;$43 = $17;
    break L4;
   }
   }
   $32 = ($$041|0)==(1);
   if ($32) {
    $42 = $18;$43 = $17;
    break;
   }
   $33 = ((($$13040)) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $isdigittmp = (($35) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    $42 = $18;$43 = $17;
    break;
   }
   HEAP32[$2>>2] = 0;
   $$1 = 1;$$132 = $$03139;$44 = $17;$45 = $18;
  }
  $36 = (($$132) + 1)|0;
  $37 = HEAP32[$4>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$4>>2] = $38;
  $39 = ((($$13040)) + 1|0);
  $40 = ($36|0)==(21);
  if ($40) {
   $42 = $45;$43 = $44;
   break;
  } else {
   $$03139 = $36;$$041 = $$1;$$13040 = $39;$17 = $44;$18 = $45;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$2>>2] = 0;
  _scan_exponent($0,$4,$$13040);
  $42 = $18;$43 = $17;
 }
 $41 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $41;
 tempRet0 = ($42);
 STACKTOP = sp;return ($43|0);
}
function _scan_exponent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $$021 = 0, $$028 = 0, $$1$lcssa = 0, $$12226 = 0, $$127 = 0, $$off = 0, $$off24 = 0, $$off2425 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($2)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(43);
 if ($6) {
  label = 3;
 } else {
  $7 = (($3) + 1)|0;
  $8 = ($5<<24>>24)==(45);
  if ($8) {
   label = 3;
  } else {
   $$020 = $7;$$021 = $4;
  }
 }
 if ((label|0) == 3) {
  $9 = (($3) + 2)|0;
  $10 = ((($2)) + 2|0);
  $$020 = $9;$$021 = $10;
 }
 $11 = HEAP8[$$021>>0]|0;
 $$off = (($11) + -48)<<24>>24;
 $12 = ($$off&255)>(9);
 if ($12) {
  $13 = ((($0)) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_raise_syn($14,5781,$vararg_buffer);
  // unreachable;
 }
 $15 = HEAP8[$$021>>0]|0;
 $$off2425 = (($15) + -48)<<24>>24;
 $16 = ($$off2425&255)<(10);
 if (!($16)) {
  $$1$lcssa = $$020;
  HEAP32[$1>>2] = $$1$lcssa;
  STACKTOP = sp;return;
 }
 $17 = ((($0)) + 64|0);
 $$028 = 0;$$12226 = $$021;$$127 = $$020;
 while(1) {
  $18 = (($$028) + 1)|0;
  $19 = ($$028|0)>(2);
  if ($19) {
   label = 9;
   break;
  }
  $21 = (($$127) + 1)|0;
  $22 = ((($$12226)) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $$off24 = (($23) + -48)<<24>>24;
  $24 = ($$off24&255)<(10);
  if ($24) {
   $$028 = $18;$$12226 = $22;$$127 = $21;
  } else {
   $$1$lcssa = $21;
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $20 = HEAP32[$17>>2]|0;
  _lily_raise_syn($20,5823,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  HEAP32[$1>>2] = $$1$lcssa;
  STACKTOP = sp;return;
 }
}
function _get_entry($0) {
 $0 = $0|0;
 var $$0 = 0, $$052 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   label = 4;
  } else {
   $3 = ((($1)) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($1)) + 52|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     label = 4;
     break;
    }
   }
   $21 = HEAP32[$0>>2]|0;
   $22 = ((($21)) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$052 = $21;
   } else {
    $25 = ((($21)) + 52|0);
    $26 = HEAP32[$25>>2]|0;
    $$052 = $26;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $9 = (_lily_malloc(56)|0);
  $10 = HEAP32[$0>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   HEAP32[$0>>2] = $9;
   $12 = ((($9)) + 48|0);
   HEAP32[$12>>2] = 0;
  } else {
   $13 = ((($10)) + 52|0);
   HEAP32[$13>>2] = $9;
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($9)) + 48|0);
   HEAP32[$15>>2] = $14;
  }
  $16 = ((($9)) + 40|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($9)) + 44|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($9)) + 8|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($9)) + 12|0);
  HEAP16[$19>>1] = 0;
  $20 = ((($9)) + 52|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$9>>2] = $0;
  $$052 = $9;
 }
 $27 = ((($$052)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $77 = ((($0)) + 34|0);
  HEAP16[$77>>1] = 0;
  HEAP32[$0>>2] = $$052;
  return ($$052|0);
 }
 $30 = ((($28)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = ((($0)) + 32|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (_lily_malloc($35)|0);
  $$0 = $36;
 } else {
  $37 = ((($28)) + 14|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = ((($0)) + 32|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = ($38&65535)<($40&65535);
  if ($41) {
   $42 = $40&65535;
   $43 = (_lily_realloc($31,$42)|0);
   $$0 = $43;
  } else {
   $$0 = $31;
  }
 }
 $44 = ((($0)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 (_strcpy($$0,$45)|0);
 HEAP32[$30>>2] = $$0;
 $46 = ((($0)) + 20|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($28)) + 20|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($0)) + 34|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = ((($28)) + 12|0);
 HEAP16[$51>>1] = $50;
 $52 = ((($0)) + 32|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = ((($28)) + 14|0);
 HEAP16[$54>>1] = $53;
 $55 = ((($0)) + 48|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($28)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $56 << 16;
 $60 = $58 & 65535;
 $61 = $60 | $59;
 HEAP32[$57>>2] = $61;
 $62 = ((($0)) + 56|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($28)) + 4|0);
 HEAP32[$64>>2] = $63;
 $65 = ((($0)) + 40|0);
 $66 = $65;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($28)) + 32|0);
 $73 = $72;
 $74 = $73;
 HEAP32[$74>>2] = $68;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $71;
 HEAP32[$46>>2] = 0;
 $77 = ((($0)) + 34|0);
 HEAP16[$77>>1] = 0;
 HEAP32[$0>>2] = $$052;
 return ($$052|0);
}
function _setup_entry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  (_read_line($0)|0);
  STACKTOP = sp;return;
 }
 $6 = ((($0)) + 52|0);
 HEAP32[$6>>2] = $2;
 (_read_line($0)|0);
 $7 = ($2|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_strncmp($9,6017,5)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ((($0)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_raise_syn($13,6024,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer_handle_page_data($0);
 STACKTOP = sp;return;
}
function _lily_lexer_handle_page_data($0) {
 $0 = $0|0;
 var $$0 = 0, $$053 = 0, $$054 = 0, $$1 = 0, $$155 = 0, $$2 = 0, $$256 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 34|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(10);
 $11 = ($4&65535)>(2);
 $or$cond = $11 & $10;
 if ($or$cond) {
  $12 = (($5) + -1)|0;
  $13 = (($7) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(62);
  if ($15) {
   $16 = (($5) + -2)|0;
   $17 = (($7) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(63);
   if ($19) {
    $$2 = 0;
    label = 12;
   } else {
    $$0 = $9;$$053 = 0;$$054 = $5;
    label = 4;
   }
  } else {
   $$0 = $9;$$053 = 0;$$054 = $5;
   label = 4;
  }
 } else {
  $$0 = $9;$$053 = 0;$$054 = $5;
  label = 4;
 }
 while(1) {
  if ((label|0) == 4) {
   label = 0;
   $20 = (($$054) + 1)|0;
   $21 = ($$0<<24>>24)==(60);
   if ($21) {
    $22 = HEAP32[$6>>2]|0;
    $23 = (($22) + ($20)|0);
    $24 = (_strncmp($23,6073,5)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     label = 6;
     break;
    }
   }
   $34 = ((($0)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($$053)|0);
   HEAP8[$36>>0] = $$0;
   $37 = (($$053) + 1)|0;
   $38 = ((($0)) + 32|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&65535;
   $41 = (($40) + -1)|0;
   $42 = ($37|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$34>>2]|0;
    $44 = (($43) + ($37)|0);
    HEAP8[$44>>0] = 0;
    $45 = ((($0)) + 68|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vii[$46 & 63]($47,$2);
    $$1 = 0;
   } else {
    $$1 = $37;
   }
   $48 = ($$0<<24>>24)==(10);
   if ($48) {
    $$2 = $$1;
    label = 12;
    continue;
   } else {
    $$155 = $20;$$3 = $$1;
   }
  }
  else if ((label|0) == 12) {
   label = 0;
   $49 = (_read_line($0)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    break;
   } else {
    $$155 = 0;$$3 = $$2;
   }
  }
  $63 = HEAP32[$6>>2]|0;
  $64 = (($63) + ($$155)|0);
  $65 = HEAP8[$64>>0]|0;
  $$0 = $65;$$053 = $$3;$$054 = $$155;
  label = 4;
 }
 if ((label|0) == 6) {
  $26 = ($$053|0)==(0);
  if (!($26)) {
   $27 = ((($0)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($$053)|0);
   HEAP8[$29>>0] = 0;
   $30 = ((($0)) + 68|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vii[$31 & 63]($32,$2);
  }
  $33 = (($$054) + 6)|0;
  $phitmp = $33&65535;
  $$256 = $phitmp;
  HEAP16[$3>>1] = $$256;
  return;
 }
 $51 = ($$2|0)==(0);
 do {
  if (!($51)) {
   $52 = ((($0)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($$2)|0);
   HEAP8[$54>>0] = 0;
   $55 = ($$2|0)==(1);
   if (!($55)) {
    $56 = HEAP32[$52>>2]|0;
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(10);
    if (!($58)) {
     $59 = ((($0)) + 68|0);
     $60 = HEAP32[$59>>2]|0;
     FUNCTION_TABLE_vii[$60 & 63]($56,$2);
     break;
    }
   }
   $61 = HEAP32[$52>>2]|0;
   HEAP8[$61>>0] = 0;
  }
 } while(0);
 $62 = ((($0)) + 48|0);
 HEAP32[$62>>2] = 54;
 $$256 = 0;
 HEAP16[$3>>1] = $$256;
 return;
}
function _lily_load_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_get_entry($0)|0);
 $4 = ((($3)) + 40|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($3)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & -65536;
 $8 = $7 | 1;
 HEAP32[$5>>2] = $8;
 _setup_entry($0,$3,$1);
 return;
}
function _lily_load_copy_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_get_entry($0)|0);
 $4 = (_strlen($2)|0);
 $5 = (($4) + 1)|0;
 $6 = (_lily_malloc($5)|0);
 (_strcpy($6,$2)|0);
 $7 = ((($3)) + 40|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 44|0);
 HEAP32[$8>>2] = $6;
 $9 = ((($3)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & -65536;
 $12 = $11 | 2;
 HEAP32[$9>>2] = $12;
 _setup_entry($0,$3,$1);
 return;
}
function _tokname($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(55);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (756 + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lily_library_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_dlsym(($0|0),($1|0))|0);
 return ($2|0);
}
function _lily_library_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_dlclose(($0|0))|0);
 return;
}
function _lily_move_boolean($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($0);
 }
 $6 = ((($0)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 HEAP32[$0>>2] = 6;
 return;
}
function _lily_move_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = $1&255;
 $6 = ((($0)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 HEAP32[$0>>2] = 4;
 return;
}
function _lily_move_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 HEAP32[$0>>2] = 524293;
 return;
}
function _lily_move_double($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($0)) + 8|0);
 HEAPF64[$5>>3] = $1;
 HEAP32[$0>>2] = 2;
 return;
}
function _lily_move_dynamic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 HEAP32[$0>>2] = 655368;
 return;
}
function _lily_move_empty_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($1);
 }
 $5 = ((($1)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $0&65535;
 $11 = $10 | 2097152;
 HEAP32[$1>>2] = $11;
 return;
}
function _lily_move_foreign_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 1572864;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_instance_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 262144;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 HEAP32[$0>>2] = 524300;
 return;
}
function _lily_move_function_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 7;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_hash_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 10;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_integer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($0);
 }
 $6 = ((($0)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 HEAP32[$0>>2] = 1;
 return;
}
function _lily_move_list_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 9;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 HEAP32[$0>>2] = 524291;
 return;
}
function _lily_move_tuple_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 11;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_move_unit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($0);
 }
 $6 = ((($0)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 HEAP32[$0>>2] = 27;
 return;
}
function _lily_move_variant_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = $0 | 2097152;
 HEAP32[$1>>2] = $9;
 return;
}
function _lily_new_msgbuf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(12)|0);
 $2 = (_lily_malloc($0)|0);
 HEAP32[$1>>2] = $2;
 HEAP8[$2>>0] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_free_msgbuf($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_mb_get($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_mb_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 1)|0;
 $6 = (($5) + ($4))|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  _resize_msgbuf($0,$6);
 }
 $10 = HEAP32[$0>>2]|0;
 (_strcat($10,$1)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (($11) + ($2))|0;
 HEAP32[$3>>2] = $12;
 return;
}
function _resize_msgbuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $6 = $3;
  while(1) {
   $5 = $6 << 1;
   $7 = ($5>>>0)<($1>>>0);
   if ($7) {
    $6 = $5;
   } else {
    break;
   }
  }
  HEAP32[$2>>2] = $5;
  $$lcssa = $5;
 } else {
  $$lcssa = $3;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_lily_realloc($8,$$lcssa)|0);
 HEAP32[$0>>2] = $9;
 return;
}
function _lily_mb_escape_add_str($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_mb_add_char($0,34);
 $2 = (_strlen($1)|0);
 _add_escaped_raw($0,0,$1,$2);
 _lily_mb_add_char($0,34);
 return;
}
function _lily_mb_add_char($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP8[$2>>0] = $1;
 $3 = ((($2)) + 1|0);
 HEAP8[$3>>0] = 0;
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _add_escaped_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03639 = 0, $$03738 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0;
 var $or$cond41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ($1|0)==(0);
  $$03639 = 0;$$03738 = 0;
  while(1) {
   $6 = (($2) + ($$03738)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (_isprint($8)|0);
   $10 = ($9|0)!=(0);
   $11 = ($7<<24>>24)<(0);
   $or$cond = $5 & $11;
   $or$cond41 = $10 | $or$cond;
   if ($or$cond41) {
    $$1 = $$03639;
   } else {
    $12 = (_get_escape($7)|0);
    $13 = ($$03738|0)==($$03639|0);
    if (!($13)) {
     _lily_mb_add_slice($0,$2,$$03639,$$03738);
    }
    _lily_mb_add_char($0,92);
    $14 = ($12<<24>>24)==(0);
    if ($14) {
     _add_escaped_char($0,$7);
    } else {
     _lily_mb_add_char($0,$12);
    }
    $15 = (($$03738) + 1)|0;
    $$1 = $15;
   }
   $16 = (($$03738) + 1)|0;
   $exitcond = ($16|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$03639 = $$1;$$03738 = $16;
   }
  }
  $17 = ($$1|0)==($3|0);
  if (!($17)) {
   _lily_mb_add_slice($0,$2,$$1,$3);
  }
 }
 $18 = ($1|0)==(0);
 if ($18) {
  return;
 }
 _lily_mb_add_char($0,0);
 return;
}
function _get_escape($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0<<24>>24) {
 case 10:  {
  $$0 = 110;
  break;
 }
 case 13:  {
  $$0 = 114;
  break;
 }
 case 9:  {
  $$0 = 116;
  break;
 }
 case 39:  {
  $$0 = $0;
  break;
 }
 case 34:  {
  $$0 = $0;
  break;
 }
 case 92:  {
  $$0 = $0;
  break;
 }
 case 8:  {
  $$0 = 98;
  break;
 }
 case 7:  {
  $$0 = 97;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_mb_add_slice($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) - ($2))|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 1)|0;
 $8 = (($7) + ($6))|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  _resize_msgbuf($0,$8);
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 $14 = (($12) + ($13)|0);
 $15 = (($1) + ($2)|0);
 _memcpy(($14|0),($15|0),($4|0))|0;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($16) + ($4))|0;
 HEAP32[$5>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + ($17)|0);
 HEAP8[$19>>0] = 0;
 return;
}
function _add_escaped_char($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = $1&255;
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($2,6311,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _lily_mb_add_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = (_get_escape($1)|0);
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = $3 << 24 >> 24;
  HEAP32[$vararg_buffer>>2] = $5;
  (_sprintf($2,6316,$vararg_buffer)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 }
 $6 = $1 << 24 >> 24;
 $7 = (_isprint($6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$vararg_buffer4>>2] = $6;
  (_sprintf($2,6327,$vararg_buffer4)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $6;
  (_sprintf($2,6322,$vararg_buffer1)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 }
}
function _lily_mb_add_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($2,16111,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _add_double($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAPF64[$vararg_buffer>>3] = $1;
 (_sprintf($2,6335,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _lily_mb_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 HEAP8[$2>>0] = 0;
 return;
}
function _lily_mb_add_fmt_va($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$076$lcssa = 0, $$07683 = 0, $$084 = 0, $$2$ph = 0, $$278$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded13 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded22 = 0;
 var $expanded23 = 0, $expanded24 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0, $expanded44 = 0, $expanded45 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = (_strlen($1)|0);
 $5 = ($4|0)>(0);
 if ($5) {
  $$07683 = 0;$$084 = 0;
 } else {
  STACKTOP = sp;return;
 }
 L3: while(1) {
  $6 = (($1) + ($$084)|0);
  $7 = HEAP8[$6>>0]|0;
  switch ($7<<24>>24) {
  case 37:  {
   $8 = (($$084) + 1)|0;
   $9 = ($8|0)==($4|0);
   if ($9) {
    $$0$lcssa = $$084;$$076$lcssa = $$07683;
    break L3;
   }
   $10 = ($$084|0)==($$07683|0);
   if (!($10)) {
    _lily_mb_add_slice($0,$1,$$07683,$$084);
   }
   $11 = (($1) + ($8)|0);
   $12 = HEAP8[$11>>0]|0;
   switch ($12<<24>>24) {
   case 115:  {
    $arglist_current = HEAP32[$2>>2]|0;
    $13 = $arglist_current;
    $14 = ((0) + 4|0);
    $expanded13 = $14;
    $expanded = (($expanded13) - 1)|0;
    $15 = (($13) + ($expanded))|0;
    $16 = ((0) + 4|0);
    $expanded17 = $16;
    $expanded16 = (($expanded17) - 1)|0;
    $expanded15 = $expanded16 ^ -1;
    $17 = $15 & $expanded15;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $arglist_next = ((($18)) + 4|0);
    HEAP32[$2>>2] = $arglist_next;
    _lily_mb_add($0,$19);
    break;
   }
   case 100:  {
    $arglist_current2 = HEAP32[$2>>2]|0;
    $20 = $arglist_current2;
    $21 = ((0) + 4|0);
    $expanded20 = $21;
    $expanded19 = (($expanded20) - 1)|0;
    $22 = (($20) + ($expanded19))|0;
    $23 = ((0) + 4|0);
    $expanded24 = $23;
    $expanded23 = (($expanded24) - 1)|0;
    $expanded22 = $expanded23 ^ -1;
    $24 = $22 & $expanded22;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $arglist_next3 = ((($25)) + 4|0);
    HEAP32[$2>>2] = $arglist_next3;
    _lily_mb_add_int($0,$26);
    break;
   }
   case 99:  {
    $arglist_current5 = HEAP32[$2>>2]|0;
    $27 = $arglist_current5;
    $28 = ((0) + 4|0);
    $expanded27 = $28;
    $expanded26 = (($expanded27) - 1)|0;
    $29 = (($27) + ($expanded26))|0;
    $30 = ((0) + 4|0);
    $expanded31 = $30;
    $expanded30 = (($expanded31) - 1)|0;
    $expanded29 = $expanded30 ^ -1;
    $31 = $29 & $expanded29;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $arglist_next6 = ((($32)) + 4|0);
    HEAP32[$2>>2] = $arglist_next6;
    $34 = $33&255;
    _lily_mb_add_char($0,$34);
    break;
   }
   case 112:  {
    $arglist_current8 = HEAP32[$2>>2]|0;
    $35 = $arglist_current8;
    $36 = ((0) + 4|0);
    $expanded34 = $36;
    $expanded33 = (($expanded34) - 1)|0;
    $37 = (($35) + ($expanded33))|0;
    $38 = ((0) + 4|0);
    $expanded38 = $38;
    $expanded37 = (($expanded38) - 1)|0;
    $expanded36 = $expanded37 ^ -1;
    $39 = $37 & $expanded36;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $arglist_next9 = ((($40)) + 4|0);
    HEAP32[$2>>2] = $arglist_next9;
    HEAP32[$vararg_buffer>>2] = $41;
    (_snprintf($3,128,6338,$vararg_buffer)|0);
    _lily_mb_add($0,$3);
    break;
   }
   case 37:  {
    _lily_mb_add_char($0,37);
    break;
   }
   default: {
   }
   }
   $42 = (($$084) + 2)|0;
   $$2$ph = $8;$$278$ph = $42;
   break;
  }
  case 94:  {
   $43 = ($$084|0)==($$07683|0);
   if (!($43)) {
    _lily_mb_add_slice($0,$1,$$07683,$$084);
   }
   $44 = (($$084) + 1)|0;
   $45 = (($1) + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(84);
   if ($47) {
    $arglist_current11 = HEAP32[$2>>2]|0;
    $48 = $arglist_current11;
    $49 = ((0) + 4|0);
    $expanded41 = $49;
    $expanded40 = (($expanded41) - 1)|0;
    $50 = (($48) + ($expanded40))|0;
    $51 = ((0) + 4|0);
    $expanded45 = $51;
    $expanded44 = (($expanded45) - 1)|0;
    $expanded43 = $expanded44 ^ -1;
    $52 = $50 & $expanded43;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $arglist_next12 = ((($53)) + 4|0);
    HEAP32[$2>>2] = $arglist_next12;
    _add_type($0,$54);
   }
   $55 = (($$084) + 2)|0;
   $$2$ph = $44;$$278$ph = $55;
   break;
  }
  default: {
   $$2$ph = $$084;$$278$ph = $$07683;
  }
  }
  $56 = (($$2$ph) + 1)|0;
  $57 = ($56|0)<($4|0);
  if ($57) {
   $$07683 = $$278$ph;$$084 = $56;
  } else {
   $$0$lcssa = $56;$$076$lcssa = $$278$ph;
   break;
  }
 }
 $58 = ($$0$lcssa|0)==($$076$lcssa|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 _lily_mb_add_slice($0,$1,$$076$lcssa,$$0$lcssa);
 STACKTOP = sp;return;
}
function _add_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05161 = 0, $$052$lcssa = 0, $$05255 = 0, $$05356 = 0, $$057 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_mb_add($0,$5);
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(7);
 if (!($9)) {
  $55 = ((($6)) + 46|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = ($56<<16>>16)==(0);
  if ($57) {
   return;
  }
  $58 = ($8<<16>>16)==(-4);
  if (!($58)) {
   _lily_mb_add($0,6341);
  }
  $59 = ((($1)) + 10|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = ($60<<16>>16)==(0);
  if (!($61)) {
   $62 = ((($1)) + 16|0);
   $$05161 = 0;
   while(1) {
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($$05161<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    _add_type($0,$65);
    $66 = HEAP16[$59>>1]|0;
    $67 = $66&65535;
    $68 = (($67) + -1)|0;
    $69 = ($$05161|0)==($68|0);
    if (!($69)) {
     _lily_mb_add($0,6343);
    }
    $70 = (($$05161) + 1)|0;
    $71 = HEAP16[$59>>1]|0;
    $72 = $71&65535;
    $73 = ($70|0)<($72|0);
    if ($73) {
     $$05161 = $70;
    } else {
     break;
    }
   }
  }
  if ($58) {
   return;
  }
  _lily_mb_add($0,6363);
  return;
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(0);
 if ($12) {
  _lily_mb_add($0,6349);
 } else {
  _lily_mb_add($0,6341);
  $13 = HEAP16[$10>>1]|0;
  $14 = ($13&65535)>(1);
  _lily_mb_add_char($0,65);
  if ($14) {
   $$05356 = 65;$$057 = 0;
   while(1) {
    _lily_mb_add($0,6343);
    $15 = (($$057) + 1)|0;
    $16 = (($$05356) + 1)<<24>>24;
    $17 = HEAP16[$10>>1]|0;
    $18 = $17&65535;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)<($19|0);
    _lily_mb_add_char($0,$16);
    if ($20) {
     $$05356 = $16;$$057 = $15;
    } else {
     break;
    }
   }
  }
  _lily_mb_add($0,6346);
 }
 $21 = ((($1)) + 10|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22&65535)>(1);
 do {
  if ($23) {
   $24 = HEAP16[$21>>1]|0;
   $25 = $24&65535;
   $26 = (($25) + -1)|0;
   $27 = ($26|0)>(1);
   if ($27) {
    $28 = ((($1)) + 16|0);
    $$05255 = 1;
    while(1) {
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($$05255<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     _add_type($0,$31);
     _lily_mb_add($0,6343);
     $32 = (($$05255) + 1)|0;
     $33 = HEAP16[$21>>1]|0;
     $34 = $33&65535;
     $35 = (($34) + -1)|0;
     $36 = ($32|0)<($35|0);
     if ($36) {
      $$05255 = $32;
     } else {
      $$052$lcssa = $32;
      break;
     }
    }
   } else {
    $$052$lcssa = 1;
   }
   $37 = ((($1)) + 6|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 & 512;
   $40 = ($39<<16>>16)==(0);
   $41 = ((($1)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($$052$lcssa<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   if ($40) {
    _add_type($0,$44);
    break;
   } else {
    $45 = ((($44)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    _add_type($0,$47);
    _lily_mb_add($0,6352);
    break;
   }
  }
 } while(0);
 $48 = ((($1)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[431]|0;
 $52 = ($50|0)==($51|0);
 if (!($52)) {
  _lily_mb_add($0,6358);
  $53 = HEAP32[$48>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  _add_type($0,$54);
  _lily_mb_add($0,6356);
  return;
 }
 _lily_mb_add($0,6356);
 return;
}
function _lily_mb_add_fmt($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($0,$1,$2);
 STACKTOP = sp;return;
}
function _lily_mb_sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 _lily_mb_flush($0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($0,$1,$2);
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _lily_mb_add_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(3);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_mb_add($0,$8);
  return;
 } else {
  _add_value_to_msgbuf($1,$0,0,$2);
  return;
 }
}
function _add_value_to_msgbuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0136146 = 0, $$0139 = 0, $$0140 = 0, $$0141145 = 0, $$0142144 = 0, $$1 = 0, $$1143 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $4 = sp;
 $5 = HEAP32[$3>>2]|0;
 $6 = $5 & 65536;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $$1 = $2;
  } else {
   $8 = ($2|0)==(0|0);
   if ($8) {
    $$1 = $4;
   } else {
    $9 = ((($3)) + 8|0);
    $$0136146 = $2;
    while(1) {
     $10 = ((($$0136146)) + 8|0);
     $11 = (_memcmp($10,$9,8)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     }
     $13 = HEAP32[$$0136146>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$1 = $4;
      break L1;
     } else {
      $$0136146 = $13;
     }
    }
    _lily_mb_add($1,6365);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $15 = HEAP16[$3>>1]|0;
 $16 = $15&65535;
 do {
  switch ($15<<16>>16) {
  case 6:  {
   $17 = ((($3)) + 8|0);
   $18 = $17;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   _add_boolean($1,$20);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $24 = ((($3)) + 8|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   _lily_mb_add_int($1,$27);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $31 = ((($3)) + 8|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $34&255;
   _lily_mb_add_byte($1,$38);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $39 = ((($3)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   _add_double($1,$40);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $41 = ((($3)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   _lily_mb_escape_add_str($1,$44);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $45 = ((($3)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   _add_bytestring($1,$46);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $47 = ((($3)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 40|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   $$ = $51 ? 6371 : 19155;
   $52 = ((($48)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   $$0140 = $54 ? 19155 : 16692;
   $$0139 = $54 ? 19155 : $53;
   $55 = ((($48)) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   HEAP32[$vararg_buffer>>2] = $$;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$0139;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$0140;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $56;
   _lily_mb_add_fmt($1,6381,$vararg_buffer);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $57 = ((($3)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   _add_value_to_msgbuf($0,$1,$$1,$60);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   _add_list_like($0,$1,$$1,$3,6341,6363);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   _add_list_like($0,$1,$$1,$3,6401,6404);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $61 = ((($3)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   _lily_mb_add_char($1,91);
   $63 = ((($62)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)>(0);
   if ($65) {
    $66 = ((($62)) + 24|0);
    $67 = ((($62)) + 20|0);
    $$0141145 = 0;$$0142144 = 0;
    while(1) {
     $68 = HEAP32[$66>>2]|0;
     $69 = (($68) + ($$0141145<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0|0);
     if ($71) {
      $$1143 = $$0142144;
     } else {
      $72 = ((($70)) + 8|0);
      $73 = HEAP32[$72>>2]|0;
      _add_value_to_msgbuf($0,$1,$$1,$73);
      _lily_mb_add($1,6358);
      $74 = ((($70)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      _add_value_to_msgbuf($0,$1,$$1,$75);
      $76 = HEAP32[$67>>2]|0;
      $77 = (($76) + -1)|0;
      $78 = ($$0142144|0)==($77|0);
      if (!($78)) {
       _lily_mb_add($1,6343);
      }
      $79 = (($$0142144) + 1)|0;
      $$1143 = $79;
     }
     $80 = (($$0141145) + 1)|0;
     $81 = HEAP32[$63>>2]|0;
     $82 = ($80|0)<($81|0);
     if ($82) {
      $$0141145 = $80;$$0142144 = $$1143;
     } else {
      break;
     }
    }
   }
   _lily_mb_add_char($1,93);
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   _lily_mb_add($1,6407);
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $83 = ((($3)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)!=(0|0);
   $88 = $87 ? 6412 : 6417;
   HEAP32[$vararg_buffer4>>2] = $88;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $84;
   _lily_mb_add_fmt($1,6424,$vararg_buffer4);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $89 = HEAP32[$3>>2]|0;
   $90 = $89 & 2097152;
   $91 = ($90|0)==(0);
   if ($91) {
    $109 = ((($0)) + 32|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($16<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ((($112)) + 16|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($3)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    HEAP32[$vararg_buffer8>>2] = 19155;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 19155;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $114;
    $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
    HEAP32[$vararg_ptr13>>2] = $116;
    _lily_mb_add_fmt($1,6442,$vararg_buffer8);
    STACKTOP = sp;return;
   }
   $92 = ((($3)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($0)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + ($16<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 32|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($99)) + 6|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 & 8;
   $103 = ($102<<16>>16)==(0);
   if (!($103)) {
    $104 = ((($99)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    _lily_mb_add($1,$105);
    _lily_mb_add_char($1,46);
   }
   $106 = ((($97)) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   _lily_mb_add($1,$107);
   $108 = ($93|0)==(0|0);
   if ($108) {
    STACKTOP = sp;return;
   }
   _add_list_like($0,$1,$$1,$3,6440,6356);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _add_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_mb_add($0,14133);
  return;
 } else {
  _lily_mb_add($0,14139);
  return;
 }
}
function _add_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _add_escaped_raw($0,1,$3,$5);
 return;
}
function _add_list_like($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$in = 0, $$031$lcssa34 = 0, $$03133 = 0, $$032 = 0, $$032$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP16[$3>>1]|0;
 switch ($6<<16>>16) {
 case 11: case 9:  {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = ((($8)) + 8|0);
  $$0$in = $9;$$032$in = $10;
  break;
 }
 default: {
  $11 = ((($3)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = ((($12)) + 8|0);
  $$0$in = $13;$$032$in = $14;
 }
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $$032 = HEAP32[$$032$in>>2]|0;
 _lily_mb_add($1,$4);
 $15 = ($$032|0)==(0);
 if ($15) {
  _lily_mb_add($1,$5);
  return;
 }
 $16 = (($$032) + -1)|0;
 $17 = ($$032|0)>(1);
 if ($17) {
  $$03133 = 0;
  while(1) {
   $18 = (($$0) + ($$03133<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _add_value_to_msgbuf($0,$1,$2,$19);
   _lily_mb_add($1,6343);
   $20 = (($$03133) + 1)|0;
   $exitcond = ($20|0)==($16|0);
   if ($exitcond) {
    $$031$lcssa34 = $16;
    break;
   } else {
    $$03133 = $20;
   }
  }
 } else {
  $21 = ($$032|0)==(0);
  if ($21) {
   _lily_mb_add($1,$5);
   return;
  } else {
   $$031$lcssa34 = 0;
  }
 }
 $22 = (($$0) + ($$031$lcssa34<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 _add_value_to_msgbuf($0,$1,$2,$23);
 _lily_mb_add($1,$5);
 return;
}
function _lily_new_state($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_op_freeze($0);
 $1 = (_lily_malloc(92)|0);
 $2 = (_lily_op_get_data($0)|0);
 $3 = ((($1)) + 88|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$1>>2] = 0;
 $5 = (_lily_new_raiser()|0);
 $6 = ((($1)) + 18|0);
 HEAP16[$6>>1] = 1;
 $7 = ((($1)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 76|0);
 HEAP32[$8>>2] = $5;
 $9 = (_lily_new_expr_state()|0);
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = (_lily_new_generic_pool()|0);
 $12 = ((($1)) + 40|0);
 HEAP32[$12>>2] = $11;
 $13 = (_lily_new_symtab($11)|0);
 $14 = ((($1)) + 64|0);
 HEAP32[$14>>2] = $13;
 $15 = (_lily_new_vm_state($0,$5)|0);
 $16 = ((($1)) + 68|0);
 HEAP32[$16>>2] = $15;
 $17 = (_lily_malloc(24)|0);
 $18 = ((($1)) + 84|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($17)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$16>>2]|0;
 $21 = ((($20)) + 80|0);
 HEAP32[$21>>2] = $1;
 $22 = HEAP32[$16>>2]|0;
 _lily_register_pkg_builtin($22);
 $23 = HEAP32[$14>>2]|0;
 $24 = HEAP32[$4>>2]|0;
 _lily_set_builtin($23,$24);
 $25 = HEAP32[$14>>2]|0;
 _lily_init_pkg_builtin($25);
 $26 = HEAP32[$14>>2]|0;
 $27 = (_lily_new_emit_state($26,$5)|0);
 $28 = ((($1)) + 60|0);
 HEAP32[$28>>2] = $27;
 $29 = (_lily_new_lex_state($0,$5)|0);
 $30 = ((($1)) + 56|0);
 HEAP32[$30>>2] = $29;
 $31 = (_lily_new_msgbuf(64)|0);
 $32 = ((($1)) + 48|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($1)) + 80|0);
 HEAP32[$33>>2] = $0;
 $34 = (_lily_new_buffer_u16(4)|0);
 $35 = ((($1)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$10>>2]|0;
 $37 = ((($1)) + 24|0);
 HEAP32[$37>>2] = $36;
 $38 = (_lily_new_value_stack()|0);
 $39 = ((($1)) + 36|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$28>>2]|0;
 $41 = ((($40)) + 104|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($1)) + 72|0);
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$14>>2]|0;
 $45 = HEAP32[$16>>2]|0;
 $46 = ((($45)) + 84|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$8>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$16>>2]|0;
 $51 = ((($50)) + 76|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[$30>>2]|0;
 $53 = ((($52)) + 20|0);
 $54 = HEAP32[$14>>2]|0;
 $55 = ((($54)) + 96|0);
 HEAP32[$55>>2] = $53;
 $56 = HEAP32[$30>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$37>>2]|0;
 $59 = ((($58)) + 28|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[$30>>2]|0;
 $61 = ((($60)) + 20|0);
 $62 = HEAP32[$28>>2]|0;
 $63 = ((($62)) + 88|0);
 HEAP32[$63>>2] = $61;
 $64 = HEAP32[$14>>2]|0;
 $65 = HEAP32[$28>>2]|0;
 $66 = ((($65)) + 112|0);
 HEAP32[$66>>2] = $64;
 $67 = HEAP32[$28>>2]|0;
 $68 = ((($67)) + 108|0);
 HEAP32[$68>>2] = $1;
 $69 = HEAP32[$14>>2]|0;
 $70 = HEAP32[$30>>2]|0;
 $71 = ((($70)) + 60|0);
 HEAP32[$71>>2] = $69;
 $72 = HEAP32[$28>>2]|0;
 $73 = ((($72)) + 96|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($1)) + 28|0);
 HEAP32[$75>>2] = $74;
 $76 = HEAP32[$28>>2]|0;
 _lily_emit_enter_main($76);
 $77 = HEAP32[$14>>2]|0;
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($1)) + 52|0);
 HEAP32[$81>>2] = $80;
 $82 = (_new_module($1,0,0)|0);
 $83 = ((($1)) + 8|0);
 HEAP32[$83>>2] = $82;
 $84 = HEAP32[$14>>2]|0;
 $85 = ((($84)) + 28|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 16|0);
 HEAP32[$87>>2] = $82;
 $88 = HEAP32[$83>>2]|0;
 $89 = HEAP32[$14>>2]|0;
 $90 = ((($89)) + 12|0);
 HEAP32[$90>>2] = $88;
 $91 = (_lily_op_get_allow_sys($0)|0);
 $92 = ($91|0)==(0);
 if ($92) {
  $94 = HEAP32[$16>>2]|0;
  _lily_pkg_random_init($94,$0);
  $95 = ((($1)) + 16|0);
  HEAP16[$95>>1] = 0;
  $96 = HEAP32[$16>>2]|0;
  return ($96|0);
 }
 $93 = HEAP32[$16>>2]|0;
 _lily_pkg_sys_init($93,$0);
 $94 = HEAP32[$16>>2]|0;
 _lily_pkg_random_init($94,$0);
 $95 = ((($1)) + 16|0);
 HEAP16[$95>>1] = 0;
 $96 = HEAP32[$16>>2]|0;
 return ($96|0);
}
function _new_module($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(52)|0);
 $4 = ($1|0)==(0|0);
 if ($4) {
  $9 = ((($3)) + 10|0);
  ;HEAP16[$9>>1]=0|0;HEAP16[$9+2>>1]=0|0;HEAP16[$9+4>>1]=0|0;HEAP16[$9+6>>1]=0|0;HEAP16[$9+8>>1]=0|0;HEAP16[$9+10>>1]=0|0;HEAP16[$9+12>>1]=0|0;
 } else {
  $5 = (_strlen($1)|0);
  $6 = (($5) + 1)|0;
  $7 = (_lily_malloc($6)|0);
  $8 = ((($3)) + 20|0);
  HEAP32[$8>>2] = $7;
  (_strcpy($7,$1)|0);
  _set_module_names_by_path($3,$1);
 }
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = $2;
 $11 = ($2|0)==(0|0);
 if ($11) {
  label = 7;
 } else {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   label = 7;
  } else {
   $15 = $13&255;
   $16 = $15 << 1;
   $17 = (_lily_malloc($16)|0);
   $18 = ((($3)) + 48|0);
   HEAP32[$18>>2] = $17;
   _memset(($17|0),0,($16|0))|0;
  }
 }
 if ((label|0) == 7) {
  $19 = ((($3)) + 48|0);
  HEAP32[$19>>2] = 0;
 }
 HEAP32[$3>>2] = 0;
 $20 = ((($3)) + 24|0);
 $21 = ((($3)) + 44|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($3)) + 4|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP16[$22>>1] = 5;
 $23 = ((($3)) + 6|0);
 HEAP16[$23>>1] = 0;
 $24 = HEAP32[$0>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  HEAP32[$0>>2] = $3;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $3;
  return ($3|0);
 } else {
  $26 = ((($0)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$27>>2] = $3;
  HEAP32[$26>>2] = $3;
  return ($3|0);
 }
 return (0)|0;
}
function _set_module_names_by_path($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$041 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(91);
 if ($3) {
  $4 = (_lily_malloc(1)|0);
  $5 = ((($0)) + 12|0);
  HEAP32[$5>>2] = $4;
  HEAP8[$4>>0] = 0;
  $6 = (_lily_malloc(2)|0);
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $6;
  HEAP8[$6>>0]=46&255;HEAP8[$6+1>>0]=46>>8;
  $8 = ((($0)) + 10|0);
  HEAP16[$8>>1] = 0;
  return;
 }
 $9 = (_strrchr($1,47)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_lily_malloc(1)|0);
  $12 = ((($0)) + 16|0);
  HEAP32[$12>>2] = $11;
  HEAP8[$11>>0] = 0;
  $$041 = $1;
 } else {
  $13 = $9;
  $14 = $1;
  $15 = (($13) - ($14))|0;
  $16 = (($15) + 1)|0;
  $17 = (_lily_malloc($16)|0);
  $18 = ((($0)) + 16|0);
  HEAP32[$18>>2] = $17;
  (_strncpy($17,$1,$15)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($15)|0);
  HEAP8[$20>>0] = 0;
  $21 = ((($9)) + 1|0);
  $$041 = $21;
 }
 $22 = (_strrchr($$041,46)|0);
 $23 = $22;
 $24 = $$041;
 $25 = (($23) - ($24))|0;
 $26 = ($22|0)==(0|0);
 if ($26) {
  $27 = (_strlen($1)|0);
  $$0 = $27;
 } else {
  $$0 = $25;
 }
 $28 = (($$0) + 1)|0;
 $29 = (_lily_malloc($28)|0);
 $30 = ((($0)) + 12|0);
 HEAP32[$30>>2] = $29;
 (_strncpy($29,$$041,$$0)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($$0)|0);
 HEAP8[$32>>0] = 0;
 $33 = (_strlen($1)|0);
 $34 = $33&65535;
 $35 = ((($0)) + 10|0);
 HEAP16[$35>>1] = $34;
 return;
}
function _lily_free_state($0) {
 $0 = $0|0;
 var $$035 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_free_raiser($4);
 $5 = ((($2)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_free_expr_state($6);
 $7 = ((($2)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_free_vm($8);
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_free_lex_state($10);
 $11 = ((($2)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_free_emit_state($12);
 $13 = ((($2)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_free_buffer_u16($14);
 $15 = ((($2)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = ((($2)) + 64|0);
  $$035 = $18;
  while(1) {
   $21 = ((($$035)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   _free_links_until($22);
   $23 = HEAP32[$$035>>2]|0;
   $24 = ((($$035)) + 36|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    _lily_library_free($25);
   }
   $27 = HEAP32[$20>>2]|0;
   _lily_free_module_symbols($27,$$035);
   $28 = ((($$035)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   _lily_free($29);
   $30 = ((($$035)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   _lily_free($31);
   $32 = ((($$035)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   _lily_free($33);
   $34 = ((($$035)) + 48|0);
   $35 = HEAP32[$34>>2]|0;
   _lily_free($35);
   _lily_free($$035);
   $36 = ($23|0)==(0|0);
   if ($36) {
    break;
   } else {
    $$035 = $23;
   }
  }
 }
 $37 = ((($2)) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 _lily_free_symtab($38);
 $39 = ((($2)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 _lily_free_generic_pool($40);
 $41 = ((($2)) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 _lily_free_value_stack($42);
 $43 = ((($2)) + 48|0);
 $44 = HEAP32[$43>>2]|0;
 _lily_free_msgbuf($44);
 $45 = ((($2)) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 _lily_free_type_maker($46);
 $47 = ((($2)) + 84|0);
 $48 = HEAP32[$47>>2]|0;
 _lily_free($48);
 $49 = ((($2)) + 80|0);
 $50 = HEAP32[$49>>2]|0;
 _lily_free_options($50);
 _lily_free($2);
 return;
}
function _free_links_until($0) {
 $0 = $0|0;
 var $$01 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $$01 = $0;
 }
 while(1) {
  $2 = ((($$01)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($$01)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_free($5);
  _lily_free($$01);
  $6 = ($3|0)==(0|0);
  if ($6) {
   break;
  } else {
   $$01 = $3;
  }
 }
 return;
}
function _lily_register_package($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_new_module($5,$1,$2)|0);
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($6)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 | 1;
 $12 = $11&65535;
 HEAP16[$8>>1] = $12;
 return;
}
function _try_method_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$025 = 0, $$026 = 0, $$1 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 50|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($1)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $$025 = $11;$$026 = $5;
 while(1) {
  $12 = ((($$025)) + 2|0);
  $13 = (_strcmp($2,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$1 = $$025;$$127 = $$026;
   break;
  }
  $15 = (($$026) + 1)|0;
  $16 = (($9) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(109);
  if ($19) {
   $$025 = $17;$$026 = $15;
  } else {
   $$1 = $17;$$127 = $15;
   break;
  }
 }
 $20 = HEAP8[$$1>>0]|0;
 $21 = ($20<<24>>24)==(109);
 if (!($21)) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = (_dynaload_function($0,$7,$1,$$127)|0);
 $$0 = $22;
 return ($$0|0);
}
function _dynaload_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$089 = 0, $$090$in = 0, $$091 = 0, $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($3<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 2|0);
 $13 = (_strlen($12)|0);
 $14 = (($12) + ($13)|0);
 $15 = ((($14)) + 1|0);
 $16 = ((($0)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_load_str($7,1,$15);
 _lily_lexer($7);
 $20 = ($2|0)==(0|0);
 $$0 = $20 ? $1 : $2;
 $21 = ((($1)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $29 = ((($0)) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  _lily_mb_flush($30);
  $31 = HEAP8[$12>>0]|0;
  $32 = ($31<<24>>24)==(60);
  $$ = $32 ? 6611 : $12;
  if ($20) {
   $$091 = 19155;
  } else {
   $33 = ((($2)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $$091 = $34;
  }
  $35 = ((($1)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($1)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer>>2] = $38;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$091;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$;
  $39 = (_lily_mb_sprintf($30,6615,$vararg_buffer)|0);
  $40 = (_lily_library_get($36,$39)|0);
  $$090$in = $40;
 } else {
  $24 = ((($0)) + 80|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiii[$22 & 15]($25,$27,$3)|0);
  $$090$in = $28;
 }
 $41 = HEAP32[$16>>2]|0;
 $42 = ((($41)) + 12|0);
 HEAP32[$42>>2] = $1;
 $43 = ((($0)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 _lily_gp_save_and_hide($44,$4);
 _collect_generics($0);
 $45 = ((($0)) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$5>>2] = 16384;
 $49 = HEAP32[431]|0;
 _lily_tm_add($46,$49);
 $50 = ((($7)) + 48|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0);
 do {
  if ($52) {
   _lily_lexer($7);
   $53 = ((($0)) + 76|0);
   $$089 = 1;
   L10: while(1) {
    $54 = HEAP32[$45>>2]|0;
    $55 = (_get_nameless_arg($0,$5)|0);
    _lily_tm_add($54,$55);
    $56 = (($$089) + 1)|0;
    $57 = HEAP32[$50>>2]|0;
    switch ($57|0) {
    case 1:  {
     label = 10;
     break L10;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     label = 11;
     break L10;
    }
    }
    _lily_lexer($7);
    $$089 = $56;
   }
   if ((label|0) == 10) {
    _lily_lexer($7);
    $$pr = HEAP32[$50>>2]|0;
    $$1 = $56;$60 = $$pr;
    break;
   }
   else if ((label|0) == 11) {
    $58 = HEAP32[$53>>2]|0;
    $59 = (_tokname($57)|0);
    HEAP32[$vararg_buffer3>>2] = $59;
    _lily_raise_syn($58,6629,$vararg_buffer3);
    // unreachable;
   }
  } else {
   $$1 = 1;$60 = $51;
  }
 } while(0);
 $61 = ($60|0)==(6);
 if (!($61)) {
  $64 = HEAP32[$5>>2]|0;
  $65 = $64 & -16385;
  $66 = HEAP32[$45>>2]|0;
  $67 = HEAP32[$16>>2]|0;
  $68 = ((($67)) + 72|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_lily_tm_make($66,$65,$69,$$1)|0);
  $71 = ((($0)) + 60|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (_lily_emit_new_tied_dyna_var($72,$$090$in,$$0,$70,$12)|0);
  $74 = HEAP32[$43>>2]|0;
  $75 = HEAP32[$4>>2]|0;
  _lily_gp_restore_and_unhide($74,$75);
  _lily_pop_lex_entry($7);
  $76 = HEAP32[$16>>2]|0;
  $77 = ((($76)) + 12|0);
  HEAP32[$77>>2] = $19;
  STACKTOP = sp;return ($73|0);
 }
 _lily_lexer($7);
 $62 = HEAP32[$45>>2]|0;
 $63 = (_get_type_raw($0,16384)|0);
 _lily_tm_insert($62,$48,$63);
 $64 = HEAP32[$5>>2]|0;
 $65 = $64 & -16385;
 $66 = HEAP32[$45>>2]|0;
 $67 = HEAP32[$16>>2]|0;
 $68 = ((($67)) + 72|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_lily_tm_make($66,$65,$69,$$1)|0);
 $71 = ((($0)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (_lily_emit_new_tied_dyna_var($72,$$090$in,$$0,$70,$12)|0);
 $74 = HEAP32[$43>>2]|0;
 $75 = HEAP32[$4>>2]|0;
 _lily_gp_restore_and_unhide($74,$75);
 _lily_pop_lex_entry($7);
 $76 = HEAP32[$16>>2]|0;
 $77 = ((($76)) + 12|0);
 HEAP32[$77>>2] = $19;
 STACKTOP = sp;return ($73|0);
}
function _collect_generics($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(4);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_gp_num_in_scope($8)|0);
 $10 = (($9) + 65)|0;
 $11 = $10&255;
 HEAP8[$1>>0] = $11;
 $12 = ((($1)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($3)) + 12|0);
 $14 = ((($0)) + 76|0);
 $15 = ((($0)) + 76|0);
 $16 = ((($0)) + 76|0);
 $$0 = $11;
 L4: while(1) {
  _lily_lexer($3);
  $17 = HEAP32[$4>>2]|0;
  $18 = ($17|0)==(35);
  if (!($18)) {
   label = 4;
   break;
  }
  $23 = HEAP32[$13>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $$0 << 24 >> 24;
  $26 = ($24<<24>>24)==($$0<<24>>24);
  if (!($26)) {
   label = 7;
   break;
  }
  $27 = ((($23)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if (!($29)) {
   label = 7;
   break;
  }
  $33 = HEAP32[$7>>2]|0;
  $34 = (($25) + -65)|0;
  _lily_gp_push($33,$1,$34);
  _lily_lexer($3);
  $35 = (($$0) + 1)<<24>>24;
  $36 = HEAP32[$4>>2]|0;
  switch ($36|0) {
  case 33:  {
   label = 11;
   break L4;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 12;
   break L4;
  }
  }
  HEAP8[$1>>0] = $35;
  $$0 = $35;
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$16>>2]|0;
  $20 = (_tokname(35)|0);
  $21 = HEAP32[$4>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  _lily_raise_syn($19,6667,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $30 = ($$0<<24>>24)==(91);
  $31 = HEAP32[$15>>2]|0;
  if ($30) {
   _lily_raise_syn($31,10000,$vararg_buffer2);
   // unreachable;
  } else {
   $32 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $1;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $32;
   _lily_raise_syn($31,10019,$vararg_buffer4);
   // unreachable;
  }
 }
 else if ((label|0) == 11) {
  _lily_lexer($3);
  $37 = $35 << 24 >> 24;
  $38 = (($37) + -65)|0;
  $39 = ((($0)) + 60|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 100|0);
  $42 = HEAP32[$41>>2]|0;
  _lily_ts_generics_seen($42,$38);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $43 = HEAP32[$14>>2]|0;
  $44 = (_tokname($36)|0);
  HEAP32[$vararg_buffer8>>2] = $44;
  _lily_raise_syn($43,6736,$vararg_buffer8);
  // unreachable;
 }
}
function _get_nameless_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(11);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = $7 | 2048;
  HEAP32[$1>>2] = $8;
  _lily_lexer($3);
 } else {
  $9 = $7 & 2048;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ((($0)) + 76|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_raise_syn($12,9815,$vararg_buffer);
   // unreachable;
  }
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_get_type_raw($0,$13)|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = $15 & 2048;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = ((($14)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & 2;
  $23 = ($22<<16>>16)==(0);
  if ($23) {
   $24 = ((($0)) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $14;
   _lily_raise_syn($25,9864,$vararg_buffer1);
   // unreachable;
  }
  $26 = ((($0)) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 88|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_make_type_of_class($0,$29,$14)|0);
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$4>>2]|0;
 $32 = ($31|0)==(50);
 if ($32) {
  $33 = ((($0)) + 64|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 76|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_make_type_of_class($0,$36,$14)|0);
  _lily_lexer($3);
  $38 = HEAP32[$4>>2]|0;
  switch ($38|0) {
  case 1: case 34:  {
   break;
  }
  default: {
   $39 = ((($0)) + 76|0);
   $40 = HEAP32[$39>>2]|0;
   _lily_raise_syn($40,9903,$vararg_buffer3);
   // unreachable;
  }
  }
  $41 = HEAP32[$1>>2]|0;
  $42 = $41 | 512;
  HEAP32[$1>>2] = $42;
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = ((($14)) + 6|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 & 8192;
 $46 = ($45<<16>>16)==(0);
 if ($46) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = $15 & 16384;
 $48 = ($47|0)==(0);
 if ($48) {
  $49 = ((($0)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  _lily_raise_syn($50,9946,$vararg_buffer5);
  // unreachable;
 }
 $51 = HEAP32[$1>>2]|0;
 $52 = $51 | 8192;
 HEAP32[$1>>2] = $52;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _get_type_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$072 = 0, $$073 = 0, $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 L1: do {
  switch ($6|0) {
  case 35:  {
   $7 = (_resolve_class_name($0)|0);
   $$073 = $7;
   break;
  }
  case 41:  {
   $8 = $1 & 16384;
   $9 = ($8|0)==(0);
   if ($9) {
    $$pr = HEAP32[$5>>2]|0;
    $18 = $$pr;
    label = 6;
    break L1;
   } else {
    $10 = ((($4)) + 40|0);
    $11 = $10;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (_get_scoop_class($0,$13)|0);
    $$073 = $17;
    break L1;
   }
   break;
  }
  default: {
   $18 = $6;
   label = 6;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $19 = ($18|0)==(35);
  if ($19) {
   $$073 = 0;
  } else {
   $20 = ((($0)) + 76|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_tokname(35)|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = (_tokname($23)|0);
   HEAP32[$vararg_buffer>>2] = $22;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $24;
   _lily_raise_syn($21,6667,$vararg_buffer);
   // unreachable;
  }
 }
 $25 = ((($$073)) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($26<<16>>16)==(3);
 if ($27) {
  $28 = ((($0)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  _lily_raise_syn($29,6692,$vararg_buffer2);
  // unreachable;
 }
 $30 = ((($$073)) + 46|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = ($31<<16>>16)==(0);
 if ($32) {
  $33 = ((($$073)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $$0 = $34;
  _lily_lexer($4);
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ((($$073)) + 8|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ($36<<16>>16)==(7);
 _lily_lexer($4);
 $38 = HEAP32[$5>>2]|0;
 if (!($37)) {
  $39 = ($38|0)==(4);
  if (!($39)) {
   $40 = ((($0)) + 76|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_tokname(4)|0);
   $43 = HEAP32[$5>>2]|0;
   $44 = (_tokname($43)|0);
   HEAP32[$vararg_buffer4>>2] = $42;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $44;
   _lily_raise_syn($41,6667,$vararg_buffer4);
   // unreachable;
  }
  $45 = ((($0)) + 72|0);
  $46 = ((($0)) + 76|0);
  $$072 = 0;
  L23: while(1) {
   _lily_lexer($4);
   $47 = HEAP32[$45>>2]|0;
   $48 = (_get_type_raw($0,$1)|0);
   _lily_tm_add($47,$48);
   $49 = (($$072) + 1)|0;
   $50 = HEAP32[$5>>2]|0;
   switch ($50|0) {
   case 2:  {
    $$072 = $49;
    break;
   }
   case 33:  {
    break L23;
    break;
   }
   default: {
    label = 17;
    break L23;
   }
   }
  }
  if ((label|0) == 17) {
   $51 = HEAP32[$46>>2]|0;
   $52 = (_tokname($50)|0);
   HEAP32[$vararg_buffer8>>2] = $52;
   _lily_raise_syn($51,6736,$vararg_buffer8);
   // unreachable;
  }
  $53 = HEAP32[$45>>2]|0;
  $54 = (_lily_tm_make($53,0,$$073,$49)|0);
  _ensure_valid_type($0,$54);
  $$0 = $54;
  _lily_lexer($4);
  STACKTOP = sp;return ($$0|0);
 }
 $55 = ($38|0)==(0);
 if (!($55)) {
  $56 = ((($0)) + 76|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_tokname(0)|0);
  $59 = HEAP32[$5>>2]|0;
  $60 = (_tokname($59)|0);
  HEAP32[$vararg_buffer11>>2] = $58;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $60;
  _lily_raise_syn($57,6667,$vararg_buffer11);
  // unreachable;
 }
 _lily_lexer($4);
 $61 = $1 & 16384;
 HEAP32[$2>>2] = $61;
 $62 = ((($0)) + 72|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[431]|0;
 _lily_tm_add($63,$66);
 $67 = HEAP32[$5>>2]|0;
 switch ($67|0) {
 case 1: case 34:  {
  $$1 = 1;$78 = $67;
  break;
 }
 default: {
  $68 = HEAP32[$62>>2]|0;
  $69 = (_get_nameless_arg($0,$2)|0);
  _lily_tm_add($68,$69);
  $70 = HEAP32[$5>>2]|0;
  $71 = ($70|0)==(2);
  if ($71) {
   $75 = 1;
   while(1) {
    _lily_lexer($4);
    $72 = HEAP32[$62>>2]|0;
    $73 = (_get_nameless_arg($0,$2)|0);
    _lily_tm_add($72,$73);
    $74 = (($75) + 1)|0;
    $76 = HEAP32[$5>>2]|0;
    $77 = ($76|0)==(2);
    if ($77) {
     $75 = $74;
    } else {
     break;
    }
   }
   $phitmp = (($75) + 2)|0;
   $$1 = $phitmp;$78 = $76;
  } else {
   $$1 = 2;$78 = $70;
  }
 }
 }
 $79 = ($78|0)==(34);
 if ($79) {
  _lily_lexer($4);
  $80 = HEAP32[$62>>2]|0;
  $81 = (_get_type_raw($0,$1)|0);
  _lily_tm_insert($80,$65,$81);
 }
 $82 = HEAP32[$5>>2]|0;
 $83 = ($82|0)==(1);
 if (!($83)) {
  $84 = ((($0)) + 76|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_tokname(1)|0);
  $87 = HEAP32[$5>>2]|0;
  $88 = (_tokname($87)|0);
  HEAP32[$vararg_buffer15>>2] = $86;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $88;
  _lily_raise_syn($85,6667,$vararg_buffer15);
  // unreachable;
 }
 $89 = HEAP32[$62>>2]|0;
 $90 = HEAP32[$2>>2]|0;
 $91 = $90 & -16385;
 $92 = (_lily_tm_make($89,$91,$$073,$$1)|0);
 $$0 = $92;
 _lily_lexer($4);
 STACKTOP = sp;return ($$0|0);
}
function _resolve_class_name($0) {
 $0 = $0|0;
 var $$032 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_tokname(35)|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  _lily_raise_syn($9,6667,$vararg_buffer);
  // unreachable;
 }
 $13 = (_resolve_module($0)|0);
 $14 = ((($4)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_find_class($2,$13,$15)|0);
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $$2 = $16;
  STACKTOP = sp;return ($$2|0);
 }
 $18 = ($13|0)==(0|0);
 if ($18) {
  $19 = ((($2)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $$032 = $20;
 } else {
  $$032 = $13;
 }
 $21 = ((($$032)) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = HEAP32[$14>>2]|0;
  $25 = (_find_run_class_dynaload($0,$$032,$24)|0);
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $$2 = $25;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $27 = ((($2)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $35 = ((($0)) + 76|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $37;
  _lily_raise_syn($36,6897,$vararg_buffer2);
  // unreachable;
 }
 $32 = HEAP32[$14>>2]|0;
 $33 = (_find_run_class_dynaload($0,$28,$32)|0);
 $34 = ($33|0)==(0|0);
 if ($34) {
  $35 = ((($0)) + 76|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $37;
  _lily_raise_syn($36,6897,$vararg_buffer2);
  // unreachable;
 } else {
  $$2 = $33;
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _get_scoop_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$013 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ($1|0)>(2);
 $3 = ($1|0)==(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $4 = ((($0)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_raise_syn($5,6853,$vararg_buffer);
  // unreachable;
 }
 $6 = ((($0)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = (65535 - ($1))|0;
 $$013 = HEAP32[$8>>2]|0;
 $10 = ($$013|0)==(0|0);
 if ($10) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$014 = $$013;
 }
 while(1) {
  $11 = ((($$014)) + 8|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($13|0)==($9|0);
  if ($14) {
   $$0$lcssa = $$014;
   label = 6;
   break;
  }
  $$0 = HEAP32[$$014>>2]|0;
  $15 = ($$0|0)==(0|0);
  if ($15) {
   $$0$lcssa = 0;
   label = 6;
   break;
  } else {
   $$014 = $$0;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _ensure_valid_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 46|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($4|0)==($9|0);
 $11 = ($8<<16>>16)==(-1);
 $or$cond = $11 | $10;
 if (!($or$cond)) {
  $12 = ((($0)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($6)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  _lily_raise_syn($13,6774,$vararg_buffer);
  // unreachable;
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($0)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16|0)==($20|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 & 1;
 $30 = ($29<<16>>16)==(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = ((($26)) + 8|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ($32<<16>>16)==(-5);
 if ($33) {
  STACKTOP = sp;return;
 } else {
  $34 = ((($0)) + 76|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $24;
  _lily_raise_syn($35,6823,$vararg_buffer3);
  // unreachable;
 }
}
function _resolve_module($0) {
 $0 = $0|0;
 var $$025$lcssa = 0, $$026 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_find_module($2,0,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$025$lcssa = 0;
  STACKTOP = sp;return ($$025$lcssa|0);
 }
 $9 = ((($4)) + 48|0);
 $10 = ((($0)) + 76|0);
 $11 = ((($0)) + 76|0);
 $$026 = $7;
 while(1) {
  _lily_lexer($4);
  $12 = HEAP32[$9>>2]|0;
  $13 = ($12|0)==(44);
  if (!($13)) {
   label = 4;
   break;
  }
  _lily_lexer($4);
  $18 = HEAP32[$9>>2]|0;
  $19 = ($18|0)==(35);
  if (!($19)) {
   label = 6;
   break;
  }
  $24 = HEAP32[$5>>2]|0;
  $25 = (_lily_find_module($2,$$026,$24)|0);
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$025$lcssa = $$026;
   label = 8;
   break;
  } else {
   $$026 = $25;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (_tokname(44)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = (_tokname($16)|0);
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _lily_raise_syn($14,6667,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = (_tokname(35)|0);
  $22 = HEAP32[$9>>2]|0;
  $23 = (_tokname($22)|0);
  HEAP32[$vararg_buffer2>>2] = $21;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $23;
  _lily_raise_syn($20,6667,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$025$lcssa|0);
 }
 return (0)|0;
}
function _find_run_class_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_try_toplevel_dynaload($0,$1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return (0|0);
 } else {
  $5 = ((($3)) + 4|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(1);
  $$ = $7 ? 0 : $3;
  return ($$|0);
 }
 return (0)|0;
}
function _try_toplevel_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $$020 = $6;$$021 = 1;
 while(1) {
  $7 = ((($$020)) + 2|0);
  $8 = (_strcmp($7,$2)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  }
  $11 = ((($$020)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($$021) + 1)|0;
  $15 = (($14) + ($13))|0;
  $16 = (($4) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(90);
  if ($19) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $$020 = $17;$$021 = $15;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 $10 = (_run_dynaload($0,$1,$$021)|0);
 $$0 = $10;
 return ($$0|0);
}
function _run_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($4)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = $1;
 switch ($9<<24>>24) {
 case 82:  {
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($2<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 2|0);
  $16 = (_strlen($15)|0);
  $17 = (($15) + ($16)|0);
  $18 = ((($17)) + 1|0);
  $19 = (_type_by_name($0,$18)|0);
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_lily_emit_new_dyna_var($21,$1,$19,$15)|0);
  _update_cid_table($0,$1);
  $23 = ((($1)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($1)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iiii[$24 & 15]($26,$28,$2)|0);
  $30 = ((($22)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31&65535;
  $33 = ((($29)) + 6|0);
  HEAP16[$33>>1] = $32;
  $34 = ((($0)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  _lily_vs_push($35,$29);
  $$0 = $22;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 case 70:  {
  $36 = (_dynaload_function($0,$1,0,$2)|0);
  $$0 = $36;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 case 67:  {
  $37 = (_dynaload_class($0,$1,$2)|0);
  $$0 = $37;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 case 86:  {
  $38 = (_dynaload_variant($0,$1,$2)|0);
  $$0 = $38;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 case 69:  {
  $39 = (_dynaload_enum($0,$1,$2)|0);
  $$0 = $39;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 case 78:  {
  $40 = (_dynaload_native($0,$1,$2)|0);
  $$0 = $40;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  HEAP32[$10>>2] = $11;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _type_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_load_copy_string($3,1,$1);
 $4 = HEAP32[$2>>2]|0;
 _lily_lexer($4);
 $5 = (_get_type_raw($0,0)|0);
 $6 = HEAP32[$2>>2]|0;
 _lily_pop_lex_entry($6);
 return ($5|0);
}
function _update_cid_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03539 = 0, $$03638 = 0, $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ((($1)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ($5<<24>>24)>(0);
 if (!($12)) {
  return;
 }
 $13 = ((($4)) + 1|0);
 $$03539 = $13;$$03638 = 0;
 while(1) {
  $14 = (($8) + ($$03638<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)==(0);
  do {
   if ($16) {
    $17 = (_lily_find_class($10,$1,$$03539)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     $19 = (_lily_find_class($10,$11,$$03539)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      break;
     } else {
      $$037 = $19;
     }
    } else {
     $$037 = $17;
    }
    $21 = ((($$037)) + 8|0);
    $22 = HEAP16[$21>>1]|0;
    HEAP16[$14>>1] = $22;
   }
  } while(0);
  $23 = (_strlen($$03539)|0);
  $24 = (($23) + 1)|0;
  $25 = (($$03539) + ($24)|0);
  $26 = (($$03638) + 1)|0;
  $exitcond = ($26|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$03539 = $25;$$03638 = $26;
  }
 }
 return;
}
function _dynaload_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 2|0);
 $10 = (_lily_new_class($8,$9)|0);
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 | 128;
 $15 = $14&65535;
 HEAP16[$11>>1] = $15;
 $16 = $2&65535;
 $17 = ((($10)) + 50|0);
 HEAP16[$17>>1] = $16;
 return ($10|0);
}
function _dynaload_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $$020 = 0, $$pn = 0, $$pn$phi = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $$020 = $3;$$pn = $3;
 while(1) {
  $$0$in = (($5) + ($$pn<<2)|0);
  $$0 = HEAP32[$$0$in>>2]|0;
  $6 = HEAP8[$$0>>0]|0;
  $7 = ($6<<24>>24)==(69);
  $8 = (($$020) + -1)|0;
  if ($7) {
   break;
  } else {
   $$pn$phi = $$020;$$020 = $8;$$pn = $$pn$phi;
  }
 }
 $9 = (($5) + ($2<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($$020) + 1)|0;
 (_dynaload_enum($0,$1,$11)|0);
 $12 = ((($0)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($10)) + 2|0);
 $15 = (_lily_find_class($13,$1,$14)|0);
 return ($15|0);
}
function _dynaload_enum($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$061 = 0, $$062 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 2|0);
 $9 = ((($0)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_mb_flush($10);
 _lily_mb_add($10,$8);
 $11 = (_strlen($8)|0);
 $12 = (($8) + ($11)|0);
 $13 = ((($12)) + 1|0);
 _lily_mb_add($10,$13);
 _lily_mb_add_char($10,123);
 $$062 = $2;
 while(1) {
  $14 = (($$062) + 1)|0;
  $15 = (($5) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(86);
  if ($18) {
   $$0 = $16;$$1 = $14;
   break;
  } else {
   $$062 = $14;
  }
 }
 while(1) {
  $19 = ((($$0)) + 2|0);
  _lily_mb_add($10,$19);
  $20 = (_strlen($19)|0);
  $21 = (($19) + ($20)|0);
  $22 = ((($21)) + 1|0);
  _lily_mb_add($10,$22);
  _lily_mb_add_char($10,32);
  $23 = (($$1) + 1)|0;
  $24 = (($5) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(86);
  if ($27) {
   $$0 = $25;$$1 = $23;
  } else {
   break;
  }
 }
 _lily_mb_add_char($10,125);
 $28 = ((($0)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_lily_mb_get($10)|0);
 _lily_load_copy_string($29,1,$30);
 $31 = HEAP32[$28>>2]|0;
 _lily_lexer($31);
 $32 = HEAP32[$0>>2]|0;
 $33 = ($32|0)==($1|0);
 do {
  if ($33) {
   $34 = ((($0)) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 36|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[$6>>2]|0;
   $39 = ((($38)) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(79);
   if ($41) {
    HEAP32[$36>>2] = 13;
    $$061 = $37;
    break;
   } else {
    HEAP32[$36>>2] = 16;
    $$061 = $37;
    break;
   }
  } else {
   $$061 = 0;
  }
 } while(0);
 $42 = ((($0)) + 40|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_gp_save_and_hide($43,$3);
 $44 = (_parse_enum($0,1)|0);
 $45 = HEAP32[$42>>2]|0;
 $46 = HEAP32[$3>>2]|0;
 _lily_gp_restore_and_unhide($45,$46);
 $47 = (($2) + 1)|0;
 $48 = $47&65535;
 $49 = ((($44)) + 50|0);
 HEAP16[$49>>1] = $48;
 $50 = ($$061|0)==(0);
 if ($50) {
  $54 = HEAP32[$28>>2]|0;
  _lily_pop_lex_entry($54);
  STACKTOP = sp;return ($44|0);
 }
 $51 = ((($0)) + 64|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 36|0);
 HEAP32[$53>>2] = $$061;
 $54 = HEAP32[$28>>2]|0;
 _lily_pop_lex_entry($54);
 STACKTOP = sp;return ($44|0);
}
function _dynaload_native($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0, $$097 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 2|0);
 $9 = (_strlen($8)|0);
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1|0);
 $12 = ((($0)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_load_str($13,1,$11);
 _lily_lexer($13);
 $14 = ((($0)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_new_class($15,$8)|0);
 $17 = ((($0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_gp_save_and_hide($18,$3);
 _collect_generics($0);
 $19 = HEAP32[$17>>2]|0;
 $20 = (_lily_gp_num_in_scope($19)|0);
 $21 = $20&65535;
 $22 = ((($16)) + 46|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($13)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(19);
 if ($25) {
  _lily_lexer($13);
  $26 = HEAP32[$14>>2]|0;
  $27 = ((($13)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_lily_find_class($26,$1,$28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = HEAP32[$27>>2]|0;
   $32 = (_try_toplevel_dynaload($0,$1,$31)|0);
   $$0100 = $32;
  } else {
   $$0100 = $29;
  }
  $33 = ((($16)) + 32|0);
  HEAP32[$33>>2] = $$0100;
  $34 = ((($$0100)) + 48|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = ((($16)) + 48|0);
  HEAP16[$36>>1] = $35;
 }
 $37 = HEAP32[$12>>2]|0;
 _lily_pop_lex_entry($37);
 $38 = (($2) + 1)|0;
 $39 = $38&65535;
 $40 = ((($16)) + 50|0);
 HEAP16[$40>>1] = $39;
 $41 = HEAP32[$0>>2]|0;
 $42 = ($41|0)==($1|0);
 L7: do {
  if ($42) {
   $43 = HEAP32[$14>>2]|0;
   $44 = ((($43)) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + -1)|0;
   HEAP32[$44>>2] = $46;
   switch ($2|0) {
   case 18:  {
    $47 = ((($16)) + 8|0);
    HEAP16[$47>>1] = 25;
    $$097 = 18;
    break L7;
    break;
   }
   case 31:  {
    $48 = ((($16)) + 8|0);
    HEAP16[$48>>1] = 19;
    $$097 = 31;
    break L7;
    break;
   }
   case 57:  {
    $49 = ((($16)) + 8|0);
    HEAP16[$49>>1] = 24;
    $$097 = 57;
    break L7;
    break;
   }
   case 64:  {
    $50 = ((($16)) + 8|0);
    HEAP16[$50>>1] = 20;
    $$097 = 64;
    break L7;
    break;
   }
   case 66:  {
    $51 = ((($16)) + 8|0);
    HEAP16[$51>>1] = 21;
    $$097 = 66;
    break L7;
    break;
   }
   case 100:  {
    $52 = ((($16)) + 8|0);
    HEAP16[$52>>1] = 22;
    $$097 = 100;
    break L7;
    break;
   }
   case 126:  {
    $53 = ((($16)) + 8|0);
    HEAP16[$53>>1] = 23;
    $$097 = 126;
    break L7;
    break;
   }
   case 7:  {
    $54 = ((($16)) + 8|0);
    HEAP16[$54>>1] = 26;
    $$097 = 7;
    break L7;
    break;
   }
   default: {
    $55 = ((($16)) + 8|0);
    HEAP16[$55>>1] = 12345;
    $$097 = $2;
    break L7;
   }
   }
  } else {
   $$097 = $2;
  }
 } while(0);
 while(1) {
  $56 = (($$097) + 1)|0;
  $57 = (($5) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)==(109);
  if ($60) {
   $$097 = $56;
  } else {
   $$0 = $58;$$198 = $56;
   break;
  }
 }
 L21: while(1) {
  $61 = HEAP8[$$0>>0]|0;
  switch ($61<<24>>24) {
  case 49:  {
   $$0101 = 8;
   break;
  }
  case 50:  {
   $$0101 = 16;
   break;
  }
  case 51:  {
   $$0101 = 0;
   break;
  }
  default: {
   break L21;
  }
  }
  $62 = ((($$0)) + 2|0);
  $63 = (_strlen($62)|0);
  $64 = (($62) + ($63)|0);
  $65 = ((($64)) + 1|0);
  _lily_load_str($13,1,$65);
  _lily_lexer($13);
  $66 = HEAP32[$14>>2]|0;
  $67 = (_get_type_raw($0,0)|0);
  (_lily_add_class_property($66,$16,$67,$62,$$0101)|0);
  _lily_pop_lex_entry($13);
  $68 = (($$198) + 1)|0;
  $69 = (($5) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $$0 = $70;$$198 = $68;
 }
 $71 = HEAP32[$17>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 _lily_gp_restore_and_unhide($71,$72);
 (_try_method_dynaload($0,$16,6924)|0);
 STACKTOP = sp;return ($16|0);
}
function _parse_enum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$097 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 60|0;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1|0)==(0);
 if ($7) {
  $8 = ((($6)) + 18|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(14);
  if (!($10)) {
   $11 = ((($6)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = ((($0)) + 76|0);
    $15 = HEAP32[$14>>2]|0;
    _lily_raise_syn($15,6930,$vararg_buffer);
    // unreachable;
   }
  }
 }
 $16 = ((($0)) + 56|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(35);
 if (!($20)) {
  $21 = ((($0)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_tokname(35)|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (_tokname($24)|0);
  HEAP32[$vararg_buffer1>>2] = $23;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $25;
  _lily_raise_syn($22,6667,$vararg_buffer1);
  // unreachable;
 }
 if ($7) {
  $26 = ((($17)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  _ensure_valid_class($0,$27);
 }
 $28 = ((($0)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($17)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_lily_new_enum_class($29,$31)|0);
 _lily_lexer($17);
 $33 = ((($0)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 _lily_gp_save_and_hide($34,$2);
 _collect_generics($0);
 $35 = HEAP32[$33>>2]|0;
 $36 = (_lily_gp_num_in_scope($35)|0);
 $37 = $36&65535;
 $38 = ((($32)) + 46|0);
 HEAP16[$38>>1] = $37;
 $39 = HEAP32[$3>>2]|0;
 _lily_emit_enter_block($39,10);
 $40 = (_build_self_type($0,$32)|0);
 $41 = ((($0)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$41>>2] = $40;
 $43 = HEAP32[$18>>2]|0;
 $44 = ($43|0)==(29);
 if (!($44)) {
  $45 = ((($0)) + 76|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_tokname(29)|0);
  $48 = HEAP32[$18>>2]|0;
  $49 = (_tokname($48)|0);
  HEAP32[$vararg_buffer4>>2] = $47;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $49;
  _lily_raise_syn($46,6667,$vararg_buffer4);
  // unreachable;
 }
 _lily_lexer($17);
 $50 = HEAP32[$18>>2]|0;
 $51 = ($50|0)==(44);
 $52 = $51&1;
 $53 = ((($0)) + 76|0);
 $54 = ((($0)) + 76|0);
 $55 = ((($0)) + 76|0);
 $$097 = 0;
 L15: while(1) {
  if ($51) {
   $56 = HEAP32[$18>>2]|0;
   $57 = ($56|0)==(44);
   if (!($57)) {
    label = 14;
    break;
   }
   _lily_lexer($17);
  }
  $62 = HEAP32[$18>>2]|0;
  $63 = ($62|0)==(35);
  if (!($63)) {
   label = 17;
   break;
  }
  if ($7) {
   $68 = HEAP32[$28>>2]|0;
   $69 = HEAP32[$30>>2]|0;
   $70 = (_lily_find_class($68,0,$69)|0);
   $71 = ($70|0)==(0|0);
   if (!($71)) {
    if (!($51)) {
     label = 22;
     break;
    }
    $72 = ((($70)) + 32|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==($32|0);
    if ($74) {
     label = 22;
     break;
    }
   }
  }
  $77 = HEAP32[$28>>2]|0;
  $78 = HEAP32[$30>>2]|0;
  $79 = (_lily_new_variant_class($77,$32,$78)|0);
  $80 = (($$097) + 1)|0;
  _lily_lexer($17);
  $81 = HEAP32[$18>>2]|0;
  $82 = ($81|0)==(0);
  if ($82) {
   _parse_variant_header($0,$79);
   $$pr = HEAP32[$18>>2]|0;
   $83 = $$pr;
  } else {
   $83 = $81;
  }
  switch ($83|0) {
  case 3:  {
   label = 28;
   break L15;
   break;
  }
  case 35:  {
   break;
  }
  default: {
   $$097 = $80;
   continue L15;
  }
  }
  $84 = HEAP32[$30>>2]|0;
  $85 = HEAP8[$84>>0]|0;
  $86 = ($85<<24>>24)==(100);
  if (!($86)) {
   $$097 = $80;
   continue;
  }
  $87 = (_keyword_by_name($84)|0);
  $88 = ($87|0)==(14);
  if ($88) {
   label = 28;
   break;
  } else {
   $$097 = $80;
  }
 }
 if ((label|0) == 14) {
  $58 = HEAP32[$53>>2]|0;
  $59 = (_tokname(44)|0);
  $60 = HEAP32[$18>>2]|0;
  $61 = (_tokname($60)|0);
  HEAP32[$vararg_buffer8>>2] = $59;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $61;
  _lily_raise_syn($58,6667,$vararg_buffer8);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $64 = HEAP32[$55>>2]|0;
  $65 = (_tokname(35)|0);
  $66 = HEAP32[$18>>2]|0;
  $67 = (_tokname($66)|0);
  HEAP32[$vararg_buffer12>>2] = $65;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $67;
  _lily_raise_syn($64,6667,$vararg_buffer12);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $75 = HEAP32[$54>>2]|0;
  $76 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $76;
  _lily_raise_syn($75,6958,$vararg_buffer16);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $89 = ($80|0)<(2);
  if ($89) {
   $90 = ((($0)) + 76|0);
   $91 = HEAP32[$90>>2]|0;
   _lily_raise_syn($91,7001,$vararg_buffer19);
   // unreachable;
  }
  $92 = HEAP32[$28>>2]|0;
  _lily_finish_enum($92,$32,$52,$40);
  if (!($7)) {
   $103 = HEAP32[$3>>2]|0;
   _lily_emit_leave_block($103);
   HEAP32[$41>>2] = $42;
   $104 = HEAP32[$33>>2]|0;
   $105 = HEAP32[$2>>2]|0;
   _lily_gp_restore_and_unhide($104,$105);
   _lily_lexer($17);
   STACKTOP = sp;return ($32|0);
  }
  $93 = HEAP32[$18>>2]|0;
  $94 = ($93|0)==(35);
  if (!($94)) {
   $103 = HEAP32[$3>>2]|0;
   _lily_emit_leave_block($103);
   HEAP32[$41>>2] = $42;
   $104 = HEAP32[$33>>2]|0;
   $105 = HEAP32[$2>>2]|0;
   _lily_gp_restore_and_unhide($104,$105);
   _lily_lexer($17);
   STACKTOP = sp;return ($32|0);
  }
  $95 = ((($0)) + 76|0);
  L43: while(1) {
   _lily_lexer($17);
   _define_handler($0,1);
   $96 = HEAP32[$18>>2]|0;
   switch ($96|0) {
   case 3:  {
    label = 36;
    break L43;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 35;
    break L43;
   }
   }
   $97 = HEAP32[$30>>2]|0;
   $98 = (_keyword_by_name($97)|0);
   $99 = ($98|0)==(14);
   if (!($99)) {
    label = 35;
    break;
   }
  }
  if ((label|0) == 35) {
   $100 = HEAP32[$95>>2]|0;
   $101 = HEAP32[$18>>2]|0;
   $102 = (_tokname($101)|0);
   HEAP32[$vararg_buffer21>>2] = $102;
   _lily_raise_syn($100,7042,$vararg_buffer21);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $103 = HEAP32[$3>>2]|0;
   _lily_emit_leave_block($103);
   HEAP32[$41>>2] = $42;
   $104 = HEAP32[$33>>2]|0;
   $105 = HEAP32[$2>>2]|0;
   _lily_gp_restore_and_unhide($104,$105);
   _lily_lexer($17);
   STACKTOP = sp;return ($32|0);
  }
 }
 return (0)|0;
}
function _ensure_valid_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = ((($0)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($6,9660,$vararg_buffer);
  // unreachable;
 }
 $7 = ((($0)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 18|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12<<16>>16)==(14);
 if (!($13)) {
  $14 = ((($10)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($0)) + 76|0);
   $18 = HEAP32[$17>>2]|0;
   _lily_raise_syn($18,9704,$vararg_buffer1);
   // unreachable;
  }
 }
 $19 = ((($0)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_lily_find_class($20,0,$1)|0);
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = ((($0)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $1;
  _lily_raise_syn($24,9733,$vararg_buffer3);
  // unreachable;
 }
 $25 = HEAP32[$19>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_try_toplevel_dynaload($0,$27,$1)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = ((($28)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = ($31<<16>>16)==(1);
 if ($32) {
  STACKTOP = sp;return;
 } else {
  $33 = ((($0)) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $1;
  _lily_raise_syn($34,9771,$vararg_buffer6);
  // unreachable;
 }
}
function _build_self_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_gp_num_in_scope($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $25 = ((($1)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $$017 = $26;
  STACKTOP = sp;return ($$017|0);
 }
 HEAP16[$2>>1] = 65;
 $7 = ((($0)) + 64|0);
 $8 = ((($0)) + 72|0);
 $$018 = $5;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = (_lily_find_class($9,0,$2)|0);
  $11 = HEAP32[$8>>2]|0;
  $12 = ((($10)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_tm_add($11,$13);
  $14 = HEAP8[$2>>0]|0;
  $15 = (($14) + 1)<<24>>24;
  HEAP8[$2>>0] = $15;
  $16 = (($$018) + -1)|0;
  $17 = ($16|0)==(0);
  if ($17) {
   break;
  } else {
   $$018 = $16;
  }
 }
 $18 = ((($0)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP8[$2>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = (($21) + -65)|0;
 $23 = (_lily_tm_make($19,0,$1,$22)|0);
 $24 = ((($1)) + 12|0);
 HEAP32[$24>>2] = $23;
 $$017 = $23;
 STACKTOP = sp;return ($$017|0);
}
function _parse_variant_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 20|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_lexer($4);
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise_syn($9,9583,$vararg_buffer);
  // unreachable;
 }
 HEAP32[$2>>2] = 0;
 $10 = ((($0)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[431]|0;
 _lily_tm_add($11,$12);
 $13 = ((($0)) + 76|0);
 $14 = ((($0)) + 76|0);
 $$0 = 1;
 L4: while(1) {
  $15 = HEAP32[$10>>2]|0;
  $16 = (_get_nameless_arg($0,$2)|0);
  _lily_tm_add($15,$16);
  $17 = HEAP32[$2>>2]|0;
  $18 = $17 & 2048;
  $19 = ($18|0)==(0);
  if (!($19)) {
   label = 5;
   break;
  }
  $21 = (($$0) + 1)|0;
  $22 = HEAP32[$5>>2]|0;
  switch ($22|0) {
  case 1:  {
   label = 9;
   break L4;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 8;
   break L4;
  }
  }
  _lily_lexer($4);
  $$0 = $21;
 }
 if ((label|0) == 5) {
  $20 = HEAP32[$14>>2]|0;
  _lily_raise_syn($20,9618,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $23 = HEAP32[$13>>2]|0;
  $24 = (_tokname($22)|0);
  HEAP32[$vararg_buffer3>>2] = $24;
  _lily_raise_syn($23,6629,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 9) {
  _lily_lexer($4);
  $25 = HEAP32[$10>>2]|0;
  $26 = HEAP32[$2>>2]|0;
  $27 = ((($0)) + 64|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 72|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_lily_tm_make($25,$26,$30,$21)|0);
  $32 = ((($1)) + 12|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($1)) + 6|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $35 & 65519;
  $37 = $36&65535;
  HEAP16[$33>>1] = $37;
  STACKTOP = sp;return;
 }
}
function _keyword_by_name($0) {
 $0 = $0|0;
 var $$0 = 0, $$01314 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_shorthash_for_name($0)|0);
 $2 = tempRet0;
 $$01314 = 0;
 while(1) {
  $3 = (((104 + ($$01314<<4)|0)) + 8|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)==($1|0);
  $11 = ($9|0)==($2|0);
  $12 = $10 & $11;
  if ($12) {
   $13 = (104 + ($$01314<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strcmp($14,$0)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = $$01314;
    label = 6;
    break;
   }
  }
  $17 = $3;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>($2>>>0);
  $24 = ($19>>>0)>($1>>>0);
  $25 = ($22|0)==($2|0);
  $26 = $25 & $24;
  $27 = $23 | $26;
  if ($27) {
   $$0 = -1;
   label = 6;
   break;
  }
  $28 = (($$01314) + 1)|0;
  $29 = ($28|0)<(21);
  if ($29) {
   $$01314 = $28;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _define_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_define($0,0);
 return;
}
function _parse_define($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 18|0);
 $8 = HEAP16[$7>>1]|0;
 switch ($8<<16>>16) {
 case 10: case 12: case 11: case 14:  {
  break;
 }
 default: {
  $9 = ((($6)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($0)) + 76|0);
   $13 = HEAP32[$12>>2]|0;
   _lily_raise_syn($13,7078,$vararg_buffer);
   // unreachable;
  }
 }
 }
 $14 = ((($0)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_gp_save($17,$2);
 _parse_define_header($0,$1);
 $18 = ((($15)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(29);
 if (!($20)) {
  $21 = ((($0)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_tokname(29)|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (_tokname($24)|0);
  HEAP32[$vararg_buffer1>>2] = $23;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $25;
  _lily_raise_syn($22,6667,$vararg_buffer1);
  // unreachable;
 }
 _parse_multiline_block_body($0,1);
 $26 = HEAP32[$3>>2]|0;
 _lily_emit_leave_block($26);
 $27 = HEAP32[$16>>2]|0;
 $28 = HEAP32[$2>>2]|0;
 _lily_gp_restore($27,$28);
 $29 = HEAP32[$3>>2]|0;
 $30 = ((($29)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 18|0);
 $33 = HEAP16[$32>>1]|0;
 switch ($33<<16>>16) {
 case 10: case 12:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $34 = ((($0)) + 64|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($35)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_add_class_method($35,$39,$43);
 STACKTOP = sp;return;
}
function _parse_define_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$085 = 0, $$1 = 0, $$2 = 0, $$pr = 0, $$pr86 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr16 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_tokname(35)|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  _lily_raise_syn($9,6667,$vararg_buffer);
  // unreachable;
 }
 $13 = ((($4)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 _ensure_unique_method_name($0,$14);
 $15 = ((($0)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
 } else {
  $18 = ((($16)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $$0 = $19;
 }
 $20 = ((($0)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = ((($4)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (_lily_emit_new_define_var($21,$23,$$0,$24,$26)|0);
 HEAP32[$25>>2] = 0;
 HEAP32[$2>>2] = 0;
 $28 = ((($0)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[431]|0;
 _lily_tm_add($29,$36);
 _lily_lexer($4);
 _collect_generics($0);
 $37 = HEAP32[$20>>2]|0;
 _lily_emit_enter_block($37,11);
 $38 = HEAP32[$15>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $$085 = 0;
 } else {
  $40 = HEAP32[$28>>2]|0;
  _lily_tm_add($40,$38);
  $41 = HEAP32[$20>>2]|0;
  $42 = HEAP32[$15>>2]|0;
  $43 = (_lily_emit_new_local_var($41,$42,9440)|0);
  $44 = HEAP32[$15>>2]|0;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($27)) + 40|0);
  HEAP32[$47>>2] = $46;
  $48 = ((($27)) + 6|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = $50 | $1;
  $52 = $51&65535;
  HEAP16[$48>>1] = $52;
  $53 = HEAP32[$20>>2]|0;
  $54 = ((($53)) + 76|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 44|0);
  HEAP32[$56>>2] = $43;
  $$085 = 1;
 }
 $57 = HEAP32[$5>>2]|0;
 $58 = ($57|0)==(0);
 do {
  if ($58) {
   _lily_lexer($4);
   $59 = HEAP32[$5>>2]|0;
   $60 = ($59|0)==(1);
   if ($60) {
    $61 = ((($0)) + 76|0);
    $62 = HEAP32[$61>>2]|0;
    _lily_raise_syn($62,9447,$vararg_buffer2);
    // unreachable;
   } else {
    $$1 = $$085;$63 = $59;
   }
   L14: while(1) {
    $64 = ($63|0)==(35);
    if (!($64)) {
     label = 11;
     break;
    }
    $70 = HEAP32[$28>>2]|0;
    $71 = (_get_named_arg($0,$2)|0);
    _lily_tm_add($70,$71);
    $72 = (($$1) + 1)|0;
    $73 = HEAP32[$5>>2]|0;
    switch ($73|0) {
    case 1:  {
     label = 14;
     break L14;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     label = 15;
     break L14;
    }
    }
    _lily_lexer($4);
    $$pr = HEAP32[$5>>2]|0;
    $$1 = $72;$63 = $$pr;
   }
   if ((label|0) == 11) {
    $65 = ((($0)) + 76|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (_tokname(35)|0);
    $68 = HEAP32[$5>>2]|0;
    $69 = (_tokname($68)|0);
    HEAP32[$vararg_buffer4>>2] = $67;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $69;
    _lily_raise_syn($66,6667,$vararg_buffer4);
    // unreachable;
   }
   else if ((label|0) == 14) {
    _lily_lexer($4);
    $$pr86 = HEAP32[$5>>2]|0;
    $$2 = $72;$77 = $$pr86;
    break;
   }
   else if ((label|0) == 15) {
    $74 = ((($0)) + 76|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_tokname($73)|0);
    HEAP32[$vararg_buffer8>>2] = $76;
    _lily_raise_syn($75,6629,$vararg_buffer8);
    // unreachable;
   }
  } else {
   $$2 = $$085;$77 = $57;
  }
 } while(0);
 $78 = ($77|0)==(6);
 do {
  if ($78) {
   _lily_lexer($4);
   $79 = HEAP32[$13>>2]|0;
   $80 = (_strcmp($79,10410)|0);
   $81 = ($80|0)==(0);
   if (!($81)) {
    $82 = HEAP32[$28>>2]|0;
    $83 = (_get_type_raw($0,0)|0);
    _lily_tm_insert($82,$31,$83);
    break;
   }
   $84 = HEAP32[$20>>2]|0;
   $85 = ((($84)) + 76|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(0|0);
   if ($89) {
    $93 = ((($0)) + 76|0);
    $94 = HEAP32[$93>>2]|0;
    _lily_raise_syn($94,9481,$vararg_buffer11);
    // unreachable;
   }
   $90 = ((($88)) + 18|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = ($91<<16>>16)==(12);
   if ($92) {
    $95 = HEAP32[$28>>2]|0;
    $96 = HEAP32[430]|0;
    $97 = ((($96)) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    _lily_tm_insert($95,$31,$98);
    _lily_lexer($4);
    break;
   } else {
    $93 = ((($0)) + 76|0);
    $94 = HEAP32[$93>>2]|0;
    _lily_raise_syn($94,9481,$vararg_buffer11);
    // unreachable;
   }
  }
 } while(0);
 $99 = HEAP32[$5>>2]|0;
 $100 = ($99|0)==(29);
 if ($100) {
  $106 = HEAP32[$28>>2]|0;
  $107 = HEAP32[$2>>2]|0;
  $108 = ((($0)) + 64|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 72|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($$2) + 1)|0;
  $113 = (_lily_tm_make($106,$107,$111,$112)|0);
  $114 = ((($27)) + 12|0);
  HEAP32[$114>>2] = $113;
  $115 = HEAP32[$20>>2]|0;
  $116 = HEAP32[$32>>2]|0;
  _lily_emit_setup_call($115,0,$27,$116,$35);
  STACKTOP = sp;return;
 } else {
  $101 = ((($0)) + 76|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (_tokname(29)|0);
  $104 = HEAP32[$5>>2]|0;
  $105 = (_tokname($104)|0);
  HEAP32[$vararg_buffer13>>2] = $103;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $105;
  _lily_raise_syn($102,6667,$vararg_buffer13);
  // unreachable;
 }
}
function _parse_multiline_block_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 if ($4) {
  $5 = ((($0)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,7109,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $7 = ((($3)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  _lily_lexer($3);
  STACKTOP = sp;return;
 }
 _statement($0,1);
 $$pr = HEAP32[$7>>2]|0;
 $10 = ($$pr|0)==(3);
 if ($10) {
  _lily_lexer($3);
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(3)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer1>>2] = $13;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  _lily_raise_syn($12,6667,$vararg_buffer1);
  // unreachable;
 }
}
function _statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = ((($3)) + 12|0);
 $6 = ((($0)) + 60|0);
 $7 = ((($0)) + 24|0);
 $8 = ($1|0)==(0);
 $9 = ((($0)) + 60|0);
 $10 = ((($0)) + 24|0);
 L1: while(1) {
  $11 = HEAP32[$4>>2]|0;
  L3: do {
   switch ($11|0) {
   case 35:  {
    $12 = HEAP32[$5>>2]|0;
    $13 = (_keyword_by_name($12)|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     _expression($0);
     $17 = HEAP32[$6>>2]|0;
     $18 = HEAP32[$7>>2]|0;
     _lily_emit_eval_expr($17,$18);
     break L3;
    } else {
     _lily_lexer($3);
     $15 = (976 + ($13<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     FUNCTION_TABLE_vii[$16 & 63]($0,$1);
     break L3;
    }
    break;
   }
   case 0: case 4: case 31: case 36: case 37: case 38: case 39: case 40: case 41: case 42:  {
    _expression($0);
    $19 = HEAP32[$9>>2]|0;
    $20 = HEAP32[$10>>2]|0;
    _lily_emit_eval_expr($19,$20);
    break;
   }
   case 43:  {
    _process_docstring($0);
    break;
   }
   default: {
    break L1;
   }
   }
  } while(0);
  if ($8) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $21 = ($1|0)==(0);
 if ($21) {
  $22 = ((($0)) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $24;
  _lily_raise_syn($23,7152,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _expression($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 _rewind_expr_state($2);
 _expression_raw($0,1);
 return;
}
function _process_docstring($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_lexer($2);
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(35);
 L1: do {
  if ($5) {
   $6 = ((($2)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_keyword_by_name($7)|0);
   switch ($8|0) {
   case 13: case 14: case 18: case 19:  {
    break;
   }
   default: {
    break L1;
   }
   }
   _lily_lexer($2);
   $9 = (976 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   FUNCTION_TABLE_vii[$10 & 63]($0,1);
   STACKTOP = sp;return;
  }
 } while(0);
 $11 = ((($0)) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_raise_syn($12,7180,$vararg_buffer);
 // unreachable;
}
function _rewind_expr_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $3;
 return;
}
function _expression_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==(4);
 $$ = $5 ? 3 : $1;
 HEAP32[$2>>2] = $$;
 $6 = ((($4)) + 48|0);
 $7 = ((($0)) + 24|0);
 $8 = ((($0)) + 76|0);
 $9 = ((($0)) + 24|0);
 $10 = ((($0)) + 24|0);
 $11 = ((($0)) + 24|0);
 $12 = ((($0)) + 24|0);
 $13 = ((($0)) + 24|0);
 $14 = ((($0)) + 24|0);
 $15 = ((($0)) + 24|0);
 $16 = ((($0)) + 24|0);
 $17 = ((($0)) + 24|0);
 $18 = ((($0)) + 28|0);
 $19 = ((($4)) + 12|0);
 $20 = ((($4)) + 24|0);
 $21 = ((($0)) + 24|0);
 L1: while(1) {
  $22 = HEAP32[$6>>2]|0;
  $23 = (((1060 + (($22*12)|0)|0)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)==(35);
  L3: do {
   if ($25) {
    $26 = HEAP32[$2>>2]|0;
    $27 = ($26|0)==(2);
    if ($27) {
     label = 4;
     break L1;
    }
    _expression_word($0,$2);
    label = 51;
   } else {
    $32 = ($24|0)==(-1);
    if (!($32)) {
     $33 = HEAP32[$2>>2]|0;
     $34 = ($33|0)==(2);
     if ($34) {
      $35 = HEAP32[$21>>2]|0;
      _lily_es_push_binary_op($35,$24);
      HEAP32[$2>>2] = 1;
      break;
     }
     $36 = ($22|0)==(17);
     if (!($36)) {
      label = 13;
      break L1;
     }
     _expression_unary($0,$2);
     label = 51;
     break;
    }
    do {
     switch ($22|0) {
     case 0:  {
      $37 = HEAP32[$2>>2]|0;
      $38 = $37 | 2;
      $39 = ($38|0)==(3);
      if ($39) {
       $40 = HEAP32[$10>>2]|0;
       _lily_es_enter_tree($40,4);
       HEAP32[$2>>2] = 1;
       break L3;
      }
      $41 = ($37|0)==(2);
      if (!($41)) {
       label = 51;
       break L3;
      }
      $42 = HEAP32[$11>>2]|0;
      _lily_es_enter_tree($42,0);
      HEAP32[$2>>2] = 3;
      break L3;
      break;
     }
     case 4:  {
      $43 = HEAP32[$2>>2]|0;
      $44 = $43 | 2;
      $45 = ($44|0)==(3);
      if ($45) {
       $46 = HEAP32[$12>>2]|0;
       _lily_es_enter_tree($46,2);
       HEAP32[$2>>2] = 3;
       break L3;
      }
      $47 = ($43|0)==(2);
      if (!($47)) {
       label = 51;
       break L3;
      }
      $48 = HEAP32[$13>>2]|0;
      _lily_es_enter_tree($48,1);
      HEAP32[$2>>2] = 1;
      break L3;
      break;
     }
     case 36:  {
      $49 = HEAP32[$2>>2]|0;
      $50 = ($49|0)==(2);
      if ($50) {
       label = 24;
       break L1;
      }
      _expression_property($0,$2);
      label = 51;
      break L3;
      break;
     }
     case 31:  {
      $51 = HEAP32[$2>>2]|0;
      $52 = ($51|0)==(2);
      if ($52) {
       label = 27;
       break L1;
      }
      $53 = HEAP32[$14>>2]|0;
      _lily_es_enter_tree($53,12);
      HEAP32[$2>>2] = 3;
      break L3;
      break;
     }
     case 32: case 33: case 1:  {
      $54 = HEAP32[$2>>2]|0;
      $55 = ($54|0)==(1);
      if ($55) {
       label = 31;
       break L1;
      }
      $56 = HEAP32[$15>>2]|0;
      $57 = ((($56)) + 20|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = ($58<<16>>16)==(0);
      if ($59) {
       label = 31;
       break L1;
      }
      _check_valid_close_tok($0);
      $60 = HEAP32[$15>>2]|0;
      _lily_es_leave_tree($60);
      if ($5) {
       $61 = HEAP32[$6>>2]|0;
       $62 = ($61|0)==(1);
       if ($62) {
        $63 = HEAP32[$15>>2]|0;
        $64 = ((($63)) + 20|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = ($65<<16>>16)==(0);
        if ($66) {
         label = 36;
         break L1;
        }
       }
      }
      HEAP32[$2>>2] = 2;
      break L3;
      break;
     }
     case 40: case 39: case 38: case 37: case 42: case 41:  {
      _expression_literal($0,$2);
      label = 51;
      break L3;
      break;
     }
     case 44:  {
      _expression_dot($0,$2);
      label = 51;
      break L3;
      break;
     }
     case 7: case 17:  {
      _expression_unary($0,$2);
      label = 51;
      break L3;
      break;
     }
     case 30:  {
      $67 = HEAP32[$2>>2]|0;
      $68 = ($67|0)==(2);
      if ($68) {
       $69 = HEAP32[$16>>2]|0;
       _lily_es_enter_tree($69,0);
      }
      $70 = HEAP32[$17>>2]|0;
      $71 = ((($70)) + 24|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72&65535;
      $74 = HEAP32[$18>>2]|0;
      $75 = HEAP32[$19>>2]|0;
      _lily_sp_insert($74,$75,$71);
      $76 = HEAP32[$17>>2]|0;
      $77 = HEAP32[$20>>2]|0;
      _lily_es_push_text($76,15,$77,$73);
      $78 = HEAP32[$2>>2]|0;
      $79 = ($78|0)==(2);
      if ($79) {
       $80 = HEAP32[$17>>2]|0;
       _lily_es_leave_tree($80);
      }
      HEAP32[$2>>2] = 2;
      break L3;
      break;
     }
     default: {
      $81 = (((1060 + (($22*12)|0)|0)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0);
      if (!($83)) {
       $84 = HEAP32[$9>>2]|0;
       $85 = ((($84)) + 20|0);
       $86 = HEAP16[$85>>1]|0;
       $87 = ($86<<16>>16)==(0);
       $88 = HEAP32[$2>>2]|0;
       $89 = ($88|0)==(2);
       $or$cond5 = $87 & $89;
       if ($or$cond5) {
        label = 47;
        break L1;
       }
      }
      $90 = HEAP32[$6>>2]|0;
      switch ($90|0) {
      case 34: case 2:  {
       break;
      }
      default: {
       label = 50;
       break L1;
      }
      }
      _expression_comma_arrow($0,$2);
      label = 51;
      break L3;
     }
     }
    } while(0);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   $$pr = HEAP32[$2>>2]|0;
   switch ($$pr|0) {
   case 5:  {
    label = 56;
    break L1;
    break;
   }
   case 6:  {
    label = 52;
    break L1;
    break;
   }
   default: {
   }
   }
   $94 = $$pr & 8;
   $95 = ($94|0)==(0);
   if (!($95)) {
    $96 = $$pr & -9;
    HEAP32[$2>>2] = $96;
    continue;
   }
  }
  _lily_lexer($4);
 }
 switch (label|0) {
  case 4: {
   $28 = HEAP32[$7>>2]|0;
   $29 = ((($28)) + 20|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30<<16>>16)==(0);
   if ($31) {
    HEAP32[$2>>2] = 5;
    STACKTOP = sp;return;
   } else {
    HEAP32[$2>>2] = 6;
    $91 = HEAP32[$8>>2]|0;
    $92 = HEAP32[$6>>2]|0;
    $93 = (_tokname($92)|0);
    HEAP32[$vararg_buffer>>2] = $93;
    _lily_raise_syn($91,7242,$vararg_buffer);
    // unreachable;
   }
   break;
  }
  case 13: {
   HEAP32[$2>>2] = 6;
   $91 = HEAP32[$8>>2]|0;
   $92 = HEAP32[$6>>2]|0;
   $93 = (_tokname($92)|0);
   HEAP32[$vararg_buffer>>2] = $93;
   _lily_raise_syn($91,7242,$vararg_buffer);
   // unreachable;
   break;
  }
  case 24: {
   HEAP32[$2>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 27: {
   HEAP32[$2>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 31: {
   HEAP32[$2>>2] = 6;
   $91 = HEAP32[$8>>2]|0;
   $92 = HEAP32[$6>>2]|0;
   $93 = (_tokname($92)|0);
   HEAP32[$vararg_buffer>>2] = $93;
   _lily_raise_syn($91,7242,$vararg_buffer);
   // unreachable;
   break;
  }
  case 36: {
   HEAP32[$2>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 47: {
   HEAP32[$2>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 50: {
   HEAP32[$2>>2] = 6;
   $91 = HEAP32[$8>>2]|0;
   $92 = HEAP32[$6>>2]|0;
   $93 = (_tokname($92)|0);
   HEAP32[$vararg_buffer>>2] = $93;
   _lily_raise_syn($91,7242,$vararg_buffer);
   // unreachable;
   break;
  }
  case 52: {
   $91 = HEAP32[$8>>2]|0;
   $92 = HEAP32[$6>>2]|0;
   $93 = (_tokname($92)|0);
   HEAP32[$vararg_buffer>>2] = $93;
   _lily_raise_syn($91,7242,$vararg_buffer);
   // unreachable;
   break;
  }
  case 56: {
   STACKTOP = sp;return;
   break;
  }
 }
}
function _expression_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_resolve_module($0)|0);
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_find_var($3,$6,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _dispatch_word_as_var($0,$9,$1);
  STACKTOP = sp;return;
 }
 $11 = ($6|0)==(0|0);
 L5: do {
  if ($11) {
   $12 = HEAP32[$7>>2]|0;
   $13 = (_constant_by_name($12)|0);
   switch ($13|0) {
   case -1:  {
    break L5;
    break;
   }
   case 1:  {
    $14 = ((($0)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = ((($0)) + 76|0);
     $18 = HEAP32[$17>>2]|0;
     _lily_raise_syn($18,7568,$vararg_buffer);
     // unreachable;
    }
    break;
   }
   default: {
   }
   }
   _push_constant($0,$13);
   HEAP32[$1>>2] = 2;
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = HEAP32[$2>>2]|0;
 $20 = HEAP32[$7>>2]|0;
 $21 = (_lily_find_class($19,$6,$20)|0);
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _dispatch_word_as_class($0,$21,$1);
  STACKTOP = sp;return;
 }
 if ($11) {
  $23 = ((($0)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$7>>2]|0;
   $29 = (_lily_find_method($27,$28)|0);
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = ((($0)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    _lily_es_push_method($32,$29);
    HEAP32[$1>>2] = 2;
    STACKTOP = sp;return;
   }
  }
  $33 = ((($3)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $$0 = $34;
 } else {
  $$0 = $6;
 }
 $35 = ((($$0)) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $41 = ((($0)) + 76|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  _lily_raise_syn($42,7604,$vararg_buffer1);
  // unreachable;
 }
 $38 = HEAP32[$7>>2]|0;
 $39 = (_try_toplevel_dynaload($0,$$0,$38)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = ((($0)) + 76|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  _lily_raise_syn($42,7604,$vararg_buffer1);
  // unreachable;
 }
 _dispatch_dynaload($0,$39,$1);
 STACKTOP = sp;return;
}
function _expression_unary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 L1: do {
  if ($3) {
   $storemerge = 6;
  } else {
   $4 = ((($0)) + 56|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 48|0);
   $7 = HEAP32[$6>>2]|0;
   switch ($7|0) {
   case 17:  {
    $8 = ((($0)) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    _lily_es_push_unary_op($9,17);
    $storemerge = 1;
    break L1;
    break;
   }
   case 7:  {
    $10 = ((($0)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_es_push_unary_op($11,16);
    $storemerge = 1;
    break L1;
    break;
   }
   default: {
    $storemerge = 1;
    break L1;
   }
   }
  }
 } while(0);
 HEAP32[$1>>2] = $storemerge;
 return;
}
function _expression_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($0)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,7450,$vararg_buffer);
  // unreachable;
 }
 $7 = ((($0)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_find_property($13,$10)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 18|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21<<16>>16)==(12);
  $$ = $22 ? 7508 : 19155;
  $23 = ((($0)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($13)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $26;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $$;
  _lily_raise_syn($24,7534,$vararg_buffer1);
  // unreachable;
 } else {
  $27 = ((($0)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_es_push_property($28,$14);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _check_valid_close_tok($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_es_get_saved_tree($6)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $trunc = $9&255;
 switch ($trunc<<24>>24) {
 case 0: case 4: case 11:  {
  $$0 = 1;
  break;
 }
 case 12:  {
  $$0 = 32;
  break;
 }
 default: {
  $$0 = 33;
 }
 }
 $10 = ($4|0)==($$0|0);
 if ($10) {
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname($$0)|0);
  $14 = (_tokname($4)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise_syn($12,7411,$vararg_buffer);
  // unreachable;
 }
}
function _expression_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $$off = (($6) + -41)|0;
  $9 = ($$off>>>0)<(2);
  if ($9) {
   $10 = (_maybe_digit_fixup($0)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    STACKTOP = sp;return;
   }
  }
  $12 = ((($0)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)==(0);
  if ($16) {
   HEAP32[$1>>2] = 5;
   STACKTOP = sp;return;
  } else {
   HEAP32[$1>>2] = 6;
   STACKTOP = sp;return;
  }
 }
 switch ($6|0) {
 case 39:  {
  $17 = ((($0)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  _lily_mb_flush($22);
  $23 = ((($4)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_mb_add($22,$24);
  $25 = (_lily_mb_get($22)|0);
  HEAP32[$2>>2] = $25;
  _lily_es_enter_tree($18,22);
  $26 = ((($18)) + 24|0);
  $27 = ((($0)) + 28|0);
  $28 = ((($4)) + 24|0);
  while(1) {
   $29 = (_lily_scan_interpolation_piece($4,$2)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $36 = HEAP32[$23>>2]|0;
    $37 = (_lily_get_string_literal($20,$36)|0);
    _push_literal($0,$37);
   } else {
    $31 = HEAP16[$26>>1]|0;
    $32 = $31&65535;
    $33 = HEAP32[$27>>2]|0;
    $34 = HEAP32[$23>>2]|0;
    _lily_sp_insert($33,$34,$26);
    $35 = HEAP32[$28>>2]|0;
    _lily_es_push_text($18,23,$35,$32);
   }
   $38 = HEAP32[$17>>2]|0;
   _lily_es_collect_arg($38);
   $39 = HEAP32[$2>>2]|0;
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    break;
   }
  }
  _lily_es_leave_tree($18);
  _lily_mb_flush($22);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 41:  {
  $42 = ((($4)) + 40|0);
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (_i64Add(($45|0),($48|0),32768,0)|0);
  $50 = tempRet0;
  $51 = ($50>>>0)<(0);
  $52 = ($49>>>0)<(65536);
  $53 = ($50|0)==(0);
  $54 = $53 & $52;
  $55 = $51 | $54;
  if ($55) {
   $56 = ((($0)) + 24|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $45&65535;
   _lily_es_push_integer($57,$58);
  } else {
   $59 = ((($0)) + 64|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_lily_get_integer_literal($60,$45,$48)|0);
   _push_literal($0,$61);
  }
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 40:  {
  $62 = ((($0)) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($4)) + 40|0);
  $65 = $64;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $67&255;
  _lily_es_push_byte($63,$71);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $72 = ((($4)) + 56|0);
  $73 = HEAP32[$72>>2]|0;
  _push_literal($0,$73);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
 }
 }
}
function _expression_dot($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 35:  {
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ((($0)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_sp_insert($12,$14,$8);
  _lily_es_push_text($7,8,0,$10);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 49:  {
  _lily_lexer($3);
  $15 = (_get_type_raw($0,0)|0);
  $16 = ((($0)) + 64|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_lily_find_class($17,$19,7364)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = HEAP32[$18>>2]|0;
   $23 = (_find_run_class_dynaload($0,$22,7364)|0);
   $$0 = $23;
  } else {
   $$0 = $20;
  }
  $24 = ((($0)) + 72|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_tm_add($25,$15);
  $26 = HEAP32[$24>>2]|0;
  $27 = (_lily_tm_make($26,0,$$0,1)|0);
  $28 = ((($0)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  _lily_es_enter_typecast($29,$27);
  $30 = HEAP32[$28>>2]|0;
  _lily_es_leave_tree($30);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $31 = ((($0)) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_tokname(35)|0);
  $34 = (_tokname(49)|0);
  $35 = HEAP32[$4>>2]|0;
  $36 = (_tokname($35)|0);
  HEAP32[$vararg_buffer>>2] = $33;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $34;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $36;
  _lily_raise_syn($32,7371,$vararg_buffer);
  // unreachable;
 }
 }
}
function _expression_comma_arrow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,7265,$vararg_buffer);
  // unreachable;
 }
 $11 = HEAP32[$4>>2]|0;
 $12 = (_lily_es_get_saved_tree($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $storemerge = 6;
  HEAP32[$1>>2] = $storemerge;
  STACKTOP = sp;return;
 }
 $14 = ((($3)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 L7: do {
  switch ($15|0) {
  case 2:  {
   $16 = ((($12)) + 4|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 & 255;
   $19 = ($18<<16>>16)==(3);
   if ($19) {
    $20 = ((($12)) + 14|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 & 1;
    $23 = ($22<<16>>16)==(0);
    if ($23) {
     $24 = ((($0)) + 76|0);
     $25 = HEAP32[$24>>2]|0;
     _lily_raise_syn($25,7292,$vararg_buffer1);
     // unreachable;
    }
   }
   $26 = HEAP16[$16>>1]|0;
   $27 = $26 & 255;
   $28 = ($27<<16>>16)==(1);
   if ($28) {
    $29 = ((($0)) + 76|0);
    $30 = HEAP32[$29>>2]|0;
    _lily_raise_syn($30,7333,$vararg_buffer3);
    // unreachable;
   }
   break;
  }
  case 34:  {
   $31 = ((($12)) + 4|0);
   $32 = HEAP16[$31>>1]|0;
   $trunc = $32&255;
   switch ($trunc<<24>>24) {
   case 2:  {
    $33 = ((($12)) + 14|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = ($34<<16>>16)==(0);
    if ($35) {
     $36 = $32 & -256;
     $37 = $36 | 3;
     HEAP16[$31>>1] = $37;
     break L7;
    } else {
     $38 = ((($0)) + 76|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (_tokname(34)|0);
     HEAP32[$vararg_buffer5>>2] = $40;
     _lily_raise_syn($39,7242,$vararg_buffer5);
     // unreachable;
    }
    break;
   }
   case 3:  {
    $41 = ((($12)) + 14|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42 & 1;
    $44 = ($43<<16>>16)==(0);
    if ($44) {
     break L7;
    }
    $45 = ((($0)) + 76|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_tokname(34)|0);
    HEAP32[$vararg_buffer7>>2] = $47;
    _lily_raise_syn($46,7242,$vararg_buffer7);
    // unreachable;
    break;
   }
   default: {
    $45 = ((($0)) + 76|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_tokname(34)|0);
    HEAP32[$vararg_buffer7>>2] = $47;
    _lily_raise_syn($46,7242,$vararg_buffer7);
    // unreachable;
   }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $48 = HEAP32[$4>>2]|0;
 _lily_es_collect_arg($48);
 $storemerge = 1;
 HEAP32[$1>>2] = $storemerge;
 STACKTOP = sp;return;
}
function _maybe_digit_fixup($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(45);
 switch ($9<<24>>24) {
 case 43: case 45:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $$ = $10&1;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_es_push_binary_op($12,$$);
 _lily_lexer_digit_rescan($2);
 $13 = ((($2)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(41);
 if (!($15)) {
  $35 = ((($2)) + 56|0);
  $36 = HEAP32[$35>>2]|0;
  _push_literal($0,$36);
  $$0 = 1;
  return ($$0|0);
 }
 $16 = ((($2)) + 40|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Add(($19|0),($22|0),32768,0)|0);
 $24 = tempRet0;
 $25 = ($24>>>0)<(0);
 $26 = ($23>>>0)<(65536);
 $27 = ($24|0)==(0);
 $28 = $27 & $26;
 $29 = $25 | $28;
 if ($29) {
  $30 = HEAP32[$11>>2]|0;
  $31 = $19&65535;
  _lily_es_push_integer($30,$31);
  $$0 = 1;
  return ($$0|0);
 } else {
  $32 = ((($0)) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_lily_get_integer_literal($33,$19,$22)|0);
  _push_literal($0,$34);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _push_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 L1: do {
  switch ($2<<16>>16) {
  case 1:  {
   $3 = ((($0)) + 64|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 44|0);
   $$0$in = $5;
   break;
  }
  case 2:  {
   $6 = ((($0)) + 64|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 48|0);
   $$0$in = $8;
   break;
  }
  case 3:  {
   $9 = ((($0)) + 64|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 52|0);
   $$0$in = $11;
   break;
  }
  default: {
   $12 = ($2<<16>>16)==(5);
   $13 = ((($0)) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   if ($12) {
    $15 = ((($14)) + 60|0);
    $$0$in = $15;
    break L1;
   } else {
    $16 = ((($14)) + 92|0);
    $$0$in = $16;
    break L1;
   }
  }
  }
 } while(0);
 $$0 = HEAP32[$$0$in>>2]|0;
 $17 = ((($0)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($$0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($1)) + 6|0);
 $22 = HEAP16[$21>>1]|0;
 _lily_es_push_literal($18,$20,$22);
 return;
}
function _dispatch_word_as_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _lily_raise_syn($9,7740,$vararg_buffer);
  // unreachable;
 }
 $12 = $5 & 64;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _push_maybe_method($0,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
 $14 = $5 & 512;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($0)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  _lily_es_push_global_var($17,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
 $18 = ((($1)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 82|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($19|0)==($24|0);
 $26 = ((($0)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 if ($25) {
  _lily_es_push_local_var($27,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 } else {
  _lily_es_push_upvalue($27,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _constant_by_name($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_shorthash_for_name($0)|0);
 $2 = tempRet0;
 $3 = (16);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($1|0);
 $10 = ($8|0)==($2|0);
 $11 = $9 & $10;
 if ($11) {
  $12 = HEAP32[2]|0;
  $13 = (_strcmp($12,$0)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $15 = (16);
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>($2>>>0);
 $22 = ($17>>>0)>($1>>>0);
 $23 = ($20|0)==($2|0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 if ($25) {
  $$0 = -1;
  return ($$0|0);
 }
 $26 = (32);
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)==($1|0);
 $33 = ($31|0)==($2|0);
 $34 = $32 & $33;
 if ($34) {
  $35 = HEAP32[(24)>>2]|0;
  $36 = (_strcmp($35,$0)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $38 = (32);
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43>>>0)>($2>>>0);
 $45 = ($40>>>0)>($1>>>0);
 $46 = ($43|0)==($2|0);
 $47 = $46 & $45;
 $48 = $44 | $47;
 if ($48) {
  $$0 = -1;
  return ($$0|0);
 }
 $49 = (48);
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = ($51|0)==($1|0);
 $56 = ($54|0)==($2|0);
 $57 = $55 & $56;
 if ($57) {
  $58 = HEAP32[(40)>>2]|0;
  $59 = (_strcmp($58,$0)|0);
  $60 = ($59|0)==(0);
  if ($60) {
   $$0 = 2;
   return ($$0|0);
  }
 }
 $61 = (48);
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66>>>0)>($2>>>0);
 $68 = ($63>>>0)>($1>>>0);
 $69 = ($66|0)==($2|0);
 $70 = $69 & $68;
 $71 = $67 | $70;
 if ($71) {
  $$0 = -1;
  return ($$0|0);
 }
 $72 = (64);
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = ($74|0)==($1|0);
 $79 = ($77|0)==($2|0);
 $80 = $78 & $79;
 if ($80) {
  $81 = HEAP32[(56)>>2]|0;
  $82 = (_strcmp($81,$0)|0);
  $83 = ($82|0)==(0);
  if ($83) {
   $$0 = 3;
   return ($$0|0);
  }
 }
 $84 = (64);
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89>>>0)>($2>>>0);
 $91 = ($86>>>0)>($1>>>0);
 $92 = ($89|0)==($2|0);
 $93 = $92 & $91;
 $94 = $90 | $93;
 if ($94) {
  $$0 = -1;
  return ($$0|0);
 }
 $95 = (80);
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = ($97|0)==($1|0);
 $102 = ($100|0)==($2|0);
 $103 = $101 & $102;
 if ($103) {
  $104 = HEAP32[(72)>>2]|0;
  $105 = (_strcmp($104,$0)|0);
  $106 = ($105|0)==(0);
  if ($106) {
   $$0 = 4;
   return ($$0|0);
  }
 }
 $107 = (80);
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112>>>0)>($2>>>0);
 $114 = ($109>>>0)>($1>>>0);
 $115 = ($112|0)==($2|0);
 $116 = $115 & $114;
 $117 = $113 | $116;
 if ($117) {
  $$0 = -1;
  return ($$0|0);
 }
 $118 = (96);
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = ($120|0)==($1|0);
 $125 = ($123|0)==($2|0);
 $126 = $124 & $125;
 if ($126) {
  $127 = HEAP32[(88)>>2]|0;
  $128 = (_strcmp($127,$0)|0);
  $129 = ($128|0)==(0);
  if ($129) {
   $$0 = 5;
   return ($$0|0);
  }
 }
 $$0 = -1;
 return ($$0|0);
}
function _push_constant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($1|0) {
 case 4:  {
  $6 = ((($0)) + 56|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9&65535;
  _lily_es_push_integer($3,$10);
  return;
  break;
 }
 case 3:  {
  $11 = ((($5)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_lily_get_string_literal($5,$14)|0);
  _push_literal($0,$15);
  return;
  break;
 }
 case 5:  {
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_lily_get_string_literal($5,$21)|0);
  _push_literal($0,$22);
  return;
  break;
 }
 case 0:  {
  _lily_es_push_boolean($3,1);
  return;
  break;
 }
 case 2:  {
  _lily_es_push_boolean($3,0);
  return;
  break;
 }
 case 1:  {
  _lily_es_push_self($3);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _dispatch_word_as_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(3);
 if ($5) {
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_es_push_variant($7,$1);
  HEAP32[$2>>2] = 2;
  return;
 } else {
  _expression_class_access($0,$1,$2);
  return;
 }
}
function _dispatch_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(1);
 if (!($7)) {
  _dispatch_word_as_class($0,$1,$2);
  return;
 }
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 64;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  _lily_es_push_global_var($4,$1);
 } else {
  _lily_es_push_defined_func($4,$1);
 }
 HEAP32[$2>>2] = 2;
 return;
}
function _expression_class_access($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_lexer($4);
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(44);
 if (!($7)) {
  $8 = ((($1)) + 6|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & 4;
  $11 = ($10<<16>>16)==(0);
  if (!($11)) {
   $12 = ((($0)) + 76|0);
   $13 = HEAP32[$12>>2]|0;
   _lily_raise_syn($13,7630,$vararg_buffer);
   // unreachable;
  }
  $14 = (_lily_find_or_dl_member($0,$1,6924)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = ((($0)) + 76|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($1)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $19;
   _lily_raise_syn($17,7680,$vararg_buffer1);
   // unreachable;
  }
  $20 = ((($0)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_es_push_static_func($21,$14);
  HEAP32[$2>>2] = 10;
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 2;
 _lily_lexer($4);
 $22 = HEAP32[$5>>2]|0;
 $23 = ($22|0)==(35);
 if (!($23)) {
  $24 = ((($0)) + 76|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_tokname(35)|0);
  $27 = HEAP32[$5>>2]|0;
  $28 = (_tokname($27)|0);
  HEAP32[$vararg_buffer3>>2] = $26;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $28;
  _lily_raise_syn($25,6667,$vararg_buffer3);
  // unreachable;
 }
 $29 = ((($4)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_lily_find_or_dl_member($0,$1,$30)|0);
 $32 = ($31|0)==(0|0);
 do {
  if (!($32)) {
   $33 = ((($31)) + 4|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ($34<<16>>16)==(1);
   if ($35) {
    $36 = ((($31)) + 40|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==($1|0);
    if (!($38)) {
     break;
    }
    $$pr = HEAP16[$33>>1]|0;
    $39 = $$pr;
   } else {
    $39 = $34;
   }
   $40 = ($39<<16>>16)==(4);
   if (!($40)) {
    $41 = ((($0)) + 24|0);
    $42 = HEAP32[$41>>2]|0;
    _lily_es_push_static_func($42,$31);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $43 = ((($1)) + 6|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 & 4;
 $46 = ($45<<16>>16)==(0);
 if ($46) {
  $52 = ((($0)) + 76|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($1)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $55;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $56;
  _lily_raise_syn($53,7718,$vararg_buffer7);
  // unreachable;
 }
 $47 = HEAP32[$29>>2]|0;
 $48 = (_lily_find_scoped_variant($1,$47)|0);
 $49 = ($48|0)==(0|0);
 if ($49) {
  $52 = ((($0)) + 76|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($1)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $55;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $56;
  _lily_raise_syn($53,7718,$vararg_buffer7);
  // unreachable;
 }
 $50 = ((($0)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 _lily_es_push_variant($51,$48);
 STACKTOP = sp;return;
}
function _lily_find_or_dl_member($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_find_var($4,0,$2)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$1 = $5;
   return ($$1|0);
  }
 }
 $10 = (_lily_find_member($1,$2)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$1 = $10;
  return ($$1|0);
 }
 $12 = ((($1)) + 50|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(0);
 if ($14) {
  $$1 = 0;
  return ($$1|0);
 }
 $15 = (_try_method_dynaload($0,$1,$2)|0);
 $$1 = $15;
 return ($$1|0);
}
function _shorthash_for_name($0) {
 $0 = $0|0;
 var $$01621 = 0, $$01720 = 0, $$01819 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $20 = 0;$21 = 0;
  tempRet0 = ($20);
  return ($21|0);
 } else {
  $$01621 = 0;$$01720 = 0;$$01819 = $0;$10 = 0;$12 = 0;$4 = $1;
 }
 while(1) {
  $3 = $4 << 24 >> 24;
  $5 = ($3|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_bitshift64Shl(($3|0),($6|0),($$01621|0))|0);
  $8 = tempRet0;
  $9 = $7 | $10;
  $11 = $8 | $12;
  $13 = ((($$01819)) + 1|0);
  $14 = (($$01720) + 1)|0;
  $15 = (($$01621) + 8)|0;
  $16 = HEAP8[$13>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  $18 = ($14|0)!=(8);
  $19 = $18 & $17;
  if ($19) {
   $$01621 = $15;$$01720 = $14;$$01819 = $13;$10 = $9;$12 = $11;$4 = $16;
  } else {
   $20 = $11;$21 = $9;
   break;
  }
 }
 tempRet0 = ($20);
 return ($21|0);
}
function _push_maybe_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($0)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($6)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_lily_class_greater_eq($3,$9)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = ((($0)) + 24|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_es_push_method($13,$1);
    return;
   }
  }
 }
 $14 = ((($0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_es_push_defined_func($15,$1);
 return;
}
function _if_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$058 = 0, $$058$ph = 0, $$cmp = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,0);
 _expression($0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_eval_condition($6,$8);
 $9 = ((($3)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(6);
 if (!($11)) {
  $12 = ((($0)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_tokname(6)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise_syn($13,6667,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(29);
 $19 = $18&1;
 if ($18) {
  _lily_lexer($3);
  $$058$ph = 0;
  label = 5;
 } else {
  $$058 = 0;$20 = $17;
 }
 while(1) {
  if ((label|0) == 5) {
   label = 0;
   $$pr = HEAP32[$9>>2]|0;
   $$058 = $$058$ph;$20 = $$pr;
  }
  L10: do {
   switch ($20|0) {
   case 35:  {
    $21 = ((($3)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_keyword_by_name($22)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     _expression($0);
     $25 = HEAP32[$4>>2]|0;
     $26 = HEAP32[$7>>2]|0;
     _lily_emit_eval_expr($25,$26);
     break L10;
    }
    $27 = $23 & -2;
    $$cmp = ($27|0)==(6);
    if (!($$cmp)) {
     $28 = (976 + ($23<<2)|0);
     _lily_lexer($3);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_vii[$29 & 63]($0,$19);
    }
    break;
   }
   case 3:  {
    break;
   }
   default: {
    _expression($0);
    $30 = HEAP32[$4>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    _lily_emit_eval_expr($30,$31);
   }
   }
  } while(0);
  $32 = HEAP32[$9>>2]|0;
  $33 = ($32|0)==(35);
  $34 = ($$058|0)==(0);
  $or$cond3 = $34 & $33;
  if (!($or$cond3)) {
   $41 = ($32|0)==(3);
   $42 = $18 ^ 1;
   $or$cond7 = $41 | $42;
   if ($or$cond7) {
    break;
   } else {
    $$058$ph = $$058;
    label = 5;
    continue;
   }
  }
  $35 = ((($3)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_keyword_by_name($36)|0);
  $38 = $37 | 1;
  $39 = ($38|0)==(7);
  if (!($39)) {
   if ($18) {
    $$058$ph = $$058;
    label = 5;
    continue;
   } else {
    label = 21;
    break;
   }
  }
  $40 = ($37|0)==(7);
  _lily_lexer($3);
  if ($40) {
   _do_elif($0);
   $$058$ph = $$058;
   label = 5;
   continue;
  } else {
   _do_else($0);
   $$058$ph = 1;
   label = 5;
   continue;
  }
 }
 if ((label|0) == 21) {
  $43 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($43);
  STACKTOP = sp;return;
 }
 if (!($18)) {
  $43 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($43);
  STACKTOP = sp;return;
 }
 _lily_lexer($3);
 $43 = HEAP32[$4>>2]|0;
 _lily_emit_leave_block($43);
 STACKTOP = sp;return;
}
function _do_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,4);
 $6 = ((($3)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(6);
 if (!($8)) {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_tokname(6)|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = (_tokname($12)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  _lily_raise_syn($10,6667,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(29);
 if ($15) {
  _parse_multiline_block_body($0,$1);
 } else {
  _statement($0,0);
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16|0)==(35);
 if (!($17)) {
  $18 = ((($0)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(35)|0);
  $21 = HEAP32[$6>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer2>>2] = $20;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $22;
  _lily_raise_syn($19,6667,$vararg_buffer2);
  // unreachable;
 }
 $23 = ((($3)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_strcmp($24,6526)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  _lily_lexer($3);
  $29 = ((($0)) + 64|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$4>>2]|0;
  $32 = ((($31)) + 76|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  _lily_hide_block_vars($30,$34);
  _expression($0);
  $35 = HEAP32[$4>>2]|0;
  $36 = ((($0)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  _lily_emit_eval_condition($35,$37);
  $38 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($38);
  STACKTOP = sp;return;
 } else {
  $27 = ((($0)) + 76|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $24;
  _lily_raise_syn($28,9412,$vararg_buffer6);
  // unreachable;
 }
}
function _var_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_var($0,0);
 return;
}
function _for_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$059 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(35);
 if (!($6)) {
  $7 = ((($0)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(35)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6667,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($0)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_emit_enter_block($13,5);
 $14 = ((($0)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_lily_find_var($15,0,$17)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[$14>>2]|0;
  $21 = ((($20)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$12>>2]|0;
  $24 = ((($22)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$16>>2]|0;
  $27 = (_lily_emit_new_local_var($23,$25,$26)|0);
  $$059 = $27;
 } else {
  $28 = ((($18)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = ($33<<16>>16)==(1);
  if ($34) {
   $$059 = $18;
  } else {
   $35 = ((($0)) + 76|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $29;
   _lily_raise_syn($36,9226,$vararg_buffer2);
   // unreachable;
  }
 }
 _lily_lexer($3);
 $37 = HEAP32[$4>>2]|0;
 $38 = ($37|0)==(35);
 if (!($38)) {
  $39 = ((($0)) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_tokname(35)|0);
  $42 = HEAP32[$4>>2]|0;
  $43 = (_tokname($42)|0);
  HEAP32[$vararg_buffer5>>2] = $41;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $43;
  _lily_raise_syn($40,6667,$vararg_buffer5);
  // unreachable;
 }
 $44 = HEAP32[$16>>2]|0;
 $45 = (_strcmp($44,9272)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = ((($0)) + 76|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $44;
  _lily_raise_syn($48,9275,$vararg_buffer9);
  // unreachable;
 }
 _lily_lexer($3);
 $49 = (_parse_for_range_value($0,9300)|0);
 $50 = HEAP32[$4>>2]|0;
 $51 = ($50|0)==(50);
 if (!($51)) {
  $52 = ((($0)) + 76|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_tokname(50)|0);
  $55 = HEAP32[$4>>2]|0;
  $56 = (_tokname($55)|0);
  HEAP32[$vararg_buffer12>>2] = $54;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $56;
  _lily_raise_syn($53,6667,$vararg_buffer12);
  // unreachable;
 }
 _lily_lexer($3);
 $57 = (_parse_for_range_value($0,9312)|0);
 $58 = HEAP32[$4>>2]|0;
 $59 = ($58|0)==(35);
 do {
  if ($59) {
   $60 = HEAP32[$16>>2]|0;
   $61 = (_strcmp($60,9322)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    _lily_lexer($3);
    $65 = (_parse_for_range_value($0,9350)|0);
    $$0 = $65;
    break;
   } else {
    $63 = ((($0)) + 76|0);
    $64 = HEAP32[$63>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $60;
    _lily_raise_syn($64,9325,$vararg_buffer16);
    // unreachable;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 $66 = HEAP32[$12>>2]|0;
 $67 = HEAP32[$2>>2]|0;
 $68 = ((($67)) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 _lily_emit_finalize_for_in($66,$$059,$49,$57,$$0,$69);
 $70 = HEAP32[$4>>2]|0;
 $71 = ($70|0)==(6);
 if (!($71)) {
  $72 = ((($0)) + 76|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_tokname(6)|0);
  $75 = HEAP32[$4>>2]|0;
  $76 = (_tokname($75)|0);
  HEAP32[$vararg_buffer19>>2] = $74;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = $76;
  _lily_raise_syn($73,6667,$vararg_buffer19);
  // unreachable;
 }
 _lily_lexer($3);
 $77 = HEAP32[$4>>2]|0;
 $78 = ($77|0)==(29);
 if ($78) {
  _parse_multiline_block_body($0,$1);
  $79 = HEAP32[$12>>2]|0;
  _lily_emit_leave_block($79);
  STACKTOP = sp;return;
 } else {
  _statement($0,0);
  $79 = HEAP32[$12>>2]|0;
  _lily_emit_leave_block($79);
  STACKTOP = sp;return;
 }
}
function _try_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,6);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_emit_try($6,$9);
 $10 = ((($3)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(6);
 if (!($12)) {
  $13 = ((($0)) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_tokname(6)|0);
  $16 = HEAP32[$10>>2]|0;
  $17 = (_tokname($16)|0);
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _lily_raise_syn($14,6667,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $18 = HEAP32[$10>>2]|0;
 $19 = ($18|0)==(29);
 $20 = $19&1;
 $21 = ($1|0)==(0);
 $or$cond = $21 & $19;
 if ($or$cond) {
  $22 = ((($0)) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_raise_syn($23,7109,$vararg_buffer2);
  // unreachable;
 }
 if ($19) {
  _lily_lexer($3);
 }
 $24 = ((($3)) + 12|0);
 $25 = $19 ^ 1;
 $26 = ((($3)) + 12|0);
 $27 = ((($0)) + 24|0);
 L10: while(1) {
  $28 = HEAP32[$10>>2]|0;
  L12: do {
   switch ($28|0) {
   case 3:  {
    break L10;
    break;
   }
   case 35:  {
    $29 = HEAP32[$26>>2]|0;
    $30 = (_keyword_by_name($29)|0);
    switch ($30|0) {
    case 16:  {
     break L12;
     break;
    }
    case -1:  {
     _expression($0);
     $31 = HEAP32[$4>>2]|0;
     $32 = HEAP32[$27>>2]|0;
     _lily_emit_eval_expr($31,$32);
     break L12;
     break;
    }
    default: {
     _lily_lexer($3);
     $33 = (976 + ($30<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_vii[$34 & 63]($0,$20);
     break L12;
    }
    }
    break;
   }
   default: {
    _statement($0,0);
   }
   }
  } while(0);
  $$pr = HEAP32[$10>>2]|0;
  $35 = ($$pr|0)==(35);
  if (!($35)) {
   $39 = ($$pr|0)==(3);
   $or$cond3 = $39 | $25;
   if ($or$cond3) {
    break;
   } else {
    continue;
   }
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (_keyword_by_name($36)|0);
  $38 = ($37|0)==(16);
  if ($38) {
   _lily_lexer($3);
   _process_except($0);
   continue;
  } else {
   if ($19) {
    continue;
   } else {
    label = 20;
    break;
   }
  }
 }
 if ((label|0) == 20) {
  $40 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($40);
  STACKTOP = sp;return;
 }
 if (!($19)) {
  $40 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($40);
  STACKTOP = sp;return;
 }
 _lily_lexer($3);
 $40 = HEAP32[$4>>2]|0;
 _lily_emit_leave_block($40);
 STACKTOP = sp;return;
}
function _case_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,9086,$vararg_buffer);
 // unreachable;
}
function _else_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,9065,$vararg_buffer);
 // unreachable;
}
function _elif_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,9044,$vararg_buffer);
 // unreachable;
}
function _enum_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_parse_enum($0,0)|0);
 return;
}
function _while_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,3);
 _expression($0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_eval_condition($6,$8);
 $9 = ((($3)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(6);
 if (!($11)) {
  $12 = ((($0)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_tokname(6)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise_syn($13,6667,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(29);
 if ($18) {
  _parse_multiline_block_body($0,$1);
  $19 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($19);
  STACKTOP = sp;return;
 } else {
  _statement($0,0);
  $19 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($19);
  STACKTOP = sp;return;
 }
}
function _raise_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 18|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(13);
 if ($8) {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,9011,$vararg_buffer);
  // unreachable;
 }
 _expression($0);
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_emit_raise($11,$13);
 $14 = ($1|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 _ensure_no_code_after_exit($0,6532);
 STACKTOP = sp;return;
}
function _match_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise_syn($4,8825,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_enter_block($8,9);
 _expression($0);
 $9 = HEAP32[$7>>2]|0;
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_emit_eval_match_expr($9,$11);
 $12 = HEAP32[$10>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($6)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(6);
 if (!($17)) {
  $18 = ((($0)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(6)|0);
  $21 = HEAP32[$15>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  _lily_raise_syn($19,6667,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($6);
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)==(29);
 if (!($24)) {
  $25 = ((($0)) + 76|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_tokname(29)|0);
  $28 = HEAP32[$15>>2]|0;
  $29 = (_tokname($28)|0);
  HEAP32[$vararg_buffer4>>2] = $27;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $29;
  _lily_raise_syn($26,6667,$vararg_buffer4);
  // unreachable;
 }
 _lily_lexer($6);
 $30 = ((($6)) + 12|0);
 L10: while(1) {
  $31 = HEAP32[$15>>2]|0;
  switch ($31|0) {
  case 3:  {
   break L10;
   break;
  }
  case 35:  {
   break;
  }
  default: {
   _statement($0,0);
   continue L10;
  }
  }
  $32 = HEAP32[$30>>2]|0;
  $33 = (_keyword_by_name($32)|0);
  switch ($33|0) {
  case 5:  {
   _lily_lexer($6);
   _process_match_case($0,$14);
   continue L10;
   break;
  }
  case 6:  {
   _lily_lexer($6);
   _process_match_else($0);
   continue L10;
   break;
  }
  case -1:  {
   _expression($0);
   $36 = HEAP32[$7>>2]|0;
   $37 = HEAP32[$10>>2]|0;
   _lily_emit_eval_expr($36,$37);
   continue L10;
   break;
  }
  default: {
   _lily_lexer($6);
   $34 = (976 + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   FUNCTION_TABLE_vii[$35 & 63]($0,$1);
   continue L10;
  }
  }
 }
 _ensure_proper_match_block($0,$14);
 _lily_lexer($6);
 $38 = HEAP32[$7>>2]|0;
 _lily_emit_leave_block($38);
 STACKTOP = sp;return;
}
function _break_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_break($3);
 $4 = ($1|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  STACKTOP = sp;return;
 } else {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise_syn($11,8779,$vararg_buffer);
  // unreachable;
 }
}
function _class_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 18|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(14);
 if (!($8)) {
  $9 = ((($5)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($0)) + 76|0);
   $13 = HEAP32[$12>>2]|0;
   _lily_raise_syn($13,8454,$vararg_buffer);
   // unreachable;
  }
 }
 $14 = ((($0)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(35);
 if ($18) {
  $24 = ((($15)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  _ensure_valid_class($0,$25);
  $26 = ((($0)) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$24>>2]|0;
  $29 = (_lily_new_class($27,$28)|0);
  _parse_class_body($0,$29);
  STACKTOP = sp;return;
 } else {
  $19 = ((($0)) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_tokname(35)|0);
  $22 = HEAP32[$16>>2]|0;
  $23 = (_tokname($22)|0);
  HEAP32[$vararg_buffer1>>2] = $21;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $23;
  _lily_raise_syn($20,6667,$vararg_buffer1);
  // unreachable;
 }
}
function _return_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 18|0);
 $7 = HEAP16[$6>>1]|0;
 switch ($7<<16>>16) {
 case 12:  {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise_syn($9,8227,$vararg_buffer);
  // unreachable;
  break;
 }
 case 13:  {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise_syn($11,8272,$vararg_buffer1);
  // unreachable;
  break;
 }
 case 14:  {
  $15 = ((($0)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  _lily_raise_syn($16,8306,$vararg_buffer3);
  // unreachable;
  break;
 }
 default: {
  $12 = ((($5)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $15 = ((($0)) + 76|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_raise_syn($16,8306,$vararg_buffer3);
   // unreachable;
  }
  $17 = (_expecting_return_value($0)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   _expression($0);
  }
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($0)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_emit_eval_return($19,$21);
  $22 = ($1|0)==(0);
  if ($22) {
   STACKTOP = sp;return;
  }
  _ensure_no_code_after_exit($0,6563);
  STACKTOP = sp;return;
 }
 }
}
function _except_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,8203,$vararg_buffer);
 // unreachable;
}
function _import_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,8162,$vararg_buffer);
 // unreachable;
}
function _private_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,6584,8);
 return;
}
function _protected_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,6592,16);
 return;
}
function _continue_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_continue($3);
 $4 = ($1|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  STACKTOP = sp;return;
 } else {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise_syn($11,7781,$vararg_buffer);
  // unreachable;
 }
}
function _parse_modifier($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 18|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(12);
 if (!($9)) {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($11,7830,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($0)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(35);
 if (!($16)) {
  $17 = ((($0)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_tokname(35)|0);
  $20 = HEAP32[$14>>2]|0;
  $21 = (_tokname($20)|0);
  HEAP32[$vararg_buffer1>>2] = $19;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $21;
  _lily_raise_syn($18,6667,$vararg_buffer1);
  // unreachable;
 }
 $22 = HEAP32[$12>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_keyword_by_name($24)|0);
 switch ($25|0) {
 case 2:  {
  _lily_lexer($13);
  _parse_var($0,$2);
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  _lily_lexer($13);
  _parse_define($0,$2);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $26 = ((($0)) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($13)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $29;
  _lily_raise_syn($27,7856,$vararg_buffer5);
  // unreachable;
 }
 }
}
function _parse_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$043 = 0, $$44 = 0, $$pr45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1 | 1;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(12);
 $$ = $11 ? 36 : 35;
 $$44 = $11 ? 35 : 36;
 $12 = ((($0)) + 24|0);
 $13 = ((($3)) + 48|0);
 $14 = ((($0)) + 76|0);
 $15 = ((($0)) + 76|0);
 while(1) {
  $16 = HEAP32[$12>>2]|0;
  _rewind_expr_state($16);
  $17 = HEAP32[$13>>2]|0;
  $18 = ($17|0)==($$44|0);
  if ($18) {
   _bad_decl_token($0);
  }
  $19 = HEAP32[$13>>2]|0;
  $20 = ($19|0)==($$|0);
  if (!($20)) {
   label = 5;
   break;
  }
  $25 = ($19|0)==(35);
  do {
   if ($25) {
    $26 = (_get_named_var($0,0)|0);
    $27 = ((($26)) + 6|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = $29 | 1;
    $31 = $30&65535;
    HEAP16[$27>>1] = $31;
    $32 = $29 & 512;
    $33 = ($32|0)==(0);
    $34 = HEAP32[$12>>2]|0;
    if ($33) {
     _lily_es_push_local_var($34,$26);
     $$043 = $26;
     break;
    } else {
     _lily_es_push_global_var($34,$26);
     $$043 = $26;
     break;
    }
   } else {
    $35 = (_get_named_property($0,$4)|0);
    $36 = HEAP32[$12>>2]|0;
    _lily_es_push_property($36,$35);
    $$043 = $35;
   }
  } while(0);
  $37 = HEAP32[$13>>2]|0;
  $38 = ($37|0)==(6);
  if ($38) {
   _lily_lexer($3);
   $39 = (_get_type_raw($0,0)|0);
   $40 = ((($$043)) + 12|0);
   HEAP32[$40>>2] = $39;
   $$pr45 = HEAP32[$13>>2]|0;
   $41 = $$pr45;
  } else {
   $41 = $37;
  }
  $42 = ($41|0)==(27);
  if (!($42)) {
   label = 14;
   break;
  }
  $44 = HEAP32[$12>>2]|0;
  _lily_es_push_binary_op($44,21);
  _lily_lexer($3);
  _expression_raw($0,1);
  $45 = HEAP32[$5>>2]|0;
  $46 = HEAP32[$12>>2]|0;
  _lily_emit_eval_expr($45,$46);
  $47 = HEAP32[$13>>2]|0;
  $48 = ($47|0)==(2);
  if (!($48)) {
   label = 17;
   break;
  }
  _lily_lexer($3);
 }
 if ((label|0) == 5) {
  $21 = HEAP32[$15>>2]|0;
  $22 = (_tokname($$)|0);
  $23 = HEAP32[$13>>2]|0;
  $24 = (_tokname($23)|0);
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  _lily_raise_syn($21,6667,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $43 = HEAP32[$14>>2]|0;
  _lily_raise_syn($43,7905,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _bad_decl_token($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(35);
 $$ = $5 ? 8072 : 8108;
 $6 = ((($0)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_raise_syn($7,$$,$vararg_buffer);
 // unreachable;
}
function _get_named_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_find_var($5,0,$7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $13 = ((($0)) + 60|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$6>>2]|0;
  $16 = (_lily_emit_new_scoped_var($14,$1,$15)|0);
  _lily_lexer($3);
  STACKTOP = sp;return ($16|0);
 } else {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _lily_raise_syn($11,8042,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _get_named_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_find_member($9,$5)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $19 = ((($0)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_lily_add_class_property($20,$9,0,$5,$1)|0);
  $22 = HEAP32[$2>>2]|0;
  _lily_lexer($22);
  STACKTOP = sp;return ($21|0);
 }
 $12 = ((($10)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(1);
 $15 = ((($0)) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($9)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 if ($14) {
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  _lily_raise_syn($16,7952,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer2>>2] = $5;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $18;
  _lily_raise_syn($16,8002,$vararg_buffer2);
  // unreachable;
 }
 return (0)|0;
}
function _expecting_return_value($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[431]|0;
 $6 = ($4|0)!=($5|0);
 $7 = $6&1;
 return ($7|0);
}
function _ensure_no_code_after_exit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 35:  {
  label = 2;
  break;
 }
 case 3: case 53: case 54:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 L3: do {
  if ((label|0) == 2) {
   $6 = ((($3)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_keyword_by_name($7)|0);
   switch ($8|0) {
   case 5: case 6: case 7: case 16:  {
    break;
   }
   default: {
    break L3;
   }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $9 = (_strcmp($1,6563)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_expecting_return_value($0)|0);
  $12 = ($11|0)==(1);
  if (!($12)) {
   $15 = ((($0)) + 76|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_raise_syn($16,8385,$vararg_buffer1);
   // unreachable;
  }
 }
 $13 = ((($0)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 _lily_raise_syn($14,8343,$vararg_buffer);
 // unreachable;
}
function _parse_class_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_gp_save_and_hide($8,$2);
 _parse_class_header($0,$1);
 $9 = ((($4)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(19);
 if ($11) {
  _parse_inheritance($0,$1);
  $$pr = HEAP32[$9>>2]|0;
  $12 = $$pr;
 } else {
  $12 = $10;
 }
 $13 = ($12|0)==(29);
 if ($13) {
  _parse_multiline_block_body($0,1);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _determine_class_gc_flag($21);
  HEAP32[$5>>2] = $6;
  $22 = ((($0)) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_emit_leave_block($23);
  $24 = HEAP32[$7>>2]|0;
  $25 = HEAP32[$2>>2]|0;
  _lily_gp_restore_and_unhide($24,$25);
  STACKTOP = sp;return;
 } else {
  $14 = ((($0)) + 76|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_tokname(29)|0);
  $17 = HEAP32[$9>>2]|0;
  $18 = (_tokname($17)|0);
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  _lily_raise_syn($15,6667,$vararg_buffer);
  // unreachable;
 }
}
function _parse_class_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$053 = 0, $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 20|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($4)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_lily_emit_new_define_var($6,$8,$1,6924,$10)|0);
 HEAP32[$9>>2] = 0;
 _lily_lexer($4);
 _collect_generics($0);
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_gp_num_in_scope($13)|0);
 $15 = $14&65535;
 $16 = ((($1)) + 46|0);
 HEAP16[$16>>1] = $15;
 $17 = HEAP32[$5>>2]|0;
 _lily_emit_enter_block($17,12);
 $18 = (_build_self_type($0,$1)|0);
 $19 = ((($0)) + 44|0);
 HEAP32[$19>>2] = $18;
 HEAP32[$2>>2] = 0;
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$19>>2]|0;
 _lily_tm_add($25,$26);
 $27 = ((($4)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$1 = 1;
  $56 = HEAP32[$24>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = ((($0)) + 64|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 72|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_lily_tm_make($56,$57,$61,$$1)|0);
  $63 = ((($11)) + 12|0);
  HEAP32[$63>>2] = $62;
  $64 = HEAP32[$5>>2]|0;
  $65 = HEAP32[$19>>2]|0;
  $66 = HEAP32[$20>>2]|0;
  _lily_emit_setup_call($64,$65,$11,$66,$23);
  STACKTOP = sp;return;
 }
 _lily_lexer($4);
 $30 = HEAP32[$27>>2]|0;
 $31 = ($30|0)==(1);
 if ($31) {
  $32 = ((($0)) + 76|0);
  $33 = HEAP32[$32>>2]|0;
  _lily_raise_syn($33,8593,$vararg_buffer);
  // unreachable;
 } else {
  $$053 = 1;$34 = $30;
 }
 L6: while(1) {
  $35 = ($34|0)==(35);
  if (!($35)) {
   label = 5;
   break;
  }
  $41 = ((($4)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)==(118);
  if ($44) {
   $45 = (_strcmp($42,6494)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $49 = HEAP32[$24>>2]|0;
    $50 = (_get_prop_arg($0,$2)|0);
    _lily_tm_add($49,$50);
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $47 = HEAP32[$24>>2]|0;
   $48 = (_get_named_arg($0,$2)|0);
   _lily_tm_add($47,$48);
  }
  $51 = (($$053) + 1)|0;
  $52 = HEAP32[$27>>2]|0;
  switch ($52|0) {
  case 1:  {
   label = 12;
   break L6;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 13;
   break L6;
  }
  }
  _lily_lexer($4);
  $$pr = HEAP32[$27>>2]|0;
  $$053 = $51;$34 = $$pr;
 }
 if ((label|0) == 5) {
  $36 = ((($0)) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_tokname(35)|0);
  $39 = HEAP32[$27>>2]|0;
  $40 = (_tokname($39)|0);
  HEAP32[$vararg_buffer1>>2] = $38;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $40;
  _lily_raise_syn($37,6667,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 12) {
  _lily_lexer($4);
  $$1 = $51;
  $56 = HEAP32[$24>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = ((($0)) + 64|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 72|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_lily_tm_make($56,$57,$61,$$1)|0);
  $63 = ((($11)) + 12|0);
  HEAP32[$63>>2] = $62;
  $64 = HEAP32[$5>>2]|0;
  $65 = HEAP32[$19>>2]|0;
  $66 = HEAP32[$20>>2]|0;
  _lily_emit_setup_call($64,$65,$11,$66,$23);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  $53 = ((($0)) + 76|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_tokname($52)|0);
  HEAP32[$vararg_buffer4>>2] = $55;
  _lily_raise_syn($54,6629,$vararg_buffer4);
  // unreachable;
 }
}
function _parse_inheritance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(35);
 if (!($6)) {
  $7 = ((($0)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(35)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6667,$vararg_buffer);
  // unreachable;
 }
 $12 = (_resolve_class_name($0)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($0)) + 76|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $17;
  _lily_raise_syn($15,6897,$vararg_buffer2);
  // unreachable;
 }
 $18 = ($12|0)==($1|0);
 if ($18) {
  $19 = ((($0)) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_raise_syn($20,8482,$vararg_buffer5);
  // unreachable;
 }
 $21 = ((($12)) + 4|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(3);
 if ($23) {
  $28 = ((($0)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($3)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $31;
  _lily_raise_syn($29,8518,$vararg_buffer7);
  // unreachable;
 }
 $24 = ((($12)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 & 132;
 $27 = ($26<<16>>16)==(0);
 if (!($27)) {
  $28 = ((($0)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($3)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $31;
  _lily_raise_syn($29,8518,$vararg_buffer7);
  // unreachable;
 }
 $32 = ((($1)) + 32|0);
 HEAP32[$32>>2] = $12;
 $33 = ((($12)) + 48|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = ((($1)) + 48|0);
 HEAP16[$35>>1] = $34;
 $36 = ((($12)) + 44|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($38) + 1)|0;
 $40 = $39&65535;
 $41 = ((($1)) + 44|0);
 HEAP16[$41>>1] = $40;
 $42 = (_lily_find_method($12,6924)|0);
 $43 = ((($0)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 _rewind_expr_state($44);
 _lily_es_enter_tree($44,0);
 _lily_es_push_inherited_new($44,$42);
 _lily_es_collect_arg($44);
 _lily_lexer($3);
 $45 = HEAP32[$4>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  $51 = HEAP32[$43>>2]|0;
  _lily_es_leave_tree($51);
  $52 = ((($0)) + 60|0);
  $53 = HEAP32[$52>>2]|0;
  _lily_emit_eval_expr($53,$44);
  STACKTOP = sp;return;
 }
 _lily_lexer($3);
 $47 = HEAP32[$4>>2]|0;
 $48 = ($47|0)==(1);
 if ($48) {
  $49 = ((($0)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  _lily_raise_syn($50,8549,$vararg_buffer10);
  // unreachable;
 }
 _expression_raw($0,4);
 _lily_lexer($3);
 $52 = ((($0)) + 60|0);
 $53 = HEAP32[$52>>2]|0;
 _lily_emit_eval_expr($53,$44);
 STACKTOP = sp;return;
}
function _determine_class_gc_flag($0) {
 $0 = $0|0;
 var $$04115 = 0, $$042 = 0, $$04210 = 0, $$0428 = 0, $$043 = 0, $$06 = 0, $$1 = 0, $$13 = 0, $$14 = 0, $$144$ = 0, $$144$lcssa = 0, $$1449 = 0, $$25 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $$043 = 0;
  } else {
   $4 = ((($2)) + 6|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 & 96;
   $8 = ($7|0)==(32);
   if (!($8)) {
    $$04115 = $2;
    while(1) {
     $14 = ((($$04115)) + 6|0);
     $15 = HEAP16[$14>>1]|0;
     $16 = $15&65535;
     $17 = $16 | 256;
     $18 = $17&65535;
     HEAP16[$14>>1] = $18;
     $19 = HEAP32[$$04115>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$043 = $7;
      break L1;
     } else {
      $$04115 = $19;
     }
    }
   }
   $9 = ((($0)) + 6|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = $11 | 32;
   $13 = $12&65535;
   HEAP16[$9>>1] = $13;
   return;
  }
 } while(0);
 $21 = ((($0)) + 36|0);
 $$0428 = HEAP32[$21>>2]|0;
 $22 = ($$0428|0)==(0|0);
 if ($22) {
  $$144$lcssa = $$043;
 } else {
  $$04210 = $$0428;$$1449 = $$043;
  while(1) {
   $23 = ((($$04210)) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24<<16>>16)==(1);
   if ($25) {
    $$4 = $$1449;
   } else {
    $26 = ((($$04210)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_get_gc_flags_for($0,$27)|0);
    $29 = $28 | $$1449;
    $30 = ((($27)) + 10|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = ($31<<16>>16)==(0);
    if ($32) {
     $$4 = $29;
    } else {
     $33 = HEAP16[$30>>1]|0;
     $34 = ($33<<16>>16)==(0);
     if ($34) {
      $$4 = $29;
     } else {
      $35 = ((($27)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP16[$30>>1]|0;
      $38 = $37&65535;
      $$06 = 0;$$25 = $29;
      while(1) {
       $39 = (($36) + ($$06<<2)|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (_get_gc_flags_for($0,$40)|0);
       $42 = $41 | $$25;
       $43 = (($$06) + 1)|0;
       $44 = ($43|0)<($38|0);
       if ($44) {
        $$06 = $43;$$25 = $42;
       } else {
        $$4 = $42;
        break;
       }
      }
     }
    }
   }
   $$042 = HEAP32[$$04210>>2]|0;
   $45 = ($$042|0)==(0|0);
   if ($45) {
    $$144$lcssa = $$4;
    break;
   } else {
    $$04210 = $$042;$$1449 = $$4;
   }
  }
 }
 $46 = $$144$lcssa & 32;
 $47 = ($46|0)==(0);
 $48 = $$144$lcssa & 65471;
 $$144$ = $47 ? $$144$lcssa : $48;
 $$13 = HEAP32[$1>>2]|0;
 $49 = ($$13|0)==(0|0);
 if (!($49)) {
  $$14 = $$13;
  while(1) {
   $50 = ((($$14)) + 6|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 & 65279;
   $54 = $53&65535;
   HEAP16[$50>>1] = $54;
   $$1 = HEAP32[$$14>>2]|0;
   $55 = ($$1|0)==(0|0);
   if ($55) {
    break;
   } else {
    $$14 = $$1;
   }
  }
 }
 $56 = ((($0)) + 6|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = $58 & 65279;
 $60 = $59 | $$144$;
 $61 = $60&65535;
 HEAP16[$56>>1] = $61;
 return;
}
function _get_gc_flags_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$01820 = 0, $$019 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$019 = 0;
  return ($$019|0);
 }
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(-5);
 if ($7) {
  $8 = ((($0)) + 46|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  $$ = $10 ? 32 : 64;
  $$019 = $$;
  return ($$019|0);
 }
 $11 = ((($4)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 & 32;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$019 = 32;
  return ($$019|0);
 }
 $16 = $13 & 64;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$019 = 64;
  return ($$019|0);
 }
 $18 = $13 & 256;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$019 = 32;
  return ($$019|0);
 }
 $20 = ((($1)) + 10|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$019 = 0;
  return ($$019|0);
 }
 $23 = HEAP16[$20>>1]|0;
 $24 = ($23<<16>>16)==(0);
 if ($24) {
  $$019 = 0;
  return ($$019|0);
 }
 $25 = ((($1)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP16[$20>>1]|0;
 $28 = $27&65535;
 $$01820 = 0;$$021 = 0;
 while(1) {
  $29 = (($26) + ($$021<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_get_gc_flags_for($0,$30)|0);
  $32 = $31 | $$01820;
  $33 = (($$021) + 1)|0;
  $34 = ($33|0)<($28|0);
  if ($34) {
   $$01820 = $32;$$021 = $33;
  } else {
   $$019 = $32;
   break;
  }
 }
 return ($$019|0);
}
function _get_named_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_find_var($5,0,$7)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _lily_raise_syn($11,8042,$vararg_buffer);
  // unreachable;
 }
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$6>>2]|0;
 $16 = (_lily_emit_new_scoped_var($14,0,$15)|0);
 _lily_lexer($3);
 $17 = ((($3)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(6);
 if (!($19)) {
  $20 = ((($0)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_tokname(6)|0);
  $23 = HEAP32[$17>>2]|0;
  $24 = (_tokname($23)|0);
  HEAP32[$vararg_buffer1>>2] = $22;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $24;
  _lily_raise_syn($21,6667,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($3);
 $25 = (_get_nameless_arg($0,$1)|0);
 $26 = HEAP32[$1>>2]|0;
 $27 = $26 & 2048;
 $28 = ($27|0)==(0);
 if ($28) {
  $33 = ((($16)) + 12|0);
  HEAP32[$33>>2] = $25;
  STACKTOP = sp;return ($25|0);
 } else {
  $29 = ((($25)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($16)) + 12|0);
  HEAP32[$32>>2] = $31;
  _collect_optarg_for($0,$16);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _get_prop_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_emit_new_scoped_var($5,0,19155)|0);
 _lily_lexer($3);
 $7 = ((($3)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(36);
 if (!($9)) {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_tokname(36)|0);
  $13 = HEAP32[$7>>2]|0;
  $14 = (_tokname($13)|0);
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise_syn($11,6667,$vararg_buffer);
  // unreachable;
 }
 $15 = (_get_named_property($0,0)|0);
 $16 = HEAP32[$7>>2]|0;
 $17 = ($16|0)==(6);
 if (!($17)) {
  $18 = ((($0)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(6)|0);
  $21 = HEAP32[$7>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer2>>2] = $20;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $22;
  _lily_raise_syn($19,6667,$vararg_buffer2);
  // unreachable;
 }
 _lily_lexer($3);
 $23 = (_get_nameless_arg($0,$1)|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = $24 & 2048;
 $26 = ($25|0)==(0);
 if ($26) {
  $31 = ((($15)) + 12|0);
  HEAP32[$31>>2] = $23;
  STACKTOP = sp;return ($23|0);
 } else {
  $27 = ((($23)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($15)) + 12|0);
  HEAP32[$30>>2] = $29;
  _collect_optarg_for($0,$6);
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _collect_optarg_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $trunc76 = 0, $trunc76$clear = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if ($14) {
  $$0 = 41;
 } else {
  $15 = ((($5)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($11|0)==($16|0);
  if ($17) {
   $$0 = 42;
  } else {
   $18 = ((($5)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($11|0)==($19|0);
   if ($20) {
    $$0 = 37;
   } else {
    $21 = ((($5)) + 56|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($11|0)==($22|0);
    if ($23) {
     $$0 = 40;
    } else {
     $24 = ((($5)) + 60|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($11|0)==($25|0);
     $$ = $26 ? 38 : 35;
     $$0 = $$;
    }
   }
  }
 }
 $27 = ((($3)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(27);
 if (!($29)) {
  $30 = ((($0)) + 76|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_tokname(27)|0);
  $33 = HEAP32[$27>>2]|0;
  $34 = (_tokname($33)|0);
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $34;
  _lily_raise_syn($31,6667,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $35 = HEAP32[$27>>2]|0;
 $36 = ($35|0)==($$0|0);
 if (!($36)) {
  $37 = ((($0)) + 76|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_tokname($$0)|0);
  $40 = HEAP32[$27>>2]|0;
  $41 = (_tokname($40)|0);
  HEAP32[$vararg_buffer2>>2] = $39;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $41;
  _lily_raise_syn($38,6667,$vararg_buffer2);
  // unreachable;
 }
 $42 = ((($1)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&65535;
 _lily_u16_write_1($7,$44);
 $45 = ((($5)) + 64|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($11|0)==($46|0);
 if ($47) {
  $48 = ((($3)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_constant_by_name($49)|0);
  switch ($50|0) {
  case 0: case 2:  {
   break;
  }
  default: {
   $51 = ((($0)) + 76|0);
   $52 = HEAP32[$51>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $49;
   _lily_raise_syn($52,8626,$vararg_buffer6);
   // unreachable;
  }
  }
  $53 = ($50|0)==(0);
  $54 = $53&1;
  _lily_u16_write_2($7,43,$54);
  _lily_lexer($3);
  STACKTOP = sp;return;
 }
 $trunc76 = $$0&255;
 $trunc76$clear = $trunc76 & 15;
 switch ($trunc76$clear<<24>>24) {
 case 3:  {
  $55 = ((($3)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_lily_find_scoped_variant($11,$56)|0);
  $58 = ($57|0)==(0|0);
  if ($58) {
   $59 = ((($0)) + 76|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($11)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$55>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $62;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $63;
   _lily_raise_syn($60,8675,$vararg_buffer9);
   // unreachable;
  }
  $64 = ((($57)) + 6|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65 & 16;
  $67 = ($66<<16>>16)==(0);
  if ($67) {
   $68 = ((($0)) + 76|0);
   $69 = HEAP32[$68>>2]|0;
   _lily_raise_syn($69,8716,$vararg_buffer13);
   // unreachable;
  }
  $70 = ((($57)) + 8|0);
  $71 = HEAP16[$70>>1]|0;
  _lily_u16_write_2($7,45,$71);
  _lily_lexer($3);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $72 = ((($3)) + 40|0);
  $73 = $72;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = $75&65535;
  $80 = $79 & 255;
  _lily_u16_write_2($7,44,$80);
  _lily_lexer($3);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $85 = ((($3)) + 40|0);
  $86 = $85;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (_i64Add(($88|0),($91|0),32768,0)|0);
  $93 = tempRet0;
  $94 = ($93>>>0)<(0);
  $95 = ($92>>>0)<(65536);
  $96 = ($93|0)==(0);
  $97 = $96 & $95;
  $98 = $94 | $97;
  if ($98) {
   $99 = $88&65535;
   _lily_u16_write_2($7,42,$99);
   _lily_lexer($3);
   STACKTOP = sp;return;
  } else {
   $100 = (_lily_get_integer_literal($5,$88,$91)|0);
   $101 = ((($100)) + 6|0);
   $102 = HEAP16[$101>>1]|0;
   _lily_u16_write_2($7,41,$102);
   _lily_lexer($3);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $81 = ((($3)) + 56|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 6|0);
  $84 = HEAP16[$83>>1]|0;
  _lily_u16_write_2($7,41,$84);
  _lily_lexer($3);
  STACKTOP = sp;return;
 }
 }
}
function _process_match_case($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0100$lcssa = 0, $$0100103 = 0, $$099 = 0, $$1102 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(35);
 if (!($10)) {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(35)|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise_syn($12,6667,$vararg_buffer);
  // unreachable;
 }
 $16 = ((($5)) + 48|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($17<<16>>16)==(0);
 L4: do {
  if ($18) {
   $$0 = 0;$$0100$lcssa = 0;
  } else {
   $19 = ((($7)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($5)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $$0100103 = 0;
   while(1) {
    $23 = (($22) + ($$0100103<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (_strcmp($20,$26)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     $$0 = $24;$$0100$lcssa = $$0100103;
     break L4;
    }
    $29 = (($$0100103) + 1)|0;
    $30 = HEAP16[$16>>1]|0;
    $31 = $30&65535;
    $32 = ($29|0)<($31|0);
    if ($32) {
     $$0100103 = $29;
    } else {
     $$0 = 0;$$0100$lcssa = $29;
     break;
    }
   }
  }
 } while(0);
 $33 = HEAP16[$16>>1]|0;
 $34 = $33&65535;
 $35 = ($$0100$lcssa|0)==($34|0);
 if ($35) {
  $36 = ((($0)) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($7)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($5)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $39;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $41;
  _lily_raise_syn($37,8942,$vararg_buffer2);
  // unreachable;
 }
 $42 = ((($0)) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_lily_emit_add_match_case($43,$$0100$lcssa)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = ((($0)) + 76|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($7)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $49;
  _lily_raise_syn($47,8973,$vararg_buffer6);
  // unreachable;
 }
 $50 = ((($$0)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 & 16;
 $53 = ($52<<16>>16)==(0);
 do {
  if ($53) {
   $54 = ((($0)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($$0)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$42>>2]|0;
   $61 = ((($60)) + 100|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($1)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64&65535;
   $66 = ((($59)) + 10|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = (($68) + 65535)|0;
   $70 = $69&65535;
   _lily_u16_write_2($55,$65,$70);
   _lily_lexer($7);
   $71 = HEAP32[$8>>2]|0;
   $72 = ($71|0)==(0);
   if (!($72)) {
    $73 = ((($0)) + 76|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_tokname(0)|0);
    $76 = HEAP32[$8>>2]|0;
    $77 = (_tokname($76)|0);
    HEAP32[$vararg_buffer9>>2] = $75;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $77;
    _lily_raise_syn($74,6667,$vararg_buffer9);
    // unreachable;
   }
   _lily_lexer($7);
   $78 = HEAP32[$8>>2]|0;
   $79 = ($78|0)==(35);
   if (!($79)) {
    $80 = ((($0)) + 76|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_tokname(35)|0);
    $83 = HEAP32[$8>>2]|0;
    $84 = (_tokname($83)|0);
    HEAP32[$vararg_buffer13>>2] = $82;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = $84;
    _lily_raise_syn($81,6667,$vararg_buffer13);
    // unreachable;
   }
   $85 = HEAP16[$66>>1]|0;
   $86 = ($85&65535)>(1);
   L24: do {
    if ($86) {
     $87 = ((($59)) + 16|0);
     $88 = ((($7)) + 12|0);
     $89 = ((($0)) + 76|0);
     $90 = ((($0)) + 76|0);
     $$1102 = 1;
     while(1) {
      $91 = HEAP32[$87>>2]|0;
      $92 = (($91) + ($$1102<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (_lily_ts_resolve_by_second($62,$3,$93)|0);
      $95 = HEAP32[$88>>2]|0;
      $96 = (_strcmp($95,9009)|0);
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = HEAP32[$42>>2]|0;
       $99 = (_lily_emit_get_storage_spot($98,$94)|0);
       _lily_lexer($7);
       $$099 = $99;
      } else {
       $100 = (_get_named_var($0,$94)|0);
       $101 = ((($100)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $102&65535;
       $$099 = $103;
      }
      _lily_u16_write_1($55,$$099);
      $104 = HEAP16[$66>>1]|0;
      $105 = $104&65535;
      $106 = (($105) + -1)|0;
      $107 = ($$1102|0)==($106|0);
      if (!($107)) {
       $108 = HEAP32[$8>>2]|0;
       $109 = ($108|0)==(2);
       if (!($109)) {
        label = 23;
        break;
       }
       _lily_lexer($7);
       $114 = HEAP32[$8>>2]|0;
       $115 = ($114|0)==(35);
       if (!($115)) {
        label = 25;
        break;
       }
      }
      $120 = (($$1102) + 1)|0;
      $121 = HEAP16[$66>>1]|0;
      $122 = $121&65535;
      $123 = ($120|0)<($122|0);
      if ($123) {
       $$1102 = $120;
      } else {
       break L24;
      }
     }
     if ((label|0) == 23) {
      $110 = HEAP32[$90>>2]|0;
      $111 = (_tokname(2)|0);
      $112 = HEAP32[$8>>2]|0;
      $113 = (_tokname($112)|0);
      HEAP32[$vararg_buffer17>>2] = $111;
      $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $113;
      _lily_raise_syn($110,6667,$vararg_buffer17);
      // unreachable;
     }
     else if ((label|0) == 25) {
      $116 = HEAP32[$89>>2]|0;
      $117 = (_tokname(35)|0);
      $118 = HEAP32[$8>>2]|0;
      $119 = (_tokname($118)|0);
      HEAP32[$vararg_buffer21>>2] = $117;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = $119;
      _lily_raise_syn($116,6667,$vararg_buffer21);
      // unreachable;
     }
    }
   } while(0);
   $124 = HEAP32[$8>>2]|0;
   $125 = ($124|0)==(1);
   if ($125) {
    $131 = $57&65535;
    _lily_u16_write_1($55,$131);
    $132 = HEAP32[$42>>2]|0;
    _lily_emit_variant_decompose($132,$55);
    HEAP32[$56>>2] = $57;
    break;
   } else {
    $126 = ((($0)) + 76|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_tokname(1)|0);
    $129 = HEAP32[$8>>2]|0;
    $130 = (_tokname($129)|0);
    HEAP32[$vararg_buffer25>>2] = $128;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = $130;
    _lily_raise_syn($127,6667,$vararg_buffer25);
    // unreachable;
   }
  }
 } while(0);
 _lily_lexer($7);
 $133 = HEAP32[$8>>2]|0;
 $134 = ($133|0)==(6);
 if ($134) {
  _lily_lexer($7);
  STACKTOP = sp;return;
 } else {
  $135 = ((($0)) + 76|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (_tokname(6)|0);
  $138 = HEAP32[$8>>2]|0;
  $139 = (_tokname($138)|0);
  HEAP32[$vararg_buffer29>>2] = $137;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = $139;
  _lily_raise_syn($136,6667,$vararg_buffer29);
  // unreachable;
 }
}
function _process_match_else($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(6);
 if ($5) {
  $11 = ((($0)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_emit_do_match_else($12);
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $6 = ((($0)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_tokname(6)|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (_tokname($9)|0);
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  _lily_raise_syn($7,6667,$vararg_buffer);
  // unreachable;
 }
}
function _ensure_proper_match_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0 = 0, $$0$lcssa = 0, $$03743 = 0, $$04045 = 0, $$046 = 0, $$138 = 0, $$14142 = 0, $$239 = 0, $$244 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($0)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($17)) + 52|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ($7&65535)<($19&65535);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($21)) + 52|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $$04045 = $8;$$046 = 0;$31 = $17;
  while(1) {
   $30 = ((($31)) + 4|0);
   $32 = HEAP32[$30>>2]|0;
   $33 = (($32) + ($$04045<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   $36 = $35&1;
   $$$0 = (($36) + ($$046))|0;
   $37 = (($$04045) + 1)|0;
   $38 = ($37|0)<($24|0);
   if ($38) {
    $$04045 = $37;$$046 = $$$0;$31 = $21;
   } else {
    $$0$lcssa = $$$0;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 52|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = ($7&65535)<($27&65535);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = ((($16)) + 40|0);
 $$03743 = 0;$$14142 = $8;$$244 = $$0$lcssa;$40 = $25;
 while(1) {
  $39 = ((($40)) + 4|0);
  $41 = HEAP32[$39>>2]|0;
  $42 = (($41) + ($$14142<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = ($$03743|0)==(0);
   if ($45) {
    _lily_mb_add($12,8871);
    $$138 = 1;
   } else {
    $$138 = $$03743;
   }
   $46 = HEAP32[$29>>2]|0;
   $47 = (($46) + ($$14142<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP32[$vararg_buffer>>2] = $50;
   _lily_mb_add_fmt($12,8937,$vararg_buffer);
   $51 = ($$244|0)>(1);
   if ($51) {
    $52 = (($$244) + -1)|0;
    _lily_mb_add_char($12,10);
    $$239 = $$138;$$3 = $52;
   } else {
    $$239 = $$138;$$3 = $$244;
   }
  } else {
   $$239 = $$03743;$$3 = $$244;
  }
  $53 = (($$14142) + 1)|0;
  $54 = HEAP32[$2>>2]|0;
  $55 = ((($54)) + 52|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = ($53|0)<($57|0);
  if ($58) {
   $$03743 = $$239;$$14142 = $53;$$244 = $$3;$40 = $54;
  } else {
   break;
  }
 }
 $59 = ($$239|0)==(0);
 if ($59) {
  STACKTOP = sp;return;
 } else {
  $60 = HEAP32[$9>>2]|0;
  $61 = (_lily_mb_get($12)|0);
  _lily_raise_syn($60,$61,$vararg_buffer1);
  // unreachable;
 }
}
function _process_except($0) {
 $0 = $0|0;
 var $$0 = 0, $$041 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_get_type_raw($0,0)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(19);
 if ($8) {
  $$041 = 8;
 } else {
  $9 = (_lily_class_greater_eq_id(19,$5)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($0)) + 76|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($5)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   _lily_raise_syn($12,9125,$vararg_buffer);
   // unreachable;
  }
  $15 = ((($5)) + 46|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($16<<16>>16)==(0);
  if ($17) {
   $$041 = 7;
  } else {
   $18 = ((($0)) + 76|0);
   $19 = HEAP32[$18>>2]|0;
   _lily_raise_syn($19,9162,$vararg_buffer1);
   // unreachable;
  }
 }
 $20 = ((($0)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_emit_change_block_to($21,$$041);
 $22 = ((($2)) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(35);
 do {
  if ($24) {
   $25 = HEAP32[$1>>2]|0;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcmp($27,9198)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = ((($0)) + 76|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($2)) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $33;
    _lily_raise_syn($31,9201,$vararg_buffer3);
    // unreachable;
   }
   _lily_lexer($2);
   $34 = HEAP32[$22>>2]|0;
   $35 = ($34|0)==(35);
   if (!($35)) {
    $36 = ((($0)) + 76|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_tokname(35)|0);
    $39 = HEAP32[$22>>2]|0;
    $40 = (_tokname($39)|0);
    HEAP32[$vararg_buffer6>>2] = $38;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $40;
    _lily_raise_syn($37,6667,$vararg_buffer6);
    // unreachable;
   }
   $41 = ((($0)) + 64|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($2)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_lily_find_var($42,0,$44)|0);
   $46 = ($45|0)==(0|0);
   if ($46) {
    $51 = HEAP32[$20>>2]|0;
    $52 = ((($5)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = HEAP32[$43>>2]|0;
    $55 = (_lily_emit_new_local_var($51,$53,$54)|0);
    _lily_lexer($2);
    $$pr = HEAP32[$22>>2]|0;
    $$0 = $55;$56 = $$pr;
    break;
   } else {
    $47 = ((($0)) + 76|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $50;
    _lily_raise_syn($48,8042,$vararg_buffer10);
    // unreachable;
   }
  } else {
   $$0 = 0;$56 = $23;
  }
 } while(0);
 $57 = ($56|0)==(6);
 if ($57) {
  $63 = HEAP32[$20>>2]|0;
  $64 = ((($5)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($2)) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  _lily_emit_except($63,$65,$$0,$67);
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $58 = ((($0)) + 76|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_tokname(6)|0);
  $61 = HEAP32[$22>>2]|0;
  $62 = (_tokname($61)|0);
  HEAP32[$vararg_buffer13>>2] = $60;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $62;
  _lily_raise_syn($59,6667,$vararg_buffer13);
  // unreachable;
 }
}
function _parse_for_range_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 _expression($0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 255;
 $8 = ($7<<16>>16)==(27);
 $9 = ($6&65535)>(5375);
 $or$cond = $9 & $8;
 if ($or$cond) {
  $10 = ((($0)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise_syn($11,9361,$vararg_buffer);
  // unreachable;
 } else {
  $12 = ((($0)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($15)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_lily_emit_new_local_var($17,$19,$1)|0);
  $21 = HEAP32[$16>>2]|0;
  _lily_emit_eval_expr_to_var($21,$3,$20);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _do_elif($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_emit_change_block_to($4,1);
 _expression($0);
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_emit_eval_condition($5,$7);
 $8 = ((($2)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(6);
 if ($10) {
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(6)|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise_syn($12,6667,$vararg_buffer);
  // unreachable;
 }
}
function _do_else($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_emit_change_block_to($4,2);
 $5 = ((($2)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(6);
 if ($7) {
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_tokname(6)|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  _lily_raise_syn($9,6667,$vararg_buffer);
  // unreachable;
 }
}
function _ensure_unique_method_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_find_var($3,0,$1)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($0)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($7,8042,$vararg_buffer);
  // unreachable;
 }
 $8 = ((($0)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($9)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_find_property($12,$1)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 } else {
  $15 = ((($0)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($12)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $1;
  _lily_raise_syn($16,9531,$vararg_buffer1);
  // unreachable;
 }
}
function _make_type_of_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_tm_add($4,$2);
 $5 = HEAP32[$3>>2]|0;
 $6 = (_lily_tm_make($5,0,$1,1)|0);
 return ($6|0);
}
function _lily_dynaload_exception($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_try_toplevel_dynaload($0,$2,$1)|0);
 return ($3|0);
}
function _lily_parser_interp_eval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_load_copy_string($5,1,$2);
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = $1;
 $7 = HEAP32[$4>>2]|0;
 _lily_lexer($7);
 $8 = ((($5)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(54);
 if ($10) {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_raise_syn($12,10061,$vararg_buffer);
  // unreachable;
 }
 _init_expr_state($0,$3);
 _expression($0);
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_emit_eval_interp_expr($14,$16)|0);
 $18 = HEAP32[$8>>2]|0;
 $19 = ($18|0)==(54);
 if (!($19)) {
  $20 = ((($0)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_tokname($18)|0);
  HEAP32[$vararg_buffer1>>2] = $22;
  _lily_raise_syn($21,10088,$vararg_buffer1);
  // unreachable;
 }
 $23 = ($17|0)==(0|0);
 if ($23) {
  $24 = ((($0)) + 76|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_raise_syn($25,10137,$vararg_buffer3);
  // unreachable;
 } else {
  _fini_expr_state($0);
  _lily_pop_lex_entry($5);
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _init_expr_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($1)) + 22|0);
 HEAP16[$6>>1] = $5;
 $7 = HEAP16[$4>>1]|0;
 $8 = ((($1)) + 24|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($1)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($1)) + 32|0);
 HEAP32[$14>>2] = $3;
 $15 = ((($0)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = ((($1)) + 28|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($3)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($1)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($1)) + 20|0);
 HEAP16[$22>>1] = 0;
 HEAP32[$1>>2] = 0;
 $23 = ((($1)) + 4|0);
 HEAP32[$23>>2] = 0;
 HEAP32[$2>>2] = $1;
 return;
}
function _fini_expr_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $4;
 return;
}
function _lily_parser_lambda_eval($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$054 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_load_copy_string($6,1,$2);
 $11 = ((($6)) + 20|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($0)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_emit_new_define_var($13,$15,0,10184,0)|0);
 $17 = HEAP32[$12>>2]|0;
 _lily_emit_enter_block($17,13);
 _lily_lexer($6);
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[431]|0;
 _lily_tm_add($18,$19);
 $20 = ((($6)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 switch ($21|0) {
 case 47:  {
  $22 = (_collect_lambda_args($0,$3)|0);
  $phitmp = (($22) + 1)|0;
  $$054 = $phitmp;
  break;
 }
 case 48:  {
  $$054 = 1;
  break;
 }
 default: {
  $23 = ((($0)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $21;
  _lily_raise_syn($24,7242,$vararg_buffer);
  // unreachable;
 }
 }
 _init_expr_state($0,$4);
 $25 = (_parse_lambda_body($0,$3)|0);
 _fini_expr_state($0);
 $26 = HEAP32[$20>>2]|0;
 $27 = ($26|0)==(3);
 if (!($27)) {
  $28 = ((($0)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_tokname(3)|0);
  $31 = HEAP32[$20>>2]|0;
  $32 = (_tokname($31)|0);
  HEAP32[$vararg_buffer1>>2] = $30;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $32;
  _lily_raise_syn($29,6667,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($6);
 $33 = ($25|0)==(0|0);
 if (!($33)) {
  $34 = HEAP32[$7>>2]|0;
  _lily_tm_insert($34,$10,$25);
 }
 $35 = ($3|0)==(0|0);
 if ($35) {
  $$0 = 0;
 } else {
  $36 = ((($3)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = ($39<<16>>16)==(7);
  if ($40) {
   $41 = ((($3)) + 6|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 & 512;
   $44 = $43&65535;
   $$0 = $44;
  } else {
   $$0 = 0;
  }
 }
 $45 = HEAP32[$7>>2]|0;
 $46 = ((($0)) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 72|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_lily_tm_make($45,$$0,$49,$$054)|0);
 $51 = ((($16)) + 12|0);
 HEAP32[$51>>2] = $50;
 $52 = HEAP32[$12>>2]|0;
 _lily_emit_leave_block($52);
 _lily_pop_lex_entry($6);
 STACKTOP = sp;return ($16|0);
}
function _collect_lambda_args($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $27 = -1;
 } else {
  $3 = ((($1)) + 10|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $27 = $5;
 }
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = ((($0)) + 72|0);
 $10 = ((($0)) + 76|0);
 $11 = ((($1)) + 16|0);
 $12 = ((($0)) + 76|0);
 $13 = ((($7)) + 12|0);
 $14 = ((($0)) + 76|0);
 $$041 = 0;
 L4: while(1) {
  _lily_lexer($7);
  $15 = HEAP32[$8>>2]|0;
  $16 = ($15|0)==(35);
  if (!($16)) {
   label = 5;
   break;
  }
  $21 = (_get_named_var($0,0)|0);
  $22 = HEAP32[$8>>2]|0;
  $23 = ($22|0)==(6);
  if ($23) {
   _lily_lexer($7);
   $24 = (_get_type_raw($0,0)|0);
   $25 = ((($21)) + 12|0);
   HEAP32[$25>>2] = $24;
   $$1 = $24;
  } else {
   $26 = ($$041|0)<($27|0);
   if (!($26)) {
    label = 11;
    break;
   }
   $28 = (($$041) + 1)|0;
   $29 = HEAP32[$11>>2]|0;
   $30 = (($29) + ($28<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    label = 11;
    break;
   }
   $33 = ((($31)) + 6|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34 & 4096;
   $36 = ($35<<16>>16)==(0);
   if (!($36)) {
    label = 11;
    break;
   }
   $39 = ((($21)) + 12|0);
   HEAP32[$39>>2] = $31;
   $$1 = $31;
  }
  $40 = HEAP32[$9>>2]|0;
  _lily_tm_add($40,$$1);
  $41 = (($$041) + 1)|0;
  $42 = HEAP32[$8>>2]|0;
  switch ($42|0) {
  case 2:  {
   $$041 = $41;
   break;
  }
  case 47:  {
   label = 15;
   break L4;
   break;
  }
  default: {
   label = 14;
   break L4;
  }
  }
 }
 if ((label|0) == 5) {
  $17 = HEAP32[$14>>2]|0;
  $18 = (_tokname(35)|0);
  $19 = HEAP32[$8>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  _lily_raise_syn($17,6667,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $37 = HEAP32[$12>>2]|0;
  $38 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $38;
  _lily_raise_syn($37,10193,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $43 = HEAP32[$10>>2]|0;
  $44 = (_tokname($42)|0);
  HEAP32[$vararg_buffer5>>2] = $44;
  _lily_raise_syn($43,10220,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _parse_lambda_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 48|0);
 $5 = ((($3)) + 12|0);
 $6 = ((($0)) + 60|0);
 $7 = ((($0)) + 24|0);
 L1: while(1) {
  $$pr = HEAP32[$4>>2]|0;
  $8 = $$pr;
  while(1) {
   $9 = ($8|0)==(35);
   if (!($9)) {
    break;
   }
   $10 = HEAP32[$5>>2]|0;
   $11 = (_keyword_by_name($10)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    break;
   }
   _lily_lexer($3);
   _handle_multiline($0,$11);
   $23 = HEAP32[$4>>2]|0;
   $24 = ($23|0)==(3);
   if ($24) {
    $$0 = 0;
    label = 10;
    break L1;
   } else {
    $8 = $23;
   }
  }
  _expression($0);
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(3);
  $15 = HEAP32[$6>>2]|0;
  $16 = HEAP32[$7>>2]|0;
  if ($14) {
   break;
  }
  _lily_emit_eval_expr($15,$16);
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 _lily_emit_eval_lambda_body($15,$16,$1);
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ((($19)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $$0 = $22;
 return ($$0|0);
}
function _handle_multiline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (976 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($0,1);
 return;
}
function _fix_first_file_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 _set_module_names_by_path($5,$1);
 $6 = ((($0)) + 18|0);
 HEAP16[$6>>1] = 0;
 return;
}
function _handle_rewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _rewind_parser($0,$2);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 20|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$2>>2] = $11;
 $12 = ((($9)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($2)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($0)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 16|0);
 HEAP32[$25>>2] = $24;
 return;
}
function _parser_loop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_lexer($2);
 $3 = ((($2)) + 48|0);
 $4 = ((($0)) + 76|0);
 $5 = ((($0)) + 60|0);
 $6 = ((($0)) + 60|0);
 $7 = ((($0)) + 76|0);
 $8 = ((($0)) + 60|0);
 $9 = ((($0)) + 24|0);
 L1: while(1) {
  $10 = HEAP32[$3>>2]|0;
  switch ($10|0) {
  case 35:  {
   _statement($0,1);
   continue L1;
   break;
  }
  case 3:  {
   $11 = HEAP32[$5>>2]|0;
   _lily_emit_leave_block($11);
   _lily_lexer($2);
   continue L1;
   break;
  }
  case 54: case 53:  {
   $12 = HEAP32[$6>>2]|0;
   $13 = ((($12)) + 76|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 52|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    label = 6;
    break L1;
   }
   _setup_and_exec_vm($0);
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)==(53);
   if (!($20)) {
    label = 13;
    break L1;
   }
   $21 = HEAP32[$1>>2]|0;
   _lily_lexer_handle_page_data($21);
   $22 = HEAP32[$3>>2]|0;
   $23 = ($22|0)==(54);
   if ($23) {
    label = 13;
    break L1;
   }
   _lily_lexer($2);
   continue L1;
   break;
  }
  case 43:  {
   _process_docstring($0);
   continue L1;
   break;
  }
  case 40: case 30: case 39: case 38: case 4: case 0: case 37: case 42: case 41:  {
   _expression($0);
   $24 = HEAP32[$8>>2]|0;
   $25 = HEAP32[$9>>2]|0;
   _lily_emit_eval_expr($24,$25);
   continue L1;
   break;
  }
  default: {
   label = 12;
   break L1;
  }
  }
 }
 if ((label|0) == 6) {
  $18 = HEAP32[$7>>2]|0;
  _lily_raise_syn($18,10258,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $26 = HEAP32[$4>>2]|0;
  $27 = (_tokname($10)|0);
  HEAP32[$vararg_buffer1>>2] = $27;
  _lily_raise_syn($26,10299,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _setup_and_exec_vm($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_register_classes($2,$4);
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_prepare_main($6);
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_vm_prep($7,$8,$11,$13);
 _update_all_cid_tables($0);
 $14 = ((($0)) + 16|0);
 HEAP16[$14>>1] = 1;
 $15 = HEAP32[$3>>2]|0;
 _lily_vm_execute($15);
 HEAP16[$14>>1] = 0;
 $16 = HEAP32[$5>>2]|0;
 _lily_reset_main($16);
 return;
}
function _update_all_cid_tables($0) {
 $0 = $0|0;
 var $$0 = 0, $$07 = 0, $$08 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$07 = HEAP32[$0>>2]|0;
 $1 = ($$07|0)==(0|0);
 if ($1) {
  return;
 } else {
  $$08 = $$07;
 }
 while(1) {
  $2 = ((($$08)) + 48|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   _update_cid_table($0,$$08);
  }
  $$0 = HEAP32[$$08>>2]|0;
  $5 = ($$0|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$08 = $$0;
  }
 }
 return;
}
function _rewind_parser($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$094 = 0, $$095 = 0, $$096 = 0, $$096$in = 0, $$pn = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 10|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($6)) + 12|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$10>>2] = 0;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($10)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($10)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 24|0);
 HEAP32[$15>>2] = $10;
 $16 = ((($10)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $$095 = $17;
 while(1) {
  $18 = ((($$095)) + 8|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($$095)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   break;
  } else {
   $$095 = $20;
  }
 }
 HEAP32[$16>>2] = $$095;
 $22 = ((($10)) + 20|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($0)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($24)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($24)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  $33 = ((($31)) + 4|0);
  HEAP32[$33>>2] = 0;
 }
 $34 = ((($24)) + 40|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($24)) + 44|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($24)) + 52|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($24)) + 68|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($24)) + 56|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($24)) + 60|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($24)) + 76|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 48|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$37>>2]|0;
 $$pn = $46;
 while(1) {
  $$096$in = ((($$pn)) + 48|0);
  $$096 = HEAP32[$$096$in>>2]|0;
  $47 = ($$096|0)==($45|0);
  if ($47) {
   break;
  }
  $48 = ((($$096)) + 18|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = ($49&65535)>(10);
  if ($50) {
   label = 8;
   break;
  } else {
   $$pn = $$096;
  }
 }
 if ((label|0) == 8) {
  $51 = ((($$096)) + 10|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = ((($24)) + 64|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 4|0);
  HEAP16[$55>>1] = $52;
 }
 $56 = HEAP32[$37>>2]|0;
 HEAP32[$42>>2] = $56;
 $57 = ((($24)) + 72|0);
 HEAP32[$57>>2] = $56;
 $58 = ((($24)) + 82|0);
 HEAP16[$58>>1] = 1;
 $59 = HEAP32[$23>>2]|0;
 $60 = ((($59)) + 100|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 6|0);
 HEAP16[$62>>1] = 0;
 $63 = ((($61)) + 4|0);
 HEAP16[$63>>1] = 0;
 $64 = ((($0)) + 56|0);
 $65 = HEAP32[$64>>2]|0;
 _lily_rewind_lex_state($65);
 $66 = ((($1)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$64>>2]|0;
 $69 = ((($68)) + 20|0);
 HEAP32[$69>>2] = $67;
 $70 = ((($0)) + 76|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 _lily_mb_flush($73);
 $74 = ((($71)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 _lily_mb_flush($75);
 $76 = ((($71)) + 16|0);
 HEAP32[$76>>2] = 0;
 $77 = ((($71)) + 12|0);
 HEAP32[$77>>2] = 0;
 $78 = ((($0)) + 68|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 68|0);
 $81 = HEAP32[$80>>2]|0;
 $$094 = $81;
 while(1) {
  $82 = ((($$094)) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if ($84) {
   break;
  } else {
   $$094 = $83;
  }
 }
 HEAP32[$80>>2] = $$094;
 $85 = ((($79)) + 72|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($79)) + 20|0);
 HEAP16[$86>>1] = 0;
 $87 = ((($79)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$79>>2] = $88;
 $89 = ((($79)) + 22|0);
 HEAP16[$89>>1] = 1;
 $90 = ((($79)) + 24|0);
 $91 = HEAP32[$90>>2]|0;
 $$0 = $91;
 while(1) {
  $92 = ((($$0)) + 32|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(0|0);
  if ($94) {
   break;
  } else {
   $$0 = $93;
  }
 }
 HEAP32[$90>>2] = $$0;
 $95 = ((($$0)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($79)) + 12|0);
 HEAP32[$97>>2] = $96;
 $98 = ((($79)) + 16|0);
 HEAP32[$98>>2] = 0;
 $99 = ((($0)) + 64|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($0)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = HEAP32[$1>>2]|0;
 $104 = ((($1)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ((($0)) + 16|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 _lily_rewind_symtab($100,$102,$103,$105,$108);
 return;
}
function _lily_parse_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_parse_string($4,1,$1,$2)|0);
 return ($5|0);
}
function _parse_string($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$reg2mem$0 = 0, $$reg2mem19$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $4 = ((($0)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  label = 4;
 } else {
  __THREW__ = 0;
  invoke_vii(22,($0|0),($2|0));
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond = ($8|0)==(1);
  if ($cond) {
   $$reg2mem19$0 = $9;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  __THREW__ = 0;
  invoke_vi(1,($0|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
  $12 = tempRet0;
  $cond25 = ($11|0)==(1);
  if ($cond25) {
   $$reg2mem19$0 = $12;
  } else {
   $13 = ((($0)) + 76|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 8|0);
   _setjmpTable = _saveSetjmp($16,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $17 = __THREW__; __THREW__ = 0;
   if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
   $19 = tempRet0;
   $cond26 = ($18|0)==(1);
   if ($cond26) {
    $$reg2mem19$0 = $19;
   } else {
    $$reg2mem19$0 = 0;
   }
  }
 }
 while(1) {
  $20 = ($$reg2mem19$0|0)==(0);
  if (!($20)) {
   label = 13;
   break;
  }
  $21 = ((($0)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  invoke_viii(1,($22|0),($1|0),($3|0));
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
  $25 = tempRet0;
  $cond21 = ($24|0)==(1);
  if ($cond21) {
   $$reg2mem19$0 = $25;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(2,($0|0));
  $26 = __THREW__; __THREW__ = 0;
  if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
  $28 = tempRet0;
  $cond22 = ($27|0)==(1);
  if ($cond22) {
   $$reg2mem19$0 = $28;
   continue;
  }
  $29 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  invoke_vi(3,($29|0));
  $30 = __THREW__; __THREW__ = 0;
  if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = (threwValue); } else { $31 = -1; };
  $32 = tempRet0;
  $cond23 = ($31|0)==(1);
  if ($cond23) {
   $$reg2mem19$0 = $32;
   continue;
  }
  $33 = ((($0)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  __THREW__ = 0;
  invoke_vi(4,($34|0));
  $35 = __THREW__; __THREW__ = 0;
  if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
  $37 = tempRet0;
  $cond24 = ($36|0)==(1);
  if ($cond24) {
   $$reg2mem19$0 = $37;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $$0$reg2mem$0 = 1;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 else if ((label|0) == 13) {
  $38 = ((($0)) + 84|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 20|0);
  HEAP32[$40>>2] = 1;
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _lily_get_error($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 _build_error($2);
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_mb_get($5)|0);
 return ($6|0);
}
function _build_error($0) {
 $0 = $0|0;
 var $$0 = 0, $$067 = 0, $$068 = 0, $$069$ph = 0, $$06970 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_mb_flush($4);
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ($9|0)==($10|0);
  if (!($11)) {
   $12 = HEAP32[$10>>2]|0;
   $13 = ($9|0)==($12|0);
   if (!($13)) {
    $14 = ((($9)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$vararg_buffer>>2] = $15;
    _lily_mb_add_fmt($4,10320,$vararg_buffer);
   }
  }
 }
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_lily_mb_get($17)|0);
 $19 = (_lily_name_for_error($2)|0);
 _lily_mb_add($4,$19);
 $20 = HEAP8[$18>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  _lily_mb_add_char($4,10);
 } else {
  HEAP32[$vararg_buffer1>>2] = $18;
  _lily_mb_add_fmt($4,10324,$vararg_buffer1);
 }
 $22 = ((($0)) + 16|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ($23<<16>>16)==(0);
 if ($24) {
  $25 = ((($0)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   STACKTOP = sp;return;
  }
  $29 = ((($2)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = ((($26)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $40 = $33;
  } else {
   $40 = $30;
  }
  $34 = ((($0)) + 64|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $39;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $40;
  _lily_mb_add_fmt($4,10330,$vararg_buffer4);
  STACKTOP = sp;return;
 }
 $41 = ((($0)) + 68|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 _lily_mb_add($4,10346);
 $45 = HEAP32[$41>>2]|0;
 $46 = ((($45)) + 22|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = ($47<<16>>16)==(0);
 if ($48) {
  $49 = ((($44)) + 32|0);
  $50 = HEAP32[$49>>2]|0;
  $$069$ph = $50;
 } else {
  $$069$ph = $44;
 }
 $51 = ($$069$ph|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return;
 } else {
  $$06970 = $$069$ph;
 }
 while(1) {
  $52 = HEAP32[$$06970>>2]|0;
  $53 = ((($52)) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($52)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54|0)==(0|0);
  if ($57) {
   $$0 = 19155;$$067 = $56;$$068 = 19155;
  } else {
   $58 = (_strcmp($56,6924)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $$0 = 19155;$$067 = 19155;$$068 = $54;
   } else {
    $$0 = 16692;$$067 = $56;$$068 = $54;
   }
  }
  $60 = HEAP32[$$06970>>2]|0;
  $61 = ((($60)) + 40|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   HEAP32[$vararg_buffer8>>2] = $$068;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $$0;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $$067;
   _lily_mb_add_fmt($4,10358,$vararg_buffer8);
  } else {
   $64 = ((($52)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 20|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($$06970)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $67;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $69;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$068;
   $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
   HEAP32[$vararg_ptr18>>2] = $$0;
   $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
   HEAP32[$vararg_ptr19>>2] = $$067;
   _lily_mb_add_fmt($4,10383,$vararg_buffer13);
  }
  $70 = ((($$06970)) + 32|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)==(0|0);
  if ($72) {
   break;
  } else {
   $$06970 = $71;
  }
 }
 STACKTOP = sp;return;
}
function _lily_builtin_Boolean_to_i($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_boolean($0,0)|0);
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 _lily_return_integer($0,$1,$3);
 return;
}
function _lily_builtin_Boolean_to_s($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_boolean($0,0)|0);
 $2 = ($1|0)==(0);
 $$ = $2 ? 14133 : 14139;
 $3 = (_lily_new_string($$)|0);
 _lily_return_string($0,$3);
 return;
}
function _lily_builtin_Byte_to_i($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_byte($0,0)|0);
 $2 = $1&255;
 _lily_return_integer($0,$2,0);
 return;
}
function _lily_builtin_ByteString_each_byte($0) {
 $0 = $0|0;
 var $$019 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = (_lily_bytestring_raw($1)|0);
 $3 = (_lily_bytestring_length($1)|0);
 $4 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$4);
 $5 = ($3|0)>(0);
 if ($5) {
  $$019 = 0;
 } else {
  return;
 }
 while(1) {
  $6 = (($2) + ($$019)|0);
  $7 = HEAP8[$6>>0]|0;
  _lily_push_byte($0,$7);
  _lily_call_exec_prepared($0,1);
  _lily_result_drop($0);
  $8 = (($$019) + 1)|0;
  $exitcond = ($8|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$019 = $8;
  }
 }
 return;
}
function _lily_builtin_ByteString_encode($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = (_lily_arg_count($0)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = (_lily_arg_string_raw($0,1)|0);
  $$0 = $4;
 } else {
  $$0 = 14144;
 }
 $5 = (_strcmp($$0,14144)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lily_return_empty_variant($0,15);
  return;
 }
 $7 = (_lily_bytestring_raw($1)|0);
 $8 = (_lily_bytestring_length($1)|0);
 $9 = (_lily_is_valid_sized_utf8($7,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  _lily_return_empty_variant($0,15);
  return;
 } else {
  $11 = (_lily_new_variant(1)|0);
  $12 = (_lily_new_string($7)|0);
  _lily_variant_set_string($11,0,$12);
  _lily_return_variant($0,14,$11);
  return;
 }
}
function _lily_builtin_ByteString_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_return_integer($0,$3,0);
 return;
}
function _do_str_slice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$052 = 0, $$1 = 0, $$153 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_string($0,0)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_arg_count($0)|0);
 switch ($5|0) {
 case 3:  {
  $6 = (_lily_arg_integer($0,2)|0);
  $7 = tempRet0;
  $$052 = $6;
  label = 3;
  break;
 }
 case 2:  {
  $$052 = $4;
  label = 3;
  break;
 }
 default: {
  $$0 = 0;$$153 = $4;
 }
 }
 if ((label|0) == 3) {
  $8 = (_lily_arg_integer($0,1)|0);
  $9 = tempRet0;
  $$0 = $8;$$153 = $$052;
 }
 $10 = ($$153|0)<(0);
 if ($10) {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$153))|0;
  $$2 = $12;
 } else {
  $$2 = $$153;
 }
 $13 = ($$0|0)<(0);
 if ($13) {
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) + ($$0))|0;
  $$1 = $15;
 } else {
  $$1 = $$0;
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = ($$2>>>0)>($16>>>0);
 $18 = ($$1>>>0)>($16>>>0);
 $or$cond = $17 | $18;
 $19 = ($$2|0)<($$1|0);
 $or$cond54 = $19 | $or$cond;
 if ($or$cond54) {
  $20 = ($1|0)==(0);
  if ($20) {
   $21 = (_lily_new_string(19155)|0);
   _lily_return_string($0,$21);
   return;
  } else {
   $22 = (_lily_new_bytestring(19155)|0);
   _lily_return_bytestring($0,$22);
   return;
  }
 }
 $23 = (_lily_string_raw($2)|0);
 $24 = ($1|0)==(0);
 do {
  if ($24) {
   $25 = (($23) + ($$1)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = (14150 + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)==(-1);
   if (!($30)) {
    $31 = (($23) + ($$2)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = (14150 + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ($35<<24>>24)==(-1);
    if (!($36)) {
     break;
    }
   }
   $37 = (_lily_new_string(19155)|0);
   _lily_return_string($0,$37);
   return;
  }
 } while(0);
 $38 = (($$2) - ($$1))|0;
 $39 = (($38) + 1)|0;
 $40 = (_make_sv($39)|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($23) + ($$1)|0);
 (_strncpy($42,$43,$38)|0);
 $44 = (($42) + ($38)|0);
 HEAP8[$44>>0] = 0;
 if ($24) {
  _lily_return_string($0,$40);
  return;
 } else {
  _lily_return_bytestring($0,$40);
  return;
 }
}
function _make_sv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(12)|0);
 $2 = (_lily_malloc($0)|0);
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = (($0) + -1)|0;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$1>>2] = 0;
 return ($1|0);
}
function _lily_builtin_ByteString_slice($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _do_str_slice($0,1);
 return;
}
function _lily_builtin_DivisionByZeroError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,25);
 return;
}
function _return_exception($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 _lily_ctor_setup($0,$2,$1,2);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_arg_value($0,0)|0);
 _lily_instance_set_value($3,0,$4);
 $5 = HEAP32[$2>>2]|0;
 $6 = (_lily_new_list(0)|0);
 _lily_instance_set_list($5,1,$6);
 STACKTOP = sp;return;
}
function _lily_builtin_Double_to_i($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_lily_arg_double($0,0));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 _lily_return_integer($0,$2,$3);
 return;
}
function _lily_builtin_Either_is_left($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_is_left_right($0,17);
 return;
}
function _either_is_left_right($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_class_id($0,0)|0);
 $3 = ($2|0)==($1|0);
 $4 = $3&1;
 _lily_return_boolean($0,$4);
 return;
}
function _lily_builtin_Either_is_right($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_is_left_right($0,18);
 return;
}
function _lily_builtin_Either_left($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_optionize_left_right($0,17);
 return;
}
function _either_optionize_left_right($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = (_lily_arg_variant_for_id($0,0,$2)|0);
 $4 = ($3|0)==($1|0);
 if ($4) {
  $5 = (_lily_new_variant(1)|0);
  $6 = HEAP32[$2>>2]|0;
  $7 = (_lily_variant_value($6,0)|0);
  _lily_variant_set_value($5,0,$7);
  _lily_return_variant($0,14,$5);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($0,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Either_right($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_optionize_left_right($0,18);
 return;
}
function _lily_builtin_Exception_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,19);
 return;
}
function _lily_builtin_File_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_return_unit($0);
  return;
 }
 $5 = ((($1)) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  (_fclose($3)|0);
 }
 HEAP32[$2>>2] = 0;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_File_each_line($0) {
 $0 = $0|0;
 var $$0$be = 0, $$033 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $1 = sp;
 $2 = (_lily_arg_file($0,0)|0);
 $3 = (_lily_get_msgbuf($0)|0);
 _lily_file_ensure_readable($0,$2);
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$6);
 $7 = (_fgetc($5)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  _lily_return_unit($0);
  STACKTOP = sp;return;
 } else {
  $$033 = 0;$11 = $7;
 }
 while(1) {
  $9 = ($$033|0)==(128);
  if ($9) {
   _lily_mb_add_slice($3,$1,0,128);
   $$1 = 0;
  } else {
   $$1 = $$033;
  }
  $10 = $11&255;
  $12 = (($1) + ($$1)|0);
  HEAP8[$12>>0] = $10;
  $13 = ($11|0)==(10);
  if ($13) {
   $14 = ($$1|0)==(0);
   if (!($14)) {
    _lily_mb_add_slice($3,$1,0,$$1);
   }
   $15 = (_lily_mb_get($3)|0);
   $16 = (_lily_new_bytestring($15)|0);
   _lily_push_bytestring($0,$16);
   _lily_call_exec_prepared($0,1);
   _lily_mb_flush($3);
   $$0$be = 0;
  } else {
   $17 = (($$1) + 1)|0;
   $$0$be = $17;
  }
  $18 = (_fgetc($5)|0);
  $19 = ($18|0)==(-1);
  if ($19) {
   break;
  } else {
   $$033 = $$0$be;$11 = $18;
  }
 }
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _lily_builtin_File_open($0) {
 $0 = $0|0;
 var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 $2 = (_lily_arg_string_raw($0,0)|0);
 $3 = (_lily_arg_string_raw($0,1)|0);
 $4 = (___errno_location()|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP8[$3>>0]|0;
 switch ($5<<24>>24) {
 case 97: case 119: case 114:  {
  $6 = ((($3)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(98);
  $9 = ((($3)) + 2|0);
  $$ = $8 ? $9 : $6;
  $10 = HEAP8[$$>>0]|0;
  $11 = ($10<<24>>24)==(43);
  $12 = ((($$)) + 1|0);
  $$1 = $11 ? $12 : $$;
  $13 = HEAP8[$$1>>0]|0;
  $phitmp = ($13<<24>>24)==(0);
  if (!($phitmp)) {
   label = 3;
  }
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = $3;
  _lily_IOError($0,14406,$vararg_buffer);
 }
 $14 = (_fopen($2,$3)|0);
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $18 = (_lily_new_file($14,$3)|0);
  _lily_return_file($0,$18);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$4>>2]|0;
 (_strerror_r($16,$1,128)|0);
 $17 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $17;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $1;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $2;
 _lily_IOError($0,14431,$vararg_buffer1);
 $18 = (_lily_new_file($14,$3)|0);
 _lily_return_file($0,$18);
 STACKTOP = sp;return;
}
function _lily_builtin_File_print($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_builtin_File_write($0);
 $1 = (_lily_arg_file_raw($0,0)|0);
 (_fputc(10,$1)|0);
 _lily_return_unit($0);
 return;
}
function _lily_builtin_File_write($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 _lily_file_ensure_writeable($0,$1);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(3);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  (_fputs($8,$10)|0);
  _lily_return_unit($0);
  return;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_mb_flush($12);
  _lily_mb_add_value($12,$0,$2);
  $13 = (_lily_mb_get($12)|0);
  $14 = ((($1)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  (_fputs($13,$15)|0);
  _lily_return_unit($0);
  return;
 }
}
function _lily_builtin_File_read($0) {
 $0 = $0|0;
 var $$$058 = 0, $$056 = 0, $$057 = 0, $$058 = 0, $$060 = 0, $$061 = 0, $$063 = 0, $$1 = 0, $$162 = 0, $$164 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond65 = 0, $or$cond66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 _lily_file_ensure_readable($0,$1);
 $2 = (_lily_arg_count($0)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = (_lily_arg_integer($0,1)|0);
  $5 = tempRet0;
  $$058 = $4;
 } else {
  $$058 = -1;
 }
 $6 = ($$058|0)<(-1);
 $$$058 = $6 ? -1 : $$058;
 $7 = (_lily_file_raw($1)|0);
 $8 = (_lily_malloc(64)|0);
 $9 = ($$$058|0)==(-1);
 $10 = ($$$058|0)!=(-1);
 $$057 = 32;$$060 = 0;$$061 = $8;$$063 = 64;
 while(1) {
  $11 = ($$$058|0)>($$057|0);
  $or$cond65 = $9 | $11;
  $$056 = $or$cond65 ? $$057 : $$$058;
  $12 = (($$061) + ($$060)|0);
  $13 = (_fread($12,1,$$056,$7)|0);
  $14 = (($13) + ($$060))|0;
  $15 = ($14>>>0)<($$063>>>0);
  $16 = $$063 << 1;
  if ($15) {
   $$1 = $$057;$$162 = $$061;$$164 = $$063;
  } else {
   $17 = (_lily_realloc($$061,$16)|0);
   $$1 = $$063;$$162 = $17;$$164 = $16;
  }
  $18 = ($13|0)<($$056|0);
  $19 = ($14|0)>=($$$058|0);
  $or$cond = $10 & $19;
  $or$cond66 = $18 | $or$cond;
  if ($or$cond66) {
   break;
  } else {
   $$057 = $$1;$$060 = $14;$$061 = $$162;$$063 = $$164;
  }
 }
 $20 = (($$162) + ($14)|0);
 HEAP8[$20>>0] = 0;
 $21 = (_lily_new_bytestring_take($$162)|0);
 _lily_return_bytestring($0,$21);
 return;
}
function _lily_builtin_File_read_line($0) {
 $0 = $0|0;
 var $$0 = 0, $$036 = 0, $$1 = 0, $$137 = 0, $$2 = 0, $$238 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $1 = sp;
 $2 = (_lily_arg_file($0,0)|0);
 $3 = (_lily_get_msgbuf($0)|0);
 _lily_file_ensure_readable($0,$2);
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = 0;$$036 = 0;
 while(1) {
  $6 = (_fgetc($5)|0);
  $7 = ($6|0)==(-1);
  if ($7) {
   $$2 = $$0;$$238 = $$036;
   break;
  }
  $8 = ($$0|0)==(128);
  if ($8) {
   $9 = (($$0) + ($$036))|0;
   _lily_mb_add_slice($3,$1,0,128);
   $$1 = 0;$$137 = $9;
  } else {
   $$1 = $$0;$$137 = $$036;
  }
  $10 = $6&255;
  $11 = (($1) + ($$1)|0);
  HEAP8[$11>>0] = $10;
  $12 = (($$1) + 1)|0;
  $13 = ($6|0)==(10);
  if ($13) {
   $$2 = $12;$$238 = $$137;
   break;
  } else {
   $$0 = $12;$$036 = $$137;
  }
 }
 $14 = ($$2|0)==(0);
 if ($14) {
  $$3 = $$238;
 } else {
  $15 = (($$2) + ($$238))|0;
  _lily_mb_add_slice($3,$1,0,$$2);
  $$3 = $15;
 }
 $16 = (_lily_mb_get($3)|0);
 $17 = (_lily_new_bytestring_sized($16,$$3)|0);
 _lily_return_bytestring($0,$17);
 STACKTOP = sp;return;
}
function _lily_builtin_Function_doc($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_function($0,0)|0);
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $$ = $4 ? 19155 : $3;
 $5 = (_lily_new_string($$)|0);
 _lily_return_string($0,$5);
 return;
}
function _lily_destroy_hash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _destroy_hash_elems($2);
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_free($4);
 _lily_free($2);
 return;
}
function _destroy_hash_elems($0) {
 $0 = $0|0;
 var $$015 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 24|0);
 $$015 = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($$015<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($7)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_deref($10);
   $11 = HEAP32[$9>>2]|0;
   _lily_free($11);
   $12 = ((($7)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   _lily_deref($13);
   $14 = HEAP32[$12>>2]|0;
   _lily_free($14);
   _lily_free($7);
   $15 = HEAP32[$4>>2]|0;
   $16 = (($15) + ($$015<<2)|0);
   HEAP32[$16>>2] = 0;
  }
  $17 = (($$015) + 1)|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $$015 = $17;
  } else {
   break;
  }
 }
 return;
}
function _lily_builtin_Hash_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_RuntimeError($0,14450,$vararg_buffer);
 }
 _destroy_hash_elems($1);
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _lily_builtin_Hash_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (_lily_arg_hash($0,0)|0);
 _remove_key_check($0,$3);
 $4 = (_lily_arg_value($0,1)|0);
 HEAP32[$1>>2] = $4;
 $5 = (_lily_hash_delete($3,$1,$2)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  _lily_return_unit($0);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 524288;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _lily_deref($7);
 }
 $11 = HEAP32[$1>>2]|0;
 _lily_free($11);
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 524288;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _lily_deref($12);
 }
 $16 = HEAP32[$2>>2]|0;
 _lily_free($16);
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _remove_key_check($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 _lily_RuntimeError($0,14450,$vararg_buffer);
 STACKTOP = sp;return;
}
function _lily_builtin_Hash_each_pair($0) {
 $0 = $0|0;
 var $$027$reg2mem54$0 = 0, $$reg2mem31$0 = 0, $$reg2mem31$0$phi = 0, $$reg2mem35$0 = 0, $$reg2mem35$0$phi = 0, $$reg2mem56$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond58 = 0, $cond59 = 0, $cond60 = 0, $cond61 = 0, $cond62 = 0, $cond63 = 0, $cond64 = 0, $cond65 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $1 = (invoke_iii(2,($0|0),0)|0);
 $2 = __THREW__; __THREW__ = 0;
 if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = (threwValue); } else { $3 = -1; };
 $4 = tempRet0;
 $cond = ($3|0)==(1);
 if ($cond) {
  $$reg2mem31$0 = 0;$$reg2mem35$0 = 0;$$reg2mem56$0 = $4;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(3,($0|0),1)|0);
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
  $8 = tempRet0;
  $cond58 = ($7|0)==(1);
  if ($cond58) {
   $$reg2mem31$0 = 0;$$reg2mem35$0 = 0;$$reg2mem56$0 = $8;
  } else {
   __THREW__ = 0;
   invoke_vii(23,($0|0),($5|0));
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = (threwValue); } else { $10 = -1; };
   $11 = tempRet0;
   $cond59 = ($10|0)==(1);
   if ($cond59) {
    $$reg2mem31$0 = 0;$$reg2mem35$0 = 0;$$reg2mem56$0 = $11;
   } else {
    $12 = ((($1)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ((($0)) + 88|0);
    $16 = HEAP32[$15>>2]|0;
    __THREW__ = 0;
    $17 = (invoke_ii(2,($16|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
    $20 = tempRet0;
    $cond60 = ($19|0)==(1);
    if ($cond60) {
     $$reg2mem31$0 = $15;$$reg2mem35$0 = $12;$$reg2mem56$0 = $20;
    } else {
     $21 = ((($17)) + 8|0);
     _setjmpTable = _saveSetjmp($21,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $22 = __THREW__; __THREW__ = 0;
     if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = (threwValue); } else { $23 = -1; };
     $24 = tempRet0;
     $cond61 = ($23|0)==(1);
     if ($cond61) {
      $$reg2mem31$0 = $15;$$reg2mem35$0 = $12;$$reg2mem56$0 = $24;
     } else {
      $$reg2mem31$0 = $15;$$reg2mem35$0 = $12;$$reg2mem56$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $25 = ($$reg2mem56$0|0)==(0);
  if (!($25)) {
   $56 = HEAP32[$$reg2mem35$0>>2]|0;
   $57 = (($56) + -1)|0;
   HEAP32[$$reg2mem35$0>>2] = $57;
   $58 = HEAP32[$$reg2mem31$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($58|0));
   $59 = __THREW__; __THREW__ = 0;
   if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
   $61 = tempRet0;
   $$reg2mem35$0$phi = $$reg2mem35$0;$$reg2mem31$0$phi = $$reg2mem31$0;$$reg2mem56$0 = $61;$$reg2mem35$0 = $$reg2mem35$0$phi;$$reg2mem31$0 = $$reg2mem31$0$phi;
   continue;
  }
  $26 = ((($1)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)>(0);
  if ($28) {
   $29 = ((($1)) + 24|0);
   $$027$reg2mem54$0 = 0;
   while(1) {
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + ($$027$reg2mem54$0<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = ((($32)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     invoke_vii(24,($0|0),($35|0));
     $36 = __THREW__; __THREW__ = 0;
     if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = (threwValue); } else { $37 = -1; };
     $38 = tempRet0;
     $cond63 = ($37|0)==(1);
     if ($cond63) {
      $$reg2mem35$0$phi = $$reg2mem35$0;$$reg2mem31$0$phi = $$reg2mem31$0;$$reg2mem56$0 = $38;$$reg2mem35$0 = $$reg2mem35$0$phi;$$reg2mem31$0 = $$reg2mem31$0$phi;
      continue L7;
     }
     $39 = ((($32)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     invoke_vii(24,($0|0),($40|0));
     $41 = __THREW__; __THREW__ = 0;
     if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = (threwValue); } else { $42 = -1; };
     $43 = tempRet0;
     $cond64 = ($42|0)==(1);
     if ($cond64) {
      $$reg2mem35$0$phi = $$reg2mem35$0;$$reg2mem31$0$phi = $$reg2mem31$0;$$reg2mem56$0 = $43;$$reg2mem35$0 = $$reg2mem35$0$phi;$$reg2mem31$0 = $$reg2mem31$0$phi;
      continue L7;
     }
     __THREW__ = 0;
     invoke_vii(25,($0|0),2);
     $44 = __THREW__; __THREW__ = 0;
     if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
     $46 = tempRet0;
     $cond65 = ($45|0)==(1);
     if ($cond65) {
      $$reg2mem35$0$phi = $$reg2mem35$0;$$reg2mem31$0$phi = $$reg2mem31$0;$$reg2mem56$0 = $46;$$reg2mem35$0 = $$reg2mem35$0$phi;$$reg2mem31$0 = $$reg2mem31$0$phi;
      continue L7;
     }
    }
    $47 = (($$027$reg2mem54$0) + 1)|0;
    $48 = HEAP32[$26>>2]|0;
    $49 = ($47|0)<($48|0);
    if ($49) {
     $$027$reg2mem54$0 = $47;
    } else {
     break;
    }
   }
  }
  $50 = HEAP32[$$reg2mem35$0>>2]|0;
  $51 = (($50) + -1)|0;
  HEAP32[$$reg2mem35$0>>2] = $51;
  $52 = HEAP32[$$reg2mem31$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(5,($52|0));
  $53 = __THREW__; __THREW__ = 0;
  if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
  $55 = tempRet0;
  $cond62 = ($54|0)==(1);
  if ($cond62) {
   $$reg2mem35$0$phi = $$reg2mem35$0;$$reg2mem31$0$phi = $$reg2mem31$0;$$reg2mem56$0 = $55;$$reg2mem35$0 = $$reg2mem35$0$phi;$$reg2mem31$0 = $$reg2mem31$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _lily_builtin_Hash_get($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_arg_value($0,2)|0);
 $4 = (_lily_hash_find_value($1,$2)|0);
 $5 = ($4|0)==(0|0);
 $$ = $5 ? $3 : $4;
 _lily_return_value($0,$$);
 return;
}
function _lily_builtin_Hash_has_key($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_hash_find_value($1,$2)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 _lily_return_boolean($0,$5);
 return;
}
function _lily_builtin_Hash_keys($0) {
 $0 = $0|0;
 var $$02223 = 0, $$024 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_new_list($3)|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  _lily_return_list($0,$4);
  return;
 }
 $8 = ((($1)) + 24|0);
 $9 = ((($4)) + 16|0);
 $$02223 = 0;$$024 = 0;
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + ($$024<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$1 = $$02223;
  } else {
   $14 = HEAP32[$9>>2]|0;
   $15 = (($14) + ($$02223<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($12)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   _lily_value_assign($16,$18);
   $19 = (($$02223) + 1)|0;
   $$1 = $19;
  }
  $20 = (($$024) + 1)|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $$02223 = $$1;$$024 = $20;
  } else {
   break;
  }
 }
 _lily_return_list($0,$4);
 return;
}
function _lily_builtin_Hash_map_values($0) {
 $0 = $0|0;
 var $$0$lcssa$reg2mem75$0 = 0, $$04142$reg2mem79$0 = 0, $$043$reg2mem81$0 = 0, $$1$reg2mem77$0 = 0, $$reg2mem51$0 = 0, $$reg2mem51$0$phi = 0, $$reg2mem55$0 = 0, $$reg2mem55$0$phi = 0, $$reg2mem83$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $cond = 0, $cond85 = 0, $cond86 = 0, $cond87 = 0, $cond88 = 0, $cond89 = 0, $cond90 = 0, $cond91 = 0, $cond92 = 0, $cond93 = 0, $cond94 = 0, $cond95 = 0;
 var $cond96 = 0, $cond97 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $1 = (invoke_iii(2,($0|0),0)|0);
 $2 = __THREW__; __THREW__ = 0;
 if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = (threwValue); } else { $3 = -1; };
 $4 = tempRet0;
 $cond = ($3|0)==(1);
 if ($cond) {
  $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem83$0 = $4;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(3,($0|0),1)|0);
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
  $8 = tempRet0;
  $cond85 = ($7|0)==(1);
  if ($cond85) {
   $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem83$0 = $8;
  } else {
   __THREW__ = 0;
   invoke_vii(23,($0|0),($5|0));
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = (threwValue); } else { $10 = -1; };
   $11 = tempRet0;
   $cond86 = ($10|0)==(1);
   if ($cond86) {
    $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem83$0 = $11;
   } else {
    $12 = ((($1)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ((($0)) + 88|0);
    $16 = HEAP32[$15>>2]|0;
    __THREW__ = 0;
    $17 = (invoke_ii(2,($16|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
    $20 = tempRet0;
    $cond87 = ($19|0)==(1);
    if ($cond87) {
     $$reg2mem51$0 = $15;$$reg2mem55$0 = $12;$$reg2mem83$0 = $20;
    } else {
     $21 = ((($17)) + 8|0);
     _setjmpTable = _saveSetjmp($21,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $22 = __THREW__; __THREW__ = 0;
     if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = (threwValue); } else { $23 = -1; };
     $24 = tempRet0;
     $cond88 = ($23|0)==(1);
     if ($cond88) {
      $$reg2mem51$0 = $15;$$reg2mem55$0 = $12;$$reg2mem83$0 = $24;
     } else {
      $$reg2mem51$0 = $15;$$reg2mem55$0 = $12;$$reg2mem83$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $25 = ($$reg2mem83$0|0)==(0);
  if (!($25)) {
   $74 = HEAP32[$$reg2mem55$0>>2]|0;
   $75 = (($74) + -1)|0;
   HEAP32[$$reg2mem55$0>>2] = $75;
   $76 = HEAP32[$$reg2mem51$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($76|0));
   $77 = __THREW__; __THREW__ = 0;
   if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = (threwValue); } else { $78 = -1; };
   $79 = tempRet0;
   $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $79;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  $26 = ((($1)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)>(0);
  if ($28) {
   $29 = ((($1)) + 24|0);
   $$04142$reg2mem79$0 = 0;$$043$reg2mem81$0 = 0;
   while(1) {
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + ($$04142$reg2mem79$0<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $$1$reg2mem77$0 = $$043$reg2mem81$0;
    } else {
     $34 = ((($32)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     invoke_vii(24,($0|0),($35|0));
     $36 = __THREW__; __THREW__ = 0;
     if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = (threwValue); } else { $37 = -1; };
     $38 = tempRet0;
     $cond93 = ($37|0)==(1);
     if ($cond93) {
      $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $38;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     $39 = ((($32)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     invoke_vii(24,($0|0),($40|0));
     $41 = __THREW__; __THREW__ = 0;
     if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = (threwValue); } else { $42 = -1; };
     $43 = tempRet0;
     $cond94 = ($42|0)==(1);
     if ($cond94) {
      $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $43;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     __THREW__ = 0;
     invoke_vii(25,($0|0),1);
     $44 = __THREW__; __THREW__ = 0;
     if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
     $46 = tempRet0;
     $cond95 = ($45|0)==(1);
     if ($cond95) {
      $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $46;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     __THREW__ = 0;
     $47 = (invoke_ii(3,($0|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = (threwValue); } else { $49 = -1; };
     $50 = tempRet0;
     $cond96 = ($49|0)==(1);
     if ($cond96) {
      $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $50;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     __THREW__ = 0;
     invoke_vii(24,($0|0),($47|0));
     $51 = __THREW__; __THREW__ = 0;
     if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } tempRet0 = (threwValue); } else { $52 = -1; };
     $53 = tempRet0;
     $cond97 = ($52|0)==(1);
     if ($cond97) {
      $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $53;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     $54 = (($$043$reg2mem81$0) + 1)|0;
     $$1$reg2mem77$0 = $54;
    }
    $55 = (($$04142$reg2mem79$0) + 1)|0;
    $56 = HEAP32[$26>>2]|0;
    $57 = ($55|0)<($56|0);
    if ($57) {
     $$04142$reg2mem79$0 = $55;$$043$reg2mem81$0 = $$1$reg2mem77$0;
    } else {
     $$0$lcssa$reg2mem75$0 = $$1$reg2mem77$0;
     break;
    }
   }
  } else {
   $$0$lcssa$reg2mem75$0 = 0;
  }
  __THREW__ = 0;
  $58 = (invoke_iii(4,($1|0),($$0$lcssa$reg2mem75$0|0))|0);
  $59 = __THREW__; __THREW__ = 0;
  if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
  $61 = tempRet0;
  $cond89 = ($60|0)==(1);
  if ($cond89) {
   $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $61;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(2,($0|0),($58|0),($$0$lcssa$reg2mem75$0|0));
  $62 = __THREW__; __THREW__ = 0;
  if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = (threwValue); } else { $63 = -1; };
  $64 = tempRet0;
  $cond90 = ($63|0)==(1);
  if ($cond90) {
   $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $64;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  $65 = HEAP32[$$reg2mem55$0>>2]|0;
  $66 = (($65) + -1)|0;
  HEAP32[$$reg2mem55$0>>2] = $66;
  $67 = HEAP32[$$reg2mem51$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(5,($67|0));
  $68 = __THREW__; __THREW__ = 0;
  if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = (threwValue); } else { $69 = -1; };
  $70 = tempRet0;
  $cond91 = ($69|0)==(1);
  if ($cond91) {
   $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $70;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(26,($0|0),($58|0));
  $71 = __THREW__; __THREW__ = 0;
  if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
  $73 = tempRet0;
  $cond92 = ($72|0)==(1);
  if ($cond92) {
   $$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem83$0 = $73;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _build_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if ($3) {
  $$01 = 0;
 } else {
  return;
 }
 while(1) {
  $4 = (_lily_result_pop($0)|0);
  $5 = (_lily_result_pop($0)|0);
  _lily_hash_insert_value($1,$5,$4);
  $6 = (($$01) + 1)|0;
  $exitcond = ($6|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $6;
  }
 }
 return;
}
function _lily_builtin_Hash_merge($0) {
 $0 = $0|0;
 var $$04344 = 0, $$049 = 0, $$145 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_new_hash_like_sized($1,$3)|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = ((($1)) + 24|0);
  $$049 = 0;
  while(1) {
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($$049<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = ((($11)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($11)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    _lily_hash_insert_value($4,$14,$16);
   }
   $17 = (($$049) + 1)|0;
   $18 = HEAP32[$5>>2]|0;
   $19 = ($17|0)<($18|0);
   if ($19) {
    $$049 = $17;
   } else {
    break;
   }
  }
 }
 $20 = (_lily_arg_list($0,1)|0);
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  _lily_return_hash($0,$4);
  return;
 }
 $24 = ((($20)) + 16|0);
 $$145 = 0;
 while(1) {
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($$145<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)>(0);
  if ($32) {
   $33 = ((($29)) + 24|0);
   $$04344 = 0;
   while(1) {
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($$04344<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = ((($36)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ((($36)) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     _lily_hash_insert_value($4,$39,$41);
    }
    $42 = (($$04344) + 1)|0;
    $43 = HEAP32[$30>>2]|0;
    $44 = ($42|0)<($43|0);
    if ($44) {
     $$04344 = $42;
    } else {
     break;
    }
   }
  }
  $45 = (($$145) + 1)|0;
  $46 = HEAP32[$21>>2]|0;
  $47 = ($45>>>0)<($46>>>0);
  if ($47) {
   $$145 = $45;
  } else {
   break;
  }
 }
 _lily_return_hash($0,$4);
 return;
}
function _lily_builtin_Hash_reject($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($0,0);
 return;
}
function _hash_select_reject_common($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa$reg2mem89$0 = 0, $$04748$reg2mem93$0 = 0, $$049$reg2mem95$0 = 0, $$1$reg2mem91$0 = 0, $$reg2mem65$0 = 0, $$reg2mem65$0$phi = 0, $$reg2mem69$0 = 0, $$reg2mem69$0$phi = 0, $$reg2mem97$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $cond = 0, $cond100 = 0, $cond101 = 0, $cond102 = 0, $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $cond110 = 0, $cond111 = 0, $cond112 = 0, $cond113 = 0, $cond114 = 0, $cond99 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $2 = (invoke_iii(2,($0|0),0)|0);
 $3 = __THREW__; __THREW__ = 0;
 if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = (threwValue); } else { $4 = -1; };
 $5 = tempRet0;
 $cond = ($4|0)==(1);
 if ($cond) {
  $$reg2mem65$0 = 0;$$reg2mem69$0 = 0;$$reg2mem97$0 = $5;
 } else {
  __THREW__ = 0;
  $6 = (invoke_iii(3,($0|0),1)|0);
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond99 = ($8|0)==(1);
  if ($cond99) {
   $$reg2mem65$0 = 0;$$reg2mem69$0 = 0;$$reg2mem97$0 = $9;
  } else {
   __THREW__ = 0;
   invoke_vii(23,($0|0),($6|0));
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
   $12 = tempRet0;
   $cond100 = ($11|0)==(1);
   if ($cond100) {
    $$reg2mem65$0 = 0;$$reg2mem69$0 = 0;$$reg2mem97$0 = $12;
   } else {
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($0)) + 88|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii(2,($17|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
    $21 = tempRet0;
    $cond101 = ($20|0)==(1);
    if ($cond101) {
     $$reg2mem65$0 = $16;$$reg2mem69$0 = $13;$$reg2mem97$0 = $21;
    } else {
     $22 = ((($18)) + 8|0);
     _setjmpTable = _saveSetjmp($22,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
     $25 = tempRet0;
     $cond102 = ($24|0)==(1);
     if ($cond102) {
      $$reg2mem65$0 = $16;$$reg2mem69$0 = $13;$$reg2mem97$0 = $25;
     } else {
      $$reg2mem65$0 = $16;$$reg2mem69$0 = $13;$$reg2mem97$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $26 = ($$reg2mem97$0|0)==(0);
  if (!($26)) {
   $87 = HEAP32[$$reg2mem69$0>>2]|0;
   $88 = (($87) + -1)|0;
   HEAP32[$$reg2mem69$0>>2] = $88;
   $89 = HEAP32[$$reg2mem65$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($89|0));
   $90 = __THREW__; __THREW__ = 0;
   if ((($90|0) != 0) & ((threwValue|0) != 0)) { $91 = _testSetjmp(HEAP32[$90>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($91|0) == 0) { _longjmp($90|0, threwValue|0); } tempRet0 = (threwValue); } else { $91 = -1; };
   $92 = tempRet0;
   $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $92;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
   continue;
  }
  $27 = ((($2)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(0);
  if ($29) {
   $30 = ((($2)) + 24|0);
   $$04748$reg2mem93$0 = 0;$$049$reg2mem95$0 = 0;
   while(1) {
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($$04748$reg2mem93$0<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      $$1$reg2mem91$0 = $$049$reg2mem95$0;
     } else {
      $35 = ((($33)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      invoke_vii(24,($0|0),($36|0));
      $37 = __THREW__; __THREW__ = 0;
      if ((($37|0) != 0) & ((threwValue|0) != 0)) { $38 = _testSetjmp(HEAP32[$37>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($38|0) == 0) { _longjmp($37|0, threwValue|0); } tempRet0 = (threwValue); } else { $38 = -1; };
      $39 = tempRet0;
      $cond107 = ($38|0)==(1);
      if ($cond107) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $39;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      $40 = ((($33)) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      invoke_vii(24,($0|0),($41|0));
      $42 = __THREW__; __THREW__ = 0;
      if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = (threwValue); } else { $43 = -1; };
      $44 = tempRet0;
      $cond108 = ($43|0)==(1);
      if ($cond108) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $44;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      $45 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      invoke_vii(24,($0|0),($45|0));
      $46 = __THREW__; __THREW__ = 0;
      if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } tempRet0 = (threwValue); } else { $47 = -1; };
      $48 = tempRet0;
      $cond109 = ($47|0)==(1);
      if ($cond109) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $48;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      $49 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      invoke_vii(24,($0|0),($49|0));
      $50 = __THREW__; __THREW__ = 0;
      if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = (threwValue); } else { $51 = -1; };
      $52 = tempRet0;
      $cond110 = ($51|0)==(1);
      if ($cond110) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $52;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      __THREW__ = 0;
      invoke_vii(25,($0|0),2);
      $53 = __THREW__; __THREW__ = 0;
      if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
      $55 = tempRet0;
      $cond111 = ($54|0)==(1);
      if ($cond111) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $55;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      __THREW__ = 0;
      $56 = (invoke_ii(4,($0|0))|0);
      $57 = __THREW__; __THREW__ = 0;
      if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = (threwValue); } else { $58 = -1; };
      $59 = tempRet0;
      $cond112 = ($58|0)==(1);
      if ($cond112) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $59;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      $60 = ($56|0)==($1|0);
      if ($60) {
       $67 = (($$049$reg2mem95$0) + 1)|0;
       $$1$reg2mem91$0 = $67;
       break;
      }
      __THREW__ = 0;
      invoke_vi(7,($0|0));
      $61 = __THREW__; __THREW__ = 0;
      if ((($61|0) != 0) & ((threwValue|0) != 0)) { $62 = _testSetjmp(HEAP32[$61>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($62|0) == 0) { _longjmp($61|0, threwValue|0); } tempRet0 = (threwValue); } else { $62 = -1; };
      $63 = tempRet0;
      $cond113 = ($62|0)==(1);
      if ($cond113) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $63;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      __THREW__ = 0;
      invoke_vi(7,($0|0));
      $64 = __THREW__; __THREW__ = 0;
      if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = (threwValue); } else { $65 = -1; };
      $66 = tempRet0;
      $cond114 = ($65|0)==(1);
      if ($cond114) {
       $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $66;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
       continue L7;
      }
      $$1$reg2mem91$0 = $$049$reg2mem95$0;
     }
    } while(0);
    $68 = (($$04748$reg2mem93$0) + 1)|0;
    $69 = HEAP32[$27>>2]|0;
    $70 = ($68|0)<($69|0);
    if ($70) {
     $$04748$reg2mem93$0 = $68;$$049$reg2mem95$0 = $$1$reg2mem91$0;
    } else {
     $$0$lcssa$reg2mem89$0 = $$1$reg2mem91$0;
     break;
    }
   }
  } else {
   $$0$lcssa$reg2mem89$0 = 0;
  }
  __THREW__ = 0;
  $71 = (invoke_iii(4,($2|0),($$0$lcssa$reg2mem89$0|0))|0);
  $72 = __THREW__; __THREW__ = 0;
  if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = (threwValue); } else { $73 = -1; };
  $74 = tempRet0;
  $cond103 = ($73|0)==(1);
  if ($cond103) {
   $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $74;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(2,($0|0),($71|0),($$0$lcssa$reg2mem89$0|0));
  $75 = __THREW__; __THREW__ = 0;
  if ((($75|0) != 0) & ((threwValue|0) != 0)) { $76 = _testSetjmp(HEAP32[$75>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($76|0) == 0) { _longjmp($75|0, threwValue|0); } tempRet0 = (threwValue); } else { $76 = -1; };
  $77 = tempRet0;
  $cond104 = ($76|0)==(1);
  if ($cond104) {
   $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $77;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
   continue;
  }
  $78 = HEAP32[$$reg2mem69$0>>2]|0;
  $79 = (($78) + -1)|0;
  HEAP32[$$reg2mem69$0>>2] = $79;
  $80 = HEAP32[$$reg2mem65$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(5,($80|0));
  $81 = __THREW__; __THREW__ = 0;
  if ((($81|0) != 0) & ((threwValue|0) != 0)) { $82 = _testSetjmp(HEAP32[$81>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($82|0) == 0) { _longjmp($81|0, threwValue|0); } tempRet0 = (threwValue); } else { $82 = -1; };
  $83 = tempRet0;
  $cond105 = ($82|0)==(1);
  if ($cond105) {
   $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $83;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(26,($0|0),($71|0));
  $84 = __THREW__; __THREW__ = 0;
  if ((($84|0) != 0) & ((threwValue|0) != 0)) { $85 = _testSetjmp(HEAP32[$84>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($85|0) == 0) { _longjmp($84|0, threwValue|0); } tempRet0 = (threwValue); } else { $85 = -1; };
  $86 = tempRet0;
  $cond106 = ($85|0)==(1);
  if ($cond106) {
   $$reg2mem69$0$phi = $$reg2mem69$0;$$reg2mem65$0$phi = $$reg2mem65$0;$$reg2mem97$0 = $86;$$reg2mem69$0 = $$reg2mem69$0$phi;$$reg2mem65$0 = $$reg2mem65$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _lily_builtin_Hash_select($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($0,1);
 return;
}
function _lily_builtin_Hash_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 _lily_return_integer($0,$3,$5);
 return;
}
function _lily_builtin_IndexError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,24);
 return;
}
function _lily_builtin_Integer_to_bool($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = ($1|0)!=(0);
 $4 = ($2|0)!=(0);
 $5 = $3 | $4;
 $6 = $5&1;
 _lily_return_boolean($0,$6);
 return;
}
function _lily_builtin_Integer_to_byte($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = $1&255;
 _lily_return_byte($0,$3);
 return;
}
function _lily_builtin_Integer_to_d($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = (+($1>>>0)) + (4294967296.0*(+($2|0)));
 _lily_return_double($0,$3);
 return;
}
function _lily_builtin_Integer_to_s($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = (_lily_arg_integer($0,0)|0);
 $3 = tempRet0;
 $4 = $vararg_buffer;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 (_snprintf($1,32,14496,$vararg_buffer)|0);
 $8 = (_lily_new_string($1)|0);
 _lily_return_string($0,$8);
 STACKTOP = sp;return;
}
function _lily_builtin_IOError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,20);
 return;
}
function _lily_builtin_KeyError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,21);
 return;
}
function _lily_builtin_List_clear($0) {
 $0 = $0|0;
 var $$015 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
 } else {
  $5 = ((($1)) + 16|0);
  $$015 = 0;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$015<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _lily_deref($8);
   $9 = HEAP32[$5>>2]|0;
   $10 = (($9) + ($$015<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_free($11);
   $12 = (($$015) + 1)|0;
   $13 = HEAP32[$2>>2]|0;
   $14 = ($12>>>0)<($13>>>0);
   if ($14) {
    $$015 = $12;
   } else {
    $$lcssa = $13;
    break;
   }
  }
 }
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($$lcssa))|0;
 HEAP32[$15>>2] = $17;
 HEAP32[$2>>2] = 0;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_List_count($0) {
 $0 = $0|0;
 var $$$017 = 0, $$01718 = 0, $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $18 = 0;$19 = 0;
  _lily_return_integer($0,$18,$19);
  return;
 }
 $6 = ((($1)) + 16|0);
 $$01718 = 0;$$019 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($$019<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_push_value($0,$9);
  _lily_call_exec_prepared($0,1);
  $10 = (_lily_result_boolean($0)|0);
  $11 = ($10|0)==(1);
  $12 = $11&1;
  $$$017 = (($12) + ($$01718))|0;
  $13 = (($$019) + 1)|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   $$01718 = $$$017;$$019 = $13;
  } else {
   break;
  }
 }
 $16 = ($$$017|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = $$$017;$19 = $17;
 _lily_return_integer($0,$18,$19);
 return;
}
function _lily_builtin_List_delete_at($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_integer($0,1)|0);
 $3 = tempRet0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  _lily_IndexError($0,14501,$vararg_buffer);
 }
 $7 = (_get_relative_index($0,$1,$2,$3)|0);
 $8 = tempRet0;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  _make_extra_space_in_list($1);
 }
 $12 = ((($1)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($7<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_deref($15);
 _lily_free($15);
 $16 = HEAP32[$4>>2]|0;
 $17 = ($16|0)==($7|0);
 $18 = (0)==($8|0);
 $19 = $17 & $18;
 if ($19) {
  $27 = HEAP32[$4>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$4>>2] = $28;
  $29 = HEAP32[$9>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$9>>2] = $30;
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$12>>2]|0;
 $21 = (($20) + ($7<<2)|0);
 $22 = ((($21)) + 4|0);
 $23 = (_i64Subtract(($16|0),0,($7|0),($8|0))|0);
 $24 = tempRet0;
 $25 = (_bitshift64Shl(($23|0),($24|0),2)|0);
 $26 = tempRet0;
 _memmove(($21|0),($22|0),($25|0))|0;
 $27 = HEAP32[$4>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[$4>>2] = $28;
 $29 = HEAP32[$9>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$9>>2] = $30;
 STACKTOP = sp;return;
}
function _get_relative_index($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = (_i64Subtract(0,0,($2|0),($3|0))|0);
  $6 = tempRet0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (0)<($6>>>0);
  $10 = ($8>>>0)<($5>>>0);
  $11 = (0)==($6|0);
  $12 = $11 & $10;
  $13 = $9 | $12;
  if ($13) {
   $14 = (_i64Subtract(0,0,($8|0),0)|0);
   $15 = tempRet0;
   $16 = $vararg_buffer;
   $17 = $16;
   HEAP32[$17>>2] = $2;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = $3;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   $20 = $vararg_ptr1;
   $21 = $20;
   HEAP32[$21>>2] = $14;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $15;
   _lily_IndexError($0,14535,$vararg_buffer);
  }
  $24 = HEAP32[$7>>2]|0;
  $25 = (_i64Add(($24|0),0,($2|0),($3|0))|0);
  $26 = tempRet0;
  $38 = $26;$39 = $25;
  tempRet0 = ($38);
  STACKTOP = sp;return ($39|0);
 } else {
  $27 = ((($1)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (0)<($3|0);
  $30 = ($28>>>0)<($2>>>0);
  $31 = (0)==($3|0);
  $32 = $31 & $30;
  $33 = $29 | $32;
  if (!($33)) {
   $38 = $3;$39 = $2;
   tempRet0 = ($38);
   STACKTOP = sp;return ($39|0);
  }
  $34 = $vararg_buffer2;
  $35 = $34;
  HEAP32[$35>>2] = $2;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $28;
  _lily_IndexError($0,14580,$vararg_buffer2);
  $38 = $3;$39 = $2;
  tempRet0 = ($38);
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _make_extra_space_in_list($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8)|0;
 $4 = $3 >>> 2;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($2))|0;
 $8 = $7 << 2;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$5>>2] = $9;
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = $4;
 return;
}
function _lily_builtin_List_each($0) {
 $0 = $0|0;
 var $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _lily_return_list($0,$1);
  return;
 }
 $6 = ((($1)) + 16|0);
 $$013 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($$013<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_push_value($0,$9);
  _lily_call_exec_prepared($0,1);
  $10 = (($$013) + 1)|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $$013 = $10;
  } else {
   break;
  }
 }
 _lily_return_list($0,$1);
 return;
}
function _lily_builtin_List_each_index($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _lily_return_list($0,$1);
  return;
 } else {
  $$012 = 0;
 }
 while(1) {
  $6 = ($$012|0)<(0);
  $7 = $6 << 31 >> 31;
  _lily_push_integer($0,$$012,$7);
  _lily_call_exec_prepared($0,1);
  $8 = (($$012) + 1)|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if ($10) {
   $$012 = $8;
  } else {
   break;
  }
 }
 _lily_return_list($0,$1);
 return;
}
function _lily_builtin_List_fill($0) {
 $0 = $0|0;
 var $$020 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = ($1|0)<(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_ValueError($0,14625,$vararg_buffer);
 }
 $4 = (_lily_arg_value($0,1)|0);
 $5 = (_lily_new_list($1)|0);
 $6 = ($1|0)>(0);
 if (!($6)) {
  _lily_return_list($0,$5);
  STACKTOP = sp;return;
 }
 $7 = ((($5)) + 16|0);
 $$020 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($$020<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_value_assign($10,$4);
  $11 = (($$020) + 1)|0;
  $exitcond = ($11|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$020 = $11;
  }
 }
 _lily_return_list($0,$5);
 STACKTOP = sp;return;
}
function _lily_builtin_List_fold($0) {
 $0 = $0|0;
 var $$025 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _lily_return_value($0,$2);
  return;
 }
 $6 = (_lily_arg_function($0,2)|0);
 _lily_call_prepare($0,$6);
 _lily_push_value($0,$2);
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 _lily_push_value($0,$9);
 _lily_call_exec_prepared($0,2);
 $10 = (_lily_result_value($0)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $$lcssa = $10;
 } else {
  $$025 = 0;$13 = $10;
  while(1) {
   _lily_push_value($0,$13);
   $14 = (($$025) + 1)|0;
   $15 = HEAP32[$7>>2]|0;
   $16 = (($15) + ($14<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   _lily_push_value($0,$17);
   _lily_call_exec_prepared($0,2);
   $18 = (_lily_result_value($0)|0);
   $19 = HEAP32[$3>>2]|0;
   $20 = (($19) + -1)|0;
   $21 = ($14|0)==($20|0);
   if ($21) {
    $$lcssa = $18;
    break;
   } else {
    $$025 = $14;$13 = $18;
   }
  }
 }
 _lily_return_value($0,$$lcssa);
 return;
}
function _lily_builtin_List_insert($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_integer($0,1)|0);
 $3 = tempRet0;
 $4 = (_lily_arg_value($0,2)|0);
 $5 = (_get_relative_index($0,$1,$2,$3)|0);
 $6 = tempRet0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  _make_extra_space_in_list($1);
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($5|0);
 $13 = (0)==($6|0);
 $14 = $12 & $13;
 if (!($14)) {
  $15 = ((($1)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($5<<2)|0);
  $18 = ((($17)) + 4|0);
  $19 = (_i64Subtract(($11|0),0,($5|0),($6|0))|0);
  $20 = tempRet0;
  $21 = (_bitshift64Shl(($19|0),($20|0),2)|0);
  $22 = tempRet0;
  _memmove(($18|0),($17|0),($21|0))|0;
 }
 $23 = (_lily_value_copy($4)|0);
 $24 = ((($1)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($5<<2)|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[$10>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$10>>2] = $28;
 $29 = HEAP32[$7>>2]|0;
 $30 = (($29) + -1)|0;
 HEAP32[$7>>2] = $30;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_List_join($0) {
 $0 = $0|0;
 var $$0 = 0, $$03435 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_count($0)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = (_lily_arg_string_raw($0,1)|0);
  $$0 = $4;
 } else {
  $$0 = 19155;
 }
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (($8) + -1)|0;
  $11 = ((($1)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>(0);
  $14 = HEAP32[$12>>2]|0;
  _lily_mb_add_value($6,$0,$14);
  if ($13) {
   $$03435 = 0;
   while(1) {
    _lily_mb_add($6,$$0);
    $15 = (($$03435) + 1)|0;
    $16 = (($12) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    _lily_mb_add_value($6,$0,$17);
    $exitcond = ($15|0)==($10|0);
    if ($exitcond) {
     break;
    } else {
     $$03435 = $15;
    }
   }
  }
 }
 $18 = (_lily_mb_get($6)|0);
 $19 = (_lily_new_string($18)|0);
 _lily_return_string($0,$19);
 return;
}
function _lily_builtin_List_map($0) {
 $0 = $0|0;
 var $$031 = 0, $$130 = 0, $$130$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_lily_new_list(0)|0);
  $29 = $6;
  _lily_return_list($0,$29);
  return;
 }
 $7 = ((($1)) + 16|0);
 $$031 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($$031<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_push_value($0,$10);
  _lily_call_exec_prepared($0,1);
  $11 = (_lily_result_value($0)|0);
  _lily_push_value($0,$11);
  $12 = (($$031) + 1)|0;
  $13 = HEAP32[$3>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $$031 = $12;
  } else {
   break;
  }
 }
 $15 = (_lily_new_list($12)|0);
 $16 = ($$031|0)>(-1);
 if (!($16)) {
  $29 = $15;
  _lily_return_list($0,$29);
  return;
 }
 $17 = ((($0)) + 12|0);
 $18 = ((($15)) + 16|0);
 $19 = ((($0)) + 4|0);
 $$130$in = $12;
 while(1) {
  $$130 = (($$130$in) + -1)|0;
  $20 = HEAP32[$17>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[$17>>2] = $21;
  $22 = HEAP32[$18>>2]|0;
  $23 = (($22) + ($$130<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$19>>2]|0;
  $26 = (($25) + ($21<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  _lily_value_assign($24,$27);
  $28 = ($$130$in|0)>(1);
  if ($28) {
   $$130$in = $$130;
  } else {
   $29 = $15;
   break;
  }
 }
 _lily_return_list($0,$29);
 return;
}
function _lily_builtin_List_pop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_IndexError($0,14663,$vararg_buffer);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_return_value_noref($0,$10);
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free($15);
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + -1)|0;
 HEAP32[$2>>2] = $17;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function _lily_builtin_List_push($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _make_extra_space_in_list($1);
 }
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_value_copy($2)|0);
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7<<2)|0);
 HEAP32[$11>>2] = $8;
 $12 = HEAP32[$6>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = (($14) + -1)|0;
 HEAP32[$3>>2] = $15;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_List_reject($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($0,0);
 return;
}
function _list_select_reject_common($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03538 = 0, $$039 = 0, $$1 = 0, $$237 = 0, $$237$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_list($0,0)|0);
 $3 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$3);
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (_lily_new_list(0)|0);
  $35 = $7;
  _lily_return_list($0,$35);
  return;
 }
 $8 = ((($2)) + 16|0);
 $$03538 = 0;$$039 = 0;
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($$03538<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_push_value($0,$11);
  _lily_call_exec_prepared($0,1);
  $12 = (_lily_result_boolean($0)|0);
  $13 = ($12|0)==($1|0);
  if ($13) {
   $14 = (($$039) + 1)|0;
   $15 = HEAP32[$8>>2]|0;
   $16 = (($15) + ($$03538<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   _lily_push_value($0,$17);
   $$1 = $14;
  } else {
   $$1 = $$039;
  }
  $18 = (($$03538) + 1)|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $$03538 = $18;$$039 = $$1;
  } else {
   break;
  }
 }
 $21 = (_lily_new_list($$1)|0);
 $22 = ($$1|0)>(0);
 if (!($22)) {
  $35 = $21;
  _lily_return_list($0,$35);
  return;
 }
 $23 = ((($0)) + 12|0);
 $24 = ((($21)) + 16|0);
 $25 = ((($0)) + 4|0);
 $$237$in = $$1;
 while(1) {
  $$237 = (($$237$in) + -1)|0;
  $26 = HEAP32[$23>>2]|0;
  $27 = (($26) + -1)|0;
  HEAP32[$23>>2] = $27;
  $28 = HEAP32[$24>>2]|0;
  $29 = (($28) + ($$237<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$25>>2]|0;
  $32 = (($31) + ($27<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  _lily_value_assign($30,$33);
  $34 = ($$237$in|0)>(1);
  if ($34) {
   $$237$in = $$237;
  } else {
   $35 = $21;
   break;
  }
 }
 _lily_return_list($0,$35);
 return;
}
function _lily_builtin_List_select($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($0,1);
 return;
}
function _lily_builtin_List_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_return_integer($0,$3,0);
 return;
}
function _lily_builtin_List_shift($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_IndexError($0,14687,$vararg_buffer);
 }
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 _lily_return_value_noref($0,$7);
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 _lily_free($9);
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(1);
 if (!($11)) {
  $12 = HEAP32[$5>>2]|0;
  $13 = ((($12)) + 4|0);
  $14 = $10 << 2;
  $15 = (($14) + -4)|0;
  _memmove(($12|0),($13|0),($15|0))|0;
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + -1)|0;
 HEAP32[$2>>2] = $17;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function _lily_builtin_List_slice($0) {
 $0 = $0|0;
 var $$$150 = 0, $$04752 = 0, $$048 = 0, $$049 = 0, $$053 = 0, $$1 = 0, $$150 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $or$cond51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_list_num_values($1)|0);
 $3 = (_lily_arg_count($0)|0);
 switch ($3|0) {
 case 3:  {
  $4 = (_lily_arg_integer($0,2)|0);
  $5 = tempRet0;
  $$049 = $4;
  label = 3;
  break;
 }
 case 2:  {
  $$049 = $2;
  label = 3;
  break;
 }
 default: {
  $$048 = 0;$$150 = $2;
 }
 }
 if ((label|0) == 3) {
  $6 = (_lily_arg_integer($0,1)|0);
  $7 = tempRet0;
  $$048 = $6;$$150 = $$049;
 }
 $8 = ($$150|0)<(0);
 $9 = $8 ? $2 : 0;
 $$$150 = (($9) + ($$150))|0;
 $10 = ($$048|0)<(0);
 $11 = $10 ? $2 : 0;
 $$1 = (($11) + ($$048))|0;
 $12 = ($$$150|0)>($2|0);
 $13 = ($$1|0)>($2|0);
 $or$cond = $12 | $13;
 $14 = ($$$150|0)<($$1|0);
 $or$cond51 = $14 | $or$cond;
 if ($or$cond51) {
  $15 = (_lily_new_list(0)|0);
  _lily_return_list($0,$15);
  return;
 }
 $16 = (($$$150) - ($$1))|0;
 $17 = (_lily_new_list($16)|0);
 $18 = ($16|0)>(0);
 if ($18) {
  $$04752 = 0;$$053 = $$1;
  while(1) {
   $19 = (_lily_list_value($1,$$053)|0);
   _lily_list_set_value($17,$$04752,$19);
   $20 = (($$04752) + 1)|0;
   $21 = (($$053) + 1)|0;
   $exitcond = ($20|0)==($16|0);
   if ($exitcond) {
    break;
   } else {
    $$04752 = $20;$$053 = $21;
   }
  }
 }
 _lily_return_list($0,$17);
 return;
}
function _lily_builtin_List_unshift($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_list($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _make_extra_space_in_list($1);
 }
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($1)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = $7 << 2;
  _memmove(($11|0),($10|0),($12|0))|0;
 }
 $13 = (_lily_value_copy($2)|0);
 $14 = ((($1)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[$6>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$6>>2] = $17;
 $18 = HEAP32[$3>>2]|0;
 $19 = (($18) + -1)|0;
 HEAP32[$3>>2] = $19;
 return;
}
function _lily_builtin_Option_and($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_class_id($0,0)|0);
 $2 = ($1|0)==(14);
 if ($2) {
  $3 = (_lily_arg_value($0,1)|0);
  _lily_return_value($0,$3);
  return;
 } else {
  $4 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$4);
  return;
 }
}
function _lily_builtin_Option_and_then($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (_lily_variant_value($4,0)|0);
  _lily_push_value($0,$5);
  $6 = (_lily_arg_function($0,1)|0);
  _lily_call_simple($0,$6,1);
  $7 = (_lily_result_value($0)|0);
  _lily_return_value($0,$7);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($0,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_is_none($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_class_id($0,0)|0);
 $2 = ($1|0)==(15);
 $3 = $2&1;
 _lily_return_boolean($0,$3);
 return;
}
function _lily_builtin_Option_is_some($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_class_id($0,0)|0);
 $2 = ($1|0)==(14);
 $3 = $2&1;
 _lily_return_boolean($0,$3);
 return;
}
function _lily_builtin_Option_map($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (_lily_variant_value($4,0)|0);
  _lily_push_value($0,$5);
  $6 = (_lily_arg_function($0,1)|0);
  _lily_call_simple($0,$6,1);
  $7 = (_lily_new_variant(1)|0);
  $8 = (_lily_result_value($0)|0);
  _lily_variant_set_value($7,0,$8);
  _lily_return_variant($0,14,$7);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($0,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_or($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  _lily_return_variant($0,14,$4);
  STACKTOP = sp;return;
 } else {
  $5 = (_lily_arg_value($0,1)|0);
  _lily_return_value($0,$5);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_or_else($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  _lily_return_variant($0,14,$4);
  STACKTOP = sp;return;
 } else {
  $5 = (_lily_arg_function($0,1)|0);
  _lily_call_simple($0,$5,0);
  _lily_result_return($0);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_unwrap($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (_lily_variant_value($4,0)|0);
  _lily_return_value($0,$5);
  STACKTOP = sp;return;
 } else {
  _lily_ValueError($0,14711,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_unwrap_or($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $4 = ($3|0)==(14);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (_lily_variant_value($5,0)|0);
  $$0 = $6;
 } else {
  $$0 = $2;
 }
 _lily_return_value($0,$$0);
 STACKTOP = sp;return;
}
function _lily_builtin_Option_unwrap_or_else($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_arg_variant_for_id($0,0,$1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (_lily_variant_value($4,0)|0);
  _lily_return_value($0,$5);
  STACKTOP = sp;return;
 } else {
  $6 = (_lily_arg_function($0,1)|0);
  _lily_call_simple($0,$6,0);
  $7 = (_lily_result_value($0)|0);
  _lily_return_value($0,$7);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_RuntimeError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,22);
 return;
}
function _lily_builtin_String_format($0) {
 $0 = $0|0;
 var $$0 = 0, $$067$lcssa = 0, $$06778 = 0, $$068$lcssa = 0, $$070$lcssa = 0, $$1$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $isdigit = 0, $isdigit72 = 0, $isdigit72$1 = 0, $isdigittmp = 0, $isdigittmp71 = 0, $isdigittmp71$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = (_lily_arg_list($0,1)|0);
 $3 = (_lily_list_num_values($2)|0);
 $4 = (_lily_get_msgbuf($0)|0);
 $5 = (_char_index($1,0)|0);
 $6 = ($5|0)>(-1);
 if ($6) {
  $$06778 = 0;$7 = $5;
 } else {
  $$067$lcssa = 0;
  $27 = (_strlen($1)|0);
  _lily_mb_add_slice($4,$1,$$067$lcssa,$27);
  $28 = (_lily_mb_get($4)|0);
  $29 = (_lily_new_string($28)|0);
  _lily_return_string($0,$29);
  STACKTOP = sp;return;
 }
 while(1) {
  $8 = ($7|0)>($$06778|0);
  if ($8) {
   _lily_mb_add_slice($4,$1,$$06778,$7);
   $$0 = $7;
  } else {
   $$0 = $7;
  }
  while(1) {
   $9 = (($$0) + 1)|0;
   $10 = (($1) + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(48);
   if ($12) {
    $$0 = $9;
   } else {
    break;
   }
  }
  $13 = (($7) + 1)|0;
  $14 = $11 << 24 >> 24;
  $isdigittmp71 = (($14) + -48)|0;
  $isdigit72 = ($isdigittmp71>>>0)<(10);
  if ($isdigit72) {
   $15 = (($$0) + 2)|0;
   $16 = (($1) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $isdigittmp71$1 = (($18) + -48)|0;
   $isdigit72$1 = ($isdigittmp71$1>>>0)<(10);
   if ($isdigit72$1) {
    $30 = ($isdigittmp71*10)|0;
    $31 = (($30) + ($isdigittmp71$1))|0;
    $32 = (($$0) + 3)|0;
    $33 = (($1) + ($32)|0);
    $34 = HEAP8[$33>>0]|0;
    $$068$lcssa = $31;$$070$lcssa = $34;$$1$lcssa = $32;
   } else {
    $$068$lcssa = $isdigittmp71;$$070$lcssa = $17;$$1$lcssa = $15;
   }
  } else {
   $$068$lcssa = 0;$$070$lcssa = $11;$$1$lcssa = $9;
  }
  $19 = $$070$lcssa << 24 >> 24;
  $isdigittmp = (($19) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  do {
   if ($isdigit) {
    _lily_ValueError($0,14734,$vararg_buffer);
   } else {
    $20 = ($13|0)==($$1$lcssa|0);
    if ($20) {
     _lily_ValueError($0,14765,$vararg_buffer1);
     break;
    }
    $21 = ($$070$lcssa<<24>>24)==(125);
    if (!($21)) {
     _lily_ValueError($0,14792,$vararg_buffer3);
     break;
    }
    $22 = ($$068$lcssa|0)<($3|0);
    if (!($22)) {
     _lily_IndexError($0,14825,$vararg_buffer5);
    }
   }
  } while(0);
  $23 = (($$1$lcssa) + 1)|0;
  $24 = (_lily_list_value($2,$$068$lcssa)|0);
  _lily_mb_add_value($4,$0,$24);
  $25 = (_char_index($1,$23)|0);
  $26 = ($25|0)>(-1);
  if ($26) {
   $$06778 = $23;$7 = $25;
  } else {
   $$067$lcssa = $23;
   break;
  }
 }
 $27 = (_strlen($1)|0);
 _lily_mb_add_slice($4,$1,$$067$lcssa,$27);
 $28 = (_lily_mb_get($4)|0);
 $29 = (_lily_new_string($28)|0);
 _lily_return_string($0,$29);
 STACKTOP = sp;return;
}
function _char_index($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = (_strchr($2,123)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $$0 = $4 ? -1 : $7;
 return ($$0|0);
}
function _lily_builtin_String_ends_with($0) {
 $0 = $0|0;
 var $$0 = 0, $$036 = 0, $$036$in = 0, $$037 = 0, $$037$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($8)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>($12|0);
 if ($15) {
  _lily_return_boolean($0,0);
  return;
 } else {
  $$036$in = $14;$$037$in = $12;
 }
 while(1) {
  $$036 = (($$036$in) + -1)|0;
  $$037 = (($$037$in) + -1)|0;
  $16 = ($$036$in|0)>(0);
  if (!($16)) {
   $$0 = 1;
   break;
  }
  $17 = (($6) + ($$037)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (($10) + ($$036)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($18<<24>>24)==($20<<24>>24);
  if ($21) {
   $$036$in = $$036;$$037$in = $$037;
  } else {
   $$0 = 0;
   break;
  }
 }
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_find($0) {
 $0 = $0|0;
 var $$0 = 0, $$06875 = 0, $$06976 = 0, $$06976$in = 0, $$07078 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = (_lily_arg_integer($0,2)|0);
  $6 = tempRet0;
  $$0 = $5;
 } else {
  $$0 = 0;
 }
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($14)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($12|0)<($18|0);
 $20 = ($18|0)==(0);
 $or$cond = $19 | $20;
 $21 = ($$0|0)>($12|0);
 $or$cond71 = $21 | $or$cond;
 if (!($or$cond71)) {
  $22 = (($10) + ($$0)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (14150 + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(-1);
  if (!($27)) {
   $28 = (($12) - ($18))|0;
   $29 = HEAP8[$16>>0]|0;
   $30 = ($$0|0)>($28|0);
   L7: do {
    if (!($30)) {
     $31 = ($18|0)>(1);
     $$07078 = $$0;
     L9: while(1) {
      $32 = (($10) + ($$07078)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==($29<<24>>24);
      L11: do {
       if ($34) {
        if ($31) {
         $$06875 = 1;$$06976$in = $$07078;
        } else {
         break L9;
        }
        while(1) {
         $$06976 = (($$06976$in) + 1)|0;
         $37 = (($10) + ($$06976)|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = (($16) + ($$06875)|0);
         $40 = HEAP8[$39>>0]|0;
         $41 = ($38<<24>>24)==($40<<24>>24);
         $35 = (($$06875) + 1)|0;
         if (!($41)) {
          break L11;
         }
         $36 = ($35|0)<($18|0);
         if ($36) {
          $$06875 = $35;$$06976$in = $$06976;
         } else {
          break L9;
         }
        }
       }
      } while(0);
      $42 = (($$07078) + 1)|0;
      $43 = ($$07078|0)<($28|0);
      if ($43) {
       $$07078 = $42;
      } else {
       break L7;
      }
     }
     $44 = (_lily_new_variant(1)|0);
     $45 = ($$07078|0)<(0);
     $46 = $45 << 31 >> 31;
     _lily_variant_set_integer($44,0,$$07078,$46);
     _lily_return_variant($0,14,$44);
     return;
    }
   } while(0);
   _lily_return_empty_variant($0,15);
   return;
  }
 }
 _lily_return_empty_variant($0,15);
 return;
}
function _lily_maybe_html_encode_to_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$045 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_get_msgbuf($0)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = $6;
 $9 = $6;
 $$0 = $6;$$045 = 0;
 L1: while(1) {
  $10 = HEAP8[$$0>>0]|0;
  switch ($10<<24>>24) {
  case 0:  {
   break L1;
   break;
  }
  case 38:  {
   $11 = $$0;
   $12 = (($11) - ($7))|0;
   _lily_mb_add_slice($2,$6,$$045,$12);
   _lily_mb_add($2,14856);
   $13 = (($12) + 1)|0;
   $$1 = $13;
   break;
  }
  case 60:  {
   $14 = $$0;
   $15 = (($14) - ($8))|0;
   _lily_mb_add_slice($2,$6,$$045,$15);
   _lily_mb_add($2,14862);
   $16 = (($15) + 1)|0;
   $$1 = $16;
   break;
  }
  case 62:  {
   $17 = $$0;
   $18 = (($17) - ($9))|0;
   _lily_mb_add_slice($2,$6,$$045,$18);
   _lily_mb_add($2,14867);
   $19 = (($18) + 1)|0;
   $$1 = $19;
   break;
  }
  default: {
   $$1 = $$045;
  }
  }
  $20 = ((($$0)) + 1|0);
  $$0 = $20;$$045 = $$1;
 }
 $21 = ($$045|0)==(0);
 if ($21) {
  return ($$045|0);
 }
 $22 = $$0;
 $23 = $6;
 $24 = (($22) - ($23))|0;
 _lily_mb_add_slice($2,$6,$$045,$24);
 return ($$045|0);
}
function _lily_builtin_String_html_encode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_maybe_html_encode_to_buffer($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_value($0,$1);
  return;
 } else {
  $4 = ((($0)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_lily_mb_get($5)|0);
  $7 = (_lily_new_string($6)|0);
  _lily_return_string($0,$7);
  return;
 }
}
function _lily_builtin_String_is_alnum($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isalnum($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_alpha($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isalpha($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_digit($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $isdigittmp = (($10) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $6 = (($$02021) + 1)|0;
    if (!($isdigit)) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_space($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isspace($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_lower($0) {
 $0 = $0|0;
 var $$034 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = (_make_sv($6)|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $$034 = 0;
 } else {
  $26 = (($9) + ($14)|0);
  HEAP8[$26>>0] = 0;
  _lily_return_string($0,$7);
  return;
 }
 while(1) {
  $16 = (($12) + ($$034)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (_isupper($18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $24 = (($9) + ($$034)|0);
   HEAP8[$24>>0] = $17;
  } else {
   $21 = (_tolower($18)|0);
   $22 = $21&255;
   $23 = (($9) + ($$034)|0);
   HEAP8[$23>>0] = $22;
  }
  $25 = (($$034) + 1)|0;
  $exitcond = ($25|0)==($14|0);
  if ($exitcond) {
   break;
  } else {
   $$034 = $25;
  }
 }
 $26 = (($9) + ($14)|0);
 HEAP8[$26>>0] = 0;
 _lily_return_string($0,$7);
 return;
}
function _lily_builtin_String_lstrip($0) {
 $0 = $0|0;
 var $$0 = 0, $$04547 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($9)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strlen($14)|0);
   $16 = ($15|0)>(0);
   L4: do {
    if ($16) {
     $$04547 = 0;
     while(1) {
      $19 = (($14) + ($$04547)|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)<(0);
      $17 = (($$04547) + 1)|0;
      if ($21) {
       break;
      }
      $18 = ($17|0)<($15|0);
      if ($18) {
       $$04547 = $17;
      } else {
       label = 7;
       break L4;
      }
     }
     $23 = (_lstrip_utf8_start($1,$9)|0);
     $$0 = $23;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $22 = (_lstrip_ascii_start($1,$9)|0);
    $$0 = $22;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (1 - ($$0))|0;
   $28 = (($27) + ($26))|0;
   $29 = (_make_sv($28)|0);
   $30 = ((($29)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$3>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($$0)|0);
   (_strcpy($31,$35)|0);
   _lily_return_string($0,$29);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _lstrip_ascii_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03847 = 0, $$04044 = 0, $$152 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  $15 = HEAP8[$12>>0]|0;
  $16 = ($7|0)>(0);
  if ($16) {
   $$04044 = 0;
  } else {
   $$2 = 0;
   return ($$2|0);
  }
  while(1) {
   $17 = (($5) + ($$04044)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==($15<<24>>24);
   if (!($19)) {
    $$2 = $$04044;
    label = 11;
    break;
   }
   $20 = (($$04044) + 1)|0;
   $21 = ($20|0)<($7|0);
   if ($21) {
    $$04044 = $20;
   } else {
    $$2 = $20;
    label = 11;
    break;
   }
  }
  if ((label|0) == 11) {
   return ($$2|0);
  }
 }
 $13 = ($7|0)>(0);
 if (!($13)) {
  $$2 = 0;
  return ($$2|0);
 }
 $14 = ($9|0)>(0);
 $$152 = 0;
 L15: while(1) {
  $22 = (($5) + ($$152)|0);
  $23 = HEAP8[$22>>0]|0;
  if ($14) {
   $$03847 = 0;
  } else {
   $$2 = 0;
   label = 11;
   break;
  }
  while(1) {
   $26 = (($12) + ($$03847)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($23<<24>>24)==($27<<24>>24);
   $24 = (($$03847) + 1)|0;
   if ($28) {
    break;
   }
   $25 = ($24|0)<($9|0);
   if ($25) {
    $$03847 = $24;
   } else {
    $$2 = $$152;
    label = 11;
    break L15;
   }
  }
  $29 = (($$152) + 1)|0;
  $30 = ($29|0)<($7|0);
  if ($30) {
   $$152 = $29;
  } else {
   $$2 = $29;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lstrip_utf8_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07085 = 0, $$07184 = 0, $$090 = 0, $$1$ph = 0, $$172 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$9>>0]|0;
 $13 = $12&255;
 $14 = (14150 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)==($11|0);
 if (!($17)) {
  $$1$ph = 0;
  L2: while(1) {
   $55 = (($5) + ($$1$ph)|0);
   $36 = HEAP8[$55>>0]|0;
   $$172 = 0;
   L4: while(1) {
    $34 = (($9) + ($$172)|0);
    $35 = HEAP8[$34>>0]|0;
    $37 = ($36<<24>>24)==($35<<24>>24);
    L6: do {
     if ($37) {
      $38 = $35&255;
      $39 = (14150 + ($38)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = (($38) + -194)|0;
      $43 = ($42>>>0)<(51);
      if ($43) {
       $$090 = 1;
      } else {
       break L4;
      }
      while(1) {
       $46 = (($$090) + ($$1$ph))|0;
       $47 = (($5) + ($46)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = (($$090) + ($$172))|0;
       $50 = (($9) + ($49)|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = ($48<<24>>24)==($51<<24>>24);
       $44 = (($$090) + 1)|0;
       if (!($52)) {
        break L6;
       }
       $45 = ($44|0)<($41|0);
       if ($45) {
        $$090 = $44;
       } else {
        break L4;
       }
      }
     }
    } while(0);
    $56 = HEAP8[$34>>0]|0;
    $57 = $56&255;
    $58 = (14150 + ($57)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = (($60) + ($$172))|0;
    $62 = ($61|0)==($11|0);
    if ($62) {
     $$3 = $$1$ph;
     label = 16;
     break L2;
    } else {
     $$172 = $61;
    }
   }
   $53 = (($41) + ($$1$ph))|0;
   $54 = ($53|0)<($7|0);
   if ($54) {
    $$1$ph = $53;
   } else {
    $$3 = $53;
    label = 16;
    break;
   }
  }
  if ((label|0) == 16) {
   return ($$3|0);
  }
 }
 $18 = ($7|0)>(0);
 if (!($18)) {
  $$3 = 0;
  return ($$3|0);
 }
 $19 = (($13) + -194)|0;
 $20 = ($19>>>0)<(51);
 $$07085 = 0;
 L20: while(1) {
  $21 = (($5) + ($$07085)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==($12<<24>>24);
  if (!($23)) {
   $$3 = $$07085;
   label = 16;
   break;
  }
  if ($20) {
   $$07184 = 1;
   while(1) {
    $26 = (($$07184) + ($$07085))|0;
    $27 = (($5) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (($9) + ($$07184)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($28<<24>>24)==($30<<24>>24);
    $24 = (($$07184) + 1)|0;
    if (!($31)) {
     $$3 = $$07085;
     label = 16;
     break L20;
    }
    $25 = ($24|0)<($16|0);
    if ($25) {
     $$07184 = $24;
    } else {
     break;
    }
   }
  }
  $32 = (($$07085) + ($16))|0;
  $33 = ($32|0)<($7|0);
  if ($33) {
   $$07085 = $32;
  } else {
   $$3 = $32;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return ($$3|0);
 }
 return (0)|0;
}
function _lily_builtin_String_parse_i($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$pn = 0, $$041$ph = 0, $$042$lcssa59 = 0, $$04251 = 0, $$043 = 0, $$1 = 0, $$2$ph = 0, $$252 = 0, $$lcssa60 = 0, $$off = 0, $$off49 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond46 = 0, $or$cond47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = HEAP8[$1>>0]|0;
 switch ($2<<24>>24) {
 case 45:  {
  $3 = ((($1)) + 1|0);
  $$0 = $3;$$043 = 1;
  break;
 }
 case 43:  {
  $4 = ((($1)) + 1|0);
  $$0 = $4;$$043 = 0;
  break;
 }
 default: {
  $$0 = $1;$$043 = 0;
 }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = ($5<<24>>24)==(48);
 if ($6) {
  $$0$pn = $$0;
  while(1) {
   $$1 = ((($$0$pn)) + 1|0);
   $7 = HEAP8[$$1>>0]|0;
   $8 = ($7<<24>>24)==(48);
   if ($8) {
    $$0$pn = $$1;
   } else {
    $$041$ph = 1;$$2$ph = $$1;
    break;
   }
  }
 } else {
  $$041$ph = 0;$$2$ph = $$0;
 }
 $9 = HEAP8[$$2$ph>>0]|0;
 $$off49 = (($9) + -48)<<24>>24;
 $10 = ($$off49&255)<(10);
 if ($10) {
  $$04251 = 0;$$252 = $$2$ph;$11 = 0;$12 = 0;$16 = $9;
  while(1) {
   $13 = (___muldi3(($11|0),($12|0),10,0)|0);
   $14 = tempRet0;
   $15 = $16 << 24 >> 24;
   $17 = (($15) + -48)|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = (_i64Add(($17|0),($19|0),($13|0),($14|0))|0);
   $21 = tempRet0;
   $22 = ((($$252)) + 1|0);
   $23 = (($$04251) + 1)|0;
   $24 = HEAP8[$22>>0]|0;
   $$off = (($24) + -48)<<24>>24;
   $25 = ($$off&255)<(10);
   $26 = ($23|0)!=(20);
   $or$cond47 = $26 & $25;
   if ($or$cond47) {
    $$04251 = $23;$$252 = $22;$11 = $20;$12 = $21;$16 = $24;
   } else {
    break;
   }
  }
  $27 = (_i64Add(($$043|0),0,-1,2147483647)|0);
  $28 = tempRet0;
  $29 = ($21>>>0)>($28>>>0);
  $30 = ($20>>>0)>($27>>>0);
  $31 = ($21|0)==($28|0);
  $32 = $31 & $30;
  $33 = $29 | $32;
  if (!($33)) {
   $$042$lcssa59 = $23;$$lcssa60 = $24;$38 = $20;$39 = $21;
   label = 9;
  }
 } else {
  $$042$lcssa59 = 0;$$lcssa60 = $9;$38 = 0;$39 = 0;
  label = 9;
 }
 if ((label|0) == 9) {
  $34 = ($$lcssa60<<24>>24)!=(0);
  $35 = $$041$ph | $$042$lcssa59;
  $36 = ($35|0)==(0);
  $or$cond46 = $36 | $34;
  if (!($or$cond46)) {
   $37 = ($$043|0)==(0);
   $40 = (_i64Subtract(0,0,($38|0),($39|0))|0);
   $41 = tempRet0;
   $42 = $37 ? $38 : $40;
   $43 = $37 ? $39 : $41;
   $44 = (_lily_new_variant(1)|0);
   _lily_variant_set_integer($44,0,$42,$43);
   _lily_return_variant($0,14,$44);
   return;
  }
 }
 _lily_return_empty_variant($0,15);
 return;
}
function _lily_builtin_String_replace($0) {
 $0 = $0|0;
 var $$072$ = 0, $$07279 = 0, $$07382 = 0, $$07581 = 0, $$080 = 0, $$2 = 0, $$277 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_arg_string($0,1)|0);
 $3 = (_lily_string_length($1)|0);
 $4 = (_lily_string_length($2)|0);
 $5 = ($4|0)>($3|0);
 if ($5) {
  _lily_return_string($0,$1);
  return;
 }
 $6 = (_lily_get_msgbuf($0)|0);
 $7 = (_lily_string_raw($1)|0);
 $8 = (_lily_string_raw($2)|0);
 $9 = (_lily_arg_string_raw($0,2)|0);
 $10 = HEAP8[$8>>0]|0;
 $11 = ($3|0)>(0);
 if ($11) {
  $12 = ($4|0)>(1);
  $13 = (($4) + -1)|0;
  $$07382 = 0;$$07581 = 0;
  while(1) {
   $14 = (($7) + ($$07382)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)!=($10<<24>>24);
   $17 = (($$07382) + ($4))|0;
   $18 = ($17|0)>($3|0);
   $or$cond = $18 | $16;
   do {
    if ($or$cond) {
     $$2 = $$07382;$$277 = $$07581;
    } else {
     if ($12) {
      $$07279 = 1;$$080 = 1;
      while(1) {
       $19 = (($8) + ($$080)|0);
       $20 = HEAP8[$19>>0]|0;
       $21 = (($$080) + ($$07382))|0;
       $22 = (($7) + ($21)|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = ($20<<24>>24)==($23<<24>>24);
       $$072$ = $24 ? $$07279 : 0;
       $25 = (($$080) + 1)|0;
       $exitcond = ($25|0)==($4|0);
       if ($exitcond) {
        break;
       } else {
        $$07279 = $$072$;$$080 = $25;
       }
      }
      $26 = ($$072$|0)==(0);
      if ($26) {
       $$2 = $$07382;$$277 = $$07581;
       break;
      }
     }
     $27 = ($$07382|0)==($$07581|0);
     if (!($27)) {
      _lily_mb_add_slice($6,$7,$$07581,$$07382);
     }
     _lily_mb_add($6,$9);
     $28 = (($13) + ($$07382))|0;
     $$2 = $28;$$277 = $17;
    }
   } while(0);
   $29 = (($$2) + 1)|0;
   $30 = ($29|0)<($3|0);
   if ($30) {
    $$07382 = $29;$$07581 = $$277;
   } else {
    break;
   }
  }
  $31 = ($29|0)==($$277|0);
  if (!($31)) {
   _lily_mb_add_slice($6,$7,$$277,$29);
  }
 }
 $32 = (_lily_mb_get($6)|0);
 $33 = (_lily_new_string($32)|0);
 _lily_return_string($0,$33);
 return;
}
function _lily_builtin_String_rstrip($0) {
 $0 = $0|0;
 var $$0 = 0, $$04648 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($9)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strlen($14)|0);
   $16 = ($15|0)>(0);
   L4: do {
    if ($16) {
     $$04648 = 0;
     while(1) {
      $19 = (($14) + ($$04648)|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)<(0);
      $17 = (($$04648) + 1)|0;
      if ($21) {
       break;
      }
      $18 = ($17|0)<($15|0);
      if ($18) {
       $$04648 = $17;
      } else {
       label = 7;
       break L4;
      }
     }
     $23 = (_rstrip_utf8_stop($1,$9)|0);
     $$0 = $23;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $22 = (_rstrip_ascii_stop($1,$9)|0);
    $$0 = $22;
   }
   $24 = (($$0) + 1)|0;
   $25 = (_make_sv($24)|0);
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$3>>2]|0;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   (_strncpy($27,$30,$$0)|0);
   $31 = HEAP32[$26>>2]|0;
   $32 = (($31) + ($$0)|0);
   HEAP8[$32>>0] = 0;
   _lily_return_string($0,$25);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _rstrip_ascii_stop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03844 = 0, $$040 = 0, $$040$in = 0, $$1 = 0, $$147 = 0, $$148 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 L1: do {
  if ($10) {
   $15 = HEAP8[$12>>0]|0;
   $$040$in = $7;
   while(1) {
    $$040 = (($$040$in) + -1)|0;
    $16 = ($$040$in|0)>(0);
    if (!($16)) {
     $$2 = $$040;
     break L1;
    }
    $17 = (($5) + ($$040)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==($15<<24>>24);
    if ($19) {
     $$040$in = $$040;
    } else {
     $$2 = $$040;
     break;
    }
   }
  } else {
   $$147 = (($7) + -1)|0;
   $13 = ($7|0)>(0);
   if ($13) {
    $14 = ($9|0)>(0);
    $$148 = $$147;
    while(1) {
     $21 = (($5) + ($$148)|0);
     $22 = HEAP8[$21>>0]|0;
     if ($14) {
      $$03844 = 0;
     } else {
      $$2 = $$147;
      break L1;
     }
     while(1) {
      $25 = (($12) + ($$03844)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($22<<24>>24)==($26<<24>>24);
      $23 = (($$03844) + 1)|0;
      if ($27) {
       break;
      }
      $24 = ($23|0)<($9|0);
      if ($24) {
       $$03844 = $23;
      } else {
       $$2 = $$148;
       break L1;
      }
     }
     $$1 = (($$148) + -1)|0;
     $20 = ($$148|0)>(0);
     if ($20) {
      $$148 = $$1;
     } else {
      $$2 = $$1;
      break;
     }
    }
   } else {
    $$2 = $$147;
   }
  }
 } while(0);
 $28 = (($$2) + 1)|0;
 return ($28|0);
}
function _rstrip_utf8_stop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06075 = 0, $$06174 = 0, $$06276 = 0, $$06276$in = 0, $$064 = 0, $$066 = 0, $$1 = 0, $$3 = 0, $$369 = 0, $$4 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond71 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($7) + -1)|0;
 $$old1 = ($7|0)>(0);
 if ($$old1) {
  $$064 = $12;$$066 = 0;
 } else {
  $$4 = $12;
  $44 = (($$4) + 1)|0;
  return ($44|0);
 }
 while(1) {
  $13 = (($9) + ($$066)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (14150 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (($$066) + -1)|0;
  $20 = (($19) + ($18))|0;
  $21 = (($9) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = (($5) + ($$064)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=($22<<24>>24);
  $26 = (($$064) + 1)|0;
  $27 = ($26|0)<($18|0);
  $or$cond71 = $27 | $25;
  L5: do {
   if ($or$cond71) {
    label = 8;
   } else {
    $28 = (($15) + -194)|0;
    $29 = ($28>>>0)<(51);
    if ($29) {
     $30 = (($$066) + -2)|0;
     $31 = (($30) + ($18))|0;
     $$06075 = 1;$$06174 = $31;$$06276$in = $$064;
     while(1) {
      $$06276 = (($$06276$in) + -1)|0;
      $32 = (($5) + ($$06276)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = (($9) + ($$06174)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($33<<24>>24)==($35<<24>>24);
      if (!($36)) {
       label = 8;
       break L5;
      }
      $37 = (($$06174) + -1)|0;
      $38 = (($$06075) + 1)|0;
      $39 = ($38|0)<($18|0);
      if ($39) {
       $$06075 = $38;$$06174 = $37;$$06276$in = $$06276;
      } else {
       break;
      }
     }
    }
    $40 = (($$064) - ($18))|0;
    $$1 = 2;$$3 = $40;$$369 = 0;
   }
  } while(0);
  if ((label|0) == 8) {
   label = 0;
   $41 = (($18) + ($$066))|0;
   $42 = ($41|0)==($11|0);
   $$ = $42 ? 3 : 2;
   $$1 = $$;$$3 = $$064;$$369 = $41;
  }
  $switch = ($$1|0)==(2);
  $43 = ($$3|0)>(-1);
  $or$cond = $43 & $switch;
  if ($or$cond) {
   $$064 = $$3;$$066 = $$369;
  } else {
   $$4 = $$3;
   break;
  }
 }
 $44 = (($$4) + 1)|0;
 return ($44|0);
}
function _lily_builtin_String_slice($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _do_str_slice($0,0);
 return;
}
function _lily_builtin_String_split($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = (_lily_arg_string($0,0)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_string($0,1)|0);
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   _lily_ValueError($0,14872,$vararg_buffer);
   $$0 = $5;
  } else {
   $$0 = $5;
  }
 } else {
  $9 = ((($1)) + 8|0);
  HEAP32[$9>>2] = 14902;
  $10 = ((($1)) + 4|0);
  HEAP32[$10>>2] = 1;
  $$0 = $1;
 }
 $11 = ((($2)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($$0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_string_split_by_val($12,$14)|0);
 _lily_return_list($0,$15);
 STACKTOP = sp;return;
}
function _string_split_by_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$074$ph11 = 0, $$0748 = 0, $$083$ph$lcssa = 0, $$083$ph10 = 0, $$084 = 0, $$088 = 0, $$091 = 0, $$175 = 0, $$177 = 0, $$189 = 0, $$2 = 0, $$286 = 0, $$3 = 0, $$379 = 0, $$4 = 0, $$61 = 0, $$63 = 0, $$pr = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = (14904 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L1: do {
  if ($6) {
   $$083$ph$lcssa = 0;
  } else {
   $7 = $5 << 24 >> 24;
   $8 = HEAP8[$1>>0]|0;
   $$074$ph11 = $0;$$083$ph10 = 0;$60 = $7;$61 = $2;
   while(1) {
    $$0748 = $$074$ph11;$28 = $60;$9 = $61;
    while(1) {
     $10 = ($9<<24>>24)==($8<<24>>24);
     if ($10) {
      $$175 = $$0748;$$177 = $1;
      break;
     }
     $27 = (($$0748) + ($28)|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = $29&255;
     $31 = (14904 + ($30)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($32<<24>>24)==(0);
     if ($34) {
      $$083$ph$lcssa = $$083$ph10;
      break L1;
     } else {
      $$0748 = $27;$28 = $33;$9 = $29;
     }
    }
    while(1) {
     $11 = HEAP8[$$175>>0]|0;
     $12 = HEAP8[$$177>>0]|0;
     $13 = ($11<<24>>24)==($12<<24>>24);
     if (!($13)) {
      $$091 = 1;$$2 = $$175;
      break;
     }
     $14 = ((($$177)) + 1|0);
     $15 = ((($$175)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if ($17) {
      $$091 = 1;$$2 = $15;
      break;
     }
     $18 = HEAP8[$15>>0]|0;
     $19 = ($18<<24>>24)==($16<<24>>24);
     if ($19) {
      $$175 = $15;$$177 = $14;
     } else {
      $$091 = 0;$$2 = $$0748;
      break;
     }
    }
    $20 = (($$091) + ($$083$ph10))|0;
    $21 = HEAP8[$$2>>0]|0;
    $22 = $21&255;
    $23 = (14904 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$083$ph$lcssa = $20;
     break;
    } else {
     $$074$ph11 = $$2;$$083$ph10 = $20;$60 = $25;$61 = $21;
    }
   }
  }
 } while(0);
 $35 = (($$083$ph$lcssa) + 1)|0;
 $36 = (_lily_new_list($35)|0);
 $$084 = $0;$$088 = 0;$$3 = $0;
 while(1) {
  $37 = HEAP8[$$3>>0]|0;
  $38 = HEAP8[$1>>0]|0;
  $39 = ($37<<24>>24)==($38<<24>>24);
  L16: do {
   if ($39) {
    $$379 = $1;$$4 = $$3;
    while(1) {
     $40 = HEAP8[$$4>>0]|0;
     $41 = HEAP8[$$379>>0]|0;
     $42 = ($40<<24>>24)==($41<<24>>24);
     if (!($42)) {
      $$61 = $$4;
      label = 17;
      break L16;
     }
     $43 = ((($$379)) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(0);
     if ($45) {
      $$61 = $$4;
      label = 17;
      break L16;
     }
     $46 = ((($$4)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ($47<<24>>24)==($44<<24>>24);
     if ($48) {
      $$379 = $43;$$4 = $46;
     } else {
      break;
     }
    }
    $$pr = HEAP8[$$3>>0]|0;
    $49 = $$pr;
    label = 16;
   } else {
    $49 = $37;
    label = 16;
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   $50 = ($49<<24>>24)==(0);
   if ($50) {
    $$61 = $$3;
    label = 17;
   } else {
    $$189 = $$088;$$286 = $$084;$$63 = $$3;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $51 = $$3;
   $52 = $$084;
   $53 = (($51) - ($52))|0;
   $54 = (_lily_new_string_sized($$084,$53)|0);
   _lily_list_set_string($36,$$088,$54);
   $55 = (($$088) + 1)|0;
   $56 = HEAP8[$$61>>0]|0;
   $57 = ($56<<24>>24)==(0);
   $58 = ((($$61)) + 1|0);
   if ($57) {
    break;
   } else {
    $$189 = $55;$$286 = $58;$$63 = $$61;
   }
  }
  $59 = ((($$63)) + 1|0);
  $$084 = $$286;$$088 = $$189;$$3 = $59;
 }
 return ($36|0);
}
function _lily_builtin_String_starts_with($0) {
 $0 = $0|0;
 var $$0 = 0, $$02930 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($4)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<($12>>>0);
 if ($15) {
  _lily_return_boolean($0,0);
  return;
 }
 $16 = ($12|0)>(0);
 L5: do {
  if ($16) {
   $$02930 = 0;
   while(1) {
    $19 = (($6) + ($$02930)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = (($10) + ($$02930)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($20<<24>>24)==($22<<24>>24);
    $17 = (($$02930) + 1)|0;
    if (!($23)) {
     $$0 = 0;
     break L5;
    }
    $18 = ($17|0)<($12|0);
    if ($18) {
     $$02930 = $17;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_strip($0) {
 $0 = $0|0;
 var $$061 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = (_lstrip_ascii_start($1,$9)|0);
   $14 = HEAP32[$3>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($13|0)==($16|0);
   if ($17) {
    $$061 = $13;
   } else {
    $18 = (_rstrip_utf8_stop($1,$9)|0);
    $$061 = $18;
   }
   $19 = (($$061) - ($13))|0;
   $20 = (($19) + 1)|0;
   $21 = (_make_sv($20)|0);
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$3>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($13)|0);
   (_strncpy($23,$27,$19)|0);
   $28 = (($23) + ($19)|0);
   HEAP8[$28>>0] = 0;
   _lily_return_string($0,$21);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _lily_builtin_String_to_bytestring($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 _lily_return_bytestring($0,$1);
 return;
}
function _lily_builtin_String_trim($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (_lily_arg_value($0,0)|0);
 ;HEAP8[$1>>0]=HEAP8[15160>>0]|0;HEAP8[$1+1>>0]=HEAP8[15160+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[15160+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[15160+3>>0]|0;HEAP8[$1+4>>0]=HEAP8[15160+4>>0]|0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $1;
 $5 = (_strlen($1)|0);
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = (_lstrip_ascii_start($3,$2)|0);
 $8 = ((($3)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)==($11|0);
 if ($12) {
  $24 = (_make_sv(1)|0);
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP8[$26>>0] = 0;
  $$0 = $24;
  _lily_return_string($0,$$0);
  STACKTOP = sp;return;
 } else {
  $13 = (_rstrip_ascii_stop($3,$2)|0);
  $14 = (($13) - ($7))|0;
  $15 = (($14) + 1)|0;
  $16 = (_make_sv($15)|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$8>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($7)|0);
  (_strncpy($18,$22,$14)|0);
  $23 = (($18) + ($14)|0);
  HEAP8[$23>>0] = 0;
  $$0 = $16;
  _lily_return_string($0,$$0);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_String_upper($0) {
 $0 = $0|0;
 var $$034 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = (_make_sv($6)|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $$034 = 0;
 } else {
  $26 = (($9) + ($14)|0);
  HEAP8[$26>>0] = 0;
  _lily_return_string($0,$7);
  return;
 }
 while(1) {
  $16 = (($12) + ($$034)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (_islower($18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $24 = (($9) + ($$034)|0);
   HEAP8[$24>>0] = $17;
  } else {
   $21 = (_toupper($18)|0);
   $22 = $21&255;
   $23 = (($9) + ($$034)|0);
   HEAP8[$23>>0] = $22;
  }
  $25 = (($$034) + 1)|0;
  $exitcond = ($25|0)==($14|0);
  if ($exitcond) {
   break;
  } else {
   $$034 = $25;
  }
 }
 $26 = (($9) + ($14)|0);
 HEAP8[$26>>0] = 0;
 _lily_return_string($0,$7);
 return;
}
function _lily_builtin_Tuple_merge($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$038 = 0, $$13435 = 0, $$136 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_tuple($0,0)|0);
 $2 = (_lily_arg_tuple($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 $8 = (_lily_new_tuple($7)|0);
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$lcssa = 0;
 } else {
  $11 = ((($8)) + 16|0);
  $12 = ((($1)) + 16|0);
  $$038 = 0;
  while(1) {
   $17 = HEAP32[$11>>2]|0;
   $18 = (($17) + ($$038<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$12>>2]|0;
   $21 = (($20) + ($$038<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   _lily_value_assign($19,$22);
   $23 = (($$038) + 1)|0;
   $24 = HEAP32[$3>>2]|0;
   $25 = ($23>>>0)<($24>>>0);
   if ($25) {
    $$038 = $23;
   } else {
    $$0$lcssa = $23;
    break;
   }
  }
 }
 $13 = HEAP32[$5>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  _lily_return_tuple($0,$8);
  return;
 }
 $15 = ((($8)) + 16|0);
 $16 = ((($2)) + 16|0);
 $$13435 = 0;$$136 = $$0$lcssa;
 while(1) {
  $26 = HEAP32[$15>>2]|0;
  $27 = (($26) + ($$136<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$16>>2]|0;
  $30 = (($29) + ($$13435<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_value_assign($28,$31);
  $32 = (($$13435) + 1)|0;
  $33 = (($$136) + 1)|0;
  $34 = HEAP32[$5>>2]|0;
  $35 = ($32>>>0)<($34>>>0);
  if ($35) {
   $$13435 = $32;$$136 = $33;
  } else {
   break;
  }
 }
 _lily_return_tuple($0,$8);
 return;
}
function _lily_builtin_Tuple_push($0) {
 $0 = $0|0;
 var $$024 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_tuple($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_lily_new_tuple($5)|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 $9 = ((($6)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 if ($8) {
  $$lcssa = $11;
  _lily_value_assign($$lcssa,$2);
  _lily_return_tuple($0,$6);
  return;
 }
 $12 = ((($1)) + 16|0);
 $$024 = 0;$16 = $11;
 while(1) {
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($$024<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_value_assign($16,$15);
  $17 = (($$024) + 1)|0;
  $18 = HEAP32[$3>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  $20 = HEAP32[$9>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  if ($19) {
   $$024 = $17;$16 = $22;
  } else {
   $$lcssa = $22;
   break;
  }
 }
 _lily_value_assign($$lcssa,$2);
 _lily_return_tuple($0,$6);
 return;
}
function _lily_builtin_ValueError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,23);
 return;
}
function _lily_builtin_loader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($2|0) {
  case 1:  {
   $3 = (_load_var_stdin()|0);
   $$0 = $3;
   break;
  }
  case 2:  {
   $4 = (_load_var_stderr()|0);
   $$0 = $4;
   break;
  }
  case 3:  {
   $5 = (_load_var_stdout()|0);
   $$0 = $5;
   break;
  }
  case 4:  {
   $$0 = 8;
   break;
  }
  case 5:  {
   $$0 = 9;
   break;
  }
  case 6:  {
   $$0 = 10;
   break;
  }
  case 9:  {
   $$0 = 11;
   break;
  }
  case 10:  {
   $$0 = 12;
   break;
  }
  case 12:  {
   $$0 = 13;
   break;
  }
  case 14:  {
   $$0 = 14;
   break;
  }
  case 15:  {
   $$0 = 15;
   break;
  }
  case 16:  {
   $$0 = 16;
   break;
  }
  case 17:  {
   $$0 = 17;
   break;
  }
  case 19:  {
   $$0 = 18;
   break;
  }
  case 21:  {
   $$0 = 19;
   break;
  }
  case 23:  {
   $$0 = 20;
   break;
  }
  case 25:  {
   $$0 = 21;
   break;
  }
  case 26:  {
   $$0 = 22;
   break;
  }
  case 27:  {
   $$0 = 23;
   break;
  }
  case 28:  {
   $$0 = 24;
   break;
  }
  case 32:  {
   $$0 = 25;
   break;
  }
  case 36:  {
   $$0 = 26;
   break;
  }
  case 37:  {
   $$0 = 27;
   break;
  }
  case 38:  {
   $$0 = 28;
   break;
  }
  case 39:  {
   $$0 = 29;
   break;
  }
  case 40:  {
   $$0 = 30;
   break;
  }
  case 41:  {
   $$0 = 31;
   break;
  }
  case 42:  {
   $$0 = 32;
   break;
  }
  case 44:  {
   $$0 = 33;
   break;
  }
  case 46:  {
   $$0 = 34;
   break;
  }
  case 47:  {
   $$0 = 35;
   break;
  }
  case 48:  {
   $$0 = 36;
   break;
  }
  case 49:  {
   $$0 = 37;
   break;
  }
  case 50:  {
   $$0 = 38;
   break;
  }
  case 51:  {
   $$0 = 39;
   break;
  }
  case 52:  {
   $$0 = 40;
   break;
  }
  case 53:  {
   $$0 = 41;
   break;
  }
  case 54:  {
   $$0 = 42;
   break;
  }
  case 55:  {
   $$0 = 43;
   break;
  }
  case 56:  {
   $$0 = 44;
   break;
  }
  case 58:  {
   $$0 = 45;
   break;
  }
  case 60:  {
   $$0 = 46;
   break;
  }
  case 61:  {
   $$0 = 47;
   break;
  }
  case 62:  {
   $$0 = 48;
   break;
  }
  case 63:  {
   $$0 = 49;
   break;
  }
  case 65:  {
   $$0 = 50;
   break;
  }
  case 67:  {
   $$0 = 51;
   break;
  }
  case 69:  {
   $$0 = 52;
   break;
  }
  case 70:  {
   $$0 = 53;
   break;
  }
  case 71:  {
   $$0 = 54;
   break;
  }
  case 72:  {
   $$0 = 55;
   break;
  }
  case 73:  {
   $$0 = 56;
   break;
  }
  case 74:  {
   $$0 = 57;
   break;
  }
  case 75:  {
   $$0 = 58;
   break;
  }
  case 76:  {
   $$0 = 59;
   break;
  }
  case 77:  {
   $$0 = 60;
   break;
  }
  case 78:  {
   $$0 = 61;
   break;
  }
  case 79:  {
   $$0 = 62;
   break;
  }
  case 80:  {
   $$0 = 63;
   break;
  }
  case 81:  {
   $$0 = 64;
   break;
  }
  case 82:  {
   $$0 = 65;
   break;
  }
  case 83:  {
   $$0 = 66;
   break;
  }
  case 84:  {
   $$0 = 67;
   break;
  }
  case 85:  {
   $$0 = 68;
   break;
  }
  case 86:  {
   $$0 = 69;
   break;
  }
  case 88:  {
   $$0 = 70;
   break;
  }
  case 89:  {
   $$0 = 71;
   break;
  }
  case 90:  {
   $$0 = 72;
   break;
  }
  case 91:  {
   $$0 = 73;
   break;
  }
  case 92:  {
   $$0 = 74;
   break;
  }
  case 93:  {
   $$0 = 75;
   break;
  }
  case 94:  {
   $$0 = 76;
   break;
  }
  case 95:  {
   $$0 = 77;
   break;
  }
  case 96:  {
   $$0 = 78;
   break;
  }
  case 97:  {
   $$0 = 79;
   break;
  }
  case 101:  {
   $$0 = 80;
   break;
  }
  case 103:  {
   $$0 = 81;
   break;
  }
  case 104:  {
   $$0 = 82;
   break;
  }
  case 105:  {
   $$0 = 83;
   break;
  }
  case 106:  {
   $$0 = 84;
   break;
  }
  case 107:  {
   $$0 = 85;
   break;
  }
  case 108:  {
   $$0 = 86;
   break;
  }
  case 109:  {
   $$0 = 87;
   break;
  }
  case 110:  {
   $$0 = 88;
   break;
  }
  case 111:  {
   $$0 = 89;
   break;
  }
  case 112:  {
   $$0 = 90;
   break;
  }
  case 113:  {
   $$0 = 91;
   break;
  }
  case 114:  {
   $$0 = 92;
   break;
  }
  case 115:  {
   $$0 = 93;
   break;
  }
  case 116:  {
   $$0 = 94;
   break;
  }
  case 117:  {
   $$0 = 95;
   break;
  }
  case 118:  {
   $$0 = 96;
   break;
  }
  case 119:  {
   $$0 = 97;
   break;
  }
  case 120:  {
   $$0 = 98;
   break;
  }
  case 121:  {
   $$0 = 99;
   break;
  }
  case 122:  {
   $$0 = 100;
   break;
  }
  case 124:  {
   $$0 = 101;
   break;
  }
  case 125:  {
   $$0 = 102;
   break;
  }
  case 127:  {
   $$0 = 103;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _load_var_stdin() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[636]|0;
 $1 = (_new_builtin_file($0,15167)|0);
 return ($1|0);
}
function _load_var_stderr() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[607]|0;
 $1 = (_new_builtin_file($0,15165)|0);
 return ($1|0);
}
function _load_var_stdout() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[665]|0;
 $1 = (_new_builtin_file($0,15165)|0);
 return ($1|0);
}
function _new_builtin_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_file($0,$1)|0);
 $3 = ((($2)) + 6|0);
 HEAP8[$3>>0] = 1;
 $4 = (_lily_new_value_of_file($2)|0);
 return ($4|0);
}
function _lily_register_pkg_builtin($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_register_package($0,19155,1728,6);
 return;
}
function _lily_init_pkg_builtin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_build_class($0,15169,0,60)|0);
 $2 = ((($0)) + 44|0);
 HEAP32[$2>>2] = $1;
 $3 = (_build_class($0,15177,0,21)|0);
 $4 = ((($0)) + 48|0);
 HEAP32[$4>>2] = $3;
 $5 = (_build_class($0,15184,0,103)|0);
 $6 = ((($0)) + 52|0);
 HEAP32[$6>>2] = $5;
 $7 = (_build_class($0,15191,0,12)|0);
 $8 = ((($0)) + 56|0);
 HEAP32[$8>>2] = $7;
 $9 = (_build_class($0,15196,0,14)|0);
 $10 = ((($0)) + 60|0);
 HEAP32[$10>>2] = $9;
 $11 = (_build_class($0,15207,0,9)|0);
 $12 = ((($0)) + 64|0);
 HEAP32[$12>>2] = $11;
 $13 = (_build_class($0,15215,-1,44)|0);
 $14 = ((($0)) + 72|0);
 HEAP32[$14>>2] = $13;
 $15 = (_build_class($0,15224,0,23)|0);
 $16 = ((($0)) + 68|0);
 HEAP32[$16>>2] = $15;
 $17 = (_build_class($0,15232,1,69)|0);
 $18 = ((($0)) + 76|0);
 HEAP32[$18>>2] = $17;
 $19 = (_build_class($0,15237,2,46)|0);
 $20 = ((($0)) + 80|0);
 HEAP32[$20>>2] = $19;
 $21 = (_build_class($0,15242,-1,124)|0);
 $22 = ((($0)) + 84|0);
 HEAP32[$22>>2] = $21;
 (_build_class($0,15248,0,36)|0);
 $23 = (_build_special($0,15253,0,65530)|0);
 $24 = ((($0)) + 92|0);
 HEAP32[$24>>2] = $23;
 $25 = (_build_special($0,15255,1,65532)|0);
 $26 = ((($0)) + 88|0);
 HEAP32[$26>>2] = $25;
 $27 = (_build_special($0,15257,0,65534)|0);
 $28 = (_build_special($0,15260,0,65533)|0);
 $29 = ((($27)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $33 | 8192;
 $35 = $34&65535;
 HEAP16[$31>>1] = $35;
 $36 = ((($28)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 6|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $40 | 8192;
 $42 = $41&65535;
 HEAP16[$38>>1] = $42;
 $43 = HEAP32[$2>>2]|0;
 $44 = ((($43)) + 6|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $46 | 3;
 $48 = $47&65535;
 HEAP16[$44>>1] = $48;
 $49 = HEAP32[$4>>2]|0;
 $50 = ((($49)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = $52 | 2;
 $54 = $53&65535;
 HEAP16[$50>>1] = $54;
 $55 = HEAP32[$6>>2]|0;
 $56 = ((($55)) + 6|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = $58 | 3;
 $60 = $59&65535;
 HEAP16[$56>>1] = $60;
 $61 = HEAP32[$10>>2]|0;
 $62 = ((($61)) + 6|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = $64 | 2;
 $66 = $65&65535;
 HEAP16[$62>>1] = $66;
 $67 = HEAP32[$12>>2]|0;
 $68 = ((($67)) + 6|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69&65535;
 $71 = $70 | 2;
 $72 = $71&65535;
 HEAP16[$68>>1] = $72;
 $73 = HEAP32[$24>>2]|0;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 6|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77&65535;
 $79 = $78 | 4096;
 $80 = $79&65535;
 HEAP16[$76>>1] = $80;
 $81 = HEAP32[$14>>2]|0;
 $82 = ((($81)) + 6|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = $83&65535;
 $85 = $84 | 32;
 $86 = $85&65535;
 HEAP16[$82>>1] = $86;
 $87 = HEAP32[$16>>2]|0;
 $88 = ((($87)) + 6|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89&65535;
 $91 = $90 | 64;
 $92 = $91&65535;
 HEAP16[$88>>1] = $92;
 $93 = ((($0)) + 36|0);
 HEAP32[$93>>2] = 28;
 return;
}
function _build_class($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_lily_new_class($0,$1)|0);
 $5 = $3&65535;
 $6 = ((($4)) + 50|0);
 HEAP16[$6>>1] = $5;
 $7 = $2&65535;
 $8 = ((($4)) + 46|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($4)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 | 128;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 return ($4|0);
}
function _build_special($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (_lily_new_class($0,$1)|0);
 $5 = $3&65535;
 $6 = ((($4)) + 8|0);
 HEAP16[$6>>1] = $5;
 $7 = $2&65535;
 $8 = ((($4)) + 46|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($4)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 | 128;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 28|0);
 HEAP32[$17>>2] = $14;
 $18 = ((($0)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -1)|0;
 HEAP32[$18>>2] = $20;
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$4>>2] = $22;
 HEAP32[$21>>2] = $4;
 return ($4|0);
}
function _lily_random_Random_new($0) {
 $0 = $0|0;
 var $$025 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(2520)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 104;
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_integer($0,1)|0);
  $6 = tempRet0;
  $7 = ($6|0)<(0);
  $8 = ($5>>>0)<(1);
  $9 = ($6|0)==(0);
  $10 = $9 & $8;
  $11 = $7 | $10;
  if ($11) {
   label = 3;
  } else {
   $18 = $5;$21 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $12 = (_time((0|0))|0);
  $13 = ($12|0)<(0);
  $14 = $13 << 31 >> 31;
  $18 = $12;$21 = $14;
 }
 $15 = ((($1)) + 16|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $18;
 $19 = (($16) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $21;
 $$025 = 1;$22 = $18;$23 = $21;
 while(1) {
  $24 = (_bitshift64Lshr(($22|0),($23|0),62)|0);
  $25 = tempRet0;
  $26 = $24 ^ $22;
  $27 = $25 ^ $23;
  $28 = (___muldi3(($26|0),($27|0),1284865837,1481765933)|0);
  $29 = tempRet0;
  $30 = ($$025|0)<(0);
  $31 = $30 << 31 >> 31;
  $32 = (_i64Add(($28|0),($29|0),($$025|0),($31|0))|0);
  $33 = tempRet0;
  $34 = (($15) + ($$025<<3)|0);
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $32;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
  $39 = (($$025) + 1)|0;
  $exitcond = ($39|0)==(312);
  if ($exitcond) {
   break;
  } else {
   $$025 = $39;$22 = $32;$23 = $33;
  }
 }
 $40 = ((($1)) + 2512|0);
 HEAP32[$40>>2] = 312;
 $41 = (_lily_cid_at($0,0)|0);
 _lily_return_foreign($0,$41,$1);
 return;
}
function _destroy_Random($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_free($0);
 return;
}
function _lily_random_Random_between($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_generic($0,0)|0);
 $2 = (_gen_int($1)|0);
 $3 = tempRet0;
 $4 = (_lily_arg_integer($0,1)|0);
 $5 = tempRet0;
 $6 = (_lily_arg_integer($0,2)|0);
 $7 = tempRet0;
 $8 = ($7|0)>($5|0);
 $9 = ($6>>>0)>($4>>>0);
 $10 = ($7|0)==($5|0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if (!($12)) {
  _lily_ValueError($0,15350,$vararg_buffer);
 }
 $13 = (_i64Subtract(1,0,($4|0),($5|0))|0);
 $14 = tempRet0;
 $15 = (_i64Add(($13|0),($14|0),($6|0),($7|0))|0);
 $16 = tempRet0;
 $17 = (___uremdi3(($2|0),($3|0),($15|0),($16|0))|0);
 $18 = tempRet0;
 $19 = (_i64Add(($17|0),($18|0),($4|0),($5|0))|0);
 $20 = tempRet0;
 _lily_return_integer($0,$19,$20);
 STACKTOP = sp;return;
}
function _gen_int($0) {
 $0 = $0|0;
 var $$049 = 0, $$148 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2512|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(311);
 if ($3) {
  $$049 = 0;
  while(1) {
   $4 = (((($0)) + 16|0) + ($$049<<3)|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -2147483648;
   $12 = (($$049) + 1)|0;
   $13 = (((($0)) + 16|0) + ($12<<3)|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $16 & 2147483646;
   $21 = $20 | $11;
   $22 = (($$049) + 156)|0;
   $23 = (((($0)) + 16|0) + ($22<<3)|0);
   $24 = $23;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (_bitshift64Lshr(($21|0),($10|0),1)|0);
   $31 = tempRet0;
   $32 = $16 & 1;
   $33 = (592 + ($32<<3)|0);
   $34 = $33;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $36 ^ $26;
   $41 = $39 ^ $29;
   $42 = $40 ^ $30;
   $43 = $41 ^ $31;
   $44 = $4;
   $45 = $44;
   HEAP32[$45>>2] = $42;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = $43;
   $exitcond50 = ($12|0)==(156);
   if ($exitcond50) {
    $$148 = 156;
    break;
   } else {
    $$049 = $12;
   }
  }
  while(1) {
   $48 = (((($0)) + 16|0) + ($$148<<3)|0);
   $49 = $48;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) + 4)|0;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = $51 & -2147483648;
   $56 = (($$148) + 1)|0;
   $57 = (((($0)) + 16|0) + ($56<<3)|0);
   $58 = $57;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = $60 & 2147483646;
   $65 = $64 | $55;
   $66 = (($$148) + -156)|0;
   $67 = (((($0)) + 16|0) + ($66<<3)|0);
   $68 = $67;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (_bitshift64Lshr(($65|0),($54|0),1)|0);
   $75 = tempRet0;
   $76 = $60 & 1;
   $77 = (592 + ($76<<3)|0);
   $78 = $77;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = (($78) + 4)|0;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = $80 ^ $70;
   $85 = $83 ^ $73;
   $86 = $84 ^ $74;
   $87 = $85 ^ $75;
   $88 = $48;
   $89 = $88;
   HEAP32[$89>>2] = $86;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   $exitcond = ($56|0)==(311);
   if ($exitcond) {
    break;
   } else {
    $$148 = $56;
   }
  }
  $92 = ((($0)) + 2504|0);
  $93 = $92;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $95 & -2147483648;
  $100 = ((($0)) + 16|0);
  $101 = $100;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = $103 & 2147483646;
  $108 = $107 | $99;
  $109 = ((($0)) + 1256|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (_bitshift64Lshr(($108|0),($98|0),1)|0);
  $117 = tempRet0;
  $118 = $103 & 1;
  $119 = (592 + ($118<<3)|0);
  $120 = $119;
  $121 = $120;
  $122 = HEAP32[$121>>2]|0;
  $123 = (($120) + 4)|0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = $122 ^ $112;
  $127 = $125 ^ $115;
  $128 = $126 ^ $116;
  $129 = $127 ^ $117;
  $130 = $92;
  $131 = $130;
  HEAP32[$131>>2] = $128;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP32[$133>>2] = $129;
  HEAP32[$1>>2] = 0;
 }
 $134 = HEAP32[$1>>2]|0;
 $135 = (($134) + 1)|0;
 HEAP32[$1>>2] = $135;
 $136 = (((($0)) + 16|0) + ($134<<3)|0);
 $137 = $136;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (($137) + 4)|0;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (_bitshift64Lshr(($139|0),($142|0),29)|0);
 $144 = tempRet0;
 $145 = $143 & 1431655765;
 $146 = $144 & 5;
 $147 = $145 ^ $139;
 $148 = $146 ^ $142;
 $149 = (_bitshift64Shl(($147|0),($148|0),17)|0);
 $150 = tempRet0;
 $151 = $149 & -307888128;
 $152 = $150 & 1909882879;
 $153 = $151 ^ $147;
 $154 = $152 ^ $148;
 (_bitshift64Shl(($153|0),($154|0),37)|0);
 $155 = tempRet0;
 $156 = $155 & -528672;
 $157 = $156 ^ $154;
 $158 = (_bitshift64Lshr(($153|0),($157|0),43)|0);
 $159 = tempRet0;
 $160 = $158 ^ $153;
 $161 = $159 ^ $157;
 tempRet0 = ($161);
 return ($160|0);
}
function _lily_random_loader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($2|0) {
 case 2:  {
  $$0 = 105;
  break;
 }
 case 3:  {
  $$0 = 106;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_pkg_random_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_register_package($0,15375,2244,7);
 return;
}
function _lily_sys_loader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($2|0) {
 case 1:  {
  $$0 = 107;
  break;
 }
 case 2:  {
  $3 = (_load_var_argv($0)|0);
  $$0 = $3;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _load_var_argv($0) {
 $0 = $0|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_op_get_argv($0,$1)|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = (_lily_new_list($3)|0);
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $$01 = 0;
 } else {
  $13 = (_lily_new_value_of_list($4)|0);
  STACKTOP = sp;return ($13|0);
 }
 while(1) {
  $7 = (($2) + ($$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_new_string($8)|0);
  _lily_list_set_string($4,$$01,$9);
  $10 = (($$01) + 1)|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $$01 = $10;
  } else {
   break;
  }
 }
 $13 = (_lily_new_value_of_list($4)|0);
 STACKTOP = sp;return ($13|0);
}
function _lily_sys_getenv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = (_getenv(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _lily_return_empty_variant($0,15);
  return;
 } else {
  $4 = (_lily_new_variant(1)|0);
  $5 = (_lily_new_string($2)|0);
  _lily_variant_set_string($4,0,$5);
  _lily_return_variant($0,14,$4);
  return;
 }
}
function _lily_pkg_sys_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_register_package($0,15437,2264,8);
 return;
}
function _lily_new_raiser() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = (_lily_malloc(164)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_new_msgbuf(64)|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_new_msgbuf(64)|0);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = $1;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 return ($0|0);
}
function _lily_free_raiser($0) {
 $0 = $0|0;
 var $$lcssa15 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = ($1|0)==(0|0);
  if (!($5)) {
   $$lcssa15 = $1;
   label = 4;
  }
 } else {
  $4 = $2;
  while(1) {
   $6 = HEAP32[$4>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    break;
   } else {
    $4 = $6;
   }
  }
  HEAP32[$0>>2] = $4;
  $$lcssa15 = $4;
  label = 4;
 }
 if ((label|0) == 4) {
  $9 = $$lcssa15;
  while(1) {
   $8 = ((($9)) + 4|0);
   $10 = HEAP32[$8>>2]|0;
   _lily_free($9);
   HEAP32[$0>>2] = $10;
   $11 = $10;
   $12 = ($10|0)==(0);
   if ($12) {
    break;
   } else {
    $9 = $11;
   }
  }
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_free_msgbuf($14);
 $15 = ((($0)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _lily_free_msgbuf($16);
 _lily_free($0);
 return;
}
function _lily_jump_setup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_lily_malloc(164)|0);
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$5>>2] = $6;
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = $5;
  $9 = ((($5)) + 4|0);
  HEAP32[$9>>2] = 0;
  HEAP32[$0>>2] = $5;
  $10 = HEAP32[$0>>2]|0;
  return ($10|0);
 } else {
  HEAP32[$0>>2] = $3;
  $10 = HEAP32[$0>>2]|0;
  return ($10|0);
 }
 return (0)|0;
}
function _lily_release_jump($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function _lily_jump_back($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($2)) + 8|0);
 _longjmp(($3|0),1);
 // unreachable;
}
function _lily_raise_syn($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_mb_flush($4);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$2>>2] = $varargs;
 $6 = HEAP32[$3>>2]|0;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 1;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 8|0);
 _longjmp(($9|0),1);
 // unreachable;
}
function _lily_raise_err($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_mb_flush($4);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$2>>2] = $varargs;
 $6 = HEAP32[$3>>2]|0;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 8|0);
 _longjmp(($9|0),1);
 // unreachable;
}
function _lily_raise_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_mb_flush($5);
 $6 = HEAP32[$4>>2]|0;
 _lily_mb_add($6,$2);
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 8|0);
 _longjmp(($8|0),1);
 // unreachable;
}
function _lily_name_for_error($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  $$ = $8 ? 15441 : 15447;
  $$0 = $$;
  return ($$0|0);
 } else {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _lily_new_string_pile() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 63;
 return ($0|0);
}
function _lily_free_string_pile($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_sp_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 $6 = (_strlen($1)|0);
 $7 = (($5) + ($6))|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<($7>>>0);
 if ($10) {
  $11 = HEAP32[$8>>2]|0;
  $12 = ($11>>>0)<($7>>>0);
  if ($12) {
   $14 = $11;
   while(1) {
    $13 = $14 << 1;
    $15 = ($13>>>0)<($7>>>0);
    if ($15) {
     $14 = $13;
    } else {
     break;
    }
   }
   HEAP32[$8>>2] = $13;
   $$lcssa = $13;
  } else {
   $$lcssa = $11;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = (_lily_realloc($16,$$lcssa)|0);
  HEAP32[$0>>2] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP16[$2>>1]|0;
 $20 = $19&65535;
 $21 = (($18) + ($20)|0);
 (_strcpy($21,$1)|0);
 $22 = $7&65535;
 HEAP16[$2>>1] = $22;
 return;
}
function _lily_sp_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1)|0);
 return ($3|0);
}
function _lily_new_symtab($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(100)|0);
 $2 = ((($1)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 36|0);
 HEAP32[$3>>2] = 1;
 HEAP32[$1>>2] = 0;
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = (_lily_new_value_stack()|0);
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 32|0);
 HEAP32[$9>>2] = $0;
 return ($1|0);
}
function _lily_set_builtin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _hide_classes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$013$lcssa = 0, $$01314 = 0, $$01314$phi = 0, $$015 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($2|0);
 if ($5) {
  $$013$lcssa = $4;
 } else {
  $$01314 = $4;$$015 = $1;
  while(1) {
   $6 = HEAP32[$$015>>2]|0;
   HEAP32[$$015>>2] = $$01314;
   $7 = ($6|0)==($2|0);
   if ($7) {
    $$013$lcssa = $$015;
    break;
   } else {
    $$01314$phi = $$015;$$015 = $6;$$01314 = $$01314$phi;
   }
  }
 }
 HEAP32[$3>>2] = $$013$lcssa;
 return;
}
function _free_vars_since($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 } else {
  $$07 = $0;
 }
 while(1) {
  $3 = HEAP32[$$07>>2]|0;
  $4 = ((($$07)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_free($5);
  _lily_free($$07);
  $6 = ($3|0)==($1|0);
  if ($6) {
   break;
  } else {
   $$07 = $3;
  }
 }
 return;
}
function _lily_free_module_symbols($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _free_classes_until($3,0);
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 _free_vars_since($5,0);
 return;
}
function _free_classes_until($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$be = 0, $$03538 = 0, $$03637 = 0, $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 } else {
  $$040 = $0;
 }
 while(1) {
  $3 = ((($$040)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_free($4);
  $5 = ((($$040)) + 4|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(3);
  if ($7) {
   $8 = HEAP32[$$040>>2]|0;
   _lily_free($$040);
   $$0$be = $8;
  } else {
   $10 = ((($$040)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    _free_properties($$040);
   }
   $13 = ((($$040)) + 56|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $$03637 = $14;
    while(1) {
     $16 = HEAP32[$$03637>>2]|0;
     $17 = ((($$03637)) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     _lily_free($18);
     _lily_free($$03637);
     $19 = ($16|0)==(0|0);
     if ($19) {
      break;
     } else {
      $$03637 = $16;
     }
    }
   }
   $20 = ((($$040)) + 6|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 & 8;
   $23 = ($22<<16>>16)==(0);
   if (!($23)) {
    $24 = ((($$040)) + 48|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==(0);
    if (!($26)) {
     $27 = ((($$040)) + 40|0);
     $$03538 = 0;
     while(1) {
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) + ($$03538<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($30)) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      _lily_free($32);
      $33 = HEAP32[$27>>2]|0;
      $34 = (($33) + ($$03538<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      _lily_free($35);
      $36 = (($$03538) + 1)|0;
      $37 = HEAP16[$24>>1]|0;
      $38 = $37&65535;
      $39 = ($36|0)<($38|0);
      if ($39) {
       $$03538 = $36;
      } else {
       break;
      }
     }
    }
   }
   $40 = ((($$040)) + 40|0);
   $41 = HEAP32[$40>>2]|0;
   _lily_free($41);
   $42 = HEAP32[$$040>>2]|0;
   _lily_free($$040);
   $$0$be = $42;
  }
  $9 = ($$0$be|0)==($1|0);
  if ($9) {
   break;
  } else {
   $$040 = $$0$be;
  }
 }
 return;
}
function _free_properties($0) {
 $0 = $0|0;
 var $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 } else {
  $$09 = $2;
 }
 while(1) {
  $4 = HEAP32[$$09>>2]|0;
  $5 = ((($$09)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_free($6);
  _lily_free($$09);
  $7 = ($4|0)==(0|0);
  if ($7) {
   break;
  } else {
   $$09 = $4;
  }
 }
 return;
}
function _lily_rewind_symtab($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($1)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 if (!($8)) {
  _free_vars_since($7,$3);
  HEAP32[$6>>2] = $3;
 }
 $9 = ((($1)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==($2|0);
 if ($11) {
  return;
 }
 $12 = ($4|0)==(0);
 if ($12) {
  _hide_classes($0,$10,$2);
 } else {
  _free_classes_until($10,$2);
 }
 HEAP32[$9>>2] = $2;
 return;
}
function _lily_free_symtab($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _free_literals($2);
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _free_classes_until($4,0);
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _free_classes_until($6,0);
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 _free_vars_since($8,0);
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_free($10);
 _lily_free($0);
 return;
}
function _free_literals($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_free_value_stack($0);
  return;
 }
 while(1) {
  $4 = (_lily_vs_pop($0)|0);
  $5 = HEAP16[$4>>1]|0;
  switch ($5<<16>>16) {
  case 2: case 1: case 6:  {
   break;
  }
  default: {
   $6 = HEAP32[$4>>2]|0;
   $7 = $6 | 524288;
   HEAP32[$4>>2] = $7;
   _lily_deref($4);
  }
  }
  _lily_free($4);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  }
 }
 _lily_free_value_stack($0);
 return;
}
function _lily_get_integer_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_lit_of($4,1)|0);
 $$old1 = ($5|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$026 = $5;
   while(1) {
    $6 = ((($$026)) + 8|0);
    $7 = $6;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($9|0)==($1|0);
    $14 = ($12|0)==($2|0);
    $15 = $13 & $14;
    if ($15) {
     $$0 = $$026;
     label = 7;
     break;
    }
    $16 = ((($$026)) + 4|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = ($17<<16>>16)==(0);
    if ($18) {
     label = 5;
     break;
    }
    $19 = $17&65535;
    $20 = HEAP32[$3>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($19<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     break L1;
    } else {
     $$026 = $23;
    }
   }
   if ((label|0) == 5) {
    $25 = HEAP32[$3>>2]|0;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27&65535;
    $29 = ((($$026)) + 4|0);
    HEAP16[$29>>1] = $28;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $30 = (_lily_new_value_of_integer($1,$2)|0);
 $31 = HEAP32[$3>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33&65535;
 $35 = ((($30)) + 6|0);
 HEAP16[$35>>1] = $34;
 $36 = ((($30)) + 4|0);
 HEAP16[$36>>1] = 0;
 $37 = HEAP32[$3>>2]|0;
 _lily_vs_push($37,$30);
 $$0 = $30;
 return ($$0|0);
}
function _first_lit_of($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01617 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$2 = 0;
  return ($$2|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $$01617 = 0;
 while(1) {
  $8 = (($5) + ($$01617<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($11|0)==($1|0);
  $6 = (($$01617) + 1)|0;
  if ($12) {
   $$2 = $9;
   label = 5;
   break;
  }
  $7 = ($6|0)<($3|0);
  if ($7) {
   $$01617 = $6;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_get_double_literal($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$026 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_first_lit_of($3,2)|0);
 $$old1 = ($4|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$026 = $4;
   while(1) {
    $5 = ((($$026)) + 8|0);
    $6 = +HEAPF64[$5>>3];
    $7 = $6 == $1;
    if ($7) {
     $$0 = $$026;
     label = 7;
     break;
    }
    $8 = ((($$026)) + 4|0);
    $9 = HEAP16[$8>>1]|0;
    $10 = ($9<<16>>16)==(0);
    if ($10) {
     label = 5;
     break;
    }
    $11 = $9&65535;
    $12 = HEAP32[$2>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + ($11<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     break L1;
    } else {
     $$026 = $15;
    }
   }
   if ((label|0) == 5) {
    $17 = HEAP32[$2>>2]|0;
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19&65535;
    $21 = ((($$026)) + 4|0);
    HEAP16[$21>>1] = $20;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $22 = (_lily_new_value_of_double($1)|0);
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&65535;
 $27 = ((($22)) + 6|0);
 HEAP16[$27>>1] = $26;
 $28 = ((($22)) + 4|0);
 HEAP16[$28>>1] = 0;
 $29 = HEAP32[$2>>2]|0;
 _lily_vs_push($29,$22);
 $$0 = $22;
 return ($$0|0);
}
function _lily_get_bytestring_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$034 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_lit_of($4,5)|0);
 $$old1 = ($5|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$034 = $5;
   while(1) {
    $6 = ((($$034)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($7)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==($2|0);
    if ($10) {
     $11 = ((($7)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_memcmp($12,$1,$2)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $$0 = $$034;
      label = 8;
      break;
     }
    }
    $15 = ((($$034)) + 4|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(0);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $16&65535;
    $19 = HEAP32[$3>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     break L1;
    } else {
     $$034 = $22;
    }
   }
   if ((label|0) == 6) {
    $24 = HEAP32[$3>>2]|0;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    $28 = ((($$034)) + 4|0);
    HEAP16[$28>>1] = $27;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $29 = (_lily_new_bytestring_sized($1,$2)|0);
 $30 = (_lily_new_value_of_bytestring($29)|0);
 HEAP32[$30>>2] = 5;
 $31 = HEAP32[$3>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33&65535;
 $35 = ((($30)) + 6|0);
 HEAP16[$35>>1] = $34;
 $36 = ((($30)) + 4|0);
 HEAP16[$36>>1] = 0;
 $37 = HEAP32[$3>>2]|0;
 _lily_vs_push($37,$30);
 $$0 = $30;
 return ($$0|0);
}
function _lily_get_string_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_first_lit_of($3,3)|0);
 $5 = (_strlen($1)|0);
 $$old1 = ($4|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$035 = $4;
   while(1) {
    $6 = ((($$035)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($7)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==($5|0);
    if ($10) {
     $11 = ((($7)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_strcmp($12,$1)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $$0 = $$035;
      label = 8;
      break;
     }
    }
    $15 = ((($$035)) + 4|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(0);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $16&65535;
    $19 = HEAP32[$2>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     break L1;
    } else {
     $$035 = $22;
    }
   }
   if ((label|0) == 6) {
    $24 = HEAP32[$2>>2]|0;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    $28 = ((($$035)) + 4|0);
    HEAP16[$28>>1] = $27;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $29 = (_lily_new_string($1)|0);
 $30 = (_lily_new_value_of_string($29)|0);
 HEAP32[$30>>2] = 3;
 $31 = HEAP32[$2>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33&65535;
 $35 = ((($30)) + 6|0);
 HEAP16[$35>>1] = $34;
 $36 = ((($30)) + 4|0);
 HEAP16[$36>>1] = 0;
 $37 = HEAP32[$2>>2]|0;
 _lily_vs_push($37,$30);
 $$0 = $30;
 return ($$0|0);
}
function _store_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($2)) + 16|0);
 HEAP32[$7>>2] = $3;
 $8 = (_lily_malloc(16)|0);
 HEAP32[$8>>2] = 7;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_vs_push($11,$8);
 return;
}
function _lily_store_function($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _store_function($0,$1,$2,$4);
 return;
}
function _lily_new_raw_unlinked_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(48)|0);
 $4 = (_strlen($2)|0);
 $5 = (($4) + 1)|0;
 $6 = (_lily_malloc($5)|0);
 $7 = ((($3)) + 16|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 4|0);
 HEAP16[$8>>1] = 1;
 $9 = ((($3)) + 6|0);
 HEAP16[$9>>1] = 0;
 $10 = HEAP32[$7>>2]|0;
 (_strcpy($10,$2)|0);
 $11 = ((($0)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 32|0);
 HEAP32[$14>>2] = $13;
 $15 = (_shorthash_for_name_556($2)|0);
 $16 = tempRet0;
 $17 = ((($3)) + 24|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = ((($3)) + 12|0);
 HEAP32[$22>>2] = $1;
 HEAP32[$3>>2] = 0;
 $23 = ((($3)) + 40|0);
 HEAP32[$23>>2] = 0;
 return ($3|0);
}
function _shorthash_for_name_556($0) {
 $0 = $0|0;
 var $$01621 = 0, $$01720 = 0, $$01819 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $20 = 0;$21 = 0;
  tempRet0 = ($20);
  return ($21|0);
 } else {
  $$01621 = 0;$$01720 = 0;$$01819 = $0;$10 = 0;$12 = 0;$4 = $1;
 }
 while(1) {
  $3 = $4 << 24 >> 24;
  $5 = ($3|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_bitshift64Shl(($3|0),($6|0),($$01621|0))|0);
  $8 = tempRet0;
  $9 = $7 | $10;
  $11 = $8 | $12;
  $13 = ((($$01819)) + 1|0);
  $14 = (($$01720) + 1)|0;
  $15 = (($$01621) + 8)|0;
  $16 = HEAP8[$13>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  $18 = ($14|0)!=(8);
  $19 = $18 & $17;
  if ($19) {
   $$01621 = $15;$$01720 = $14;$$01819 = $13;$10 = $9;$12 = $11;$4 = $16;
  } else {
   $20 = $11;$21 = $9;
   break;
  }
 }
 tempRet0 = ($20);
 return ($21|0);
}
function _lily_new_raw_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_new_raw_unlinked_var($0,$1,$2)|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$3>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = ((($8)) + 32|0);
 HEAP32[$9>>2] = $3;
 return ($3|0);
}
function _lily_find_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_shorthash_for_name_556($2)|0);
 $4 = tempRet0;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $17 = ((($1)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_find_var($18,$2,$3,$4)|0);
  $$0 = $19;
  return ($$0|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_find_var($9,$2,$3,$4)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_find_var($15,$2,$3,$4)|0);
 $$0 = $16;
 return ($$0|0);
}
function _find_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$07 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$07 = $0;
 }
 while(1) {
  $5 = ((($$07)) + 24|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($2|0);
  $13 = ($11|0)==($3|0);
  $14 = $12 & $13;
  if ($14) {
   $15 = ((($$07)) + 6|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 & 32;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $19 = ((($$07)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_strcmp($20,$1)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$0$lcssa = $$07;
     label = 6;
     break;
    }
   }
  }
  $23 = HEAP32[$$07>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$0$lcssa = 0;
   label = 6;
   break;
  } else {
   $$07 = $23;
  }
 }
 if ((label|0) == 6) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_hide_block_vars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $$07 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $$06 = HEAP32[$4>>2]|0;
 $5 = ($$06|0)==($1|0);
 if ($5) {
  return;
 } else {
  $$07 = $$06;
 }
 while(1) {
  $6 = ((($$07)) + 6|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 | 32;
  $10 = $9&65535;
  HEAP16[$6>>1] = $10;
  $$0 = HEAP32[$$07>>2]|0;
  $11 = ($$0|0)==($1|0);
  if ($11) {
   break;
  } else {
   $$07 = $$0;
  }
 }
 return;
}
function _lily_new_raw_class($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(64)|0);
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (_lily_malloc($3)|0);
 (_strcpy($4,$0)|0);
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($1)) + 6|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($1)) + 12|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($1)) + 10|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($1)) + 32|0);
 HEAP32[$9>>2] = 0;
 $10 = (_shorthash_for_name_556($0)|0);
 $11 = tempRet0;
 $12 = ((($1)) + 24|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = ((($1)) + 16|0);
 HEAP32[$17>>2] = $4;
 $18 = ((($1)) + 36|0);
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;HEAP32[$18+16>>2]=0|0;HEAP32[$18+20>>2]=0|0;
 return ($1|0);
}
function _lily_new_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_raw_class($1)|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 52|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&65535;
 $9 = ((($2)) + 8|0);
 HEAP16[$9>>1] = $8;
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$6>>2] = $11;
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$2>>2] = $14;
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = $2;
 return ($2|0);
}
function _lily_new_enum_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_class($0,$1)|0);
 $3 = ((($2)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 | 4;
 $7 = $6&65535;
 HEAP16[$3>>1] = $7;
 return ($2|0);
}
function _lily_find_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_shorthash_for_name_556($2)|0);
 $4 = tempRet0;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $23 = ((($1)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_find_class($24,$2,$3,$4)|0);
  $$0 = $25;
  return ($$0|0);
 }
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $20 = ((($0)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_lily_gp_find($21,$2)|0);
  $$0 = $22;
  return ($$0|0);
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_find_class($12,$2,$3,$4)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_find_class($18,$2,$3,$4)|0);
 $$0 = $19;
 return ($$0|0);
}
function _find_class($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$06 = $0;
 }
 while(1) {
  $5 = ((($$06)) + 24|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($2|0);
  $13 = ($11|0)==($3|0);
  $14 = $12 & $13;
  if ($14) {
   $15 = ((($$06)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strcmp($16,$1)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0$lcssa = $$06;
    label = 5;
    break;
   }
  }
  $19 = HEAP32[$$06>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0$lcssa = 0;
   label = 5;
   break;
  } else {
   $$06 = $19;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_find_member($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$025 = 0, $$026 = 0, $$2 = 0, $$tr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr = $0;
 L1: while(1) {
  $2 = ((($$tr)) + 36|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (_shorthash_for_name_556($1)|0);
   $6 = tempRet0;
   $$025 = HEAP32[$2>>2]|0;
   $7 = ($$025|0)==(0|0);
   if (!($7)) {
    $$026 = $$025;
    while(1) {
     $8 = ((($$026)) + 24|0);
     $9 = $8;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $12 = (($9) + 4)|0;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $15 = ($11|0)==($5|0);
     $16 = ($14|0)==($6|0);
     $17 = $15 & $16;
     if ($17) {
      $18 = ((($$026)) + 16|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_strcmp($19,$1)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       $$2 = $$026;
       label = 8;
       break L1;
      }
     }
     $$0 = HEAP32[$$026>>2]|0;
     $22 = ($$0|0)==(0|0);
     if ($22) {
      break;
     } else {
      $$026 = $$0;
     }
    }
   }
  }
  $23 = ((($$tr)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $$2 = 0;
   label = 8;
   break;
  } else {
   $$tr = $24;
  }
 }
 if ((label|0) == 8) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_find_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_find_member($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(1);
 $phitmp = $6 ? $2 : 0;
 $$0 = $phitmp;
 return ($$0|0);
}
function _lily_find_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_find_member($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(4);
 $phitmp = $6 ? $2 : 0;
 $$0 = $phitmp;
 return ($$0|0);
}
function _lily_add_class_method($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($2|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $8;
 }
 $9 = ((($1)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$2>>2] = $10;
 HEAP32[$9>>2] = $2;
 return;
}
function _lily_add_class_property($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_lily_malloc(40)|0);
 $6 = (_strlen($3)|0);
 $7 = (($6) + 1)|0;
 $8 = (_lily_malloc($7)|0);
 (_strcpy($8,$3)|0);
 $9 = ((($5)) + 4|0);
 HEAP16[$9>>1] = 4;
 $10 = $4&65535;
 $11 = ((($5)) + 6|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($5)) + 16|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($5)) + 12|0);
 HEAP32[$13>>2] = $2;
 $14 = (_shorthash_for_name_556($8)|0);
 $15 = tempRet0;
 $16 = ((($5)) + 24|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 $21 = ((($1)) + 48|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ((($5)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($5)) + 32|0);
 HEAP32[$25>>2] = $1;
 $26 = HEAP16[$21>>1]|0;
 $27 = (($26) + 1)<<16>>16;
 HEAP16[$21>>1] = $27;
 $28 = ((($1)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$5>>2] = $29;
 HEAP32[$28>>2] = $5;
 return ($5|0);
}
function _lily_new_variant_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(40)|0);
 $4 = ((($3)) + 4|0);
 HEAP16[$4>>1] = 3;
 $5 = ((($3)) + 6|0);
 HEAP16[$5>>1] = 16;
 $6 = ((($3)) + 32|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = (_shorthash_for_name_556($2)|0);
 $9 = tempRet0;
 $10 = ((($3)) + 24|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (_strlen($2)|0);
 $16 = (($15) + 1)|0;
 $17 = (_lily_malloc($16)|0);
 $18 = ((($3)) + 16|0);
 HEAP32[$18>>2] = $17;
 (_strcpy($17,$2)|0);
 $19 = ((($0)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 $22 = ((($3)) + 8|0);
 HEAP16[$22>>1] = $21;
 $23 = HEAP32[$19>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$19>>2] = $24;
 $25 = ((($0)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$3>>2] = $28;
 $29 = HEAP32[$25>>2]|0;
 $30 = ((($29)) + 28|0);
 HEAP32[$30>>2] = $3;
 return ($3|0);
}
function _lily_find_scoped_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$018 = 0, $$018$lcssa = 0, $$01819 = 0, $$020 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_shorthash_for_name_556($1)|0);
 $3 = tempRet0;
 $4 = ((($0)) + 48|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $$018$lcssa = 0;
  return ($$018$lcssa|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP16[$4>>1]|0;
 $10 = $9&65535;
 $$01819 = 0;$$020 = 0;
 while(1) {
  $11 = (($8) + ($$020<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)==($2|0);
  $21 = ($19|0)==($3|0);
  $22 = $20 & $21;
  if ($22) {
   $23 = ((($12)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_strcmp($24,$1)|0);
   $26 = ($25|0)==(0);
   $$$018 = $26 ? $12 : $$01819;
   $$1 = $$$018;
  } else {
   $$1 = $$01819;
  }
  $27 = (($$020) + 1)|0;
  $28 = ($27|0)<($10|0);
  if ($28) {
   $$01819 = $$1;$$020 = $27;
  } else {
   $$018$lcssa = $$1;
   break;
  }
 }
 return ($$018$lcssa|0);
}
function _lily_finish_enum($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$035$lcssa46 = 0, $$03541 = 0, $$036 = 0, $$03640 = 0, $$03642 = 0, $$038 = 0, $$139 = 0, $$139$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $$03640 = HEAP32[$6>>2]|0;
 $7 = ($$03640|0)==($1|0);
 if ($7) {
  $8 = (_lily_malloc(0)|0);
  $$035$lcssa46 = 0;$28 = $8;
 } else {
  $$03541 = 0;$$03642 = $$03640;
  while(1) {
   $9 = (($$03541) + 1)|0;
   $$036 = HEAP32[$$03642>>2]|0;
   $10 = ($$036|0)==($1|0);
   if ($10) {
    break;
   } else {
    $$03541 = $9;$$03642 = $$036;
   }
  }
  $11 = $9 << 2;
  $12 = (_lily_malloc($11)|0);
  $13 = ($$03541|0)>(-1);
  if ($13) {
   $14 = HEAP32[$4>>2]|0;
   $15 = ((($14)) + 28|0);
   $16 = ((($1)) + 6|0);
   $$038 = 0;$$139$in = $15;
   while(1) {
    $$139 = HEAP32[$$139$in>>2]|0;
    $17 = (($$03541) - ($$038))|0;
    $18 = (($12) + ($17<<2)|0);
    HEAP32[$18>>2] = $$139;
    $19 = ((($$139)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $22 = HEAP16[$16>>1]|0;
     $23 = $22&65535;
     $24 = $23 | 2;
     $25 = $24&65535;
     HEAP16[$16>>1] = $25;
    }
    $26 = (($$038) + 1)|0;
    $exitcond = ($26|0)==($9|0);
    if ($exitcond) {
     $$035$lcssa46 = $9;$28 = $12;
     break;
    } else {
     $$038 = $26;$$139$in = $$139;
    }
   }
  } else {
   $$035$lcssa46 = $9;$28 = $12;
  }
 }
 $27 = ((($1)) + 40|0);
 HEAP32[$27>>2] = $28;
 $29 = $$035$lcssa46&65535;
 $30 = ((($1)) + 48|0);
 HEAP16[$30>>1] = $29;
 $31 = ((($1)) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $33 | 4;
 $35 = $34&65535;
 HEAP16[$31>>1] = $35;
 $36 = ($2|0)==(0);
 if ($36) {
  return;
 }
 $37 = $33 | 12;
 $38 = $37&65535;
 HEAP16[$31>>1] = $38;
 $39 = HEAP32[$4>>2]|0;
 $40 = ((($39)) + 28|0);
 HEAP32[$40>>2] = $1;
 return;
}
function _lily_register_classes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02628 = 0, $$027 = 0, $$02729 = 0, $$02730 = 0, $$032 = 0, $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 _lily_vm_ensure_class_table($1,$4);
 $5 = ((($0)) + 8|0);
 $$032 = HEAP32[$5>>2]|0;
 $6 = ($$032|0)==(0|0);
 if ($6) {
  $26 = ((($0)) + 44|0);
  $27 = HEAP32[$26>>2]|0;
  _lily_vm_add_class_unchecked($1,$27);
  return;
 } else {
  $$033 = $$032;
 }
 while(1) {
  $7 = ((($$033)) + 28|0);
  $$02729 = HEAP32[$7>>2]|0;
  $8 = ($$02729|0)==(0|0);
  if (!($8)) {
   $$02730 = $$02729;
   while(1) {
    _lily_vm_add_class_unchecked($1,$$02730);
    $9 = ((($$02730)) + 6|0);
    $10 = HEAP16[$9>>1]|0;
    $11 = $10 & 8;
    $12 = ($11<<16>>16)==(0);
    if (!($12)) {
     $13 = ((($$02730)) + 48|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = ($14<<16>>16)==(0);
     if (!($15)) {
      $16 = ((($$02730)) + 40|0);
      $$02628 = 0;
      while(1) {
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + ($$02628<<2)|0);
       $19 = HEAP32[$18>>2]|0;
       _lily_vm_add_class_unchecked($1,$19);
       $20 = (($$02628) + 1)|0;
       $21 = HEAP16[$13>>1]|0;
       $22 = $21&65535;
       $23 = ($20|0)<($22|0);
       if ($23) {
        $$02628 = $20;
       } else {
        break;
       }
      }
     }
    }
    $$027 = HEAP32[$$02730>>2]|0;
    $24 = ($$027|0)==(0|0);
    if ($24) {
     break;
    } else {
     $$02730 = $$027;
    }
   }
  }
  $$0 = HEAP32[$$033>>2]|0;
  $25 = ($$0|0)==(0|0);
  if ($25) {
   break;
  } else {
   $$033 = $$0;
  }
 }
 $26 = ((($0)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 _lily_vm_add_class_unchecked($1,$27);
 return;
}
function _lily_find_module($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_find_module($5,$2)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  $7 = (_find_module($1,$2)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _find_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$2 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $$old1 = ($3|0)==(0|0);
 if ($$old1) {
  $$2 = 0;
  return ($$2|0);
 } else {
  $$021 = $3;
 }
 while(1) {
  $4 = ((($$021)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $cond = ($5|0)==(0|0);
  if ($cond) {
   $8 = HEAP32[$$021>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_strcmp($10,$1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    break;
   }
  } else {
   $6 = (_strcmp($5,$1)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
  }
  $14 = ((($$021)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$2 = 0;
   label = 7;
   break;
  } else {
   $$021 = $15;
  }
 }
 if ((label|0) == 7) {
  return ($$2|0);
 }
 $13 = HEAP32[$$021>>2]|0;
 $$2 = $13;
 return ($$2|0);
}
function _lily_new_type_maker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_new_raw_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(20)|0);
 $2 = ((($1)) + 4|0);
 HEAP16[$2>>1] = 6;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($1)) + 6|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($1)) + 8|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($1)) + 10|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$1>>2] = 0;
 return ($1|0);
}
function _lily_tm_reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($1))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + ($1))|0;
  $15 = $10;
  while(1) {
   $14 = $15 << 1;
   $16 = ($13>>>0)>($14>>>0);
   if ($16) {
    $15 = $14;
   } else {
    break;
   }
  }
  HEAP32[$5>>2] = $14;
  $$lcssa = $14;
 } else {
  $$lcssa = $10;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = $$lcssa << 2;
 $19 = (_lily_realloc($17,$18)|0);
 HEAP32[$0>>2] = $19;
 return;
}
function _lily_tm_add_unchecked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 HEAP32[$5>>2] = $1;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 return;
}
function _lily_tm_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = $6 << 1;
  HEAP32[$5>>2] = $8;
  $9 = HEAP32[$0>>2]|0;
  $10 = $6 << 3;
  $11 = (_lily_realloc($9,$10)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $1;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$2>>2] = $16;
 return;
}
function _lily_tm_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($1>>>0);
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6>>>0)>($1>>>0);
  if ($7) {
   $$lcssa = $6;
  } else {
   $9 = $6;
   while(1) {
    $8 = $9 << 1;
    $10 = ($8>>>0)>($1>>>0);
    if ($10) {
     break;
    } else {
     $9 = $8;
    }
   }
   HEAP32[$3>>2] = $8;
   $$lcssa = $8;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = $$lcssa << 2;
  $13 = (_lily_realloc($11,$12)|0);
  HEAP32[$0>>2] = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($1<<2)|0);
 HEAP32[$15>>2] = $2;
 return;
}
function _lily_tm_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_tm_make($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP16[$6>>1] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($3))|0;
 $11 = (($7) + ($10<<2)|0);
 $12 = ((($4)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = $3&65535;
 $14 = ((($4)) + 10|0);
 HEAP16[$14>>1] = $13;
 $15 = $1&65535;
 $16 = ((($4)) + 6|0);
 HEAP16[$16>>1] = $15;
 HEAP32[$4>>2] = 0;
 $17 = (_lookup_type($4)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $$0 = $17;
  $21 = HEAP32[$8>>2]|0;
  $22 = (($21) - ($3))|0;
  HEAP32[$8>>2] = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ((($4)) + 4|0);
 HEAP16[$19>>1] = 6;
 $20 = (_build_real_type_for($4)|0);
 $$0 = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = (($21) - ($3))|0;
 HEAP32[$8>>2] = $22;
 STACKTOP = sp;return ($$0|0);
}
function _lookup_type($0) {
 $0 = $0|0;
 var $$02636 = 0, $$028 = 0, $$02838 = 0, $$02839 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 56|0);
 $$02838 = HEAP32[$3>>2]|0;
 $4 = ($$02838|0)==(0|0);
 if ($4) {
  $$3 = 0;
  return ($$3|0);
 }
 $5 = ((($0)) + 10|0);
 $6 = ((($0)) + 6|0);
 $7 = ((($0)) + 16|0);
 $$02839 = $$02838;
 L4: while(1) {
  $8 = ((($$02839)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  L6: do {
   if (!($10)) {
    $11 = ((($$02839)) + 10|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = HEAP16[$5>>1]|0;
    $14 = ($12<<16>>16)==($13<<16>>16);
    if ($14) {
     $15 = ((($$02839)) + 6|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = HEAP16[$6>>1]|0;
     $18 = $17 ^ $16;
     $19 = $18 & -13313;
     $20 = ($19<<16>>16)==(0);
     if ($20) {
      $21 = HEAP16[$11>>1]|0;
      $22 = ($21<<16>>16)==(0);
      if ($22) {
       $$3 = $$02839;
       label = 11;
       break L4;
      }
      $23 = HEAP32[$8>>2]|0;
      $24 = HEAP32[$7>>2]|0;
      $$02636 = 0;
      while(1) {
       $29 = (($23) + ($$02636<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($24) + ($$02636<<2)|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($30|0)==($32|0);
       $27 = (($$02636) + 1)|0;
       if (!($33)) {
        break L6;
       }
       $25 = HEAP16[$11>>1]|0;
       $26 = $25&65535;
       $28 = ($27|0)<($26|0);
       if ($28) {
        $$02636 = $27;
       } else {
        $$3 = $$02839;
        label = 11;
        break L4;
       }
      }
     }
    }
   }
  } while(0);
  $$028 = HEAP32[$$02839>>2]|0;
  $34 = ($$028|0)==(0|0);
  if ($34) {
   $$3 = 0;
   label = 11;
   break;
  } else {
   $$02839 = $$028;
  }
 }
 if ((label|0) == 11) {
  return ($$3|0);
 }
 return (0)|0;
}
function _build_real_type_for($0) {
 $0 = $0|0;
 var $$033 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lily_new_raw_type($2)|0);
 ;HEAP32[$3>>2]=HEAP32[$0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$0+16>>2]|0;
 $4 = ((($0)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 << 2;
 $8 = (_lily_malloc($7)|0);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 _memcpy(($8|0),($10|0),($7|0))|0;
 $11 = ((($3)) + 16|0);
 HEAP32[$11>>2] = $8;
 $12 = ((($3)) + 10|0);
 HEAP16[$12>>1] = $5;
 $13 = ((($3)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$15>>2] = $3;
 $17 = HEAP16[$12>>1]|0;
 $18 = ($17<<16>>16)==(0);
 if ($18) {
  return ($3|0);
 }
 $19 = HEAP32[$11>>2]|0;
 $20 = HEAP16[$12>>1]|0;
 $21 = $20&65535;
 $22 = ((($3)) + 6|0);
 $$033 = 0;
 while(1) {
  $23 = (($19) + ($$033<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 6|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $29 = $28 & 13312;
   $30 = HEAP16[$22>>1]|0;
   $31 = $30&65535;
   $32 = $31 | $29;
   $33 = $32&65535;
   HEAP16[$22>>1] = $33;
  }
  $34 = (($$033) + 1)|0;
  $35 = ($34|0)<($21|0);
  if ($35) {
   $$033 = $34;
  } else {
   break;
  }
 }
 return ($3|0);
}
function _lily_tm_make_dynamicd_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $$0$lcssa = 0;
 } else {
  $7 = ((($1)) + 16|0);
  $$017 = 0;
  while(1) {
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + ($$017<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 6|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 & 4096;
   $14 = ($13<<16>>16)==(0);
   if ($14) {
    _lily_tm_add($0,$10);
   } else {
    _lily_tm_add($0,$3);
   }
   $15 = (($$017) + 1)|0;
   $16 = HEAP16[$4>>1]|0;
   $17 = $16&65535;
   $18 = ($15|0)<($17|0);
   if ($18) {
    $$017 = $15;
   } else {
    $$0$lcssa = $15;
    break;
   }
  }
 }
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_lily_tm_make($0,0,$20,$$0$lcssa)|0);
 return ($21|0);
}
function _lily_tm_pos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_tm_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _lily_free_type_maker($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_new_type_system($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(32)|0);
 $4 = (_lily_malloc(16)|0);
 $5 = ((($3)) + 28|0);
 HEAP32[$5>>2] = $0;
 HEAP32[$3>>2] = $4;
 $6 = ((($3)) + 4|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($3)) + 10|0);
 HEAP16[$7>>1] = 4;
 $8 = ((($3)) + 8|0);
 HEAP16[$8>>1] = 1;
 $9 = ((($3)) + 6|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 24|0);
 HEAP32[$11>>2] = $2;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$12>>2] = 0;
 $13 = ((($3)) + 12|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 return ($3|0);
}
function _lily_free_type_system($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  _lily_free($2);
 }
 _lily_free($0);
 return;
}
function _lily_ts_resolve_with($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06264 = 0, $$063 = 0, $$1 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = ((($1)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 9216;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  $$1 = $1;
  return ($$1|0);
 }
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 46|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(0);
 if (!($12)) {
  $13 = ((($0)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($1)) + 10|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ((($0)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($20) + ($17))|0;
  _lily_tm_reserve($14,$21);
  $22 = ((($1)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$13>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP16[$15>>1]|0;
  $28 = ($27<<16>>16)==(0);
  if ($28) {
   $$lcssa = $24;
  } else {
   $$06264 = 0;$32 = $24;
   while(1) {
    $29 = (($23) + ($$06264<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_lily_ts_resolve_with($0,$30,$2)|0);
    _lily_tm_add_unchecked($32,$31);
    $33 = (($$06264) + 1)|0;
    $34 = HEAP16[$15>>1]|0;
    $35 = $34&65535;
    $36 = ($33|0)<($35|0);
    $37 = HEAP32[$13>>2]|0;
    if ($36) {
     $$06264 = $33;$32 = $37;
    } else {
     $$lcssa = $37;
     break;
    }
   }
  }
  $38 = HEAP16[$4>>1]|0;
  $39 = $38&65535;
  $40 = HEAP32[$8>>2]|0;
  $41 = ((($$lcssa)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) - ($26))|0;
  $44 = (_lily_tm_make($$lcssa,$39,$40,$43)|0);
  $$1 = $44;
  return ($$1|0);
 }
 $45 = ((($9)) + 8|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = ($46<<16>>16)==(-5);
 if ($48) {
  $49 = ((($0)) + 4|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = ((($1)) + 8|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = (($54) + ($51))|0;
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if (!($59)) {
   $60 = ((($58)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 8|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = ($63<<16>>16)==(-6);
   if (!($64)) {
    $$1 = $58;
    return ($$1|0);
   }
  }
  $65 = HEAP16[$49>>1]|0;
  $66 = $65&65535;
  $67 = HEAP16[$52>>1]|0;
  $68 = $67&65535;
  $69 = (($68) + ($66))|0;
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + ($69<<2)|0);
  HEAP32[$71>>2] = $2;
  $$1 = $2;
  return ($$1|0);
 }
 $72 = ($46&65535)>(65532);
 if (!($72)) {
  $$1 = $1;
  return ($$1|0);
 }
 $73 = $47 ^ 65535;
 $74 = (((($0)) + 12|0) + ($73<<1)|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75&65535;
 $77 = (($76) + -1)|0;
 $78 = ($77|0)==(0);
 if ($78) {
  $$1 = $1;
  return ($$1|0);
 }
 $79 = (($73) + -1)|0;
 $80 = (((($0)) + 12|0) + ($79<<1)|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $83 = ($82|0)<($77|0);
 if ($83) {
  $84 = ((($0)) + 28|0);
  $$063 = $82;
  while(1) {
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$0>>2]|0;
   $87 = (($86) + ($$063<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   _lily_tm_add_unchecked($85,$88);
   $89 = (($$063) + 1)|0;
   $exitcond = ($89|0)==($77|0);
   if ($exitcond) {
    break;
   } else {
    $$063 = $89;
   }
  }
 }
 $90 = HEAP32[$0>>2]|0;
 $91 = (($90) + ($77<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $$1 = $92;
 return ($$1|0);
}
function _lily_ts_resolve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_ts_resolve_with($0,$1,$3)|0);
 return ($4|0);
}
function _lily_ts_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_check_raw($0,$1,$2,2)|0);
 return ($3|0);
}
function _check_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond39 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)==(0|0);
 $5 = ($2|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $6 = ($1|0)==($2|0);
  $7 = $6&1;
  $$not = $6 ^ 1;
  $8 = $3 & 8;
  $9 = ($8|0)==(0);
  $or$cond39 = $9 | $$not;
  if ($or$cond39) {
   $$0 = $7;
   return ($$0|0);
  }
  $10 = ((($0)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_tm_add($11,$1);
  $$0 = $7;
  return ($$0|0);
 }
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(-6);
 if ($16) {
  $17 = $3 & 8;
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 1;
   return ($$0|0);
  }
  $19 = ((($0)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_tm_add($20,$2);
  $$0 = 1;
  return ($$0|0);
 }
 $21 = ((($2)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ($24<<16>>16)==(-6);
 if ($25) {
  $26 = $3 & 8;
  $27 = ($26|0)==(0);
  if ($27) {
   $$0 = 1;
   return ($$0|0);
  }
  $28 = ((($0)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  _lily_tm_add($29,$1);
  $$0 = 1;
  return ($$0|0);
 }
 switch ($15<<16>>16) {
 case -5:  {
  $30 = (_check_generic($0,$1,$2,$3)|0);
  $$0 = $30;
  return ($$0|0);
  break;
 }
 case 7:  {
  label = 12;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 12) {
  $31 = ($24<<16>>16)==(7);
  if ($31) {
   $32 = (_check_function($0,$1,$2,$3)|0);
   $$0 = $32;
   return ($$0|0);
  }
 }
 $33 = HEAP32[$12>>2]|0;
 $34 = ((($33)) + 8|0);
 $35 = HEAP16[$34>>1]|0;
 switch ($35<<16>>16) {
 case 11:  {
  $36 = (_check_tuple($0,$1,$2,$3)|0);
  $$0 = $36;
  return ($$0|0);
  break;
 }
 case -2:  {
  $37 = (_collect_scoop($0,$1,$2,$3)|0);
  $$0 = $37;
  return ($$0|0);
  break;
 }
 default: {
  $38 = (_check_misc($0,$1,$2,$3)|0);
  $$0 = $38;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _check_generic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$2 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ($1|0)==($2|0);
  $7 = $6&1;
  $$not = $6 ^ 1;
  $8 = $3 & 8;
  $9 = ($8|0)==(0);
  $or$cond = $9 | $$not;
  if ($or$cond) {
   $$2 = $7;
   return ($$2|0);
  }
  $10 = ((($0)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_tm_add($11,$1);
  $$2 = $7;
  return ($$2|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ((($1)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($17) + ($14))|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + ($18<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = ((($0)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)==($24|0);
  if (!($25)) {
   $28 = ($21|0)==($2|0);
   if ($28) {
    $$2 = 1;
    return ($$2|0);
   }
   $29 = ((($21)) + 6|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30 & 4096;
   $32 = ($31<<16>>16)==(0);
   if ($32) {
    $37 = $3 | 1;
    $38 = (_check_raw($0,$21,$2,$37)|0);
    $$2 = $38;
    return ($$2|0);
   }
   $33 = (_lily_ts_unify($0,$21,$2)|0);
   $34 = ($33|0)==(0|0);
   if ($34) {
    $$2 = 0;
    return ($$2|0);
   }
   $35 = HEAP32[$0>>2]|0;
   $36 = (($35) + ($18<<2)|0);
   HEAP32[$36>>2] = $33;
   $$2 = 1;
   return ($$2|0);
  }
 }
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + ($18<<2)|0);
 HEAP32[$27>>2] = $2;
 $$2 = 1;
 return ($$2|0);
}
function _check_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$051 = 0, $$052$lcssa = 0, $$05262 = 0, $$3 = 0, $$3$ = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_tm_pos($5)|0);
 $7 = $3 & 9;
 $8 = ((($1)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7 | 2;
 $15 = (_check_raw($0,$10,$13,$14)|0);
 $16 = ($15|0)!=(0);
 $17 = $3 & 8;
 $18 = ($17|0)==(0);
 $or$cond = $18 | $16;
 if (!($or$cond)) {
  $19 = HEAP32[$4>>2]|0;
  _lily_tm_restore($19,$6);
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[431]|0;
  _lily_tm_add($20,$21);
 }
 $22 = ((($1)) + 10|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ((($2)) + 10|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($23&65535)>($25&65535);
 if ($26) {
  $27 = ($23<<16>>16)==(2);
  if ($27) {
   $28 = HEAP32[$8>>2]|0;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ($34&65535)>(65532);
   if ($35) {
    $$051 = 1;
    return ($$051|0);
   }
  }
  $$051 = 0;
  return ($$051|0);
 }
 $36 = $7 | 4;
 $37 = HEAP16[$22>>1]|0;
 $38 = ($37&65535)>(1);
 L12: do {
  if ($38) {
   $$05262 = 1;
   while(1) {
    $39 = HEAP32[$8>>2]|0;
    $40 = (($39) + ($$05262<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$11>>2]|0;
    $43 = (($42) + ($$05262<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 8|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = ($48<<16>>16)==(-4);
    if ($49) {
     $50 = ((($41)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($51)) + 8|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = ($53<<16>>16)==(-4);
     if ($54) {
      $$0 = $44;
     } else {
      $55 = ((($44)) + 16|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = HEAP32[$56>>2]|0;
      $$0 = $57;
     }
    } else {
     $$0 = $44;
    }
    $58 = (_check_raw($0,$41,$$0,$36)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $$052$lcssa = $$05262;$$3 = 0;
     break L12;
    }
    $60 = (($$05262) + 1)|0;
    $61 = HEAP16[$22>>1]|0;
    $62 = $61&65535;
    $63 = ($60|0)<($62|0);
    if ($63) {
     $$05262 = $60;
    } else {
     $$052$lcssa = $60;$$3 = 1;
     break;
    }
   }
  } else {
   $$052$lcssa = 1;$$3 = 1;
  }
 } while(0);
 $64 = HEAP16[$24>>1]|0;
 $65 = HEAP16[$22>>1]|0;
 $66 = ($64&65535)>($65&65535);
 if ($66) {
  $67 = HEAP32[$11>>2]|0;
  $68 = (($67) + ($$052$lcssa<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 8|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = ($73<<16>>16)==(-4);
  $$3$ = $74 ? $$3 : 0;
  $$5 = $$3$;
 } else {
  $$5 = $$3;
 }
 $75 = ($$5|0)==(0);
 $76 = $3 & 8;
 $77 = ($76|0)==(0);
 $or$cond58 = $77 | $75;
 if ($or$cond58) {
  $$051 = $$5;
  return ($$051|0);
 }
 $78 = HEAP16[$22>>1]|0;
 $79 = $78&65535;
 _simple_unify($0,$1,$2,$79);
 $$051 = $$5;
 return ($$051|0);
}
function _check_tuple($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$037 = 0, $$038 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(11);
 if (!($8)) {
  $$037 = 0;
  return ($$037|0);
 }
 $9 = ((($1)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & 8192;
 $12 = ($11<<16>>16)==(0);
 if ($12) {
  $13 = ((($1)) + 10|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ((($2)) + 10|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($14<<16>>16)==($16<<16>>16);
  if (!($17)) {
   $$037 = 0;
   return ($$037|0);
  }
  $18 = (_check_misc($0,$1,$2,$3)|0);
  $$037 = $18;
  return ($$037|0);
 }
 $19 = $3 & 8;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$037 = 0;
  return ($$037|0);
 }
 $21 = ((($1)) + 10|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ((($2)) + 10|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ($22&65535)>($24&65535);
 if ($25) {
  $$037 = 0;
  return ($$037|0);
 }
 $26 = $24&65535;
 $27 = ((($0)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ((($0)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = (($32) + ($29))|0;
 $34 = ((($1)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 8|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = $41 ^ 65535;
 $43 = (($33) + ($26))|0;
 $44 = ((($0)) + 10|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = ($43>>>0)<($46>>>0);
 if (!($47)) {
  _grow_types($0);
 }
 $48 = HEAP16[$23>>1]|0;
 $49 = $48&65535;
 $50 = ($48<<16>>16)==(0);
 if ($50) {
  $$lcssa = $49;
 } else {
  $51 = ((($2)) + 16|0);
  $52 = HEAP16[$23>>1]|0;
  $53 = $52&65535;
  $$038 = 0;
  while(1) {
   $54 = HEAP32[$51>>2]|0;
   $55 = (($54) + ($$038<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($$038) + ($33))|0;
   $58 = HEAP32[$0>>2]|0;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = (($$038) + 1)|0;
   $61 = ($60|0)<($53|0);
   if ($61) {
    $$038 = $60;
   } else {
    $$lcssa = $53;
    break;
   }
  }
 }
 $62 = HEAP16[$30>>1]|0;
 $63 = $62&65535;
 $64 = (($63) + ($$lcssa))|0;
 $65 = $64&65535;
 HEAP16[$30>>1] = $65;
 $66 = HEAP16[$27>>1]|0;
 $67 = $66&65535;
 $68 = (($67) + ($64))|0;
 $69 = $68&65535;
 $70 = (((($0)) + 12|0) + ($42<<1)|0);
 HEAP16[$70>>1] = $69;
 $$037 = 1;
 return ($$037|0);
}
function _collect_scoop($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($0)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($11) + ($8))|0;
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = $17 ^ 65535;
 $19 = ((($2)) + 10|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($21) + ($12))|0;
 $23 = ((($0)) + 10|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  _grow_types($0);
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + ($12<<2)|0);
 HEAP32[$28>>2] = $2;
 $29 = HEAP16[$9>>1]|0;
 $30 = $29&65535;
 $31 = (($30) + 1)|0;
 $32 = $31&65535;
 HEAP16[$9>>1] = $32;
 $33 = HEAP16[$6>>1]|0;
 $34 = $33&65535;
 $35 = (($34) + ($31))|0;
 $36 = $35&65535;
 $37 = (((($0)) + 12|0) + ($18<<1)|0);
 HEAP16[$37>>1] = $36;
 $$0 = 1;
 return ($$0|0);
}
function _check_misc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$1 = 0, $$040 = 0, $$041 = 0, $$04245 = 0, $$146 = 0, $$4 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond44 = 0;
 var $or$cond49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = $3 & 2;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $8 = $3 & 4;
   $9 = ($8|0)==(0);
   if ($9) {
    $11 = (_invariant_check($1,$2,$4)|0);
    $$041 = $11;
    break;
   } else {
    $10 = (_non_invariant_check($2,$1,$4)|0);
    $$041 = $10;
    break;
   }
  } else {
   $7 = (_non_invariant_check($1,$2,$4)|0);
   $$041 = $7;
  }
 } while(0);
 $12 = ($$041|0)!=(0);
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)!=(0);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = $3 & 9;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($2)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$4>>2]|0;
  $21 = ($20|0)>(0);
  if ($21) {
   $22 = HEAP32[$4>>2]|0;
   $$04245 = 0;$$146 = 1;
   while(1) {
    $23 = (($17) + ($$04245<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($19) + ($$04245<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (_check_raw($0,$24,$26,$15)|0);
    $28 = ($27|0)==(0);
    $$$1 = $28 ? 0 : $$146;
    $29 = (($$04245) + 1)|0;
    $$not = $28 ^ 1;
    $30 = ($29|0)<($22|0);
    $or$cond49 = $30 & $$not;
    if ($or$cond49) {
     $$04245 = $29;$$146 = $$$1;
    } else {
     $$040 = $15;$$4 = $$$1;
     break;
    }
   }
  } else {
   $$040 = $15;$$4 = 1;
  }
 } else {
  $$040 = $3;$$4 = $$041;
 }
 $31 = ($$4|0)==(0);
 $32 = $$040 & 8;
 $33 = ($32|0)==(0);
 $or$cond44 = $31 | $33;
 if ($or$cond44) {
  STACKTOP = sp;return ($$4|0);
 }
 $34 = HEAP32[$4>>2]|0;
 _simple_unify($0,$1,$2,$34);
 STACKTOP = sp;return ($$4|0);
}
function _non_invariant_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_class_greater_eq($4,$6)|0);
 $8 = ((($0)) + 10|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 HEAP32[$2>>2] = $10;
 return ($7|0);
}
function _invariant_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = $7&1;
 $9 = ((($0)) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 HEAP32[$2>>2] = $11;
 return ($8|0);
}
function _simple_unify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($2)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($7&65535)<($11&65535);
 $$ = $12 ? $5 : $9;
 $13 = ($3|0)==(0);
 if ($13) {
  $25 = ((($0)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($$)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_tm_add($26,$28);
  return;
 } else {
  $14 = ((($1)) + 6|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ((($2)) + 6|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = $16 & 512;
  $21 = $20 & $19;
  $22 = ((($0)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_lily_tm_make($23,$21,$$,$3)|0);
  _lily_tm_add($23,$24);
  return;
 }
}
function _lily_class_greater_eq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$0 = 1;
  } else {
   $$07 = $1;
   while(1) {
    $3 = ($$07|0)==(0|0);
    if ($3) {
     $$0 = 0;
     break L1;
    }
    $4 = ((($$07)) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==($0|0);
    if ($6) {
     $$0 = 1;
     break;
    } else {
     $$07 = $5;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _grow_types($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 10|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = $3 << 3;
 $8 = $7 & 262136;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$0>>2] = $9;
 return;
}
function _lily_ts_unify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_check_raw($0,$1,$2,11)|0);
 $8 = ($7|0)==(0);
 $9 = HEAP32[$3>>2]|0;
 if ($8) {
  $11 = ((($9)) + 4|0);
  HEAP32[$11>>2] = $6;
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = (_lily_tm_pop($9)|0);
  $$0 = $10;
  return ($$0|0);
 }
 return (0)|0;
}
function _lily_ts_type_greater_eq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_check_raw($0,$1,$2,3)|0);
 return ($3|0);
}
function _lily_ts_resolve_by_second($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($5) + 1)|0;
 $10 = (($9) + ($8))|0;
 $11 = ((($1)) + 10|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($10) + ($13))|0;
 $15 = ((($0)) + 10|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($14>>>0)<($17>>>0);
 if (!($18)) {
  _grow_types($0);
 }
 $19 = HEAP16[$11>>1]|0;
 $20 = ($19<<16>>16)==(0);
 if ($20) {
  $32 = $10&65535;
  HEAP16[$3>>1] = $32;
  $33 = (_lily_ts_resolve($0,$2)|0);
  HEAP16[$3>>1] = $4;
  return ($33|0);
 }
 $21 = ((($1)) + 16|0);
 $22 = HEAP16[$11>>1]|0;
 $23 = $22&65535;
 $$028 = 0;
 while(1) {
  $24 = HEAP32[$21>>2]|0;
  $25 = (($24) + ($$028<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($$028) + ($10))|0;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = (($$028) + 1)|0;
  $31 = ($30|0)<($23|0);
  if ($31) {
   $$028 = $30;
  } else {
   break;
  }
 }
 $32 = $10&65535;
 HEAP16[$3>>1] = $32;
 $33 = (_lily_ts_resolve($0,$2)|0);
 HEAP16[$3>>1] = $4;
 return ($33|0);
}
function _lily_ts_resolve_as_question($0) {
 $0 = $0|0;
 var $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5&65535)<($2&65535);
 if ($6) {
  $7 = $5&65535;
  $8 = ((($0)) + 24|0);
  $$013 = $7;
  while(1) {
   $9 = HEAP32[$0>>2]|0;
   $10 = (($9) + ($$013<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = HEAP32[$8>>2]|0;
    HEAP32[$10>>2] = $13;
   }
   $14 = (($$013) + 1)|0;
   $exitcond = ($14|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$013 = $14;
   }
  }
 }
 $15 = $1;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 return;
}
function _lily_ts_default_incomplete_solves($0) {
 $0 = $0|0;
 var $$038$lcssa = 0, $$03839 = 0, $$040 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535)<($2&65535);
 if (!($8)) {
  return;
 }
 $9 = $7&65535;
 $10 = ((($0)) + 28|0);
 $11 = ((($0)) + 28|0);
 $12 = ((($0)) + 28|0);
 $13 = ((($0)) + 20|0);
 $$040 = $9;
 while(1) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + ($$040<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = ($16|0)==($5|0);
  $or$cond = $17 | $18;
  if (!($or$cond)) {
   $19 = ((($16)) + 6|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 & 4096;
   $22 = ($21<<16>>16)==(0);
   if (!($22)) {
    $23 = ((($16)) + 10|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = ($24<<16>>16)==(0);
    if ($25) {
     $$038$lcssa = 0;
    } else {
     $26 = ((($16)) + 16|0);
     $$03839 = 0;
     while(1) {
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + ($$03839<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0|0);
      if ($30) {
       label = 10;
      } else {
       $31 = ((($29)) + 6|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = $32 & 4096;
       $34 = ($33<<16>>16)==(0);
       if ($34) {
        label = 10;
       } else {
        $35 = HEAP32[$12>>2]|0;
        $36 = HEAP32[$13>>2]|0;
        _lily_tm_add($35,$36);
       }
      }
      if ((label|0) == 10) {
       label = 0;
       $37 = HEAP32[$11>>2]|0;
       _lily_tm_add($37,$29);
      }
      $38 = (($$03839) + 1)|0;
      $39 = HEAP16[$23>>1]|0;
      $40 = $39&65535;
      $41 = ($38|0)<($40|0);
      if ($41) {
       $$03839 = $38;
      } else {
       $$038$lcssa = $38;
       break;
      }
     }
    }
    $42 = HEAP32[$10>>2]|0;
    $43 = ((($16)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_lily_tm_make($42,0,$44,$$038$lcssa)|0);
    $46 = HEAP32[$0>>2]|0;
    $47 = (($46) + ($$040<<2)|0);
    HEAP32[$47>>2] = $45;
   }
  }
  $48 = (($$040) + 1)|0;
  $exitcond = ($48|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$040 = $48;
  }
 }
 return;
}
function _lily_ts_scope_save($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 HEAP16[$1>>1] = $3;
 $4 = ((($0)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($1)) + 2|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($1)) + 8|0);
 $8 = ((($0)) + 12|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = HEAP16[$4>>1]|0;
 $20 = $19&65535;
 $21 = HEAP16[$2>>1]|0;
 $22 = $21&65535;
 $23 = (($22) + ($20))|0;
 $24 = $23&65535;
 HEAP16[$2>>1] = $24;
 $25 = ((($0)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 HEAP16[$4>>1] = $26;
 $27 = $26&65535;
 $28 = (($27) + ($23))|0;
 $29 = $28&65535;
 HEAP16[$8>>1] = $29;
 $30 = HEAP16[$2>>1]|0;
 $31 = $30&65535;
 $32 = HEAP16[$4>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + ($31))|0;
 $35 = ((($0)) + 10|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = ($34>>>0)<($37>>>0);
 if (!($38)) {
  _grow_types($0);
 }
 $39 = HEAP16[$4>>1]|0;
 $40 = ($39<<16>>16)==(0);
 if ($40) {
  return;
 }
 $41 = HEAP16[$2>>1]|0;
 $42 = $41&65535;
 $43 = HEAP16[$4>>1]|0;
 $44 = $43&65535;
 $$023 = 0;
 while(1) {
  $45 = (($42) + ($$023))|0;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  HEAP32[$47>>2] = 0;
  $48 = (($$023) + 1)|0;
  $49 = ($48|0)<($44|0);
  if ($49) {
   $$023 = $48;
  } else {
   break;
  }
 }
 return;
}
function _lily_ts_scope_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($0)) + 4|0);
 HEAP16[$3>>1] = $2;
 $4 = ((($1)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($0)) + 12|0);
 $8 = ((($1)) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 return;
}
function _lily_ts_generics_seen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)<($1|0);
 if (!($5)) {
  return;
 }
 $6 = $1&65535;
 HEAP16[$2>>1] = $6;
 return;
}
function _lily_class_greater_eq_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$056 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$056 = $1;
 }
 while(1) {
  $3 = ((($$056)) + 8|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = ($5|0)==($0|0);
  if ($6) {
   $$0 = 1;
   label = 4;
   break;
  }
  $7 = ((($$056)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $$056 = $8;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = (15459 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $12 = 255 >>> $5;
  $13 = $12 & $2;
  $14 = $13;
 } else {
  $8 = $2 & 63;
  $9 = HEAP32[$1>>2]|0;
  $10 = $9 << 6;
  $11 = $10 | $8;
  $14 = $11;
 }
 HEAP32[$1>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 << 4;
 $17 = $5 | 256;
 $18 = (($17) + ($16))|0;
 $19 = (15459 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 HEAP32[$0>>2] = $21;
 return ($21|0);
}
function _lily_is_valid_utf8($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if (!($4)) {
   $$05 = $0;$9 = $3;
   while(1) {
    $8 = $9&255;
    $10 = (_decode($2,$1,$8)|0);
    $11 = ($10|0)==(1);
    $6 = ((($$05)) + 1|0);
    if ($11) {
     break L1;
    }
    $5 = HEAP8[$6>>0]|0;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     break;
    } else {
     $$05 = $6;$9 = $5;
    }
   }
  }
 } while(0);
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(0);
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _lily_is_valid_sized_utf8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$lcssa = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (($0) + ($1)|0);
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[$0>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L1: do {
  if ($6) {
   $$0$lcssa = $0;
  } else {
   $$010 = $0;$8 = $5;
   while(1) {
    $7 = $8&255;
    $9 = (_decode($3,$2,$7)|0);
    $10 = ($9|0)==(1);
    if ($10) {
     $$0$lcssa = $$010;
     break L1;
    }
    $11 = ((($$010)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0$lcssa = $11;
     break;
    } else {
     $$010 = $11;$8 = $12;
    }
   }
  }
 } while(0);
 $14 = HEAP32[$3>>2]|0;
 $15 = ($14|0)==(0);
 $16 = ($$0$lcssa|0)==($4|0);
 $$ = $16 & $15;
 $17 = $$&1;
 STACKTOP = sp;return ($17|0);
}
function _lily_new_value_stack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_vs_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  $8 = $6 << 1;
  HEAP32[$5>>2] = $8;
  $9 = HEAP32[$0>>2]|0;
  $10 = $6 << 3;
  $11 = (_lily_realloc($9,$10)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $1;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$2>>2] = $16;
 return;
}
function _lily_vs_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_free_value_stack($0) {
 $0 = $0|0;
 var $$07 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$07 = 0;
  while(1) {
   $4 = HEAP32[$0>>2]|0;
   $5 = (($4) + ($$07<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   _lily_free($6);
   $7 = (($$07) + 1)|0;
   $8 = HEAP32[$1>>2]|0;
   $9 = ($7>>>0)<($8>>>0);
   if ($9) {
    $$07 = $7;
   } else {
    break;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 _lily_free($10);
 _lily_free($0);
 return;
}
function _lily_new_vm_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(100)|0);
 $3 = (_lily_op_get_data($0)|0);
 $4 = ((($2)) + 92|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_op_get_gc_start($0)|0);
 $6 = ((($2)) + 56|0);
 HEAP32[$6>>2] = $5;
 $7 = (_lily_op_get_gc_multiplier($0)|0);
 $8 = ((($2)) + 64|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 88|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($2)) + 60|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($2)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 84|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 24|0);
 $15 = ((($2)) + 96|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($2)) + 72|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($2)) + 20|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($2)) + 22|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;HEAP32[$14+24>>2]=0|0;HEAP32[$14+28>>2]=0|0;
 HEAP16[$18>>1] = 1;
 _add_call_frame($2);
 $19 = (_lily_malloc(32)|0);
 $20 = ((($19)) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 24|0);
 HEAP32[$21>>2] = 0;
 HEAP32[$12>>2] = $19;
 return ($2|0);
}
function _add_call_frame($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(40)|0);
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($1)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$2>>2] = $1;
  return;
 }
 $9 = ((($7)) + 36|0);
 HEAP32[$9>>2] = $1;
 HEAP32[$2>>2] = $1;
 return;
}
function _lily_free_vm($0) {
 $0 = $0|0;
 var $$0 = 0, $$044 = 0, $$04554 = 0, $$049 = 0, $$050 = 0, $$148 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if (!($5)) {
   $6 = HEAP32[$3>>2]|0;
   $7 = ((($6)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $11 = ($6|0)==(0|0);
    if ($11) {
     break;
    } else {
     $$04554 = $6;
    }
   } else {
    $10 = $8;
    while(1) {
     $12 = ((($10)) + 28|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      break;
     } else {
      $10 = $13;
     }
    }
    HEAP32[$3>>2] = $10;
    $$04554 = $10;
   }
   while(1) {
    $15 = ((($$04554)) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    _lily_free($$04554);
    $17 = ($16|0)==(0|0);
    if ($17) {
     break;
    } else {
     $$04554 = $16;
    }
   }
  }
 } while(0);
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $$049 = (($19) + -1)|0;
 $20 = ($$049|0)>(-1);
 if ($20) {
  $$050 = $$049;
  while(1) {
   $21 = (($2) + ($$050<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   _lily_deref($22);
   _lily_free($22);
   $$0 = (($$050) + -1)|0;
   $23 = ($$0|0)>(-1);
   if ($23) {
    $$050 = $$0;
   } else {
    break;
   }
  }
 }
 $24 = ((($0)) + 12|0);
 HEAP32[$24>>2] = 0;
 HEAP32[$18>>2] = 0;
 _lily_free($2);
 $25 = ((($0)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $$044 = $26;
 while(1) {
  $27 = ((($$044)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   break;
  } else {
   $$044 = $28;
  }
 }
 $30 = ($$044|0)==(0|0);
 if (!($30)) {
  $$148 = $$044;
  while(1) {
   $31 = ((($$148)) + 36|0);
   $32 = HEAP32[$31>>2]|0;
   _lily_free($$148);
   $33 = ($32|0)==(0|0);
   if ($33) {
    break;
   } else {
    $$148 = $32;
   }
  }
 }
 $34 = ((($0)) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  _destroy_gc_entries($0);
  $37 = ((($0)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  _lily_free($38);
  _lily_free($0);
  return;
 }
 _invoke_gc($0);
 _destroy_gc_entries($0);
 $37 = ((($0)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 _lily_free($38);
 _lily_free($0);
 return;
}
function _invoke_gc($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$068$lcssa = 0, $$06876 = 0, $$07089 = 0, $$072 = 0, $$07284 = 0, $$07285 = 0, $$077 = 0, $$1 = 0, $$169 = 0, $$17180 = 0, $$17374 = 0, $$2$lcssa = 0, $$275 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$07089 = 0;
  while(1) {
   $9 = (($5) + ($$07089<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 196608;
   $13 = ($12|0)==(0);
   if (!($13)) {
    _gc_mark($3,$10);
   }
   $14 = (($$07089) + 1)|0;
   $15 = HEAP32[$6>>2]|0;
   $16 = ($14>>>0)<($15>>>0);
   if ($16) {
    $$07089 = $14;
   } else {
    break;
   }
  }
 }
 $17 = ((($0)) + 44|0);
 $$07284 = HEAP32[$17>>2]|0;
 $18 = ($$07284|0)==(0|0);
 if (!($18)) {
  $$07285 = $$07284;
  while(1) {
   $19 = ((($$07285)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==($3|0);
   if (!($21)) {
    $22 = ((($$07285)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     HEAP32[$19>>2] = -1;
     _lily_value_destroy($$07285);
    }
   }
   $25 = ((($$07285)) + 16|0);
   $$072 = HEAP32[$25>>2]|0;
   $26 = ($$072|0)==(0|0);
   if ($26) {
    break;
   } else {
    $$07285 = $$072;
   }
  }
 }
 $27 = HEAP32[$6>>2]|0;
 $28 = ((($0)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27>>>0)<($29>>>0);
 if ($30) {
  $31 = HEAP32[110]|0;
  $$17180 = $27;
  while(1) {
   $32 = (($5) + ($$17180<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 & 65536;
   $36 = ($35|0)==(0);
   if (!($36)) {
    $37 = ((($33)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==($31|0);
    if ($41) {
     HEAP32[$33>>2] = 0;
    }
   }
   $42 = (($$17180) + 1)|0;
   $43 = HEAP32[$28>>2]|0;
   $44 = ($42>>>0)<($43>>>0);
   if ($44) {
    $$17180 = $42;
   } else {
    break;
   }
  }
 }
 $45 = ((($0)) + 48|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$17>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $$0$lcssa = $46;$$068$lcssa = 0;$$2$lcssa = 0;
 } else {
  $$06876 = 0;$$077 = $46;$$17374 = $47;$$275 = 0;
  while(1) {
   $49 = ((($$17374)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($$17374)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(-1);
   if ($53) {
    $54 = ((($$17374)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    _lily_free($55);
    $$1 = $$17374;$$169 = $$06876;$$3 = $$275;$storemerge = $$077;
   } else {
    $56 = (($$275) + 1)|0;
    $$1 = $$077;$$169 = $$17374;$$3 = $56;$storemerge = $$06876;
   }
   HEAP32[$49>>2] = $storemerge;
   $57 = ($50|0)==(0|0);
   if ($57) {
    $$0$lcssa = $$1;$$068$lcssa = $$169;$$2$lcssa = $$3;
    break;
   } else {
    $$06876 = $$169;$$077 = $$1;$$17374 = $50;$$275 = $$3;
   }
  }
 }
 $58 = ((($0)) + 56|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59>>>0)>($$2$lcssa>>>0);
 if ($60) {
  $64 = ((($0)) + 52|0);
  HEAP32[$64>>2] = $$2$lcssa;
  HEAP32[$17>>2] = $$068$lcssa;
  HEAP32[$45>>2] = $$0$lcssa;
  return;
 }
 $61 = ((($0)) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = Math_imul($62, $59)|0;
 HEAP32[$58>>2] = $63;
 $64 = ((($0)) + 52|0);
 HEAP32[$64>>2] = $$2$lcssa;
 HEAP32[$17>>2] = $$068$lcssa;
 HEAP32[$45>>2] = $$0$lcssa;
 return;
}
function _destroy_gc_entries($0) {
 $0 = $0|0;
 var $$014 = 0, $$113 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$014 = $2;
  while(1) {
   $4 = ((($$014)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   _lily_free($$014);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$014 = $5;
   }
  }
 }
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  return;
 } else {
  $$113 = $8;
 }
 while(1) {
  $10 = ((($$113)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($$113);
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $$113 = $11;
  }
 }
 return;
}
function _gc_mark($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 196608;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP16[$1>>1]|0;
 $6 = $5 | 2;
 $7 = ($6<<16>>16)!=(11);
 $8 = $2 & 2359296;
 $9 = ($8|0)==(0);
 $or$cond = $9 & $7;
 if (!($or$cond)) {
  _list_marker($0,$1);
  return;
 }
 switch ($5<<16>>16) {
 case 10:  {
  _hash_marker($0,$1);
  return;
  break;
 }
 case 8:  {
  _dynamic_marker($0,$1);
  return;
  break;
 }
 case 7:  {
  _function_marker($0,$1);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _list_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02223 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = ((($13)) + 16|0);
 $$02223 = 0;
 while(1) {
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($$02223<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 196608;
  $23 = ($22|0)==(0);
  if (!($23)) {
   _gc_mark($0,$20);
  }
  $24 = (($$02223) + 1)|0;
  $25 = HEAP32[$14>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $$02223 = $24;
  } else {
   break;
  }
 }
 return;
}
function _hash_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = ((($3)) + 24|0);
 $$013 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($$013<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($10)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   _gc_mark($0,$13);
  }
  $14 = (($$013) + 1)|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $$013 = $14;
  } else {
   break;
  }
 }
 return;
}
function _dynamic_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 196608;
 $18 = ($17|0)==(0);
 if ($18) {
  return;
 }
 _gc_mark($0,$15);
 return;
}
function _function_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02930 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($13)) + 12|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ($17<<16>>16)==(0);
 if ($19) {
  return;
 } else {
  $$02930 = 0;
 }
 while(1) {
  $20 = (($15) + ($$02930<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $23 = HEAP32[$21>>2]|0;
   $24 = $23 & 196608;
   $25 = ($24|0)==(0);
   if (!($25)) {
    _gc_mark($0,$21);
   }
  }
  $26 = (($$02930) + 1)|0;
  $exitcond = ($26|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $$02930 = $26;
  }
 }
 return;
}
function _lily_tag_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  _invoke_gc($0);
 }
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $12 = (_lily_malloc(24)|0);
  $$0 = $12;
 } else {
  $10 = ((($8)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$7>>2] = $11;
  $$0 = $8;
 }
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($$0)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($$0)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$$0>>2] = $17;
 $18 = ((($0)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($$0)) + 16|0);
 HEAP32[$20>>2] = $19;
 HEAP32[$18>>2] = $$0;
 $21 = HEAP32[$13>>2]|0;
 $22 = ((($21)) + 20|0);
 HEAP32[$22>>2] = $$0;
 $23 = HEAP32[$2>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$2>>2] = $24;
 $25 = HEAP32[$1>>2]|0;
 $26 = $25 | 65536;
 HEAP32[$1>>2] = $26;
 return;
}
function _lily_push_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = (($3) + 1)|0;
  _grow_vm_registers($0,$7);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_move_byte($12,$1);
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _grow_vm_registers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$032 = 0, $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($3|0)==(0);
 $$ = $8 ? 1 : $3;
 $$032 = $$;
 while(1) {
  $9 = $$032 << 1;
  $10 = ($9|0)<($1|0);
  if ($10) {
   $$032 = $9;
  } else {
   break;
  }
 }
 $11 = $7 >> 2;
 $12 = HEAP32[$5>>2]|0;
 $13 = $$032 << 3;
 $14 = (_lily_realloc($12,$13)|0);
 HEAP32[$5>>2] = $14;
 $15 = (($14) + ($11<<2)|0);
 HEAP32[$0>>2] = $15;
 $16 = ($3|0)<($9|0);
 if ($16) {
  $$033 = $3;
 } else {
  HEAP32[$2>>2] = $9;
  return;
 }
 while(1) {
  $17 = (_lily_malloc(16)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($14) + ($$033<<2)|0);
  HEAP32[$18>>2] = $17;
  $19 = (($$033) + 1)|0;
  $exitcond = ($19|0)==($9|0);
  if ($exitcond) {
   break;
  } else {
   $$033 = $19;
  }
 }
 HEAP32[$2>>2] = $9;
 return;
}
function _lily_push_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = (($3) + 1)|0;
  _grow_vm_registers($0,$7);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_move_bytestring($12,$1);
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _lily_push_integer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = (($4) + 1)|0;
  _grow_vm_registers($0,$8);
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_move_integer($13,$1,$2);
 $14 = HEAP32[$3>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$3>>2] = $15;
 return;
}
function _lily_push_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = (($3) + 1)|0;
  _grow_vm_registers($0,$7);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_value_assign($12,$1);
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _vm_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 80|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($3) + -19)|0;
  $12 = (2280 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_lily_dynaload_exception($10,$13)|0);
  $15 = HEAP32[$4>>2]|0;
  $16 = (($15) + ($3<<2)|0);
  HEAP32[$16>>2] = $14;
  $$0 = $14;
 } else {
  $$0 = $7;
 }
 $17 = ((($0)) + 88|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_raise_class($18,$$0,$2);
 // unreachable;
}
function _lily_IndexError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = (_lily_mb_get($6)|0);
 _vm_error($0,24,$7);
 STACKTOP = sp;return;
}
function _lily_IOError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = (_lily_mb_get($6)|0);
 _vm_error($0,20,$7);
 STACKTOP = sp;return;
}
function _lily_RuntimeError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = (_lily_mb_get($6)|0);
 _vm_error($0,22,$7);
 STACKTOP = sp;return;
}
function _lily_ValueError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($6,$1,$2);
 $7 = (_lily_mb_get($6)|0);
 _vm_error($0,23,$7);
 STACKTOP = sp;return;
}
function _lily_builtin_calltrace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 22|0);
 HEAP16[$1>>1] = 0;
 $2 = (_build_traceback_raw($0)|0);
 _lily_return_list($0,$2);
 return;
}
function _build_traceback_raw($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$052 = 0, $$05358 = 0, $$056 = 0, $$159 = 0, $$57 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 32|0;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 22|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  $9 = ((($3)) + 32|0);
  $10 = (($5) + -1)|0;
  $11 = HEAP32[$9>>2]|0;
  HEAP16[$6>>1] = 1;
  $$0 = $11;$$052 = $10;
 } else {
  $$0 = $3;$$052 = $5;
 }
 $12 = (_lily_new_list($$052)|0);
 $13 = ($$052|0)>(0);
 if (!($13)) {
  STACKTOP = sp;return ($12|0);
 }
 $14 = ((($12)) + 16|0);
 $$05358 = $$052;$$159 = $$0;
 while(1) {
  $15 = HEAP32[$$159>>2]|0;
  dest=$1; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($15)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$056 = 15960;
  } else {
   $21 = ((($15)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($$159)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$vararg_buffer>>2] = $26;
   (_sprintf($1,15956,$vararg_buffer)|0);
   $$056 = $24;
  }
  $27 = ((($15)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  $$ = $29 ? 19155 : $28;
  $$57 = $29 ? 19155 : 16692;
  $30 = (_strlen($$056)|0);
  $31 = (_strlen($1)|0);
  $32 = (_strlen($$)|0);
  $33 = (_strlen($17)|0);
  $34 = $29&1;
  $35 = $34 ^ 1;
  $36 = (($30) + 9)|0;
  $37 = (($36) + ($31))|0;
  $38 = (($37) + ($32))|0;
  $39 = (($38) + ($35))|0;
  $40 = (($39) + ($33))|0;
  $41 = (_lily_malloc($40)|0);
  HEAP32[$vararg_buffer1>>2] = $$056;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $1;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $$;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $$57;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $17;
  (_sprintf($41,15964,$vararg_buffer1)|0);
  $42 = (($$05358) + -1)|0;
  $43 = HEAP32[$14>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_lily_new_string_take($41)|0);
  _lily_move_string($45,$46);
  $47 = ((($$159)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($$05358|0)>(1);
  if ($49) {
   $$05358 = $42;$$159 = $48;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($12|0);
}
function _lily_builtin_assert($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_boolean($0,0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_string_raw($0,1)|0);
  $$0 = $5;
 } else {
  $$0 = 19155;
 }
 $6 = ((($0)) + 22|0);
 HEAP16[$6>>1] = 0;
 _vm_error($0,26,$$0);
 return;
}
function _lily_builtin_print($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[665]|0;
 $2 = (_lily_arg_value($0,0)|0);
 _do_print($0,$1,$2);
 return;
}
function _do_print($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(3);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  (_fputs($8,$1)|0);
  (_fputc(10,$1)|0);
  _lily_return_unit($0);
  return;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_mb_flush($10);
  _lily_mb_add_value($10,$0,$2);
  $11 = (_lily_mb_get($10)|0);
  (_fputs($11,$1)|0);
  (_fputc(10,$1)|0);
  _lily_return_unit($0);
  return;
 }
}
function _lily_builtin_Dynamic_new($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_new_dynamic()|0);
 _lily_dynamic_set_value($2,$1);
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_move_dynamic($8,$2);
 _lily_tag_value($0,$8);
 return;
}
function _lily_get_msgbuf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_mb_flush($2);
 return ($2|0);
}
function _lily_cid_at($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 return ($8|0);
}
function _lily_call_prepare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = 2932;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($3)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  _add_call_frame($0);
  HEAP32[$2>>2] = $3;
 }
 $14 = HEAP32[$11>>2]|0;
 $15 = ((($1)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($14)) + 12|0);
 HEAP32[$17>>2] = $16;
 HEAP32[$14>>2] = $1;
 $18 = ((($14)) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($1)) + 14|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ((($14)) + 8|0);
 HEAP32[$22>>2] = $21;
 return;
}
function _lily_call_exec_prepared($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($6)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = ((($5)) + 8|0);
  HEAP32[$13>>2] = $1;
  $14 = ((($0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + ($17<<2)|0);
  $19 = (0 - ($1))|0;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$0>>2] = $20;
  HEAP32[$2>>2] = $5;
  $21 = ((($6)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 127]($0);
  $23 = ((($5)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$2>>2] = $24;
  $25 = HEAP32[$16>>2]|0;
  $26 = (($25) - ($1))|0;
  HEAP32[$16>>2] = $26;
  $27 = HEAP32[$7>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$7>>2] = $28;
  return;
 }
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($6)) + 14|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + ($30))|0;
 $35 = (($33) - ($1))|0;
 $36 = ((($0)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)>($37>>>0);
 if ($38) {
  _grow_vm_registers($0,$34);
 }
 $39 = ((($0)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$29>>2]|0;
 $42 = (($40) + ($41<<2)|0);
 $43 = (0 - ($1))|0;
 $44 = (($42) + ($43<<2)|0);
 HEAP32[$0>>2] = $44;
 HEAP32[$2>>2] = $5;
 $45 = ($35|0)>(0);
 if ($45) {
  $46 = HEAP32[$29>>2]|0;
  $47 = (($46) + -1)|0;
  HEAP32[$29>>2] = $47;
  _scrub_registers($0,$6,$1);
  $48 = HEAP32[$29>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$29>>2] = $49;
 }
 $50 = HEAP32[$29>>2]|0;
 $51 = (($50) + ($35))|0;
 HEAP32[$29>>2] = $51;
 _lily_vm_execute($0);
 $52 = (($30) - ($1))|0;
 HEAP32[$29>>2] = $52;
 $53 = HEAP32[$39>>2]|0;
 $54 = ((($5)) + 32|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($53) + ($57<<2)|0);
 HEAP32[$0>>2] = $58;
 return;
}
function _scrub_registers($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($6<<2)|0);
 $8 = ((($1)) + 14|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)>($2|0);
 if ($11) {
  $$011 = $2;
 } else {
  return;
 }
 while(1) {
  $12 = (($7) + ($$011<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_deref($13);
  HEAP32[$13>>2] = 0;
  $14 = (($$011) + 1)|0;
  $15 = HEAP16[$8>>1]|0;
  $16 = $15&65535;
  $17 = ($14|0)<($16|0);
  if ($17) {
   $$011 = $14;
  } else {
   break;
  }
 }
 return;
}
function _lily_vm_execute($0) {
 $0 = $0|0;
 var $$0$reg2mem1569$0 = 0, $$0753$reg2mem1571$0 = 0, $$0759$reg2mem1573$0 = 0, $$0765$reg2mem$0 = 0, $$0765$reg2mem$0$clear = 0, $$0766789$reg2mem1515$0 = 0, $$0767$reg2mem1559$0 = 0, $$0767$reg2mem1559$0$phi = 0, $$0770 = 0, $$0770$shrunk$reg2mem$0 = 0, $$0771$reg2mem1561$0 = 0, $$0771$reg2mem1561$0$phi = 0, $$0777$reg2mem1575$0 = 0, $$0781$reg2mem1577$0 = 0, $$0785$reg2mem1567$0 = 0, $$0785$reg2mem1567$0$phi = 0, $$1$reg2mem1553$0 = 0, $$1754$reg2mem1555$0 = 0, $$1754$reg2mem1555$0$phi = 0, $$1760$reg2mem1557$0 = 0;
 var $$1760$reg2mem1557$0$phi = 0, $$1768$reg2mem1543$0 = 0, $$1772$reg2mem1545$0 = 0, $$1778$reg2mem1563$0 = 0, $$1778$reg2mem1563$0$phi = 0, $$1782$reg2mem1565$0 = 0, $$1782$reg2mem1565$0$phi = 0, $$1786$reg2mem1551$0 = 0, $$2755$reg2mem1539$0 = 0, $$2761$reg2mem1541$0 = 0, $$2769$reg2mem1505$0 = 0, $$2773$reg2mem1535$0 = 0, $$2779$reg2mem1547$0 = 0, $$2783$reg2mem1549$0 = 0, $$2787$reg2mem1525$0 = 0, $$3$reg2mem1537$0 = 0, $$3756$reg2mem1531$0 = 0, $$3762$reg2mem1533$0 = 0, $$3774$reg2mem1529$0 = 0, $$3780$reg2mem1509$0 = 0;
 var $$3784$reg2mem1511$0 = 0, $$3788$reg2mem1513$0 = 0, $$4757$reg2mem1527$0 = 0, $$4763$reg2mem1521$0 = 0, $$4775$reg2mem1523$0 = 0, $$5$reg2mem1499$0 = 0, $$5758$reg2mem1519$0 = 0, $$5764$reg2mem1503$0 = 0, $$5776$reg2mem1507$0 = 0, $$6$reg2mem1501$0 = 0, $$lobit = 0, $$lobit$not = 0, $$mask = 0, $$reg2mem1517$0 = 0, $$reg2mem1579$0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0;
 var $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0.0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0.0, $1288 = 0, $1289 = 0.0, $129 = 0, $1290 = 0.0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0;
 var $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0;
 var $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0;
 var $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0;
 var $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0;
 var $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0;
 var $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0;
 var $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0;
 var $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0;
 var $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0;
 var $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0;
 var $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0;
 var $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0;
 var $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0;
 var $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0;
 var $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0;
 var $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0;
 var $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0;
 var $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0;
 var $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0;
 var $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0;
 var $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0;
 var $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0;
 var $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0;
 var $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0;
 var $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0;
 var $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0;
 var $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0;
 var $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0;
 var $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0;
 var $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0;
 var $1958 = 0, $1959 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0.0;
 var $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0.0, $931 = 0;
 var $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $cond1581 = 0, $cond1582 = 0, $cond1583 = 0, $cond1584 = 0, $cond1585 = 0;
 var $cond1586 = 0, $cond1587 = 0, $cond1588 = 0, $cond1589 = 0, $cond1590 = 0, $cond1591 = 0, $cond1592 = 0, $cond1593 = 0, $cond1594 = 0, $cond1595 = 0, $cond1596 = 0, $cond1597 = 0, $cond1598 = 0, $cond1599 = 0, $cond1600 = 0, $cond1601 = 0, $cond1602 = 0, $cond1603 = 0, $cond1604 = 0, $cond1605 = 0;
 var $cond1606 = 0, $cond1607 = 0, $cond1608 = 0, $cond1609 = 0, $cond1610 = 0, $cond1611 = 0, $cond1612 = 0, $cond1613 = 0, $cond1614 = 0, $cond1615 = 0, $cond1616 = 0, $cond1617 = 0, $cond1618 = 0, $cond1619 = 0, $cond1620 = 0, $cond1621 = 0, $cond1622 = 0, $cond1623 = 0, $cond1624 = 0, $cond1625 = 0;
 var $cond1626 = 0, $cond1627 = 0, $cond1628 = 0, $cond1629 = 0, $cond1630 = 0, $cond1631 = 0, $cond1632 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_ii(2,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
 $16 = tempRet0;
 $cond = ($15|0)==(1);
 if ($cond) {
  $$reg2mem1579$0 = $16;
 } else {
  $17 = ((($13)) + 8|0);
  _setjmpTable = _saveSetjmp($17,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $18 = __THREW__; __THREW__ = 0;
  if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
  $20 = tempRet0;
  $cond1581 = ($19|0)==(1);
  if ($cond1581) {
   $$reg2mem1579$0 = $20;
  } else {
   $$reg2mem1579$0 = 0;
  }
 }
 L4: while(1) {
  $21 = ($$reg2mem1579$0|0)==(0);
  do {
   if ($21) {
    $$0$reg2mem1569$0 = $5;$$0753$reg2mem1571$0 = $8;$$0759$reg2mem1573$0 = $6;$$0777$reg2mem1575$0 = $2;$$0781$reg2mem1577$0 = 0;
   } else {
    $22 = HEAP32[$1>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 40|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    do {
     if (!($26)) {
      $27 = ((($0)) + 20|0);
      $28 = HEAP16[$27>>1]|0;
      $29 = ($28<<16>>16)==(0);
      if ($29) {
       $32 = ((($22)) + 12|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + 2|0);
       $35 = HEAP16[$34>>1]|0;
       $36 = $35&65535;
       $37 = ((($22)) + 16|0);
       HEAP32[$37>>2] = $36;
       break;
      } else {
       $30 = $28&65535;
       $31 = ((($2)) + 16|0);
       HEAP32[$31>>2] = $30;
       HEAP16[$27>>1] = 0;
       break;
      }
     }
    } while(0);
    __THREW__ = 0;
    $38 = (invoke_ii(5,($0|0))|0);
    $39 = __THREW__; __THREW__ = 0;
    if ((($39|0) != 0) & ((threwValue|0) != 0)) { $40 = _testSetjmp(HEAP32[$39>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($40|0) == 0) { _longjmp($39|0, threwValue|0); } tempRet0 = (threwValue); } else { $40 = -1; };
    $41 = tempRet0;
    $cond1582 = ($40|0)==(1);
    if ($cond1582) {
     $$reg2mem1579$0 = $41;
     continue L4;
    }
    $42 = ($38|0)==(0);
    if ($42) {
     $43 = HEAP32[$11>>2]|0;
     __THREW__ = 0;
     invoke_vi(6,($43|0));
     $44 = __THREW__; __THREW__ = 0;
     if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
     $46 = tempRet0;
     $$reg2mem1579$0 = $46;
     continue L4;
    } else {
     $47 = HEAP32[$1>>2]|0;
     $48 = ((($47)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($47)) + 24|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$7>>2]|0;
     $53 = HEAP32[$0>>2]|0;
     $54 = $53;
     $55 = $52;
     $56 = (($54) - ($55))|0;
     $57 = $56 >> 2;
     $58 = ((($47)) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + ($59))|0;
     $61 = ((($0)) + 12|0);
     HEAP32[$61>>2] = $60;
     $$0$reg2mem1569$0 = $49;$$0753$reg2mem1571$0 = $52;$$0759$reg2mem1573$0 = $53;$$0777$reg2mem1575$0 = $47;$$0781$reg2mem1577$0 = $51;
     break;
    }
   }
  } while(0);
  $62 = ((($0)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($0)) + 16|0);
  $65 = ((($0)) + 16|0);
  $66 = ((($0)) + 28|0);
  $67 = ((($0)) + 20|0);
  $68 = ((($0)) + 20|0);
  $69 = ((($0)) + 28|0);
  $70 = ((($0)) + 28|0);
  $71 = ((($0)) + 16|0);
  $72 = ((($0)) + 16|0);
  $73 = ((($0)) + 16|0);
  $74 = ((($0)) + 68|0);
  $75 = ((($0)) + 16|0);
  $76 = ((($0)) + 68|0);
  $$0767$reg2mem1559$0 = $63;$$0771$reg2mem1561$0 = $10;$$0785$reg2mem1567$0 = 0;$$1$reg2mem1553$0 = $$0$reg2mem1569$0;$$1754$reg2mem1555$0 = $$0753$reg2mem1571$0;$$1760$reg2mem1557$0 = $$0759$reg2mem1573$0;$$1778$reg2mem1563$0 = $$0777$reg2mem1575$0;$$1782$reg2mem1565$0 = $$0781$reg2mem1577$0;
  L19: while(1) {
   $77 = HEAP16[$$1$reg2mem1553$0>>1]|0;
   L21: do {
    switch ($77<<16>>16) {
    case 0:  {
     $78 = ((($$1$reg2mem1553$0)) + 4|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79&65535;
     $81 = (($$1760$reg2mem1557$0) + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($$1$reg2mem1553$0)) + 6|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84&65535;
     $86 = (($$1760$reg2mem1557$0) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = HEAP32[$82>>2]|0;
     HEAP32[$87>>2] = $88;
     $89 = ((($82)) + 8|0);
     $90 = ((($87)) + 8|0);
     $91 = $89;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = $90;
     $98 = $97;
     HEAP32[$98>>2] = $93;
     $99 = (($97) + 4)|0;
     $100 = $99;
     HEAP32[$100>>2] = $96;
     $101 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $101;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 41:  {
     $102 = ((($$1$reg2mem1553$0)) + 4|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&65535;
     $105 = HEAP32[$66>>2]|0;
     $106 = (($105) + ($104<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($$1$reg2mem1553$0)) + 6|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $109&65535;
     $111 = (($$1760$reg2mem1557$0) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     invoke_vi(108,($112|0));
     $113 = __THREW__; __THREW__ = 0;
     if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = (threwValue); } else { $114 = -1; };
     $115 = tempRet0;
     $cond1632 = ($114|0)==(1);
     if ($cond1632) {
      $$reg2mem1579$0 = $115;
      continue L4;
     }
     $116 = ((($107)) + 8|0);
     $117 = ((($112)) + 8|0);
     $118 = $116;
     $119 = $118;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($118) + 4)|0;
     $122 = $121;
     $123 = HEAP32[$122>>2]|0;
     $124 = $117;
     $125 = $124;
     HEAP32[$125>>2] = $120;
     $126 = (($124) + 4)|0;
     $127 = $126;
     HEAP32[$127>>2] = $123;
     $128 = HEAP32[$107>>2]|0;
     HEAP32[$112>>2] = $128;
     $129 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $129;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 45:  {
     $130 = ((($$1$reg2mem1553$0)) + 6|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (($$1760$reg2mem1557$0) + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     __THREW__ = 0;
     invoke_vi(108,($134|0));
     $135 = __THREW__; __THREW__ = 0;
     if ((($135|0) != 0) & ((threwValue|0) != 0)) { $136 = _testSetjmp(HEAP32[$135>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($136|0) == 0) { _longjmp($135|0, threwValue|0); } tempRet0 = (threwValue); } else { $136 = -1; };
     $137 = tempRet0;
     $cond1631 = ($136|0)==(1);
     if ($cond1631) {
      $$reg2mem1579$0 = $137;
      continue L4;
     }
     $138 = ((($134)) + 8|0);
     HEAP32[$138>>2] = 0;
     $139 = ((($$1$reg2mem1553$0)) + 4|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = $141 | 2097152;
     HEAP32[$134>>2] = $142;
     $143 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $143;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 42:  {
     $144 = ((($$1$reg2mem1553$0)) + 6|0);
     $145 = HEAP16[$144>>1]|0;
     $146 = $145&65535;
     $147 = (($$1760$reg2mem1557$0) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($$1$reg2mem1553$0)) + 4|0);
     $150 = HEAP16[$149>>1]|0;
     $151 = $150 << 16 >> 16;
     $152 = ($151|0)<(0);
     $153 = $152 << 31 >> 31;
     $154 = ((($148)) + 8|0);
     $155 = $154;
     $156 = $155;
     HEAP32[$156>>2] = $151;
     $157 = (($155) + 4)|0;
     $158 = $157;
     HEAP32[$158>>2] = $153;
     HEAP32[$148>>2] = 1;
     $159 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $159;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 43:  {
     $160 = ((($$1$reg2mem1553$0)) + 6|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = $161&65535;
     $163 = (($$1760$reg2mem1557$0) + ($162<<2)|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($$1$reg2mem1553$0)) + 4|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = ((($164)) + 8|0);
     $169 = $168;
     $170 = $169;
     HEAP32[$170>>2] = $167;
     $171 = (($169) + 4)|0;
     $172 = $171;
     HEAP32[$172>>2] = 0;
     HEAP32[$164>>2] = 6;
     $173 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $173;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 44:  {
     $174 = ((($$1$reg2mem1553$0)) + 6|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = $175&65535;
     $177 = (($$1760$reg2mem1557$0) + ($176<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($$1$reg2mem1553$0)) + 4|0);
     $180 = HEAP16[$179>>1]|0;
     $$mask = $180 & 255;
     $181 = $$mask&65535;
     $182 = ((($178)) + 8|0);
     $183 = $182;
     $184 = $183;
     HEAP32[$184>>2] = $181;
     $185 = (($183) + 4)|0;
     $186 = $185;
     HEAP32[$186>>2] = 0;
     HEAP32[$178>>2] = 4;
     $187 = ((($$1$reg2mem1553$0)) + 8|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $187;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 2:  {
     $188 = ((($$1$reg2mem1553$0)) + 4|0);
     $189 = HEAP16[$188>>1]|0;
     $190 = $189&65535;
     $191 = (($$1760$reg2mem1557$0) + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ((($$1$reg2mem1553$0)) + 6|0);
     $194 = HEAP16[$193>>1]|0;
     $195 = $194&65535;
     $196 = (($$1760$reg2mem1557$0) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ((($192)) + 8|0);
     $199 = $198;
     $200 = $199;
     $201 = HEAP32[$200>>2]|0;
     $202 = (($199) + 4)|0;
     $203 = $202;
     $204 = HEAP32[$203>>2]|0;
     $205 = ((($197)) + 8|0);
     $206 = $205;
     $207 = $206;
     $208 = HEAP32[$207>>2]|0;
     $209 = (($206) + 4)|0;
     $210 = $209;
     $211 = HEAP32[$210>>2]|0;
     $212 = (_i64Add(($208|0),($211|0),($201|0),($204|0))|0);
     $213 = tempRet0;
     $214 = ((($$1$reg2mem1553$0)) + 8|0);
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = (($$1760$reg2mem1557$0) + ($216<<2)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ((($218)) + 8|0);
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $212;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $213;
     $224 = HEAP16[$214>>1]|0;
     $225 = $224&65535;
     $226 = (($$1760$reg2mem1557$0) + ($225<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     HEAP32[$227>>2] = 1;
     $228 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $228;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 3:  {
     $229 = ((($$1$reg2mem1553$0)) + 4|0);
     $230 = HEAP16[$229>>1]|0;
     $231 = $230&65535;
     $232 = (($$1760$reg2mem1557$0) + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ((($$1$reg2mem1553$0)) + 6|0);
     $235 = HEAP16[$234>>1]|0;
     $236 = $235&65535;
     $237 = (($$1760$reg2mem1557$0) + ($236<<2)|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ((($233)) + 8|0);
     $240 = $239;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = (($240) + 4)|0;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = ((($238)) + 8|0);
     $247 = $246;
     $248 = $247;
     $249 = HEAP32[$248>>2]|0;
     $250 = (($247) + 4)|0;
     $251 = $250;
     $252 = HEAP32[$251>>2]|0;
     $253 = (_i64Subtract(($242|0),($245|0),($249|0),($252|0))|0);
     $254 = tempRet0;
     $255 = ((($$1$reg2mem1553$0)) + 8|0);
     $256 = HEAP16[$255>>1]|0;
     $257 = $256&65535;
     $258 = (($$1760$reg2mem1557$0) + ($257<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ((($259)) + 8|0);
     $261 = $260;
     $262 = $261;
     HEAP32[$262>>2] = $253;
     $263 = (($261) + 4)|0;
     $264 = $263;
     HEAP32[$264>>2] = $254;
     $265 = HEAP16[$255>>1]|0;
     $266 = $265&65535;
     $267 = (($$1760$reg2mem1557$0) + ($266<<2)|0);
     $268 = HEAP32[$267>>2]|0;
     HEAP32[$268>>2] = 1;
     $269 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $269;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 12:  {
     $270 = ((($$1$reg2mem1553$0)) + 4|0);
     $271 = HEAP16[$270>>1]|0;
     $272 = $271&65535;
     $273 = (($$1760$reg2mem1557$0) + ($272<<2)|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ((($$1$reg2mem1553$0)) + 6|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276&65535;
     $278 = (($$1760$reg2mem1557$0) + ($277<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($274)) + 8|0);
     $281 = +HEAPF64[$280>>3];
     $282 = ((($279)) + 8|0);
     $283 = +HEAPF64[$282>>3];
     $284 = $281 + $283;
     $285 = ((($$1$reg2mem1553$0)) + 8|0);
     $286 = HEAP16[$285>>1]|0;
     $287 = $286&65535;
     $288 = (($$1760$reg2mem1557$0) + ($287<<2)|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = ((($289)) + 8|0);
     HEAPF64[$290>>3] = $284;
     $291 = HEAP16[$285>>1]|0;
     $292 = $291&65535;
     $293 = (($$1760$reg2mem1557$0) + ($292<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     HEAP32[$294>>2] = 2;
     $295 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $295;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 13:  {
     $296 = ((($$1$reg2mem1553$0)) + 4|0);
     $297 = HEAP16[$296>>1]|0;
     $298 = $297&65535;
     $299 = (($$1760$reg2mem1557$0) + ($298<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ((($$1$reg2mem1553$0)) + 6|0);
     $302 = HEAP16[$301>>1]|0;
     $303 = $302&65535;
     $304 = (($$1760$reg2mem1557$0) + ($303<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = ((($300)) + 8|0);
     $307 = +HEAPF64[$306>>3];
     $308 = ((($305)) + 8|0);
     $309 = +HEAPF64[$308>>3];
     $310 = $307 - $309;
     $311 = ((($$1$reg2mem1553$0)) + 8|0);
     $312 = HEAP16[$311>>1]|0;
     $313 = $312&65535;
     $314 = (($$1760$reg2mem1557$0) + ($313<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ((($315)) + 8|0);
     HEAPF64[$316>>3] = $310;
     $317 = HEAP16[$311>>1]|0;
     $318 = $317&65535;
     $319 = (($$1760$reg2mem1557$0) + ($318<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     HEAP32[$320>>2] = 2;
     $321 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $321;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 18:  {
     $322 = ((($$1$reg2mem1553$0)) + 4|0);
     $323 = HEAP16[$322>>1]|0;
     $324 = $323&65535;
     $325 = (($$1760$reg2mem1557$0) + ($324<<2)|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ((($$1$reg2mem1553$0)) + 6|0);
     $328 = HEAP16[$327>>1]|0;
     $329 = $328&65535;
     $330 = (($$1760$reg2mem1557$0) + ($329<<2)|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = HEAP16[$326>>1]|0;
     switch ($332<<16>>16) {
     case 2:  {
      $333 = ((($326)) + 8|0);
      $334 = +HEAPF64[$333>>3];
      $335 = ((($331)) + 8|0);
      $336 = +HEAPF64[$335>>3];
      $337 = $334 < $336;
      $338 = $337&1;
      $339 = ((($$1$reg2mem1553$0)) + 8|0);
      $340 = HEAP16[$339>>1]|0;
      $341 = $340&65535;
      $342 = (($$1760$reg2mem1557$0) + ($341<<2)|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ((($343)) + 8|0);
      $345 = $344;
      $346 = $345;
      HEAP32[$346>>2] = $338;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = 0;
      break;
     }
     case 1:  {
      $349 = ((($326)) + 8|0);
      $350 = $349;
      $351 = $350;
      $352 = HEAP32[$351>>2]|0;
      $353 = (($350) + 4)|0;
      $354 = $353;
      $355 = HEAP32[$354>>2]|0;
      $356 = ((($331)) + 8|0);
      $357 = $356;
      $358 = $357;
      $359 = HEAP32[$358>>2]|0;
      $360 = (($357) + 4)|0;
      $361 = $360;
      $362 = HEAP32[$361>>2]|0;
      $363 = ($355|0)<($362|0);
      $364 = ($352>>>0)<($359>>>0);
      $365 = ($355|0)==($362|0);
      $366 = $365 & $364;
      $367 = $363 | $366;
      $368 = $367&1;
      $369 = ((($$1$reg2mem1553$0)) + 8|0);
      $370 = HEAP16[$369>>1]|0;
      $371 = $370&65535;
      $372 = (($$1760$reg2mem1557$0) + ($371<<2)|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = ((($373)) + 8|0);
      $375 = $374;
      $376 = $375;
      HEAP32[$376>>2] = $368;
      $377 = (($375) + 4)|0;
      $378 = $377;
      HEAP32[$378>>2] = 0;
      break;
     }
     case 3:  {
      $379 = ((($326)) + 8|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ((($380)) + 8|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ((($331)) + 8|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ((($384)) + 8|0);
      $386 = HEAP32[$385>>2]|0;
      __THREW__ = 0;
      $387 = (invoke_iii(5,($382|0),($386|0))|0);
      $388 = __THREW__; __THREW__ = 0;
      if ((($388|0) != 0) & ((threwValue|0) != 0)) { $389 = _testSetjmp(HEAP32[$388>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($389|0) == 0) { _longjmp($388|0, threwValue|0); } tempRet0 = (threwValue); } else { $389 = -1; };
      $390 = tempRet0;
      $cond1630 = ($389|0)==(1);
      if ($cond1630) {
       $$reg2mem1579$0 = $390;
       continue L4;
      }
      $391 = ($387|0)==(-1);
      $392 = $391&1;
      $393 = ((($$1$reg2mem1553$0)) + 8|0);
      $394 = HEAP16[$393>>1]|0;
      $395 = $394&65535;
      $396 = (($$1760$reg2mem1557$0) + ($395<<2)|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = ((($397)) + 8|0);
      $399 = $398;
      $400 = $399;
      HEAP32[$400>>2] = $392;
      $401 = (($399) + 4)|0;
      $402 = $401;
      HEAP32[$402>>2] = 0;
      break;
     }
     default: {
     }
     }
     $403 = ((($$1$reg2mem1553$0)) + 8|0);
     $404 = HEAP16[$403>>1]|0;
     $405 = $404&65535;
     $406 = (($$1760$reg2mem1557$0) + ($405<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     HEAP32[$407>>2] = 6;
     $408 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $408;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 19:  {
     $409 = ((($$1$reg2mem1553$0)) + 4|0);
     $410 = HEAP16[$409>>1]|0;
     $411 = $410&65535;
     $412 = (($$1760$reg2mem1557$0) + ($411<<2)|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = ((($$1$reg2mem1553$0)) + 6|0);
     $415 = HEAP16[$414>>1]|0;
     $416 = $415&65535;
     $417 = (($$1760$reg2mem1557$0) + ($416<<2)|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = HEAP16[$413>>1]|0;
     switch ($419<<16>>16) {
     case 2:  {
      $420 = ((($413)) + 8|0);
      $421 = +HEAPF64[$420>>3];
      $422 = ((($418)) + 8|0);
      $423 = +HEAPF64[$422>>3];
      $424 = $421 <= $423;
      $425 = $424&1;
      $426 = ((($$1$reg2mem1553$0)) + 8|0);
      $427 = HEAP16[$426>>1]|0;
      $428 = $427&65535;
      $429 = (($$1760$reg2mem1557$0) + ($428<<2)|0);
      $430 = HEAP32[$429>>2]|0;
      $431 = ((($430)) + 8|0);
      $432 = $431;
      $433 = $432;
      HEAP32[$433>>2] = $425;
      $434 = (($432) + 4)|0;
      $435 = $434;
      HEAP32[$435>>2] = 0;
      break;
     }
     case 1:  {
      $436 = ((($413)) + 8|0);
      $437 = $436;
      $438 = $437;
      $439 = HEAP32[$438>>2]|0;
      $440 = (($437) + 4)|0;
      $441 = $440;
      $442 = HEAP32[$441>>2]|0;
      $443 = ((($418)) + 8|0);
      $444 = $443;
      $445 = $444;
      $446 = HEAP32[$445>>2]|0;
      $447 = (($444) + 4)|0;
      $448 = $447;
      $449 = HEAP32[$448>>2]|0;
      $450 = ($442|0)<($449|0);
      $451 = ($439>>>0)<=($446>>>0);
      $452 = ($442|0)==($449|0);
      $453 = $452 & $451;
      $454 = $450 | $453;
      $455 = $454&1;
      $456 = ((($$1$reg2mem1553$0)) + 8|0);
      $457 = HEAP16[$456>>1]|0;
      $458 = $457&65535;
      $459 = (($$1760$reg2mem1557$0) + ($458<<2)|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ((($460)) + 8|0);
      $462 = $461;
      $463 = $462;
      HEAP32[$463>>2] = $455;
      $464 = (($462) + 4)|0;
      $465 = $464;
      HEAP32[$465>>2] = 0;
      break;
     }
     case 3:  {
      $466 = ((($413)) + 8|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ((($467)) + 8|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ((($418)) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ((($471)) + 8|0);
      $473 = HEAP32[$472>>2]|0;
      __THREW__ = 0;
      $474 = (invoke_iii(5,($469|0),($473|0))|0);
      $475 = __THREW__; __THREW__ = 0;
      if ((($475|0) != 0) & ((threwValue|0) != 0)) { $476 = _testSetjmp(HEAP32[$475>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($476|0) == 0) { _longjmp($475|0, threwValue|0); } tempRet0 = (threwValue); } else { $476 = -1; };
      $477 = tempRet0;
      $cond1629 = ($476|0)==(1);
      if ($cond1629) {
       $$reg2mem1579$0 = $477;
       continue L4;
      }
      $478 = ($474|0)<(1);
      $479 = $478&1;
      $480 = ((($$1$reg2mem1553$0)) + 8|0);
      $481 = HEAP16[$480>>1]|0;
      $482 = $481&65535;
      $483 = (($$1760$reg2mem1557$0) + ($482<<2)|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ((($484)) + 8|0);
      $486 = $485;
      $487 = $486;
      HEAP32[$487>>2] = $479;
      $488 = (($486) + 4)|0;
      $489 = $488;
      HEAP32[$489>>2] = 0;
      break;
     }
     default: {
     }
     }
     $490 = ((($$1$reg2mem1553$0)) + 8|0);
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = (($$1760$reg2mem1557$0) + ($492<<2)|0);
     $494 = HEAP32[$493>>2]|0;
     HEAP32[$494>>2] = 6;
     $495 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $495;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 16:  {
     $496 = ((($$1$reg2mem1553$0)) + 4|0);
     $497 = HEAP16[$496>>1]|0;
     $498 = $497&65535;
     $499 = (($$1760$reg2mem1557$0) + ($498<<2)|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = ((($$1$reg2mem1553$0)) + 6|0);
     $502 = HEAP16[$501>>1]|0;
     $503 = $502&65535;
     $504 = (($$1760$reg2mem1557$0) + ($503<<2)|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = HEAP16[$500>>1]|0;
     switch ($506<<16>>16) {
     case 2:  {
      $507 = ((($500)) + 8|0);
      $508 = +HEAPF64[$507>>3];
      $509 = ((($505)) + 8|0);
      $510 = +HEAPF64[$509>>3];
      $511 = $508 == $510;
      $512 = $511&1;
      $513 = ((($$1$reg2mem1553$0)) + 8|0);
      $514 = HEAP16[$513>>1]|0;
      $515 = $514&65535;
      $516 = (($$1760$reg2mem1557$0) + ($515<<2)|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ((($517)) + 8|0);
      $519 = $518;
      $520 = $519;
      HEAP32[$520>>2] = $512;
      $521 = (($519) + 4)|0;
      $522 = $521;
      HEAP32[$522>>2] = 0;
      break;
     }
     case 1:  {
      $523 = ((($500)) + 8|0);
      $524 = $523;
      $525 = $524;
      $526 = HEAP32[$525>>2]|0;
      $527 = (($524) + 4)|0;
      $528 = $527;
      $529 = HEAP32[$528>>2]|0;
      $530 = ((($505)) + 8|0);
      $531 = $530;
      $532 = $531;
      $533 = HEAP32[$532>>2]|0;
      $534 = (($531) + 4)|0;
      $535 = $534;
      $536 = HEAP32[$535>>2]|0;
      $537 = ($526|0)==($533|0);
      $538 = ($529|0)==($536|0);
      $539 = $537 & $538;
      $540 = $539&1;
      $541 = ((($$1$reg2mem1553$0)) + 8|0);
      $542 = HEAP16[$541>>1]|0;
      $543 = $542&65535;
      $544 = (($$1760$reg2mem1557$0) + ($543<<2)|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ((($545)) + 8|0);
      $547 = $546;
      $548 = $547;
      HEAP32[$548>>2] = $540;
      $549 = (($547) + 4)|0;
      $550 = $549;
      HEAP32[$550>>2] = 0;
      break;
     }
     case 3:  {
      $551 = ((($500)) + 8|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = ((($552)) + 8|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = ((($505)) + 8|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = ((($556)) + 8|0);
      $558 = HEAP32[$557>>2]|0;
      __THREW__ = 0;
      $559 = (invoke_iii(5,($554|0),($558|0))|0);
      $560 = __THREW__; __THREW__ = 0;
      if ((($560|0) != 0) & ((threwValue|0) != 0)) { $561 = _testSetjmp(HEAP32[$560>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($561|0) == 0) { _longjmp($560|0, threwValue|0); } tempRet0 = (threwValue); } else { $561 = -1; };
      $562 = tempRet0;
      $cond1627 = ($561|0)==(1);
      if ($cond1627) {
       $$reg2mem1579$0 = $562;
       continue L4;
      }
      $563 = ($559|0)==(0);
      $564 = $563&1;
      $565 = ((($$1$reg2mem1553$0)) + 8|0);
      $566 = HEAP16[$565>>1]|0;
      $567 = $566&65535;
      $568 = (($$1760$reg2mem1557$0) + ($567<<2)|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ((($569)) + 8|0);
      $571 = $570;
      $572 = $571;
      HEAP32[$572>>2] = $564;
      $573 = (($571) + 4)|0;
      $574 = $573;
      HEAP32[$574>>2] = 0;
      break;
     }
     default: {
      $575 = ((($$1$reg2mem1553$0)) + 2|0);
      $576 = HEAP16[$575>>1]|0;
      HEAP16[$67>>1] = $576;
      __THREW__ = 0;
      $577 = (invoke_iiii(9,($0|0),($500|0),($505|0))|0);
      $578 = __THREW__; __THREW__ = 0;
      if ((($578|0) != 0) & ((threwValue|0) != 0)) { $579 = _testSetjmp(HEAP32[$578>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($579|0) == 0) { _longjmp($578|0, threwValue|0); } tempRet0 = (threwValue); } else { $579 = -1; };
      $580 = tempRet0;
      $cond1628 = ($579|0)==(1);
      if ($cond1628) {
       $$reg2mem1579$0 = $580;
       continue L4;
      }
      $581 = ($577|0)==(1);
      $582 = $581&1;
      $583 = ((($$1$reg2mem1553$0)) + 8|0);
      $584 = HEAP16[$583>>1]|0;
      $585 = $584&65535;
      $586 = (($$1760$reg2mem1557$0) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = ((($587)) + 8|0);
      $589 = $588;
      $590 = $589;
      HEAP32[$590>>2] = $582;
      $591 = (($589) + 4)|0;
      $592 = $591;
      HEAP32[$592>>2] = 0;
     }
     }
     $593 = ((($$1$reg2mem1553$0)) + 8|0);
     $594 = HEAP16[$593>>1]|0;
     $595 = $594&65535;
     $596 = (($$1760$reg2mem1557$0) + ($595<<2)|0);
     $597 = HEAP32[$596>>2]|0;
     HEAP32[$597>>2] = 6;
     $598 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $598;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 20:  {
     $599 = ((($$1$reg2mem1553$0)) + 4|0);
     $600 = HEAP16[$599>>1]|0;
     $601 = $600&65535;
     $602 = (($$1760$reg2mem1557$0) + ($601<<2)|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = ((($$1$reg2mem1553$0)) + 6|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605&65535;
     $607 = (($$1760$reg2mem1557$0) + ($606<<2)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = HEAP16[$603>>1]|0;
     switch ($609<<16>>16) {
     case 2:  {
      $610 = ((($603)) + 8|0);
      $611 = +HEAPF64[$610>>3];
      $612 = ((($608)) + 8|0);
      $613 = +HEAPF64[$612>>3];
      $614 = $611 > $613;
      $615 = $614&1;
      $616 = ((($$1$reg2mem1553$0)) + 8|0);
      $617 = HEAP16[$616>>1]|0;
      $618 = $617&65535;
      $619 = (($$1760$reg2mem1557$0) + ($618<<2)|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = ((($620)) + 8|0);
      $622 = $621;
      $623 = $622;
      HEAP32[$623>>2] = $615;
      $624 = (($622) + 4)|0;
      $625 = $624;
      HEAP32[$625>>2] = 0;
      break;
     }
     case 1:  {
      $626 = ((($603)) + 8|0);
      $627 = $626;
      $628 = $627;
      $629 = HEAP32[$628>>2]|0;
      $630 = (($627) + 4)|0;
      $631 = $630;
      $632 = HEAP32[$631>>2]|0;
      $633 = ((($608)) + 8|0);
      $634 = $633;
      $635 = $634;
      $636 = HEAP32[$635>>2]|0;
      $637 = (($634) + 4)|0;
      $638 = $637;
      $639 = HEAP32[$638>>2]|0;
      $640 = ($632|0)>($639|0);
      $641 = ($629>>>0)>($636>>>0);
      $642 = ($632|0)==($639|0);
      $643 = $642 & $641;
      $644 = $640 | $643;
      $645 = $644&1;
      $646 = ((($$1$reg2mem1553$0)) + 8|0);
      $647 = HEAP16[$646>>1]|0;
      $648 = $647&65535;
      $649 = (($$1760$reg2mem1557$0) + ($648<<2)|0);
      $650 = HEAP32[$649>>2]|0;
      $651 = ((($650)) + 8|0);
      $652 = $651;
      $653 = $652;
      HEAP32[$653>>2] = $645;
      $654 = (($652) + 4)|0;
      $655 = $654;
      HEAP32[$655>>2] = 0;
      break;
     }
     case 3:  {
      $656 = ((($603)) + 8|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = ((($657)) + 8|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = ((($608)) + 8|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ((($661)) + 8|0);
      $663 = HEAP32[$662>>2]|0;
      __THREW__ = 0;
      $664 = (invoke_iii(5,($659|0),($663|0))|0);
      $665 = __THREW__; __THREW__ = 0;
      if ((($665|0) != 0) & ((threwValue|0) != 0)) { $666 = _testSetjmp(HEAP32[$665>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($666|0) == 0) { _longjmp($665|0, threwValue|0); } tempRet0 = (threwValue); } else { $666 = -1; };
      $667 = tempRet0;
      $cond1626 = ($666|0)==(1);
      if ($cond1626) {
       $$reg2mem1579$0 = $667;
       continue L4;
      }
      $668 = ($664|0)==(1);
      $669 = $668&1;
      $670 = ((($$1$reg2mem1553$0)) + 8|0);
      $671 = HEAP16[$670>>1]|0;
      $672 = $671&65535;
      $673 = (($$1760$reg2mem1557$0) + ($672<<2)|0);
      $674 = HEAP32[$673>>2]|0;
      $675 = ((($674)) + 8|0);
      $676 = $675;
      $677 = $676;
      HEAP32[$677>>2] = $669;
      $678 = (($676) + 4)|0;
      $679 = $678;
      HEAP32[$679>>2] = 0;
      break;
     }
     default: {
     }
     }
     $680 = ((($$1$reg2mem1553$0)) + 8|0);
     $681 = HEAP16[$680>>1]|0;
     $682 = $681&65535;
     $683 = (($$1760$reg2mem1557$0) + ($682<<2)|0);
     $684 = HEAP32[$683>>2]|0;
     HEAP32[$684>>2] = 6;
     $685 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $685;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 21:  {
     $686 = ((($$1$reg2mem1553$0)) + 4|0);
     $687 = HEAP16[$686>>1]|0;
     $688 = $687&65535;
     $689 = (($$1760$reg2mem1557$0) + ($688<<2)|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ((($$1$reg2mem1553$0)) + 6|0);
     $692 = HEAP16[$691>>1]|0;
     $693 = $692&65535;
     $694 = (($$1760$reg2mem1557$0) + ($693<<2)|0);
     $695 = HEAP32[$694>>2]|0;
     $696 = HEAP16[$690>>1]|0;
     switch ($696<<16>>16) {
     case 2:  {
      $697 = ((($690)) + 8|0);
      $698 = +HEAPF64[$697>>3];
      $699 = ((($695)) + 8|0);
      $700 = +HEAPF64[$699>>3];
      $701 = $698 >= $700;
      $702 = $701&1;
      $703 = ((($$1$reg2mem1553$0)) + 8|0);
      $704 = HEAP16[$703>>1]|0;
      $705 = $704&65535;
      $706 = (($$1760$reg2mem1557$0) + ($705<<2)|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = ((($707)) + 8|0);
      $709 = $708;
      $710 = $709;
      HEAP32[$710>>2] = $702;
      $711 = (($709) + 4)|0;
      $712 = $711;
      HEAP32[$712>>2] = 0;
      break;
     }
     case 1:  {
      $713 = ((($690)) + 8|0);
      $714 = $713;
      $715 = $714;
      $716 = HEAP32[$715>>2]|0;
      $717 = (($714) + 4)|0;
      $718 = $717;
      $719 = HEAP32[$718>>2]|0;
      $720 = ((($695)) + 8|0);
      $721 = $720;
      $722 = $721;
      $723 = HEAP32[$722>>2]|0;
      $724 = (($721) + 4)|0;
      $725 = $724;
      $726 = HEAP32[$725>>2]|0;
      $727 = ($719|0)>($726|0);
      $728 = ($716>>>0)>=($723>>>0);
      $729 = ($719|0)==($726|0);
      $730 = $729 & $728;
      $731 = $727 | $730;
      $732 = $731&1;
      $733 = ((($$1$reg2mem1553$0)) + 8|0);
      $734 = HEAP16[$733>>1]|0;
      $735 = $734&65535;
      $736 = (($$1760$reg2mem1557$0) + ($735<<2)|0);
      $737 = HEAP32[$736>>2]|0;
      $738 = ((($737)) + 8|0);
      $739 = $738;
      $740 = $739;
      HEAP32[$740>>2] = $732;
      $741 = (($739) + 4)|0;
      $742 = $741;
      HEAP32[$742>>2] = 0;
      break;
     }
     case 3:  {
      $743 = ((($690)) + 8|0);
      $744 = HEAP32[$743>>2]|0;
      $745 = ((($744)) + 8|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ((($695)) + 8|0);
      $748 = HEAP32[$747>>2]|0;
      $749 = ((($748)) + 8|0);
      $750 = HEAP32[$749>>2]|0;
      __THREW__ = 0;
      $751 = (invoke_iii(5,($746|0),($750|0))|0);
      $752 = __THREW__; __THREW__ = 0;
      if ((($752|0) != 0) & ((threwValue|0) != 0)) { $753 = _testSetjmp(HEAP32[$752>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($753|0) == 0) { _longjmp($752|0, threwValue|0); } tempRet0 = (threwValue); } else { $753 = -1; };
      $754 = tempRet0;
      $cond1625 = ($753|0)==(1);
      if ($cond1625) {
       $$reg2mem1579$0 = $754;
       continue L4;
      }
      $$lobit = $751 >>> 31;
      $$lobit$not = $$lobit ^ 1;
      $755 = ((($$1$reg2mem1553$0)) + 8|0);
      $756 = HEAP16[$755>>1]|0;
      $757 = $756&65535;
      $758 = (($$1760$reg2mem1557$0) + ($757<<2)|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ((($759)) + 8|0);
      $761 = $760;
      $762 = $761;
      HEAP32[$762>>2] = $$lobit$not;
      $763 = (($761) + 4)|0;
      $764 = $763;
      HEAP32[$764>>2] = 0;
      break;
     }
     default: {
     }
     }
     $765 = ((($$1$reg2mem1553$0)) + 8|0);
     $766 = HEAP16[$765>>1]|0;
     $767 = $766&65535;
     $768 = (($$1760$reg2mem1557$0) + ($767<<2)|0);
     $769 = HEAP32[$768>>2]|0;
     HEAP32[$769>>2] = 6;
     $770 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $770;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 17:  {
     $771 = ((($$1$reg2mem1553$0)) + 4|0);
     $772 = HEAP16[$771>>1]|0;
     $773 = $772&65535;
     $774 = (($$1760$reg2mem1557$0) + ($773<<2)|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = ((($$1$reg2mem1553$0)) + 6|0);
     $777 = HEAP16[$776>>1]|0;
     $778 = $777&65535;
     $779 = (($$1760$reg2mem1557$0) + ($778<<2)|0);
     $780 = HEAP32[$779>>2]|0;
     $781 = HEAP16[$775>>1]|0;
     switch ($781<<16>>16) {
     case 2:  {
      $782 = ((($775)) + 8|0);
      $783 = +HEAPF64[$782>>3];
      $784 = ((($780)) + 8|0);
      $785 = +HEAPF64[$784>>3];
      $786 = $783 != $785;
      $787 = $786&1;
      $788 = ((($$1$reg2mem1553$0)) + 8|0);
      $789 = HEAP16[$788>>1]|0;
      $790 = $789&65535;
      $791 = (($$1760$reg2mem1557$0) + ($790<<2)|0);
      $792 = HEAP32[$791>>2]|0;
      $793 = ((($792)) + 8|0);
      $794 = $793;
      $795 = $794;
      HEAP32[$795>>2] = $787;
      $796 = (($794) + 4)|0;
      $797 = $796;
      HEAP32[$797>>2] = 0;
      break;
     }
     case 1:  {
      $798 = ((($775)) + 8|0);
      $799 = $798;
      $800 = $799;
      $801 = HEAP32[$800>>2]|0;
      $802 = (($799) + 4)|0;
      $803 = $802;
      $804 = HEAP32[$803>>2]|0;
      $805 = ((($780)) + 8|0);
      $806 = $805;
      $807 = $806;
      $808 = HEAP32[$807>>2]|0;
      $809 = (($806) + 4)|0;
      $810 = $809;
      $811 = HEAP32[$810>>2]|0;
      $812 = ($801|0)!=($808|0);
      $813 = ($804|0)!=($811|0);
      $814 = $812 | $813;
      $815 = $814&1;
      $816 = ((($$1$reg2mem1553$0)) + 8|0);
      $817 = HEAP16[$816>>1]|0;
      $818 = $817&65535;
      $819 = (($$1760$reg2mem1557$0) + ($818<<2)|0);
      $820 = HEAP32[$819>>2]|0;
      $821 = ((($820)) + 8|0);
      $822 = $821;
      $823 = $822;
      HEAP32[$823>>2] = $815;
      $824 = (($822) + 4)|0;
      $825 = $824;
      HEAP32[$825>>2] = 0;
      break;
     }
     case 3:  {
      $826 = ((($775)) + 8|0);
      $827 = HEAP32[$826>>2]|0;
      $828 = ((($827)) + 8|0);
      $829 = HEAP32[$828>>2]|0;
      $830 = ((($780)) + 8|0);
      $831 = HEAP32[$830>>2]|0;
      $832 = ((($831)) + 8|0);
      $833 = HEAP32[$832>>2]|0;
      __THREW__ = 0;
      $834 = (invoke_iii(5,($829|0),($833|0))|0);
      $835 = __THREW__; __THREW__ = 0;
      if ((($835|0) != 0) & ((threwValue|0) != 0)) { $836 = _testSetjmp(HEAP32[$835>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($836|0) == 0) { _longjmp($835|0, threwValue|0); } tempRet0 = (threwValue); } else { $836 = -1; };
      $837 = tempRet0;
      $cond1623 = ($836|0)==(1);
      if ($cond1623) {
       $$reg2mem1579$0 = $837;
       continue L4;
      }
      $838 = ($834|0)!=(0);
      $839 = $838&1;
      $840 = ((($$1$reg2mem1553$0)) + 8|0);
      $841 = HEAP16[$840>>1]|0;
      $842 = $841&65535;
      $843 = (($$1760$reg2mem1557$0) + ($842<<2)|0);
      $844 = HEAP32[$843>>2]|0;
      $845 = ((($844)) + 8|0);
      $846 = $845;
      $847 = $846;
      HEAP32[$847>>2] = $839;
      $848 = (($846) + 4)|0;
      $849 = $848;
      HEAP32[$849>>2] = 0;
      break;
     }
     default: {
      $850 = ((($$1$reg2mem1553$0)) + 2|0);
      $851 = HEAP16[$850>>1]|0;
      HEAP16[$68>>1] = $851;
      __THREW__ = 0;
      $852 = (invoke_iiii(9,($0|0),($775|0),($780|0))|0);
      $853 = __THREW__; __THREW__ = 0;
      if ((($853|0) != 0) & ((threwValue|0) != 0)) { $854 = _testSetjmp(HEAP32[$853>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($854|0) == 0) { _longjmp($853|0, threwValue|0); } tempRet0 = (threwValue); } else { $854 = -1; };
      $855 = tempRet0;
      $cond1624 = ($854|0)==(1);
      if ($cond1624) {
       $$reg2mem1579$0 = $855;
       continue L4;
      }
      $856 = ($852|0)!=(1);
      $857 = $856&1;
      $858 = ((($$1$reg2mem1553$0)) + 8|0);
      $859 = HEAP16[$858>>1]|0;
      $860 = $859&65535;
      $861 = (($$1760$reg2mem1557$0) + ($860<<2)|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = ((($862)) + 8|0);
      $864 = $863;
      $865 = $864;
      HEAP32[$865>>2] = $857;
      $866 = (($864) + 4)|0;
      $867 = $866;
      HEAP32[$867>>2] = 0;
     }
     }
     $868 = ((($$1$reg2mem1553$0)) + 8|0);
     $869 = HEAP16[$868>>1]|0;
     $870 = $869&65535;
     $871 = (($$1760$reg2mem1557$0) + ($870<<2)|0);
     $872 = HEAP32[$871>>2]|0;
     HEAP32[$872>>2] = 6;
     $873 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $873;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 24:  {
     $874 = ((($$1$reg2mem1553$0)) + 2|0);
     $875 = HEAP16[$874>>1]|0;
     $876 = $875 << 16 >> 16;
     $877 = (($$1$reg2mem1553$0) + ($876<<1)|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $877;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 5:  {
     $878 = ((($$1$reg2mem1553$0)) + 4|0);
     $879 = HEAP16[$878>>1]|0;
     $880 = $879&65535;
     $881 = (($$1760$reg2mem1557$0) + ($880<<2)|0);
     $882 = HEAP32[$881>>2]|0;
     $883 = ((($$1$reg2mem1553$0)) + 6|0);
     $884 = HEAP16[$883>>1]|0;
     $885 = $884&65535;
     $886 = (($$1760$reg2mem1557$0) + ($885<<2)|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = ((($882)) + 8|0);
     $889 = $888;
     $890 = $889;
     $891 = HEAP32[$890>>2]|0;
     $892 = (($889) + 4)|0;
     $893 = $892;
     $894 = HEAP32[$893>>2]|0;
     $895 = ((($887)) + 8|0);
     $896 = $895;
     $897 = $896;
     $898 = HEAP32[$897>>2]|0;
     $899 = (($896) + 4)|0;
     $900 = $899;
     $901 = HEAP32[$900>>2]|0;
     $902 = (___muldi3(($898|0),($901|0),($891|0),($894|0))|0);
     $903 = tempRet0;
     $904 = ((($$1$reg2mem1553$0)) + 8|0);
     $905 = HEAP16[$904>>1]|0;
     $906 = $905&65535;
     $907 = (($$1760$reg2mem1557$0) + ($906<<2)|0);
     $908 = HEAP32[$907>>2]|0;
     $909 = ((($908)) + 8|0);
     $910 = $909;
     $911 = $910;
     HEAP32[$911>>2] = $902;
     $912 = (($910) + 4)|0;
     $913 = $912;
     HEAP32[$913>>2] = $903;
     $914 = HEAP16[$904>>1]|0;
     $915 = $914&65535;
     $916 = (($$1760$reg2mem1557$0) + ($915<<2)|0);
     $917 = HEAP32[$916>>2]|0;
     HEAP32[$917>>2] = 1;
     $918 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $918;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 14:  {
     $919 = ((($$1$reg2mem1553$0)) + 4|0);
     $920 = HEAP16[$919>>1]|0;
     $921 = $920&65535;
     $922 = (($$1760$reg2mem1557$0) + ($921<<2)|0);
     $923 = HEAP32[$922>>2]|0;
     $924 = ((($$1$reg2mem1553$0)) + 6|0);
     $925 = HEAP16[$924>>1]|0;
     $926 = $925&65535;
     $927 = (($$1760$reg2mem1557$0) + ($926<<2)|0);
     $928 = HEAP32[$927>>2]|0;
     $929 = ((($923)) + 8|0);
     $930 = +HEAPF64[$929>>3];
     $931 = ((($928)) + 8|0);
     $932 = +HEAPF64[$931>>3];
     $933 = $930 * $932;
     $934 = ((($$1$reg2mem1553$0)) + 8|0);
     $935 = HEAP16[$934>>1]|0;
     $936 = $935&65535;
     $937 = (($$1760$reg2mem1557$0) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = ((($938)) + 8|0);
     HEAPF64[$939>>3] = $933;
     $940 = HEAP16[$934>>1]|0;
     $941 = $940&65535;
     $942 = (($$1760$reg2mem1557$0) + ($941<<2)|0);
     $943 = HEAP32[$942>>2]|0;
     HEAP32[$943>>2] = 2;
     $944 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $944;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 6:  {
     $945 = ((($$1$reg2mem1553$0)) + 6|0);
     $946 = HEAP16[$945>>1]|0;
     $947 = $946&65535;
     $948 = (($$1760$reg2mem1557$0) + ($947<<2)|0);
     $949 = HEAP32[$948>>2]|0;
     $950 = ((($949)) + 8|0);
     $951 = $950;
     $952 = $951;
     $953 = HEAP32[$952>>2]|0;
     $954 = (($951) + 4)|0;
     $955 = $954;
     $956 = HEAP32[$955>>2]|0;
     $957 = ($953|0)==(0);
     $958 = ($956|0)==(0);
     $959 = $957 & $958;
     if ($959) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),25,(15982|0));
      $960 = __THREW__; __THREW__ = 0;
      if ((($960|0) != 0) & ((threwValue|0) != 0)) { $961 = _testSetjmp(HEAP32[$960>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($961|0) == 0) { _longjmp($960|0, threwValue|0); } tempRet0 = (threwValue); } else { $961 = -1; };
      $962 = tempRet0;
      $cond1622 = ($961|0)==(1);
      if ($cond1622) {
       $$reg2mem1579$0 = $962;
       continue L4;
      }
     }
     $963 = ((($$1$reg2mem1553$0)) + 4|0);
     $964 = HEAP16[$963>>1]|0;
     $965 = $964&65535;
     $966 = (($$1760$reg2mem1557$0) + ($965<<2)|0);
     $967 = HEAP32[$966>>2]|0;
     $968 = HEAP16[$945>>1]|0;
     $969 = $968&65535;
     $970 = (($$1760$reg2mem1557$0) + ($969<<2)|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = ((($967)) + 8|0);
     $973 = $972;
     $974 = $973;
     $975 = HEAP32[$974>>2]|0;
     $976 = (($973) + 4)|0;
     $977 = $976;
     $978 = HEAP32[$977>>2]|0;
     $979 = ((($971)) + 8|0);
     $980 = $979;
     $981 = $980;
     $982 = HEAP32[$981>>2]|0;
     $983 = (($980) + 4)|0;
     $984 = $983;
     $985 = HEAP32[$984>>2]|0;
     $986 = (___divdi3(($975|0),($978|0),($982|0),($985|0))|0);
     $987 = tempRet0;
     $988 = ((($$1$reg2mem1553$0)) + 8|0);
     $989 = HEAP16[$988>>1]|0;
     $990 = $989&65535;
     $991 = (($$1760$reg2mem1557$0) + ($990<<2)|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = ((($992)) + 8|0);
     $994 = $993;
     $995 = $994;
     HEAP32[$995>>2] = $986;
     $996 = (($994) + 4)|0;
     $997 = $996;
     HEAP32[$997>>2] = $987;
     $998 = HEAP16[$988>>1]|0;
     $999 = $998&65535;
     $1000 = (($$1760$reg2mem1557$0) + ($999<<2)|0);
     $1001 = HEAP32[$1000>>2]|0;
     HEAP32[$1001>>2] = 1;
     $1002 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1002;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 4:  {
     $1003 = ((($$1$reg2mem1553$0)) + 6|0);
     $1004 = HEAP16[$1003>>1]|0;
     $1005 = $1004&65535;
     $1006 = (($$1760$reg2mem1557$0) + ($1005<<2)|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = ((($1007)) + 8|0);
     $1009 = $1008;
     $1010 = $1009;
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = (($1009) + 4)|0;
     $1013 = $1012;
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = ($1011|0)==(0);
     $1016 = ($1014|0)==(0);
     $1017 = $1015 & $1016;
     if ($1017) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),25,(15982|0));
      $1018 = __THREW__; __THREW__ = 0;
      if ((($1018|0) != 0) & ((threwValue|0) != 0)) { $1019 = _testSetjmp(HEAP32[$1018>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1019|0) == 0) { _longjmp($1018|0, threwValue|0); } tempRet0 = (threwValue); } else { $1019 = -1; };
      $1020 = tempRet0;
      $cond1621 = ($1019|0)==(1);
      if ($cond1621) {
       $$reg2mem1579$0 = $1020;
       continue L4;
      }
     }
     $1021 = ((($$1$reg2mem1553$0)) + 4|0);
     $1022 = HEAP16[$1021>>1]|0;
     $1023 = $1022&65535;
     $1024 = (($$1760$reg2mem1557$0) + ($1023<<2)|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = HEAP16[$1003>>1]|0;
     $1027 = $1026&65535;
     $1028 = (($$1760$reg2mem1557$0) + ($1027<<2)|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = ((($1025)) + 8|0);
     $1031 = $1030;
     $1032 = $1031;
     $1033 = HEAP32[$1032>>2]|0;
     $1034 = (($1031) + 4)|0;
     $1035 = $1034;
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = ((($1029)) + 8|0);
     $1038 = $1037;
     $1039 = $1038;
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = (($1038) + 4)|0;
     $1042 = $1041;
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = (___remdi3(($1033|0),($1036|0),($1040|0),($1043|0))|0);
     $1045 = tempRet0;
     $1046 = ((($$1$reg2mem1553$0)) + 8|0);
     $1047 = HEAP16[$1046>>1]|0;
     $1048 = $1047&65535;
     $1049 = (($$1760$reg2mem1557$0) + ($1048<<2)|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = ((($1050)) + 8|0);
     $1052 = $1051;
     $1053 = $1052;
     HEAP32[$1053>>2] = $1044;
     $1054 = (($1052) + 4)|0;
     $1055 = $1054;
     HEAP32[$1055>>2] = $1045;
     $1056 = HEAP16[$1046>>1]|0;
     $1057 = $1056&65535;
     $1058 = (($$1760$reg2mem1557$0) + ($1057<<2)|0);
     $1059 = HEAP32[$1058>>2]|0;
     HEAP32[$1059>>2] = 1;
     $1060 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1060;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 7:  {
     $1061 = ((($$1$reg2mem1553$0)) + 4|0);
     $1062 = HEAP16[$1061>>1]|0;
     $1063 = $1062&65535;
     $1064 = (($$1760$reg2mem1557$0) + ($1063<<2)|0);
     $1065 = HEAP32[$1064>>2]|0;
     $1066 = ((($$1$reg2mem1553$0)) + 6|0);
     $1067 = HEAP16[$1066>>1]|0;
     $1068 = $1067&65535;
     $1069 = (($$1760$reg2mem1557$0) + ($1068<<2)|0);
     $1070 = HEAP32[$1069>>2]|0;
     $1071 = ((($1065)) + 8|0);
     $1072 = $1071;
     $1073 = $1072;
     $1074 = HEAP32[$1073>>2]|0;
     $1075 = (($1072) + 4)|0;
     $1076 = $1075;
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = ((($1070)) + 8|0);
     $1079 = $1078;
     $1080 = $1079;
     $1081 = HEAP32[$1080>>2]|0;
     $1082 = (($1079) + 4)|0;
     $1083 = $1082;
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = (_bitshift64Shl(($1074|0),($1077|0),($1081|0))|0);
     $1086 = tempRet0;
     $1087 = ((($$1$reg2mem1553$0)) + 8|0);
     $1088 = HEAP16[$1087>>1]|0;
     $1089 = $1088&65535;
     $1090 = (($$1760$reg2mem1557$0) + ($1089<<2)|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = ((($1091)) + 8|0);
     $1093 = $1092;
     $1094 = $1093;
     HEAP32[$1094>>2] = $1085;
     $1095 = (($1093) + 4)|0;
     $1096 = $1095;
     HEAP32[$1096>>2] = $1086;
     $1097 = HEAP16[$1087>>1]|0;
     $1098 = $1097&65535;
     $1099 = (($$1760$reg2mem1557$0) + ($1098<<2)|0);
     $1100 = HEAP32[$1099>>2]|0;
     HEAP32[$1100>>2] = 1;
     $1101 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1101;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 8:  {
     $1102 = ((($$1$reg2mem1553$0)) + 4|0);
     $1103 = HEAP16[$1102>>1]|0;
     $1104 = $1103&65535;
     $1105 = (($$1760$reg2mem1557$0) + ($1104<<2)|0);
     $1106 = HEAP32[$1105>>2]|0;
     $1107 = ((($$1$reg2mem1553$0)) + 6|0);
     $1108 = HEAP16[$1107>>1]|0;
     $1109 = $1108&65535;
     $1110 = (($$1760$reg2mem1557$0) + ($1109<<2)|0);
     $1111 = HEAP32[$1110>>2]|0;
     $1112 = ((($1106)) + 8|0);
     $1113 = $1112;
     $1114 = $1113;
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (($1113) + 4)|0;
     $1117 = $1116;
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = ((($1111)) + 8|0);
     $1120 = $1119;
     $1121 = $1120;
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = (($1120) + 4)|0;
     $1124 = $1123;
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = (_bitshift64Ashr(($1115|0),($1118|0),($1122|0))|0);
     $1127 = tempRet0;
     $1128 = ((($$1$reg2mem1553$0)) + 8|0);
     $1129 = HEAP16[$1128>>1]|0;
     $1130 = $1129&65535;
     $1131 = (($$1760$reg2mem1557$0) + ($1130<<2)|0);
     $1132 = HEAP32[$1131>>2]|0;
     $1133 = ((($1132)) + 8|0);
     $1134 = $1133;
     $1135 = $1134;
     HEAP32[$1135>>2] = $1126;
     $1136 = (($1134) + 4)|0;
     $1137 = $1136;
     HEAP32[$1137>>2] = $1127;
     $1138 = HEAP16[$1128>>1]|0;
     $1139 = $1138&65535;
     $1140 = (($$1760$reg2mem1557$0) + ($1139<<2)|0);
     $1141 = HEAP32[$1140>>2]|0;
     HEAP32[$1141>>2] = 1;
     $1142 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1142;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 9:  {
     $1143 = ((($$1$reg2mem1553$0)) + 4|0);
     $1144 = HEAP16[$1143>>1]|0;
     $1145 = $1144&65535;
     $1146 = (($$1760$reg2mem1557$0) + ($1145<<2)|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = ((($$1$reg2mem1553$0)) + 6|0);
     $1149 = HEAP16[$1148>>1]|0;
     $1150 = $1149&65535;
     $1151 = (($$1760$reg2mem1557$0) + ($1150<<2)|0);
     $1152 = HEAP32[$1151>>2]|0;
     $1153 = ((($1147)) + 8|0);
     $1154 = $1153;
     $1155 = $1154;
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = (($1154) + 4)|0;
     $1158 = $1157;
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = ((($1152)) + 8|0);
     $1161 = $1160;
     $1162 = $1161;
     $1163 = HEAP32[$1162>>2]|0;
     $1164 = (($1161) + 4)|0;
     $1165 = $1164;
     $1166 = HEAP32[$1165>>2]|0;
     $1167 = $1163 & $1156;
     $1168 = $1166 & $1159;
     $1169 = ((($$1$reg2mem1553$0)) + 8|0);
     $1170 = HEAP16[$1169>>1]|0;
     $1171 = $1170&65535;
     $1172 = (($$1760$reg2mem1557$0) + ($1171<<2)|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = ((($1173)) + 8|0);
     $1175 = $1174;
     $1176 = $1175;
     HEAP32[$1176>>2] = $1167;
     $1177 = (($1175) + 4)|0;
     $1178 = $1177;
     HEAP32[$1178>>2] = $1168;
     $1179 = HEAP16[$1169>>1]|0;
     $1180 = $1179&65535;
     $1181 = (($$1760$reg2mem1557$0) + ($1180<<2)|0);
     $1182 = HEAP32[$1181>>2]|0;
     HEAP32[$1182>>2] = 1;
     $1183 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1183;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 10:  {
     $1184 = ((($$1$reg2mem1553$0)) + 4|0);
     $1185 = HEAP16[$1184>>1]|0;
     $1186 = $1185&65535;
     $1187 = (($$1760$reg2mem1557$0) + ($1186<<2)|0);
     $1188 = HEAP32[$1187>>2]|0;
     $1189 = ((($$1$reg2mem1553$0)) + 6|0);
     $1190 = HEAP16[$1189>>1]|0;
     $1191 = $1190&65535;
     $1192 = (($$1760$reg2mem1557$0) + ($1191<<2)|0);
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = ((($1188)) + 8|0);
     $1195 = $1194;
     $1196 = $1195;
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = (($1195) + 4)|0;
     $1199 = $1198;
     $1200 = HEAP32[$1199>>2]|0;
     $1201 = ((($1193)) + 8|0);
     $1202 = $1201;
     $1203 = $1202;
     $1204 = HEAP32[$1203>>2]|0;
     $1205 = (($1202) + 4)|0;
     $1206 = $1205;
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = $1204 | $1197;
     $1209 = $1207 | $1200;
     $1210 = ((($$1$reg2mem1553$0)) + 8|0);
     $1211 = HEAP16[$1210>>1]|0;
     $1212 = $1211&65535;
     $1213 = (($$1760$reg2mem1557$0) + ($1212<<2)|0);
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = ((($1214)) + 8|0);
     $1216 = $1215;
     $1217 = $1216;
     HEAP32[$1217>>2] = $1208;
     $1218 = (($1216) + 4)|0;
     $1219 = $1218;
     HEAP32[$1219>>2] = $1209;
     $1220 = HEAP16[$1210>>1]|0;
     $1221 = $1220&65535;
     $1222 = (($$1760$reg2mem1557$0) + ($1221<<2)|0);
     $1223 = HEAP32[$1222>>2]|0;
     HEAP32[$1223>>2] = 1;
     $1224 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1224;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 11:  {
     $1225 = ((($$1$reg2mem1553$0)) + 4|0);
     $1226 = HEAP16[$1225>>1]|0;
     $1227 = $1226&65535;
     $1228 = (($$1760$reg2mem1557$0) + ($1227<<2)|0);
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = ((($$1$reg2mem1553$0)) + 6|0);
     $1231 = HEAP16[$1230>>1]|0;
     $1232 = $1231&65535;
     $1233 = (($$1760$reg2mem1557$0) + ($1232<<2)|0);
     $1234 = HEAP32[$1233>>2]|0;
     $1235 = ((($1229)) + 8|0);
     $1236 = $1235;
     $1237 = $1236;
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = (($1236) + 4)|0;
     $1240 = $1239;
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = ((($1234)) + 8|0);
     $1243 = $1242;
     $1244 = $1243;
     $1245 = HEAP32[$1244>>2]|0;
     $1246 = (($1243) + 4)|0;
     $1247 = $1246;
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = $1245 ^ $1238;
     $1250 = $1248 ^ $1241;
     $1251 = ((($$1$reg2mem1553$0)) + 8|0);
     $1252 = HEAP16[$1251>>1]|0;
     $1253 = $1252&65535;
     $1254 = (($$1760$reg2mem1557$0) + ($1253<<2)|0);
     $1255 = HEAP32[$1254>>2]|0;
     $1256 = ((($1255)) + 8|0);
     $1257 = $1256;
     $1258 = $1257;
     HEAP32[$1258>>2] = $1249;
     $1259 = (($1257) + 4)|0;
     $1260 = $1259;
     HEAP32[$1260>>2] = $1250;
     $1261 = HEAP16[$1251>>1]|0;
     $1262 = $1261&65535;
     $1263 = (($$1760$reg2mem1557$0) + ($1262<<2)|0);
     $1264 = HEAP32[$1263>>2]|0;
     HEAP32[$1264>>2] = 1;
     $1265 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1265;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 15:  {
     $1266 = ((($$1$reg2mem1553$0)) + 6|0);
     $1267 = HEAP16[$1266>>1]|0;
     $1268 = $1267&65535;
     $1269 = (($$1760$reg2mem1557$0) + ($1268<<2)|0);
     $1270 = HEAP32[$1269>>2]|0;
     $1271 = ((($1270)) + 8|0);
     $1272 = +HEAPF64[$1271>>3];
     $1273 = $1272 == 0.0;
     if ($1273) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),25,(15982|0));
      $1274 = __THREW__; __THREW__ = 0;
      if ((($1274|0) != 0) & ((threwValue|0) != 0)) { $1275 = _testSetjmp(HEAP32[$1274>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1275|0) == 0) { _longjmp($1274|0, threwValue|0); } tempRet0 = (threwValue); } else { $1275 = -1; };
      $1276 = tempRet0;
      $cond1620 = ($1275|0)==(1);
      if ($cond1620) {
       $$reg2mem1579$0 = $1276;
       continue L4;
      }
     }
     $1277 = ((($$1$reg2mem1553$0)) + 4|0);
     $1278 = HEAP16[$1277>>1]|0;
     $1279 = $1278&65535;
     $1280 = (($$1760$reg2mem1557$0) + ($1279<<2)|0);
     $1281 = HEAP32[$1280>>2]|0;
     $1282 = HEAP16[$1266>>1]|0;
     $1283 = $1282&65535;
     $1284 = (($$1760$reg2mem1557$0) + ($1283<<2)|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = ((($1281)) + 8|0);
     $1287 = +HEAPF64[$1286>>3];
     $1288 = ((($1285)) + 8|0);
     $1289 = +HEAPF64[$1288>>3];
     $1290 = $1287 / $1289;
     $1291 = ((($$1$reg2mem1553$0)) + 8|0);
     $1292 = HEAP16[$1291>>1]|0;
     $1293 = $1292&65535;
     $1294 = (($$1760$reg2mem1557$0) + ($1293<<2)|0);
     $1295 = HEAP32[$1294>>2]|0;
     $1296 = ((($1295)) + 8|0);
     HEAPF64[$1296>>3] = $1290;
     $1297 = HEAP16[$1291>>1]|0;
     $1298 = $1297&65535;
     $1299 = (($$1760$reg2mem1557$0) + ($1298<<2)|0);
     $1300 = HEAP32[$1299>>2]|0;
     HEAP32[$1300>>2] = 2;
     $1301 = ((($$1$reg2mem1553$0)) + 10|0);
     $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1301;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
     continue L19;
     break;
    }
    case 25:  {
     $1302 = ((($$1$reg2mem1553$0)) + 4|0);
     $1303 = HEAP16[$1302>>1]|0;
     $1304 = $1303&65535;
     $1305 = (($$1760$reg2mem1557$0) + ($1304<<2)|0);
     $1306 = HEAP32[$1305>>2]|0;
     $1307 = HEAP16[$1306>>1]|0;
     switch ($1307<<16>>16) {
     case 1: case 6:  {
      $1308 = ((($1306)) + 8|0);
      $1309 = $1308;
      $1310 = $1309;
      $1311 = HEAP32[$1310>>2]|0;
      $1312 = (($1309) + 4)|0;
      $1313 = $1312;
      $1314 = HEAP32[$1313>>2]|0;
      $1315 = ($1311|0)==(0);
      $1316 = ($1314|0)==(0);
      $1317 = $1315 & $1316;
      $$0770$shrunk$reg2mem$0 = $1317;
      break;
     }
     case 3:  {
      $1318 = ((($1306)) + 8|0);
      $1319 = HEAP32[$1318>>2]|0;
      $1320 = ((($1319)) + 4|0);
      $1321 = HEAP32[$1320>>2]|0;
      $1322 = ($1321|0)==(0);
      $$0770$shrunk$reg2mem$0 = $1322;
      break;
     }
     case 9:  {
      $1323 = ((($1306)) + 8|0);
      $1324 = HEAP32[$1323>>2]|0;
      $1325 = ((($1324)) + 8|0);
      $1326 = HEAP32[$1325>>2]|0;
      $1327 = ($1326|0)==(0);
      $$0770$shrunk$reg2mem$0 = $1327;
      break;
     }
     default: {
      $$0770$shrunk$reg2mem$0 = 1;
     }
     }
     $$0770 = $$0770$shrunk$reg2mem$0&1;
     $1328 = ((($$1$reg2mem1553$0)) + 2|0);
     $1329 = HEAP16[$1328>>1]|0;
     $1330 = $1329&65535;
     $1331 = ($$0770|0)==($1330|0);
     if ($1331) {
      $1336 = ((($$1$reg2mem1553$0)) + 8|0);
      $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1336;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
      continue L19;
     } else {
      $1332 = ((($$1$reg2mem1553$0)) + 6|0);
      $1333 = HEAP16[$1332>>1]|0;
      $1334 = $1333 << 16 >> 16;
      $1335 = (($$1$reg2mem1553$0) + ($1334<<1)|0);
      $$1782$reg2mem1565$0$phi = $$1782$reg2mem1565$0;$$1778$reg2mem1563$0$phi = $$1778$reg2mem1563$0;$$1760$reg2mem1557$0$phi = $$1760$reg2mem1557$0;$$1754$reg2mem1555$0$phi = $$1754$reg2mem1555$0;$$0785$reg2mem1567$0$phi = $$0785$reg2mem1567$0;$$0771$reg2mem1561$0$phi = $$0771$reg2mem1561$0;$$0767$reg2mem1559$0$phi = $$0767$reg2mem1559$0;$$1$reg2mem1553$0 = $1335;$$1782$reg2mem1565$0 = $$1782$reg2mem1565$0$phi;$$1778$reg2mem1563$0 = $$1778$reg2mem1563$0$phi;$$1760$reg2mem1557$0 = $$1760$reg2mem1557$0$phi;$$1754$reg2mem1555$0 = $$1754$reg2mem1555$0$phi;$$0785$reg2mem1567$0 = $$0785$reg2mem1567$0$phi;$$0771$reg2mem1561$0 = $$0771$reg2mem1561$0$phi;$$0767$reg2mem1559$0 = $$0767$reg2mem1559$0$phi;
      continue L19;
     }
     break;
    }
    case 28:  {
     $1337 = ((($$1$reg2mem1553$0)) + 4|0);
     $1338 = HEAP16[$1337>>1]|0;
     $1339 = $1338&65535;
     $1340 = HEAP32[$69>>2]|0;
     $1341 = (($1340) + ($1339<<2)|0);
     $1342 = HEAP32[$1341>>2]|0;
     $1343 = ((($1342)) + 8|0);
     $1344 = HEAP32[$1343>>2]|0;
     $$1768$reg2mem1543$0 = $$0767$reg2mem1559$0;$$1772$reg2mem1545$0 = $$0771$reg2mem1561$0;$$1786$reg2mem1551$0 = $1344;$$2755$reg2mem1539$0 = $$1754$reg2mem1555$0;$$2761$reg2mem1541$0 = $$1760$reg2mem1557$0;$$2779$reg2mem1547$0 = $$1778$reg2mem1563$0;$$2783$reg2mem1549$0 = $$1782$reg2mem1565$0;$$3$reg2mem1537$0 = $$1$reg2mem1553$0;
     break;
    }
    case 29:  {
     $1418 = ((($$1$reg2mem1553$0)) + 4|0);
     $1419 = HEAP16[$1418>>1]|0;
     $1420 = $1419&65535;
     $1421 = HEAP32[$70>>2]|0;
     $1422 = (($1421) + ($1420<<2)|0);
     $1423 = HEAP32[$1422>>2]|0;
     $1424 = ((($1423)) + 8|0);
     $1425 = HEAP32[$1424>>2]|0;
     $$2787$reg2mem1525$0 = $1425;
     label = 110;
     break;
    }
    case 30:  {
     $1483 = ((($$1$reg2mem1553$0)) + 4|0);
     $1484 = HEAP16[$1483>>1]|0;
     $1485 = $1484&65535;
     $1486 = (($$1760$reg2mem1557$0) + ($1485<<2)|0);
     $1487 = HEAP32[$1486>>2]|0;
     $1488 = ((($1487)) + 8|0);
     $1489 = HEAP32[$1488>>2]|0;
     $1490 = ((($1489)) + 40|0);
     $1491 = HEAP32[$1490>>2]|0;
     $1492 = ($1491|0)==(0|0);
     if ($1492) {
      $$0765$reg2mem$0 = 5;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $1489;$$5$reg2mem1499$0 = $$1$reg2mem1553$0;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
      label = 195;
     } else {
      $$2787$reg2mem1525$0 = $1489;
      label = 110;
     }
     break;
    }
    case 65:  {
     __THREW__ = 0;
     invoke_vii(28,($0|0),($$1$reg2mem1553$0|0));
     $1493 = __THREW__; __THREW__ = 0;
     if ((($1493|0) != 0) & ((threwValue|0) != 0)) { $1494 = _testSetjmp(HEAP32[$1493>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1494|0) == 0) { _longjmp($1493|0, threwValue|0); } tempRet0 = (threwValue); } else { $1494 = -1; };
     $1495 = tempRet0;
     $cond1610 = ($1494|0)==(1);
     if ($cond1610) {
      $$reg2mem1579$0 = $1495;
      continue L4;
     }
     $1496 = ((($$1$reg2mem1553$0)) + 4|0);
     $1497 = HEAP16[$1496>>1]|0;
     $1498 = $1497&65535;
     $1499 = (($1498) + 4)|0;
     $1500 = (($$1$reg2mem1553$0) + ($1499<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1500;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 22:  {
     $1501 = ((($$1$reg2mem1553$0)) + 4|0);
     $1502 = HEAP16[$1501>>1]|0;
     $1503 = $1502&65535;
     $1504 = (($$1760$reg2mem1557$0) + ($1503<<2)|0);
     $1505 = HEAP32[$1504>>2]|0;
     $1506 = ((($$1$reg2mem1553$0)) + 6|0);
     $1507 = HEAP16[$1506>>1]|0;
     $1508 = $1507&65535;
     $1509 = (($$1760$reg2mem1557$0) + ($1508<<2)|0);
     $1510 = HEAP32[$1509>>2]|0;
     $1511 = HEAP32[$1505>>2]|0;
     HEAP32[$1510>>2] = $1511;
     $1512 = ((($1505)) + 8|0);
     $1513 = $1512;
     $1514 = $1513;
     $1515 = HEAP32[$1514>>2]|0;
     $1516 = (($1513) + 4)|0;
     $1517 = $1516;
     $1518 = HEAP32[$1517>>2]|0;
     $1519 = ($1515|0)==(0);
     $1520 = ($1518|0)==(0);
     $1521 = $1519 & $1520;
     $1522 = $1521&1;
     $1523 = ((($1510)) + 8|0);
     $1524 = $1523;
     $1525 = $1524;
     HEAP32[$1525>>2] = $1522;
     $1526 = (($1524) + 4)|0;
     $1527 = $1526;
     HEAP32[$1527>>2] = 0;
     $1528 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1528;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 23:  {
     $1529 = ((($$1$reg2mem1553$0)) + 4|0);
     $1530 = HEAP16[$1529>>1]|0;
     $1531 = $1530&65535;
     $1532 = (($$1760$reg2mem1557$0) + ($1531<<2)|0);
     $1533 = HEAP32[$1532>>2]|0;
     $1534 = ((($$1$reg2mem1553$0)) + 6|0);
     $1535 = HEAP16[$1534>>1]|0;
     $1536 = $1535&65535;
     $1537 = (($$1760$reg2mem1557$0) + ($1536<<2)|0);
     $1538 = HEAP32[$1537>>2]|0;
     HEAP32[$1538>>2] = 1;
     $1539 = ((($1533)) + 8|0);
     $1540 = $1539;
     $1541 = $1540;
     $1542 = HEAP32[$1541>>2]|0;
     $1543 = (($1540) + 4)|0;
     $1544 = $1543;
     $1545 = HEAP32[$1544>>2]|0;
     $1546 = (_i64Subtract(0,0,($1542|0),($1545|0))|0);
     $1547 = tempRet0;
     $1548 = ((($1538)) + 8|0);
     $1549 = $1548;
     $1550 = $1549;
     HEAP32[$1550>>2] = $1546;
     $1551 = (($1549) + 4)|0;
     $1552 = $1551;
     HEAP32[$1552>>2] = $1547;
     $1553 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1553;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 32:  {
     $1554 = ((($$1778$reg2mem1563$0)) + 32|0);
     $1555 = HEAP32[$1554>>2]|0;
     $1556 = ((($1555)) + 4|0);
     $1557 = HEAP32[$1556>>2]|0;
     __THREW__ = 0;
     invoke_viii(5,($1557|0));
     $1558 = __THREW__; __THREW__ = 0;
     if ((($1558|0) != 0) & ((threwValue|0) != 0)) { $1559 = _testSetjmp(HEAP32[$1558>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1559|0) == 0) { _longjmp($1558|0, threwValue|0); } tempRet0 = (threwValue); } else { $1559 = -1; };
     $1560 = tempRet0;
     $cond1609 = ($1559|0)==(1);
     if ($cond1609) {
      $$reg2mem1579$0 = $1560;
      continue L4;
     }
     label = 130;
     break;
    }
    case 31:  {
     $1561 = ((($$1778$reg2mem1563$0)) + 32|0);
     $1562 = HEAP32[$1561>>2]|0;
     $1563 = ((($1562)) + 4|0);
     $1564 = HEAP32[$1563>>2]|0;
     $1565 = ((($$1$reg2mem1553$0)) + 4|0);
     $1566 = HEAP16[$1565>>1]|0;
     $1567 = $1566&65535;
     $1568 = (($$1760$reg2mem1557$0) + ($1567<<2)|0);
     $1569 = HEAP32[$1568>>2]|0;
     __THREW__ = 0;
     invoke_vii(29,($1564|0),($1569|0));
     $1570 = __THREW__; __THREW__ = 0;
     if ((($1570|0) != 0) & ((threwValue|0) != 0)) { $1571 = _testSetjmp(HEAP32[$1570>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1571|0) == 0) { _longjmp($1570|0, threwValue|0); } tempRet0 = (threwValue); } else { $1571 = -1; };
     $1572 = tempRet0;
     $cond1608 = ($1571|0)==(1);
     if ($cond1608) {
      $$reg2mem1579$0 = $1572;
      continue L4;
     }
     label = 130;
     break;
    }
    case 39:  {
     $1590 = ((($$1$reg2mem1553$0)) + 4|0);
     $1591 = HEAP16[$1590>>1]|0;
     $1592 = $1591&65535;
     $1593 = (($$1754$reg2mem1555$0) + ($1592<<2)|0);
     $1594 = HEAP32[$1593>>2]|0;
     $1595 = ((($$1$reg2mem1553$0)) + 6|0);
     $1596 = HEAP16[$1595>>1]|0;
     $1597 = $1596&65535;
     $1598 = (($$1760$reg2mem1557$0) + ($1597<<2)|0);
     $1599 = HEAP32[$1598>>2]|0;
     __THREW__ = 0;
     invoke_vii(29,($1599|0),($1594|0));
     $1600 = __THREW__; __THREW__ = 0;
     if ((($1600|0) != 0) & ((threwValue|0) != 0)) { $1601 = _testSetjmp(HEAP32[$1600>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1601|0) == 0) { _longjmp($1600|0, threwValue|0); } tempRet0 = (threwValue); } else { $1601 = -1; };
     $1602 = tempRet0;
     $cond1607 = ($1601|0)==(1);
     if ($cond1607) {
      $$reg2mem1579$0 = $1602;
      continue L4;
     }
     $1603 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1603;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 40:  {
     $1604 = ((($$1$reg2mem1553$0)) + 4|0);
     $1605 = HEAP16[$1604>>1]|0;
     $1606 = $1605&65535;
     $1607 = (($$1760$reg2mem1557$0) + ($1606<<2)|0);
     $1608 = HEAP32[$1607>>2]|0;
     $1609 = ((($$1$reg2mem1553$0)) + 6|0);
     $1610 = HEAP16[$1609>>1]|0;
     $1611 = $1610&65535;
     $1612 = (($$1754$reg2mem1555$0) + ($1611<<2)|0);
     $1613 = HEAP32[$1612>>2]|0;
     __THREW__ = 0;
     invoke_vii(29,($1613|0),($1608|0));
     $1614 = __THREW__; __THREW__ = 0;
     if ((($1614|0) != 0) & ((threwValue|0) != 0)) { $1615 = _testSetjmp(HEAP32[$1614>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1615|0) == 0) { _longjmp($1614|0, threwValue|0); } tempRet0 = (threwValue); } else { $1615 = -1; };
     $1616 = tempRet0;
     $cond1606 = ($1615|0)==(1);
     if ($cond1606) {
      $$reg2mem1579$0 = $1616;
      continue L4;
     }
     $1617 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1617;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 1:  {
     $1618 = ((($$1$reg2mem1553$0)) + 4|0);
     $1619 = HEAP16[$1618>>1]|0;
     $1620 = $1619&65535;
     $1621 = (($$1760$reg2mem1557$0) + ($1620<<2)|0);
     $1622 = HEAP32[$1621>>2]|0;
     $1623 = ((($$1$reg2mem1553$0)) + 6|0);
     $1624 = HEAP16[$1623>>1]|0;
     $1625 = $1624&65535;
     $1626 = (($$1760$reg2mem1557$0) + ($1625<<2)|0);
     $1627 = HEAP32[$1626>>2]|0;
     __THREW__ = 0;
     invoke_vii(29,($1627|0),($1622|0));
     $1628 = __THREW__; __THREW__ = 0;
     if ((($1628|0) != 0) & ((threwValue|0) != 0)) { $1629 = _testSetjmp(HEAP32[$1628>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1629|0) == 0) { _longjmp($1628|0, threwValue|0); } tempRet0 = (threwValue); } else { $1629 = -1; };
     $1630 = tempRet0;
     $cond1605 = ($1629|0)==(1);
     if ($cond1605) {
      $$reg2mem1579$0 = $1630;
      continue L4;
     }
     $1631 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1631;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 37:  {
     __THREW__ = 0;
     invoke_vii(30,($0|0),($$1$reg2mem1553$0|0));
     $1632 = __THREW__; __THREW__ = 0;
     if ((($1632|0) != 0) & ((threwValue|0) != 0)) { $1633 = _testSetjmp(HEAP32[$1632>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1633|0) == 0) { _longjmp($1632|0, threwValue|0); } tempRet0 = (threwValue); } else { $1633 = -1; };
     $1634 = tempRet0;
     $cond1604 = ($1633|0)==(1);
     if ($cond1604) {
      $$reg2mem1579$0 = $1634;
      continue L4;
     }
     $1635 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1635;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 49:  {
     __THREW__ = 0;
     invoke_vii(31,($0|0),($$1$reg2mem1553$0|0));
     $1636 = __THREW__; __THREW__ = 0;
     if ((($1636|0) != 0) & ((threwValue|0) != 0)) { $1637 = _testSetjmp(HEAP32[$1636>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1637|0) == 0) { _longjmp($1636|0, threwValue|0); } tempRet0 = (threwValue); } else { $1637 = -1; };
     $1638 = tempRet0;
     $cond1603 = ($1637|0)==(1);
     if ($cond1603) {
      $$reg2mem1579$0 = $1638;
      continue L4;
     }
     $1639 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1639;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 38:  {
     __THREW__ = 0;
     invoke_vii(32,($0|0),($$1$reg2mem1553$0|0));
     $1640 = __THREW__; __THREW__ = 0;
     if ((($1640|0) != 0) & ((threwValue|0) != 0)) { $1641 = _testSetjmp(HEAP32[$1640>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1641|0) == 0) { _longjmp($1640|0, threwValue|0); } tempRet0 = (threwValue); } else { $1641 = -1; };
     $1642 = tempRet0;
     $cond1602 = ($1641|0)==(1);
     if ($cond1602) {
      $$reg2mem1579$0 = $1642;
      continue L4;
     }
     $1643 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1643;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 50:  {
     __THREW__ = 0;
     invoke_vii(33,($0|0),($$1$reg2mem1553$0|0));
     $1644 = __THREW__; __THREW__ = 0;
     if ((($1644|0) != 0) & ((threwValue|0) != 0)) { $1645 = _testSetjmp(HEAP32[$1644>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1645|0) == 0) { _longjmp($1644|0, threwValue|0); } tempRet0 = (threwValue); } else { $1645 = -1; };
     $1646 = tempRet0;
     $cond1601 = ($1645|0)==(1);
     if ($cond1601) {
      $$reg2mem1579$0 = $1646;
      continue L4;
     }
     $1647 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1647;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 35:  {
     __THREW__ = 0;
     invoke_vii(34,($0|0),($$1$reg2mem1553$0|0));
     $1648 = __THREW__; __THREW__ = 0;
     if ((($1648|0) != 0) & ((threwValue|0) != 0)) { $1649 = _testSetjmp(HEAP32[$1648>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1649|0) == 0) { _longjmp($1648|0, threwValue|0); } tempRet0 = (threwValue); } else { $1649 = -1; };
     $1650 = tempRet0;
     $cond1600 = ($1649|0)==(1);
     if ($cond1600) {
      $$reg2mem1579$0 = $1650;
      continue L4;
     }
     $1651 = ((($$1$reg2mem1553$0)) + 6|0);
     $1652 = HEAP16[$1651>>1]|0;
     $1653 = $1652&65535;
     $1654 = (($1653) + 5)|0;
     $1655 = (($$1$reg2mem1553$0) + ($1654<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1655;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 34: case 33:  {
     __THREW__ = 0;
     invoke_vii(35,($0|0),($$1$reg2mem1553$0|0));
     $1656 = __THREW__; __THREW__ = 0;
     if ((($1656|0) != 0) & ((threwValue|0) != 0)) { $1657 = _testSetjmp(HEAP32[$1656>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1657|0) == 0) { _longjmp($1656|0, threwValue|0); } tempRet0 = (threwValue); } else { $1657 = -1; };
     $1658 = tempRet0;
     $cond1599 = ($1657|0)==(1);
     if ($cond1599) {
      $$reg2mem1579$0 = $1658;
      continue L4;
     }
     $1659 = ((($$1$reg2mem1553$0)) + 4|0);
     $1660 = HEAP16[$1659>>1]|0;
     $1661 = $1660&65535;
     $1662 = (($1661) + 4)|0;
     $1663 = (($$1$reg2mem1553$0) + ($1662<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1663;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 36:  {
     __THREW__ = 0;
     invoke_vii(36,($0|0),($$1$reg2mem1553$0|0));
     $1664 = __THREW__; __THREW__ = 0;
     if ((($1664|0) != 0) & ((threwValue|0) != 0)) { $1665 = _testSetjmp(HEAP32[$1664>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1665|0) == 0) { _longjmp($1664|0, threwValue|0); } tempRet0 = (threwValue); } else { $1665 = -1; };
     $1666 = tempRet0;
     $cond1598 = ($1665|0)==(1);
     if ($cond1598) {
      $$reg2mem1579$0 = $1666;
      continue L4;
     }
     $1667 = ((($$1$reg2mem1553$0)) + 6|0);
     $1668 = HEAP16[$1667>>1]|0;
     $1669 = $1668&65535;
     $1670 = (($1669) + 5)|0;
     $1671 = (($$1$reg2mem1553$0) + ($1670<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1671;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 64:  {
     __THREW__ = 0;
     invoke_vii(37,($0|0),($$1$reg2mem1553$0|0));
     $1672 = __THREW__; __THREW__ = 0;
     if ((($1672|0) != 0) & ((threwValue|0) != 0)) { $1673 = _testSetjmp(HEAP32[$1672>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1673|0) == 0) { _longjmp($1672|0, threwValue|0); } tempRet0 = (threwValue); } else { $1673 = -1; };
     $1674 = tempRet0;
     $cond1597 = ($1673|0)==(1);
     if ($cond1597) {
      $$reg2mem1579$0 = $1674;
      continue L4;
     }
     $1675 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1675;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 61:  {
     __THREW__ = 0;
     invoke_vii(38,($0|0),($$1$reg2mem1553$0|0));
     $1676 = __THREW__; __THREW__ = 0;
     if ((($1676|0) != 0) & ((threwValue|0) != 0)) { $1677 = _testSetjmp(HEAP32[$1676>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1677|0) == 0) { _longjmp($1676|0, threwValue|0); } tempRet0 = (threwValue); } else { $1677 = -1; };
     $1678 = tempRet0;
     $cond1596 = ($1677|0)==(1);
     if ($cond1596) {
      $$reg2mem1579$0 = $1678;
      continue L4;
     }
     $1679 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1679;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 59:  {
     $1680 = ((($$1$reg2mem1553$0)) + 4|0);
     $1681 = HEAP16[$1680>>1]|0;
     $1682 = $1681&65535;
     $1683 = (($$1782$reg2mem1565$0) + ($1682<<2)|0);
     $1684 = HEAP32[$1683>>2]|0;
     $1685 = ((($$1$reg2mem1553$0)) + 6|0);
     $1686 = HEAP16[$1685>>1]|0;
     $1687 = $1686&65535;
     $1688 = (($$1760$reg2mem1557$0) + ($1687<<2)|0);
     $1689 = HEAP32[$1688>>2]|0;
     $1690 = ($1684|0)==(0|0);
     if ($1690) {
      __THREW__ = 0;
      $1691 = (invoke_ii(6,($1689|0))|0);
      $1692 = __THREW__; __THREW__ = 0;
      if ((($1692|0) != 0) & ((threwValue|0) != 0)) { $1693 = _testSetjmp(HEAP32[$1692>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1693|0) == 0) { _longjmp($1692|0, threwValue|0); } tempRet0 = (threwValue); } else { $1693 = -1; };
      $1694 = tempRet0;
      $cond1595 = ($1693|0)==(1);
      if ($cond1595) {
       $$reg2mem1579$0 = $1694;
       continue L4;
      }
      $1695 = HEAP16[$1680>>1]|0;
      $1696 = $1695&65535;
      $1697 = (($$1782$reg2mem1565$0) + ($1696<<2)|0);
      HEAP32[$1697>>2] = $1691;
     } else {
      __THREW__ = 0;
      invoke_vii(29,($1684|0),($1689|0));
      $1698 = __THREW__; __THREW__ = 0;
      if ((($1698|0) != 0) & ((threwValue|0) != 0)) { $1699 = _testSetjmp(HEAP32[$1698>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1699|0) == 0) { _longjmp($1698|0, threwValue|0); } tempRet0 = (threwValue); } else { $1699 = -1; };
      $1700 = tempRet0;
      $cond1594 = ($1699|0)==(1);
      if ($cond1594) {
       $$reg2mem1579$0 = $1700;
       continue L4;
      }
     }
     $1701 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1701;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 58:  {
     $1702 = ((($$1$reg2mem1553$0)) + 6|0);
     $1703 = HEAP16[$1702>>1]|0;
     $1704 = $1703&65535;
     $1705 = (($$1760$reg2mem1557$0) + ($1704<<2)|0);
     $1706 = HEAP32[$1705>>2]|0;
     $1707 = ((($$1$reg2mem1553$0)) + 4|0);
     $1708 = HEAP16[$1707>>1]|0;
     $1709 = $1708&65535;
     $1710 = (($$1782$reg2mem1565$0) + ($1709<<2)|0);
     $1711 = HEAP32[$1710>>2]|0;
     __THREW__ = 0;
     invoke_vii(29,($1706|0),($1711|0));
     $1712 = __THREW__; __THREW__ = 0;
     if ((($1712|0) != 0) & ((threwValue|0) != 0)) { $1713 = _testSetjmp(HEAP32[$1712>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1713|0) == 0) { _longjmp($1712|0, threwValue|0); } tempRet0 = (threwValue); } else { $1713 = -1; };
     $1714 = tempRet0;
     $cond1593 = ($1713|0)==(1);
     if ($cond1593) {
      $$reg2mem1579$0 = $1714;
      continue L4;
     }
     $1715 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1715;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 66:  {
     __THREW__ = 0;
     $1716 = (invoke_iii(6,($0|0),($$1$reg2mem1553$0|0))|0);
     $1717 = __THREW__; __THREW__ = 0;
     if ((($1717|0) != 0) & ((threwValue|0) != 0)) { $1718 = _testSetjmp(HEAP32[$1717>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1718|0) == 0) { _longjmp($1717|0, threwValue|0); } tempRet0 = (threwValue); } else { $1718 = -1; };
     $1719 = tempRet0;
     $cond1592 = ($1718|0)==(1);
     if ($cond1592) {
      $$reg2mem1579$0 = $1719;
      continue L4;
     }
     $1720 = (($$1$reg2mem1553$0) + ($1716<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1720;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 26:  {
     $1721 = ((($$1$reg2mem1553$0)) + 4|0);
     $1722 = HEAP16[$1721>>1]|0;
     $1723 = $1722&65535;
     $1724 = (($$1760$reg2mem1557$0) + ($1723<<2)|0);
     $1725 = HEAP32[$1724>>2]|0;
     $1726 = ((($$1$reg2mem1553$0)) + 6|0);
     $1727 = HEAP16[$1726>>1]|0;
     $1728 = $1727&65535;
     $1729 = (($$1760$reg2mem1557$0) + ($1728<<2)|0);
     $1730 = HEAP32[$1729>>2]|0;
     $1731 = ((($$1$reg2mem1553$0)) + 8|0);
     $1732 = HEAP16[$1731>>1]|0;
     $1733 = $1732&65535;
     $1734 = (($$1760$reg2mem1557$0) + ($1733<<2)|0);
     $1735 = HEAP32[$1734>>2]|0;
     $1736 = ((($1725)) + 8|0);
     $1737 = $1736;
     $1738 = $1737;
     $1739 = HEAP32[$1738>>2]|0;
     $1740 = (($1737) + 4)|0;
     $1741 = $1740;
     $1742 = HEAP32[$1741>>2]|0;
     $1743 = ((($1735)) + 8|0);
     $1744 = $1743;
     $1745 = $1744;
     $1746 = HEAP32[$1745>>2]|0;
     $1747 = (($1744) + 4)|0;
     $1748 = $1747;
     $1749 = HEAP32[$1748>>2]|0;
     $1750 = (_i64Add(($1746|0),($1749|0),($1739|0),($1742|0))|0);
     $1751 = tempRet0;
     $1752 = ($1749|0)>(0);
     $1753 = ($1746>>>0)>(0);
     $1754 = ($1749|0)==(0);
     $1755 = $1754 & $1753;
     $1756 = $1752 | $1755;
     $1757 = ((($1730)) + 8|0);
     $1758 = $1757;
     $1759 = $1758;
     $1760 = HEAP32[$1759>>2]|0;
     $1761 = (($1758) + 4)|0;
     $1762 = $1761;
     $1763 = HEAP32[$1762>>2]|0;
     if ($1756) {
      $1764 = ($1751|0)>($1763|0);
      $1765 = ($1750>>>0)>($1760>>>0);
      $1766 = ($1751|0)==($1763|0);
      $1767 = $1766 & $1765;
      $1768 = $1764 | $1767;
      if ($1768) {
       label = 169;
      } else {
       label = 168;
      }
     } else {
      $1769 = ($1751|0)<($1763|0);
      $1770 = ($1750>>>0)<($1760>>>0);
      $1771 = ($1751|0)==($1763|0);
      $1772 = $1771 & $1770;
      $1773 = $1769 | $1772;
      if ($1773) {
       label = 169;
      } else {
       label = 168;
      }
     }
     if ((label|0) == 168) {
      label = 0;
      $1774 = ((($$1$reg2mem1553$0)) + 10|0);
      $1775 = HEAP16[$1774>>1]|0;
      $1776 = $1775&65535;
      $1777 = (($$1760$reg2mem1557$0) + ($1776<<2)|0);
      $1778 = HEAP32[$1777>>2]|0;
      $1779 = ((($1778)) + 8|0);
      $1780 = $1779;
      $1781 = $1780;
      HEAP32[$1781>>2] = $1750;
      $1782 = (($1780) + 4)|0;
      $1783 = $1782;
      HEAP32[$1783>>2] = $1751;
      $1784 = $1736;
      $1785 = $1784;
      HEAP32[$1785>>2] = $1750;
      $1786 = (($1784) + 4)|0;
      $1787 = $1786;
      HEAP32[$1787>>2] = $1751;
      $1788 = ((($$1$reg2mem1553$0)) + 14|0);
      $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1788;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
      label = 195;
      break L21;
     }
     else if ((label|0) == 169) {
      label = 0;
      $1789 = ((($$1$reg2mem1553$0)) + 12|0);
      $1790 = HEAP16[$1789>>1]|0;
      $1791 = $1790&65535;
      $1792 = (($$1$reg2mem1553$0) + ($1791<<1)|0);
      $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1792;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
      label = 195;
      break L21;
     }
     break;
    }
    case 51:  {
     $1793 = HEAP32[$74>>2]|0;
     $1794 = ((($1793)) + 24|0);
     $1795 = HEAP32[$1794>>2]|0;
     $1796 = ($1795|0)==(0|0);
     if ($1796) {
      __THREW__ = 0;
      invoke_vi(110,($0|0));
      $1797 = __THREW__; __THREW__ = 0;
      if ((($1797|0) != 0) & ((threwValue|0) != 0)) { $1798 = _testSetjmp(HEAP32[$1797>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1798|0) == 0) { _longjmp($1797|0, threwValue|0); } tempRet0 = (threwValue); } else { $1798 = -1; };
      $1799 = tempRet0;
      $cond1591 = ($1798|0)==(1);
      if ($cond1591) {
       $$reg2mem1579$0 = $1799;
       continue L4;
      }
     }
     $1800 = HEAP32[$74>>2]|0;
     HEAP32[$1800>>2] = $$1778$reg2mem1563$0;
     $1801 = HEAP32[$75>>2]|0;
     $1802 = ((($1800)) + 12|0);
     HEAP32[$1802>>2] = $1801;
     $1803 = HEAP32[$$1778$reg2mem1563$0>>2]|0;
     $1804 = ((($1803)) + 40|0);
     $1805 = HEAP32[$1804>>2]|0;
     $1806 = $$1$reg2mem1553$0;
     $1807 = (($1806) - ($1805))|0;
     $1808 = $1807 >> 1;
     $1809 = (($1808) + 2)|0;
     $1810 = ((($1800)) + 8|0);
     HEAP32[$1810>>2] = $1809;
     $1811 = HEAP32[$11>>2]|0;
     $1812 = HEAP32[$1811>>2]|0;
     $1813 = ((($1800)) + 20|0);
     HEAP32[$1813>>2] = $1812;
     $1814 = $$1760$reg2mem1557$0;
     $1815 = $$1754$reg2mem1555$0;
     $1816 = (($1814) - ($1815))|0;
     $1817 = $1816 >> 2;
     $1818 = ((($1800)) + 4|0);
     HEAP32[$1818>>2] = $1817;
     $1819 = HEAP32[$74>>2]|0;
     $1820 = ((($1819)) + 24|0);
     $1821 = HEAP32[$1820>>2]|0;
     HEAP32[$74>>2] = $1821;
     $1822 = ((($$1$reg2mem1553$0)) + 6|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1822;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 52:  {
     $1823 = HEAP32[$76>>2]|0;
     $1824 = ((($1823)) + 28|0);
     $1825 = HEAP32[$1824>>2]|0;
     HEAP32[$76>>2] = $1825;
     $1826 = ((($$1$reg2mem1553$0)) + 2|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1826;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 55:  {
     $1827 = ((($$1$reg2mem1553$0)) + 4|0);
     $1828 = HEAP16[$1827>>1]|0;
     $1829 = $1828&65535;
     $1830 = (($$1760$reg2mem1557$0) + ($1829<<2)|0);
     $1831 = HEAP32[$1830>>2]|0;
     __THREW__ = 0;
     invoke_vii(39,($0|0),($1831|0));
     $1832 = __THREW__; __THREW__ = 0;
     if ((($1832|0) != 0) & ((threwValue|0) != 0)) { $1833 = _testSetjmp(HEAP32[$1832>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1833|0) == 0) { _longjmp($1832|0, threwValue|0); } tempRet0 = (threwValue); } else { $1833 = -1; };
     $1834 = tempRet0;
     $cond1590 = ($1833|0)==(1);
     if ($cond1590) {
      $$reg2mem1579$0 = $1834;
      continue L4;
     }
     $1835 = ((($$1$reg2mem1553$0)) + 6|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1835;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 48: case 47: case 46:  {
     __THREW__ = 0;
     invoke_vii(40,($0|0),($$1$reg2mem1553$0|0));
     $1836 = __THREW__; __THREW__ = 0;
     if ((($1836|0) != 0) & ((threwValue|0) != 0)) { $1837 = _testSetjmp(HEAP32[$1836>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1837|0) == 0) { _longjmp($1836|0, threwValue|0); } tempRet0 = (threwValue); } else { $1837 = -1; };
     $1838 = tempRet0;
     $cond1589 = ($1837|0)==(1);
     if ($cond1589) {
      $$reg2mem1579$0 = $1838;
      continue L4;
     }
     $1839 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1839;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 56:  {
     $1840 = ((($$1$reg2mem1553$0)) + 4|0);
     $1841 = HEAP16[$1840>>1]|0;
     $1842 = $1841&65535;
     $1843 = (($$1760$reg2mem1557$0) + ($1842<<2)|0);
     $1844 = HEAP32[$1843>>2]|0;
     $1845 = HEAP16[$1844>>1]|0;
     $1846 = $1845&65535;
     $1847 = ((($$1$reg2mem1553$0)) + 6|0);
     $1848 = HEAP16[$1847>>1]|0;
     $1849 = $1848&65535;
     $1850 = (($1846) + 5)|0;
     $1851 = (($1850) - ($1849))|0;
     $1852 = (($$1$reg2mem1553$0) + ($1851<<1)|0);
     $1853 = HEAP16[$1852>>1]|0;
     $1854 = $1853&65535;
     $1855 = (($$1$reg2mem1553$0) + ($1854<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1855;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 57:  {
     $1856 = ((($$1$reg2mem1553$0)) + 4|0);
     $1857 = HEAP16[$1856>>1]|0;
     $1858 = $1857&65535;
     $1859 = (($$1760$reg2mem1557$0) + ($1858<<2)|0);
     $1860 = HEAP32[$1859>>2]|0;
     $1861 = ((($1860)) + 8|0);
     $1862 = HEAP32[$1861>>2]|0;
     $1863 = ((($1862)) + 16|0);
     $1864 = HEAP32[$1863>>2]|0;
     $1865 = ((($$1$reg2mem1553$0)) + 6|0);
     $1866 = HEAP16[$1865>>1]|0;
     $1867 = ($1866<<16>>16)==(0);
     $1868 = ((($$1$reg2mem1553$0)) + 8|0);
     if ($1867) {
      $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1868;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
      label = 195;
     } else {
      $$0766789$reg2mem1515$0 = 0;$$reg2mem1517$0 = $1868;
      while(1) {
       $1869 = HEAP16[$$reg2mem1517$0>>1]|0;
       $1870 = $1869&65535;
       $1871 = (($$1760$reg2mem1557$0) + ($1870<<2)|0);
       $1872 = HEAP32[$1871>>2]|0;
       $1873 = (($1864) + ($$0766789$reg2mem1515$0<<2)|0);
       $1874 = HEAP32[$1873>>2]|0;
       __THREW__ = 0;
       invoke_vii(29,($1872|0),($1874|0));
       $1875 = __THREW__; __THREW__ = 0;
       if ((($1875|0) != 0) & ((threwValue|0) != 0)) { $1876 = _testSetjmp(HEAP32[$1875>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1876|0) == 0) { _longjmp($1875|0, threwValue|0); } tempRet0 = (threwValue); } else { $1876 = -1; };
       $1877 = tempRet0;
       $cond1588 = ($1876|0)==(1);
       if ($cond1588) {
        $$reg2mem1579$0 = $1877;
        continue L4;
       }
       $1878 = (($$0766789$reg2mem1515$0) + 1)|0;
       $1879 = HEAP16[$1865>>1]|0;
       $1880 = $1879&65535;
       $1881 = ($1878|0)<($1880|0);
       $1882 = (($$0766789$reg2mem1515$0) + 5)|0;
       $1883 = (($$1$reg2mem1553$0) + ($1882<<1)|0);
       if ($1881) {
        $$0766789$reg2mem1515$0 = $1878;$$reg2mem1517$0 = $1883;
       } else {
        $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1883;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
        label = 195;
        break;
       }
      }
     }
     break;
    }
    case 60:  {
     __THREW__ = 0;
     $1884 = (invoke_iii(7,($0|0),($$1$reg2mem1553$0|0))|0);
     $1885 = __THREW__; __THREW__ = 0;
     if ((($1885|0) != 0) & ((threwValue|0) != 0)) { $1886 = _testSetjmp(HEAP32[$1885>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1886|0) == 0) { _longjmp($1885|0, threwValue|0); } tempRet0 = (threwValue); } else { $1886 = -1; };
     $1887 = tempRet0;
     $cond1587 = ($1886|0)==(1);
     if ($cond1587) {
      $$reg2mem1579$0 = $1887;
      continue L4;
     }
     $1888 = ((($$1$reg2mem1553$0)) + 8|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $1884;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1888;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 62:  {
     __THREW__ = 0;
     $1889 = (invoke_iii(8,($0|0),($$1$reg2mem1553$0|0))|0);
     $1890 = __THREW__; __THREW__ = 0;
     if ((($1890|0) != 0) & ((threwValue|0) != 0)) { $1891 = _testSetjmp(HEAP32[$1890>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1891|0) == 0) { _longjmp($1890|0, threwValue|0); } tempRet0 = (threwValue); } else { $1891 = -1; };
     $1892 = tempRet0;
     $cond1586 = ($1891|0)==(1);
     if ($cond1586) {
      $$reg2mem1579$0 = $1892;
      continue L4;
     }
     $1893 = ((($$1$reg2mem1553$0)) + 10|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $1889;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1893;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 63:  {
     __THREW__ = 0;
     $1894 = (invoke_iii(9,($0|0),($$1$reg2mem1553$0|0))|0);
     $1895 = __THREW__; __THREW__ = 0;
     if ((($1895|0) != 0) & ((threwValue|0) != 0)) { $1896 = _testSetjmp(HEAP32[$1895>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1896|0) == 0) { _longjmp($1895|0, threwValue|0); } tempRet0 = (threwValue); } else { $1896 = -1; };
     $1897 = tempRet0;
     $cond1585 = ($1896|0)==(1);
     if ($cond1585) {
      $$reg2mem1579$0 = $1897;
      continue L4;
     }
     $1898 = ((($$1$reg2mem1553$0)) + 4|0);
     $1899 = HEAP16[$1898>>1]|0;
     $1900 = $1899&65535;
     $1901 = (($1900) + 4)|0;
     $1902 = (($$1$reg2mem1553$0) + ($1901<<1)|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $1894;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1902;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 27:  {
     $1903 = ((($$1$reg2mem1553$0)) + 4|0);
     $1904 = HEAP16[$1903>>1]|0;
     $1905 = $1904&65535;
     $1906 = (($$1760$reg2mem1557$0) + ($1905<<2)|0);
     $1907 = HEAP32[$1906>>2]|0;
     $1908 = ((($$1$reg2mem1553$0)) + 8|0);
     $1909 = HEAP16[$1908>>1]|0;
     $1910 = $1909&65535;
     $1911 = (($$1760$reg2mem1557$0) + ($1910<<2)|0);
     $1912 = HEAP32[$1911>>2]|0;
     $1913 = ((($$1$reg2mem1553$0)) + 10|0);
     $1914 = HEAP16[$1913>>1]|0;
     $1915 = $1914&65535;
     $1916 = (($$1760$reg2mem1557$0) + ($1915<<2)|0);
     $1917 = HEAP32[$1916>>2]|0;
     $1918 = ((($1912)) + 8|0);
     $1919 = $1918;
     $1920 = $1919;
     $1921 = HEAP32[$1920>>2]|0;
     $1922 = (($1919) + 4)|0;
     $1923 = $1922;
     $1924 = HEAP32[$1923>>2]|0;
     $1925 = ($1921|0)==(0);
     $1926 = ($1924|0)==(0);
     $1927 = $1925 & $1926;
     if ($1927) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),23,(16048|0));
      $1928 = __THREW__; __THREW__ = 0;
      if ((($1928|0) != 0) & ((threwValue|0) != 0)) { $1929 = _testSetjmp(HEAP32[$1928>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1929|0) == 0) { _longjmp($1928|0, threwValue|0); } tempRet0 = (threwValue); } else { $1929 = -1; };
      $1930 = tempRet0;
      $cond1584 = ($1929|0)==(1);
      if ($cond1584) {
       $$reg2mem1579$0 = $1930;
       continue L4;
      }
     }
     $1931 = ((($1907)) + 8|0);
     $1932 = $1931;
     $1933 = $1932;
     $1934 = HEAP32[$1933>>2]|0;
     $1935 = (($1932) + 4)|0;
     $1936 = $1935;
     $1937 = HEAP32[$1936>>2]|0;
     $1938 = $1918;
     $1939 = $1938;
     $1940 = HEAP32[$1939>>2]|0;
     $1941 = (($1938) + 4)|0;
     $1942 = $1941;
     $1943 = HEAP32[$1942>>2]|0;
     $1944 = (_i64Subtract(($1934|0),($1937|0),($1940|0),($1943|0))|0);
     $1945 = tempRet0;
     $1946 = ((($1917)) + 8|0);
     $1947 = $1946;
     $1948 = $1947;
     HEAP32[$1948>>2] = $1944;
     $1949 = (($1947) + 4)|0;
     $1950 = $1949;
     HEAP32[$1950>>2] = $1945;
     $1951 = $1931;
     $1952 = $1951;
     HEAP32[$1952>>2] = $1944;
     $1953 = (($1951) + 4)|0;
     $1954 = $1953;
     HEAP32[$1954>>2] = $1945;
     HEAP32[$1917>>2] = 1;
     $1955 = ((($$1$reg2mem1553$0)) + 12|0);
     $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1955;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    case 67:  {
     $1956 = HEAP32[$11>>2]|0;
     __THREW__ = 0;
     invoke_vi(5,($1956|0));
     $1957 = __THREW__; __THREW__ = 0;
     if ((($1957|0) != 0) & ((threwValue|0) != 0)) { $1958 = _testSetjmp(HEAP32[$1957>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1958|0) == 0) { _longjmp($1957|0, threwValue|0); } tempRet0 = (threwValue); } else { $1958 = -1; };
     $1959 = tempRet0;
     $cond1583 = ($1958|0)==(1);
     if ($cond1583) {
      $$reg2mem1579$0 = $1959;
      continue L4;
     }
     $$0765$reg2mem$0 = 1;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $$1$reg2mem1553$0;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
     break;
    }
    default: {
     $$0765$reg2mem$0 = 1;$$2769$reg2mem1505$0 = $$0767$reg2mem1559$0;$$3780$reg2mem1509$0 = $$1778$reg2mem1563$0;$$3784$reg2mem1511$0 = $$1782$reg2mem1565$0;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $$1$reg2mem1553$0;$$5764$reg2mem1503$0 = $$1760$reg2mem1557$0;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
     label = 195;
    }
    }
   } while(0);
   if ((label|0) == 110) {
    label = 0;
    $1426 = ((($$1778$reg2mem1563$0)) + 36|0);
    $1427 = HEAP32[$1426>>2]|0;
    $1428 = ($1427|0)==(0|0);
    if ($1428) {
     $1429 = HEAP32[$71>>2]|0;
     $1430 = ($1429>>>0)>(100);
     if ($1430) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),22,(16009|0));
      $1431 = __THREW__; __THREW__ = 0;
      if ((($1431|0) != 0) & ((threwValue|0) != 0)) { $1432 = _testSetjmp(HEAP32[$1431>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1432|0) == 0) { _longjmp($1431|0, threwValue|0); } tempRet0 = (threwValue); } else { $1432 = -1; };
      $1433 = tempRet0;
      $cond1614 = ($1432|0)==(1);
      if ($cond1614) {
       $$reg2mem1579$0 = $1433;
       continue L4;
      }
     }
     __THREW__ = 0;
     invoke_vi(109,($0|0));
     $1434 = __THREW__; __THREW__ = 0;
     if ((($1434|0) != 0) & ((threwValue|0) != 0)) { $1435 = _testSetjmp(HEAP32[$1434>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1435|0) == 0) { _longjmp($1434|0, threwValue|0); } tempRet0 = (threwValue); } else { $1435 = -1; };
     $1436 = tempRet0;
     $cond1613 = ($1435|0)==(1);
     if ($cond1613) {
      $$reg2mem1579$0 = $1436;
      continue L4;
     }
    }
    $1437 = ((($$1$reg2mem1553$0)) + 6|0);
    $1438 = HEAP16[$1437>>1]|0;
    $1439 = $1438&65535;
    $1440 = ((($$1$reg2mem1553$0)) + 2|0);
    $1441 = HEAP16[$1440>>1]|0;
    $1442 = $1441&65535;
    $1443 = ((($$1778$reg2mem1563$0)) + 16|0);
    HEAP32[$1443>>2] = $1442;
    $1444 = (($$1$reg2mem1553$0) + ($1439<<1)|0);
    $1445 = ((($1444)) + 10|0);
    $1446 = ((($$1778$reg2mem1563$0)) + 12|0);
    HEAP32[$1446>>2] = $1445;
    $1447 = ((($$1778$reg2mem1563$0)) + 24|0);
    HEAP32[$1447>>2] = $$1782$reg2mem1565$0;
    $1448 = ((($$2787$reg2mem1525$0)) + 14|0);
    $1449 = HEAP16[$1448>>1]|0;
    $1450 = $1449&65535;
    $1451 = (($1450) + ($$0767$reg2mem1559$0))|0;
    $1452 = ($1451|0)>($$0771$reg2mem1561$0|0);
    if ($1452) {
     __THREW__ = 0;
     invoke_vii(27,($0|0),($1451|0));
     $1453 = __THREW__; __THREW__ = 0;
     if ((($1453|0) != 0) & ((threwValue|0) != 0)) { $1454 = _testSetjmp(HEAP32[$1453>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1454|0) == 0) { _longjmp($1453|0, threwValue|0); } tempRet0 = (threwValue); } else { $1454 = -1; };
     $1455 = tempRet0;
     $cond1612 = ($1454|0)==(1);
     if ($cond1612) {
      $$reg2mem1579$0 = $1455;
      continue L4;
     }
     $1456 = HEAP32[$7>>2]|0;
     $1457 = HEAP32[$0>>2]|0;
     $1458 = HEAP32[$9>>2]|0;
     $$4763$reg2mem1521$0 = $1457;$$4775$reg2mem1523$0 = $1458;$$5758$reg2mem1519$0 = $1456;
    } else {
     $$4763$reg2mem1521$0 = $$1760$reg2mem1557$0;$$4775$reg2mem1523$0 = $$0771$reg2mem1561$0;$$5758$reg2mem1519$0 = $$1754$reg2mem1555$0;
    }
    __THREW__ = 0;
    invoke_viii(4,($0|0),($$2787$reg2mem1525$0|0),($$1$reg2mem1553$0|0));
    $1459 = __THREW__; __THREW__ = 0;
    if ((($1459|0) != 0) & ((threwValue|0) != 0)) { $1460 = _testSetjmp(HEAP32[$1459>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1460|0) == 0) { _longjmp($1459|0, threwValue|0); } tempRet0 = (threwValue); } else { $1460 = -1; };
    $1461 = tempRet0;
    $cond1611 = ($1460|0)==(1);
    if ($cond1611) {
     $$reg2mem1579$0 = $1461;
     continue L4;
    }
    $1462 = HEAP32[$62>>2]|0;
    $1463 = ((($$1$reg2mem1553$0)) + 8|0);
    $1464 = HEAP16[$1463>>1]|0;
    $1465 = $1464&65535;
    $1466 = (($$4763$reg2mem1521$0) + ($1465<<2)|0);
    $1467 = HEAP32[$1466>>2]|0;
    $1468 = ((($$1778$reg2mem1563$0)) + 4|0);
    HEAP32[$1468>>2] = $1467;
    $1469 = ((($$1778$reg2mem1563$0)) + 8|0);
    $1470 = HEAP32[$1469>>2]|0;
    $1471 = (($$4763$reg2mem1521$0) + ($1470<<2)|0);
    HEAP32[$0>>2] = $1471;
    $1472 = HEAP32[$1426>>2]|0;
    HEAP32[$1>>2] = $1472;
    HEAP32[$1472>>2] = $$2787$reg2mem1525$0;
    $1473 = HEAP16[$1448>>1]|0;
    $1474 = $1473&65535;
    $1475 = ((($1472)) + 8|0);
    HEAP32[$1475>>2] = $1474;
    $1476 = ((($$2787$reg2mem1525$0)) + 40|0);
    $1477 = HEAP32[$1476>>2]|0;
    $1478 = ((($1472)) + 12|0);
    HEAP32[$1478>>2] = $1477;
    $1479 = ((($1472)) + 24|0);
    HEAP32[$1479>>2] = 0;
    $1480 = HEAP32[$72>>2]|0;
    $1481 = (($1480) + 1)|0;
    HEAP32[$72>>2] = $1481;
    $1482 = HEAP32[$1476>>2]|0;
    $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $1462;$$3780$reg2mem1509$0 = $1472;$$3784$reg2mem1511$0 = 0;$$3788$reg2mem1513$0 = $$2787$reg2mem1525$0;$$5$reg2mem1499$0 = $1482;$$5764$reg2mem1503$0 = $1471;$$5776$reg2mem1507$0 = $$4775$reg2mem1523$0;$$6$reg2mem1501$0 = $$5758$reg2mem1519$0;
    label = 195;
   }
   else if ((label|0) == 130) {
    label = 0;
    $1573 = ((($$1778$reg2mem1563$0)) + 32|0);
    $1574 = HEAP32[$1573>>2]|0;
    HEAP32[$1>>2] = $1574;
    $1575 = HEAP32[$73>>2]|0;
    $1576 = (($1575) + -1)|0;
    HEAP32[$73>>2] = $1576;
    $1577 = ((($1574)) + 36|0);
    $1578 = HEAP32[$1577>>2]|0;
    $1579 = ((($1578)) + 8|0);
    $1580 = HEAP32[$1579>>2]|0;
    $1581 = (($$0767$reg2mem1559$0) - ($1580))|0;
    HEAP32[$62>>2] = $1581;
    $1582 = ((($1574)) + 8|0);
    $1583 = HEAP32[$1582>>2]|0;
    $1584 = (0 - ($1583))|0;
    $1585 = (($$1760$reg2mem1557$0) + ($1584<<2)|0);
    HEAP32[$0>>2] = $1585;
    $1586 = ((($1574)) + 24|0);
    $1587 = HEAP32[$1586>>2]|0;
    $1588 = ((($1574)) + 12|0);
    $1589 = HEAP32[$1588>>2]|0;
    $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $1581;$$3780$reg2mem1509$0 = $1574;$$3784$reg2mem1511$0 = $1587;$$3788$reg2mem1513$0 = $$0785$reg2mem1567$0;$$5$reg2mem1499$0 = $1589;$$5764$reg2mem1503$0 = $1585;$$5776$reg2mem1507$0 = $$0771$reg2mem1561$0;$$6$reg2mem1501$0 = $$1754$reg2mem1555$0;
    label = 195;
   }
   while(1) {
    if ((label|0) == 195) {
     label = 0;
     $$0765$reg2mem$0$clear = $$0765$reg2mem$0 & 7;
     switch ($$0765$reg2mem$0$clear<<24>>24) {
     case 4:  {
      $$0767$reg2mem1559$0 = $$2769$reg2mem1505$0;$$0771$reg2mem1561$0 = $$5776$reg2mem1507$0;$$0785$reg2mem1567$0 = $$3788$reg2mem1513$0;$$1$reg2mem1553$0 = $$5$reg2mem1499$0;$$1754$reg2mem1555$0 = $$6$reg2mem1501$0;$$1760$reg2mem1557$0 = $$5764$reg2mem1503$0;$$1778$reg2mem1563$0 = $$3780$reg2mem1509$0;$$1782$reg2mem1565$0 = $$3784$reg2mem1511$0;
      continue L19;
      break;
     }
     case 5:  {
      $$1768$reg2mem1543$0 = $$2769$reg2mem1505$0;$$1772$reg2mem1545$0 = $$5776$reg2mem1507$0;$$1786$reg2mem1551$0 = $$3788$reg2mem1513$0;$$2755$reg2mem1539$0 = $$6$reg2mem1501$0;$$2761$reg2mem1541$0 = $$5764$reg2mem1503$0;$$2779$reg2mem1547$0 = $$3780$reg2mem1509$0;$$2783$reg2mem1549$0 = $$3784$reg2mem1511$0;$$3$reg2mem1537$0 = $$5$reg2mem1499$0;
      break;
     }
     default: {
      break L4;
     }
     }
    }
    $1345 = ((($$2779$reg2mem1547$0)) + 36|0);
    $1346 = HEAP32[$1345>>2]|0;
    $1347 = ($1346|0)==(0|0);
    if ($1347) {
     $1348 = HEAP32[$64>>2]|0;
     $1349 = ($1348>>>0)>(100);
     if ($1349) {
      __THREW__ = 0;
      invoke_viii(3,($0|0),22,(16009|0));
      $1350 = __THREW__; __THREW__ = 0;
      if ((($1350|0) != 0) & ((threwValue|0) != 0)) { $1351 = _testSetjmp(HEAP32[$1350>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1351|0) == 0) { _longjmp($1350|0, threwValue|0); } tempRet0 = (threwValue); } else { $1351 = -1; };
      $1352 = tempRet0;
      $cond1619 = ($1351|0)==(1);
      if ($cond1619) {
       $$reg2mem1579$0 = $1352;
       continue L4;
      }
     }
     __THREW__ = 0;
     invoke_vi(109,($0|0));
     $1353 = __THREW__; __THREW__ = 0;
     if ((($1353|0) != 0) & ((threwValue|0) != 0)) { $1354 = _testSetjmp(HEAP32[$1353>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1354|0) == 0) { _longjmp($1353|0, threwValue|0); } tempRet0 = (threwValue); } else { $1354 = -1; };
     $1355 = tempRet0;
     $cond1618 = ($1354|0)==(1);
     if ($cond1618) {
      $$reg2mem1579$0 = $1355;
      continue L4;
     }
    }
    $1356 = ((($$3$reg2mem1537$0)) + 6|0);
    $1357 = HEAP16[$1356>>1]|0;
    $1358 = $1357&65535;
    $1359 = ((($$3$reg2mem1537$0)) + 2|0);
    $1360 = HEAP16[$1359>>1]|0;
    $1361 = $1360&65535;
    $1362 = ((($$2779$reg2mem1547$0)) + 16|0);
    HEAP32[$1362>>2] = $1361;
    $1363 = (($$3$reg2mem1537$0) + ($1358<<1)|0);
    $1364 = ((($1363)) + 10|0);
    $1365 = ((($$2779$reg2mem1547$0)) + 12|0);
    HEAP32[$1365>>2] = $1364;
    $1366 = ((($$2779$reg2mem1547$0)) + 24|0);
    HEAP32[$1366>>2] = $$2783$reg2mem1549$0;
    $1367 = ((($$1786$reg2mem1551$0)) + 14|0);
    $1368 = HEAP16[$1367>>1]|0;
    $1369 = $1368&65535;
    $1370 = (($1369) + ($$1768$reg2mem1543$0))|0;
    $1371 = ($1370|0)>($$1772$reg2mem1545$0|0);
    if ($1371) {
     __THREW__ = 0;
     invoke_vii(27,($0|0),($1370|0));
     $1372 = __THREW__; __THREW__ = 0;
     if ((($1372|0) != 0) & ((threwValue|0) != 0)) { $1373 = _testSetjmp(HEAP32[$1372>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1373|0) == 0) { _longjmp($1372|0, threwValue|0); } tempRet0 = (threwValue); } else { $1373 = -1; };
     $1374 = tempRet0;
     $cond1617 = ($1373|0)==(1);
     if ($cond1617) {
      $$reg2mem1579$0 = $1374;
      continue L4;
     }
     $1375 = HEAP32[$7>>2]|0;
     $1376 = HEAP32[$0>>2]|0;
     $1377 = HEAP32[$9>>2]|0;
     $$2773$reg2mem1535$0 = $1377;$$3756$reg2mem1531$0 = $1375;$$3762$reg2mem1533$0 = $1376;
    } else {
     $$2773$reg2mem1535$0 = $$1772$reg2mem1545$0;$$3756$reg2mem1531$0 = $$2755$reg2mem1539$0;$$3762$reg2mem1533$0 = $$2761$reg2mem1541$0;
    }
    $1378 = ((($$1786$reg2mem1551$0)) + 32|0);
    $1379 = HEAP32[$1378>>2]|0;
    __THREW__ = 0;
    invoke_viii(4,($0|0),($$1786$reg2mem1551$0|0),($$3$reg2mem1537$0|0));
    $1380 = __THREW__; __THREW__ = 0;
    if ((($1380|0) != 0) & ((threwValue|0) != 0)) { $1381 = _testSetjmp(HEAP32[$1380>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1381|0) == 0) { _longjmp($1380|0, threwValue|0); } tempRet0 = (threwValue); } else { $1381 = -1; };
    $1382 = tempRet0;
    $cond1615 = ($1381|0)==(1);
    if ($cond1615) {
     $$reg2mem1579$0 = $1382;
     continue L4;
    }
    $1383 = ((($$3$reg2mem1537$0)) + 8|0);
    $1384 = HEAP16[$1383>>1]|0;
    $1385 = $1384&65535;
    $1386 = (($$3762$reg2mem1533$0) + ($1385<<2)|0);
    $1387 = HEAP32[$1386>>2]|0;
    $1388 = ((($$2779$reg2mem1547$0)) + 4|0);
    HEAP32[$1388>>2] = $1387;
    $1389 = ((($$2779$reg2mem1547$0)) + 8|0);
    $1390 = HEAP32[$1389>>2]|0;
    $1391 = (($$3762$reg2mem1533$0) + ($1390<<2)|0);
    HEAP32[$0>>2] = $1391;
    $1392 = HEAP32[$1345>>2]|0;
    HEAP32[$1>>2] = $1392;
    $1393 = ((($1392)) + 20|0);
    HEAP32[$1393>>2] = $$1768$reg2mem1543$0;
    HEAP32[$1392>>2] = $$1786$reg2mem1551$0;
    $1394 = ((($1392)) + 16|0);
    HEAP32[$1394>>2] = -1;
    $1395 = ((($1392)) + 12|0);
    HEAP32[$1395>>2] = 0;
    $1396 = ((($1392)) + 24|0);
    HEAP32[$1396>>2] = 0;
    $1397 = ((($1392)) + 8|0);
    HEAP32[$1397>>2] = $1358;
    $1398 = HEAP32[$65>>2]|0;
    $1399 = (($1398) + 1)|0;
    HEAP32[$65>>2] = $1399;
    __THREW__ = 0;
    invoke_vi($1379|0,($0|0));
    $1400 = __THREW__; __THREW__ = 0;
    if ((($1400|0) != 0) & ((threwValue|0) != 0)) { $1401 = _testSetjmp(HEAP32[$1400>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1401|0) == 0) { _longjmp($1400|0, threwValue|0); } tempRet0 = (threwValue); } else { $1401 = -1; };
    $1402 = tempRet0;
    $cond1616 = ($1401|0)==(1);
    if ($cond1616) {
     $$reg2mem1579$0 = $1402;
     continue L4;
    }
    $1403 = HEAP32[$9>>2]|0;
    $1404 = ($1403|0)==($$2773$reg2mem1535$0|0);
    if ($1404) {
     $$3774$reg2mem1529$0 = $$2773$reg2mem1535$0;$$4757$reg2mem1527$0 = $$3756$reg2mem1531$0;
    } else {
     $1405 = HEAP32[$7>>2]|0;
     $$3774$reg2mem1529$0 = $1403;$$4757$reg2mem1527$0 = $1405;
    }
    $1406 = ((($1392)) + 32|0);
    $1407 = HEAP32[$1406>>2]|0;
    $1408 = HEAP32[$7>>2]|0;
    $1409 = (($1408) + ($$1768$reg2mem1543$0<<2)|0);
    $1410 = ((($1407)) + 8|0);
    $1411 = HEAP32[$1410>>2]|0;
    $1412 = (0 - ($1411))|0;
    $1413 = (($1409) + ($1412<<2)|0);
    HEAP32[$0>>2] = $1413;
    HEAP32[$1>>2] = $1407;
    $1414 = (($1358) + 5)|0;
    $1415 = (($$3$reg2mem1537$0) + ($1414<<1)|0);
    $1416 = HEAP32[$65>>2]|0;
    $1417 = (($1416) + -1)|0;
    HEAP32[$65>>2] = $1417;
    HEAP32[$62>>2] = $$1768$reg2mem1543$0;
    $$0765$reg2mem$0 = 4;$$2769$reg2mem1505$0 = $$1768$reg2mem1543$0;$$3780$reg2mem1509$0 = $1407;$$3784$reg2mem1511$0 = $$2783$reg2mem1549$0;$$3788$reg2mem1513$0 = $$1786$reg2mem1551$0;$$5$reg2mem1499$0 = $1415;$$5764$reg2mem1503$0 = $1413;$$5776$reg2mem1507$0 = $$3774$reg2mem1529$0;$$6$reg2mem1501$0 = $$4757$reg2mem1527$0;
    label = 195;
   }
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _maybe_catch_exception($0) {
 $0 = $0|0;
 var $$0 = 0, $$083 = 0, $$194 = 0, $$295 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = ((($0)) + 32|0);
 $$083 = $8;
 L4: while(1) {
  $13 = ((($$083)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($10|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = HEAP32[$$083>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($$083)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (($21) + -2)|0;
  $26 = (($25) + ($24))|0;
  $27 = HEAP32[$11>>2]|0;
  $28 = ((($$083)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $$194 = $26;
  while(1) {
   $30 = (($$194) + 2)|0;
   $31 = (($19) + ($30<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $34 = HEAP32[$12>>2]|0;
   $35 = (($34) + ($33<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_lily_class_greater_eq($36,$4)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    label = 6;
    break L4;
   }
   $50 = (($$194) + 4)|0;
   $51 = (($19) + ($50<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $$295 = (($53) + ($$194))|0;
   $not$ = ($52<<16>>16)==(0);
   if ($not$) {
    break;
   } else {
    $$194 = $$295;
   }
  }
  $54 = ((($$083)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if ($56) {
   $$0 = 0;
   label = 14;
   break;
  } else {
   $$083 = $55;
  }
 }
 if ((label|0) == 6) {
  $39 = (($27) + ($29<<2)|0);
  $40 = (($19) + ($$194<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ($41<<16>>16)==(54);
  $43 = (($$194) + 3)|0;
  $44 = (($19) + ($43<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = (($39) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($$194) + 5)|0;
  do {
   if ($42) {
    $59 = ((($0)) + 72|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     _make_proper_exception_val($0,$4,$48);
     break;
    } else {
     _fixup_exception_val($0,$48);
     break;
    }
   }
  } while(0);
  $62 = ((($0)) + 72|0);
  HEAP32[$62>>2] = 0;
  $63 = HEAP32[$$083>>2]|0;
  $64 = ((($0)) + 24|0);
  HEAP32[$64>>2] = $63;
  $65 = ((($$083)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($0)) + 16|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$0>>2] = $39;
  $68 = HEAP32[$64>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 40|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($49<<1)|0);
  $73 = ((($68)) + 12|0);
  HEAP32[$73>>2] = $72;
  HEAP32[$5>>2] = $$083;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $57 = ((($$083)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$5>>2] = $58;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _prep_registers($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$036 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 14|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + ($4))|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($4<<2)|0);
 $13 = ((($2)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  $$0$lcssa = 0;
 } else {
  $$036 = 0;
  while(1) {
   $16 = (($$036) + 5)|0;
   $17 = (($2) + ($16<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = (($9) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($12) + ($$036<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$21>>2]|0;
   $25 = $24 & 524288;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = ((($21)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$28>>2] = $30;
   }
   $31 = HEAP32[$23>>2]|0;
   $32 = $31 & 524288;
   $33 = ($32|0)==(0);
   if (!($33)) {
    _lily_deref($23);
   }
   ;HEAP32[$23>>2]=HEAP32[$21>>2]|0;HEAP32[$23+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$21+12>>2]|0;
   $34 = (($$036) + 1)|0;
   $35 = HEAP16[$13>>1]|0;
   $36 = $35&65535;
   $37 = ($34|0)<($36|0);
   if ($37) {
    $$036 = $34;
   } else {
    $$0$lcssa = $34;
    break;
   }
  }
 }
 $38 = HEAP16[$5>>1]|0;
 $39 = $38&65535;
 $40 = ($$0$lcssa|0)==($39|0);
 if ($40) {
  HEAP32[$3>>2] = $8;
  return;
 }
 _scrub_registers($0,$1,$$0$lcssa);
 HEAP32[$3>>2] = $8;
 return;
}
function _do_o_interpolation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$028 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_mb_flush($7);
 $8 = ($4<<16>>16)==(0);
 $9 = ((($1)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($2) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 if ($8) {
  $$lcssa = $13;
  $22 = (_lily_mb_get($7)|0);
  $23 = (_lily_new_string($22)|0);
  _lily_move_string($$lcssa,$23);
  return;
 } else {
  $$028 = 0;$14 = $13;
 }
 while(1) {
  _lily_mb_add_value($7,$0,$14);
  $15 = (($$028) + 1)|0;
  $16 = (($$028) + 4)|0;
  $17 = (($1) + ($16<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (($2) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $exitcond = ($15|0)==($5|0);
  if ($exitcond) {
   $$lcssa = $21;
   break;
  } else {
   $$028 = $15;$14 = $21;
  }
 }
 $22 = (_lily_mb_get($7)|0);
 $23 = (_lily_new_string($22)|0);
 _lily_move_string($$lcssa,$23);
 return;
}
function _do_o_get_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($2) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($2) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP16[$7>>1]|0;
 $19 = ($18<<16>>16)==(10);
 if ($19) {
  $51 = ((($7)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_lily_hash_find_value($52,$12)|0);
  $54 = ($53|0)==(0|0);
  if ($54) {
   $55 = ((($1)) + 2|0);
   $56 = HEAP16[$55>>1]|0;
   _key_error($0,$12,$56);
  }
  _lily_value_assign($17,$53);
  return;
 }
 $20 = ((($12)) + 8|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($18<<16>>16)==(5);
 $28 = ((($7)) + 8|0);
 if ($27) {
  $29 = HEAP32[$28>>2]|0;
  $30 = ($23|0)<(0);
  $31 = ((($29)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  if ($30) {
   $33 = (($32) + ($23))|0;
   $34 = ($33|0)<(0);
   if ($34) {
    _boundary_error($0,$23);
    $$0 = $33;
   } else {
    $$0 = $33;
   }
  } else {
   $35 = ($23>>>0)<($32>>>0);
   if ($35) {
    $$0 = $23;
   } else {
    _boundary_error($0,$23);
    $$0 = $23;
   }
  }
  $36 = ((($29)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($$0)|0);
  $39 = HEAP8[$38>>0]|0;
  _lily_move_byte($17,$39);
  return;
 } else {
  $40 = HEAP32[$28>>2]|0;
  $41 = ($23|0)<(0);
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  if ($41) {
   $44 = (($43) + ($23))|0;
   $45 = ($44|0)<(0);
   if ($45) {
    _boundary_error($0,$23);
    $$1 = $44;
   } else {
    $$1 = $44;
   }
  } else {
   $46 = ($23>>>0)<($43>>>0);
   if ($46) {
    $$1 = $23;
   } else {
    _boundary_error($0,$23);
    $$1 = $23;
   }
  }
  $47 = ((($40)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($$1<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  _lily_value_assign($17,$50);
  return;
 }
}
function _do_o_get_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($1)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($2) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($2) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($12)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($5<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_value_assign($17,$21);
 return;
}
function _do_o_set_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($2) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($2) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP16[$7>>1]|0;
 $19 = ($18<<16>>16)==(10);
 if ($19) {
  $58 = ((($7)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  _lily_hash_insert_value($59,$12,$17);
  return;
 }
 $20 = ((($12)) + 8|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($18<<16>>16)==(5);
 $28 = ((($7)) + 8|0);
 if ($27) {
  $29 = HEAP32[$28>>2]|0;
  $30 = ($23|0)<(0);
  $31 = ((($29)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  if ($30) {
   $33 = (($32) + ($23))|0;
   $34 = ($33|0)<(0);
   if ($34) {
    _boundary_error($0,$23);
    $$0 = $33;
   } else {
    $$0 = $33;
   }
  } else {
   $35 = ($23>>>0)<($32>>>0);
   if ($35) {
    $$0 = $23;
   } else {
    _boundary_error($0,$23);
    $$0 = $23;
   }
  }
  $36 = ((($17)) + 8|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $39&255;
  $44 = ((($29)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($$0)|0);
  HEAP8[$46>>0] = $43;
  return;
 } else {
  $47 = HEAP32[$28>>2]|0;
  $48 = ($23|0)<(0);
  $49 = ((($47)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  if ($48) {
   $51 = (($50) + ($23))|0;
   $52 = ($51|0)<(0);
   if ($52) {
    _boundary_error($0,$23);
    $$1 = $51;
   } else {
    $$1 = $51;
   }
  } else {
   $53 = ($23>>>0)<($50>>>0);
   if ($53) {
    $$1 = $23;
   } else {
    _boundary_error($0,$23);
    $$1 = $23;
   }
  }
  $54 = ((($47)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($$1<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  _lily_value_assign($57,$17);
  return;
 }
}
function _do_o_set_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($1)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($2) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($2) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($12)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($5<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_value_assign($21,$17);
 return;
}
function _do_o_build_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03637 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($1)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + 4)|0;
 $9 = (($1) + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($2) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($4<<16>>16)==(3);
 $div = ($6&65535) >>> 1;
 $15 = $div&65535;
 if ($14) {
  $16 = (_lily_new_hash_strtable_sized($15)|0);
  $$0 = $16;
 } else {
  $17 = (_lily_new_hash_numtable_sized($15)|0);
  $$0 = $17;
 }
 _lily_move_hash_f(655360,$13,$$0);
 $18 = ($6<<16>>16)==(0);
 if ($18) {
  return;
 } else {
  $$03637 = 0;
 }
 while(1) {
  $19 = (($$03637) + 4)|0;
  $20 = (($1) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($2) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($$03637) + 5)|0;
  $26 = (($1) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = (($2) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  _lily_hash_insert_value($$0,$24,$30);
  $31 = (($$03637) + 2)|0;
  $32 = ($31|0)<($7|0);
  if ($32) {
   $$03637 = $31;
  } else {
   break;
  }
 }
 return;
}
function _do_o_build_list_tuple($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5) + 3)|0;
 $7 = (($1) + ($6<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($2) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_lily_new_list($5)|0);
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP16[$1>>1]|0;
 $16 = ($15<<16>>16)==(33);
 if ($16) {
  _lily_move_list_f(655360,$11,$12);
 } else {
  _lily_move_tuple_f(655360,$11,$12);
 }
 $17 = ($4<<16>>16)==(0);
 if ($17) {
  return;
 } else {
  $$031 = 0;
 }
 while(1) {
  $18 = (($$031) + 3)|0;
  $19 = (($1) + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = (($2) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($14) + ($$031<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_value_assign($25,$23);
  $26 = (($$031) + 1)|0;
  $exitcond = ($26|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$031 = $26;
  }
 }
 return;
}
function _do_o_build_enum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($1)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + 4)|0;
 $10 = (($1) + ($9<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($2) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_new_variant($8)|0);
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5 | 655360;
 _lily_move_variant_f($18,$14,$15);
 $19 = ($7<<16>>16)==(0);
 if ($19) {
  return;
 } else {
  $$034 = 0;
 }
 while(1) {
  $20 = (($$034) + 4)|0;
  $21 = (($1) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($2) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($17) + ($$034<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  _lily_value_assign($27,$25);
  $28 = (($$034) + 1)|0;
  $exitcond = ($28|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $$034 = $28;
  }
 }
 return;
}
function _do_o_dynamic_cast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($2) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($2) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($14)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP16[$23>>1]|0;
 $25 = ((($9)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($24<<16>>16)==($26<<16>>16);
 if ($27) {
  $28 = (_lily_new_variant(1)|0);
  _lily_variant_set_value($28,0,$23);
  _lily_move_variant_f(655374,$19,$28);
  return;
 } else {
  _lily_move_empty_variant(15,$19);
  return;
 }
}
function _do_o_create_function($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 6|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (($2) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_new_function_copy($16)|0);
 $23 = ((($7)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 _copy_upvalues($22,$24);
 _lily_move_function_f(655360,$21,$22);
 _lily_tag_value($0,$21);
 return;
}
function _make_cell_from($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 ;HEAP32[$1>>2]=HEAP32[$0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$0+12>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 1;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if ($5) {
  return ($1|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 return ($1|0);
}
function _do_o_optarg_dispatch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021$lcssa = 0, $$02122 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + -1)|0;
 $9 = $4&65535;
 $10 = ($8|0)==(0);
 L1: do {
  if ($10) {
   $$021$lcssa = 0;
  } else {
   $$02122 = 0;
   while(1) {
    $11 = (($9) - ($$02122))|0;
    $12 = (($2) + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $$021$lcssa = $$02122;
     break L1;
    }
    $16 = (($$02122) + 1)|0;
    $17 = ($16>>>0)<($8>>>0);
    if ($17) {
     $$02122 = $16;
    } else {
     $$021$lcssa = $16;
     break;
    }
   }
  }
 } while(0);
 $18 = (($$021$lcssa) + 3)|0;
 $19 = (($1) + ($18<<1)|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 return ($21|0);
}
function _add_catch_entry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(32)|0);
 $2 = ((($0)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($1)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($1)) + 28|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _do_o_raise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP16[$1>>1]|0;
 $12 = $11&65535;
 $13 = ((($0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 72|0);
 HEAP32[$17>>2] = $1;
 $18 = ((($0)) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_raise_class($19,$16,$10);
 // unreachable;
}
function _do_o_new_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($1)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($5) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($4<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 48|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($0)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 262144;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = ((($23)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 6|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = ($30<<16>>16)==(0);
  if (!($31)) {
   $32 = (($30) + -1)<<16>>16;
   HEAP16[$29>>1] = $32;
   _lily_value_assign($10,$23);
   return;
  }
 }
 $33 = (_lily_new_instance($17)|0);
 $34 = ((($14)) + 44|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ((($33)) + 6|0);
 HEAP16[$36>>1] = $35;
 $37 = HEAP16[$1>>1]|0;
 $38 = ($37<<16>>16)==(47);
 if ($38) {
  $39 = $4 | 655360;
  _lily_move_instance_f($39,$10,$33);
  return;
 }
 $40 = $4 | 524288;
 _lily_move_instance_f($40,$10,$33);
 $41 = HEAP16[$1>>1]|0;
 $42 = ($41<<16>>16)==(48);
 if (!($42)) {
  return;
 }
 _lily_tag_value($0,$10);
 return;
}
function _do_o_create_closure($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_new_function_copy($13)|0);
 $15 = $4 << 2;
 $16 = (_lily_malloc($15)|0);
 $17 = ($3<<16>>16)==(0);
 if (!($17)) {
  _memset(($16|0),0,($15|0))|0;
 }
 $18 = ((($14)) + 12|0);
 HEAP16[$18>>1] = $3;
 $19 = ((($14)) + 44|0);
 HEAP32[$19>>2] = $16;
 _lily_move_function_f(524288,$10,$14);
 _lily_tag_value($0,$10);
 return ($16|0);
}
function _do_o_load_class_closure($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _do_o_get_property($0,$1);
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_new_function_copy($9)|0);
 _copy_upvalues($10,$9);
 _lily_move_function_f(655360,$7,$10);
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 return ($12|0);
}
function _do_o_load_closure($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$035 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ((($1)) + 6|0);
 $11 = ($8<<16>>16)==(0);
 $12 = HEAP16[$10>>1]|0;
 $13 = $12&65535;
 if ($11) {
  $$lcssa = $13;
 } else {
  $$035 = 0;$15 = $13;$23 = $10;
  while(1) {
   $14 = (($6) + ($15<<2)|0);
   $16 = HEAP32[$14>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    $18 = ((($16)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + -1)|0;
    HEAP32[$18>>2] = $20;
    $21 = ($20|0)==(0);
    if ($21) {
     _lily_deref($16);
     _lily_free($16);
    }
    $22 = HEAP16[$23>>1]|0;
    $24 = $22&65535;
    $25 = (($6) + ($24<<2)|0);
    HEAP32[$25>>2] = 0;
   }
   $26 = (($$035) + 1)|0;
   $27 = (($10) + ($26<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $exitcond = ($26|0)==($9|0);
   if ($exitcond) {
    $$lcssa = $29;
    break;
   } else {
    $$035 = $26;$15 = $29;$23 = $27;
   }
  }
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + ($$lcssa<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$4>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$4>>2] = $34;
 _lily_move_function_f(589824,$32,$4);
 $35 = HEAP32[$5>>2]|0;
 return ($35|0);
}
function _new_function_copy($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(48)|0);
 dest=$1; src=$0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = 0;
 return ($1|0);
}
function _copy_upvalues($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 << 2;
 $8 = (_lily_malloc($7)|0);
 $9 = ($5<<16>>16)==(0);
 if ($9) {
  $18 = ((($0)) + 44|0);
  HEAP32[$18>>2] = $8;
  $19 = ((($0)) + 12|0);
  HEAP16[$19>>1] = $5;
  return;
 } else {
  $$025 = 0;
 }
 while(1) {
  $10 = (($3) + ($$025<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
  }
  $16 = (($8) + ($$025<<2)|0);
  HEAP32[$16>>2] = $11;
  $17 = (($$025) + 1)|0;
  $exitcond = ($17|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$025 = $17;
  }
 }
 $18 = ((($0)) + 44|0);
 HEAP32[$18>>2] = $8;
 $19 = ((($0)) + 12|0);
 HEAP16[$19>>1] = $5;
 return;
}
function _boundary_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_mb_flush($5);
 HEAP32[$vararg_buffer>>2] = $1;
 _lily_mb_add_fmt($5,16075,$vararg_buffer);
 $6 = (_lily_mb_get($5)|0);
 _vm_error($0,24,$6);
 STACKTOP = sp;return;
}
function _key_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 20|0);
 HEAP16[$3>>1] = $2;
 $4 = ((($0)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$1>>1]|0;
 $9 = ($8<<16>>16)==(3);
 $10 = ((($1)) + 8|0);
 if ($9) {
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_mb_escape_add_str($7,$13);
  $24 = (_lily_mb_get($7)|0);
  _vm_error($0,21,$24);
  STACKTOP = sp;return;
 } else {
  $14 = $10;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $vararg_buffer;
  $21 = $20;
  HEAP32[$21>>2] = $16;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  _lily_mb_add_fmt($7,16111,$vararg_buffer);
  $24 = (_lily_mb_get($7)|0);
  _vm_error($0,21,$24);
  STACKTOP = sp;return;
 }
}
function _fixup_exception_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_value_assign($1,$3);
 $4 = (_build_traceback_raw($0)|0);
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_move_list_f(655360,$10,$4);
 return;
}
function _make_proper_exception_val($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_get($6)|0);
 $8 = (_lily_new_instance(2)|0);
 $9 = (_lily_new_string($7)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_mb_flush($12);
 _lily_instance_set_string($8,0,$9);
 $13 = (_build_traceback_raw($0)|0);
 _lily_instance_set_list($8,1,$13);
 $14 = ((($1)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 | 655360;
 _lily_move_instance_f($17,$2,$8);
 return;
}
function _lily_call_simple($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_call_prepare($0,$1);
 _lily_call_exec_prepared($0,$2);
 return;
}
function _lily_vm_ensure_class_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $5 = ($3|0)==(0);
  if ($5) {
   HEAP32[$2>>2] = 1;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6>>>0)>($1>>>0);
  if ($7) {
   $$lcssa = $6;
  } else {
   $9 = $6;
   while(1) {
    $8 = $9 << 1;
    $10 = ($8>>>0)>($1>>>0);
    if ($10) {
     break;
    } else {
     $9 = $8;
    }
   }
   HEAP32[$2>>2] = $8;
   $$lcssa = $8;
  }
  $11 = ((($0)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $$lcssa << 2;
  $14 = (_lily_realloc($12,$13)|0);
  HEAP32[$11>>2] = $14;
 }
 $15 = ($3|0)==(0);
 if (!($15)) {
  return;
 }
 $16 = ((($0)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 76|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$16>>2]|0;
 $20 = ((($19)) + 80|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$16>>2]|0;
 $22 = ((($21)) + 84|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$16>>2]|0;
 $24 = ((($23)) + 88|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$16>>2]|0;
 $26 = ((($25)) + 92|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$16>>2]|0;
 $28 = ((($27)) + 96|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$16>>2]|0;
 $30 = ((($29)) + 100|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$16>>2]|0;
 $32 = ((($31)) + 104|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$16>>2]|0;
 $34 = ((($33)) + 108|0);
 HEAP32[$34>>2] = 0;
 return;
}
function _lily_vm_add_class_unchecked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 HEAP32[$7>>2] = $1;
 return;
}
function _lily_vm_prep($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 28|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($1)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 14|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 if ($12) {
  _grow_vm_registers($0,$9);
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$0>>2] = $14;
 } else {
  $15 = HEAP32[$0>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   _grow_vm_registers($0,1);
   $17 = ((($0)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$0>>2] = $18;
  }
 }
 _load_foreign_values($0,$3);
 $19 = ((($0)) + 96|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  _maybe_fix_print($0);
 }
 $22 = HEAP16[$7>>1]|0;
 $23 = $22&65535;
 $24 = ((($0)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($0)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$26>>2] = $6;
 $27 = ((($6)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($26)) + 12|0);
 HEAP32[$29>>2] = $28;
 $30 = HEAP16[$7>>1]|0;
 $31 = $30&65535;
 $32 = ((($26)) + 8|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($26)) + 4|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($0)) + 16|0);
 HEAP32[$34>>2] = 1;
 return;
}
function _load_foreign_values($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 4|0);
 while(1) {
  $6 = (_lily_vs_pop($1)|0);
  $7 = ((($6)) + 6|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_value_assign_noref($12,$6);
  _lily_free($6);
  $13 = HEAP32[$2>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  }
 }
 return;
}
function _maybe_fix_print($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_find_var($2,$4,16114)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = (_lily_find_var($2,$4,16121)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 }
 $9 = ((($7)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 32|0);
 HEAP32[$17>>2] = 111;
 $18 = ((($5)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 96|0);
 HEAP32[$24>>2] = $23;
 return;
}
function _builtin_stdout_print($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _vm_error($0,23,16127);
 }
 $8 = HEAP32[$5>>2]|0;
 $9 = (_lily_arg_value($0,0)|0);
 _do_print($0,$8,$9);
 return;
}
function _numcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)!=($1|0);
 $3 = $2&1;
 return ($3|0);
}
function _numhash($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function _new_table_sized($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_new_size($0)|0);
 $4 = (_lily_malloc(28)|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($4)) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 16|0);
 HEAP32[$9>>2] = $3;
 $10 = $3 << 2;
 $11 = (_lily_malloc($10)|0);
 $12 = ((($4)) + 24|0);
 HEAP32[$12>>2] = $11;
 _memset(($11|0),0,($10|0))|0;
 return ($4|0);
}
function _new_size($0) {
 $0 = $0|0;
 var $$010 = 0, $$0912$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)<(8);
 do {
  if ($1) {
   $$0912$lcssa = 0;
  } else {
   $4 = ($0|0)<(16);
   if ($4) {
    $$0912$lcssa = 1;
   } else {
    $5 = ($0|0)<(32);
    if ($5) {
     $$0912$lcssa = 2;
    } else {
     $6 = ($0|0)<(64);
     if ($6) {
      $$0912$lcssa = 3;
     } else {
      $7 = ($0|0)<(128);
      if ($7) {
       $$0912$lcssa = 4;
      } else {
       $8 = ($0|0)<(256);
       if ($8) {
        $$0912$lcssa = 5;
       } else {
        $9 = ($0|0)<(512);
        if ($9) {
         $$0912$lcssa = 6;
        } else {
         $10 = ($0|0)<(1024);
         if ($10) {
          $$0912$lcssa = 7;
         } else {
          $11 = ($0|0)<(2048);
          if ($11) {
           $$0912$lcssa = 8;
          } else {
           $12 = ($0|0)<(4096);
           if ($12) {
            $$0912$lcssa = 9;
           } else {
            $13 = ($0|0)<(8192);
            if ($13) {
             $$0912$lcssa = 10;
            } else {
             $14 = ($0|0)<(16384);
             if ($14) {
              $$0912$lcssa = 11;
             } else {
              $15 = ($0|0)<(32768);
              if ($15) {
               $$0912$lcssa = 12;
              } else {
               $16 = ($0|0)<(65536);
               if ($16) {
                $$0912$lcssa = 13;
               } else {
                $17 = ($0|0)<(131072);
                if ($17) {
                 $$0912$lcssa = 14;
                } else {
                 $18 = ($0|0)<(262144);
                 if ($18) {
                  $$0912$lcssa = 15;
                 } else {
                  $19 = ($0|0)<(524288);
                  if ($19) {
                   $$0912$lcssa = 16;
                  } else {
                   $20 = ($0|0)<(1048576);
                   if ($20) {
                    $$0912$lcssa = 17;
                   } else {
                    $21 = ($0|0)<(2097152);
                    if ($21) {
                     $$0912$lcssa = 18;
                    } else {
                     $22 = ($0|0)<(4194304);
                     if ($22) {
                      $$0912$lcssa = 19;
                      break;
                     }
                     $23 = ($0|0)<(8388608);
                     if ($23) {
                      $$0912$lcssa = 20;
                      break;
                     }
                     $24 = ($0|0)<(16777216);
                     if ($24) {
                      $$0912$lcssa = 21;
                      break;
                     }
                     $25 = ($0|0)<(33554432);
                     if ($25) {
                      $$0912$lcssa = 22;
                      break;
                     }
                     $26 = ($0|0)<(67108864);
                     if ($26) {
                      $$0912$lcssa = 23;
                      break;
                     }
                     $27 = ($0|0)<(134217728);
                     if ($27) {
                      $$0912$lcssa = 24;
                      break;
                     }
                     $28 = ($0|0)<(268435456);
                     if ($28) {
                      $$0912$lcssa = 25;
                      break;
                     }
                     $29 = ($0|0)<(536870912);
                     if ($29) {
                      $$0912$lcssa = 26;
                      break;
                     }
                     $30 = ($0|0)<(1073741824);
                     if ($30) {
                      $$0912$lcssa = 27;
                      break;
                     } else {
                      $$010 = -1;
                     }
                     return ($$010|0);
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $2 = (2312 + ($$0912$lcssa<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$010 = $3;
 return ($$010|0);
}
function _lily_new_hash_numtable_sized($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_new_table_sized($0,10,7)|0);
 return ($1|0);
}
function _strhash($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$067 = 0, $$08 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0$lcssa = 0;
 } else {
  $$067 = $0;$$08 = 0;$4 = $1;
  while(1) {
   $3 = $4 << 24 >> 24;
   $5 = ((($$067)) + 1|0);
   $6 = ($$08*997)|0;
   $7 = (($3) + ($6))|0;
   $8 = HEAP8[$5>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $$0$lcssa = $7;
    break;
   } else {
    $$067 = $5;$$08 = $7;$4 = $8;
   }
  }
 }
 $10 = $$0$lcssa >> 5;
 $11 = (($10) + ($$0$lcssa))|0;
 return ($11|0);
}
function _lily_new_hash_strtable_sized($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_new_table_sized($0,5,8)|0);
 return ($1|0);
}
function _lily_new_hash_like_sized($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_new_table_sized($1,$3,$5)|0);
 return ($6|0);
}
function _lily_hash_delete($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$050 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(10|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 if ($5) {
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $10;
  $$0 = $14;
 } else {
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $$0 = $17;
 }
 $18 = ((($0)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 15]($$0)|0);
 $21 = ((($0)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20>>>0) % ($22>>>0))&-1;
 $24 = ((($0)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = ($2|0)==(0|0);
  if ($29) {
   $$050 = 0;
   return ($$050|0);
  }
  HEAP32[$2>>2] = 0;
  $$050 = 0;
  return ($$050|0);
 }
 $30 = ((($27)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($$0|0)==($31|0);
 if (!($32)) {
  $33 = HEAP32[$3>>2]|0;
  $34 = (FUNCTION_TABLE_iii[$33 & 15]($$0,$31)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $36 = ((($27)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $$050 = 0;
    return ($$050|0);
   } else {
    $52 = $37;$59 = $36;
   }
   while(1) {
    $51 = ((($52)) + 4|0);
    $53 = HEAP32[$51>>2]|0;
    $54 = ($53|0)==($$0|0);
    if ($54) {
     break;
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (FUNCTION_TABLE_iii[$55 & 15]($53,$$0)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     break;
    }
    $70 = HEAP32[$59>>2]|0;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0|0);
    if ($73) {
     $$050 = 0;
     label = 19;
     break;
    } else {
     $52 = $72;$59 = $71;
    }
   }
   if ((label|0) == 19) {
    return ($$050|0);
   }
   $58 = HEAP32[$59>>2]|0;
   $60 = ((($58)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   HEAP32[$59>>2] = $61;
   $62 = ((($0)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + -1)|0;
   HEAP32[$62>>2] = $64;
   $65 = ($2|0)==(0|0);
   if (!($65)) {
    $66 = ((($58)) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP32[$2>>2] = $67;
   }
   $68 = ((($58)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$1>>2] = $69;
   _lily_free($58);
   $$050 = 1;
   return ($$050|0);
  }
 }
 $39 = ((($27)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$24>>2]|0;
 $42 = (($41) + ($23<<2)|0);
 HEAP32[$42>>2] = $40;
 $43 = ((($0)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + -1)|0;
 HEAP32[$43>>2] = $45;
 $46 = ($2|0)==(0|0);
 if (!($46)) {
  $47 = ((($27)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$2>>2] = $48;
 }
 $49 = ((($27)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$1>>2] = $50;
 _lily_free($27);
 $$050 = 1;
 return ($$050|0);
}
function _lily_hash_insert_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$060 = 0, $$061$be = 0, $$1 = 0, $$164 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(10|0);
 $6 = ((($1)) + 8|0);
 if ($5) {
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $9;
  $$060 = $13;
 } else {
  $14 = HEAP32[$6>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $$060 = $16;
 }
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 15]($$060)|0);
 $20 = ((($0)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19>>>0) % ($21>>>0))&-1;
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 L5: do {
  if (!($27)) {
   $28 = HEAP32[$26>>2]|0;
   $29 = ($28|0)==($19|0);
   if ($29) {
    $30 = ((($26)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($$060|0)==($31|0);
    if ($32) {
     $$164 = $26;
    } else {
     $33 = HEAP32[$3>>2]|0;
     $34 = (FUNCTION_TABLE_iii[$33 & 15]($$060,$31)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $$164 = $26;
     } else {
      label = 8;
     }
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    $36 = ((($26)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if ($38) {
     break;
    }
    $40 = $37;$46 = $36;
    while(1) {
     $39 = HEAP32[$40>>2]|0;
     $41 = ($39|0)==($19|0);
     if ($41) {
      $42 = ((($40)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($$060|0)==($43|0);
      if ($44) {
       label = 12;
       break;
      }
      $47 = HEAP32[$3>>2]|0;
      $48 = (FUNCTION_TABLE_iii[$47 & 15]($$060,$43)|0);
      $49 = ($48|0)==(0);
      $50 = HEAP32[$46>>2]|0;
      if ($49) {
       $$1 = $50;
       break;
      } else {
       $$061$be = $50;
      }
     } else {
      $$061$be = $40;
     }
     $51 = ((($$061$be)) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      break L5;
     } else {
      $40 = $52;$46 = $51;
     }
    }
    if ((label|0) == 12) {
     $45 = HEAP32[$46>>2]|0;
     $$1 = $45;
    }
    $54 = ($$1|0)==(0|0);
    if ($54) {
     break;
    } else {
     $$164 = $$1;
    }
   }
   $76 = ((($$164)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   _lily_value_assign($77,$2);
   $78 = ((($$164)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   _lily_value_assign($79,$1);
   return;
  }
 } while(0);
 $55 = ((($0)) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$20>>2]|0;
 $58 = (($56|0) / ($57|0))&-1;
 $59 = ($58|0)>(5);
 if ($59) {
  _rehash($0);
  $60 = HEAP32[$20>>2]|0;
  $61 = (($19>>>0) % ($60>>>0))&-1;
  $$0 = $61;
 } else {
  $$0 = $22;
 }
 $62 = (_lily_malloc(20)|0);
 $63 = (_lily_value_copy($1)|0);
 $64 = ((($62)) + 8|0);
 HEAP32[$64>>2] = $63;
 $65 = ((($62)) + 4|0);
 HEAP32[$65>>2] = $$060;
 HEAP32[$62>>2] = $19;
 $66 = (_lily_value_copy($2)|0);
 $67 = ((($62)) + 12|0);
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$23>>2]|0;
 $69 = (($68) + ($$0<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($62)) + 16|0);
 HEAP32[$71>>2] = $70;
 $72 = HEAP32[$23>>2]|0;
 $73 = (($72) + ($$0<<2)|0);
 HEAP32[$73>>2] = $62;
 $74 = HEAP32[$55>>2]|0;
 $75 = (($74) + 1)|0;
 HEAP32[$55>>2] = $75;
 return;
}
function _rehash($0) {
 $0 = $0|0;
 var $$03840 = 0, $$039 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (_new_size($3)|0);
 $5 = $4 << 2;
 $6 = (_lily_malloc($5)|0);
 _memset(($6|0),0,($5|0))|0;
 $7 = ($2|0)>(0);
 $8 = ((($0)) + 24|0);
 if ($7) {
  $$03840 = 0;
 } else {
  $21 = HEAP32[$8>>2]|0;
  _lily_free($21);
  HEAP32[$1>>2] = $4;
  HEAP32[$8>>2] = $6;
  return;
 }
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($$03840<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $$039 = $11;
   while(1) {
    $13 = ((($$039)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$$039>>2]|0;
    $16 = (($15>>>0) % ($4>>>0))&-1;
    $17 = (($6) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[$13>>2] = $18;
    HEAP32[$17>>2] = $$039;
    $19 = ($14|0)==(0|0);
    if ($19) {
     break;
    } else {
     $$039 = $14;
    }
   }
  }
  $20 = (($$03840) + 1)|0;
  $exitcond = ($20|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$03840 = $20;
  }
 }
 $21 = HEAP32[$8>>2]|0;
 _lily_free($21);
 HEAP32[$1>>2] = $4;
 HEAP32[$8>>2] = $6;
 return;
}
function _lily_hash_find_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$036$be = 0, $$037 = 0, $$1 = 0, $$140 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10|0);
 $5 = ((($1)) + 8|0);
 if ($4) {
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $8;
  $$0 = $12;
 } else {
  $13 = HEAP32[$5>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $$0 = $15;
 }
 $16 = ((($0)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 15]($$0)|0);
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18>>>0) % ($20>>>0))&-1;
 $22 = ((($0)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($21<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$037 = 0;
  return ($$037|0);
 }
 $27 = HEAP32[$25>>2]|0;
 $28 = ($27|0)==($18|0);
 if ($28) {
  $29 = ((($25)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($$0|0)==($30|0);
  if ($31) {
   $$140 = $25;
  } else {
   $32 = HEAP32[$2>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 15]($$0,$30)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $$140 = $25;
   } else {
    label = 8;
   }
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $35 = ((($25)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $$037 = 0;
   return ($$037|0);
  }
  $39 = $36;$45 = $35;
  while(1) {
   $38 = HEAP32[$39>>2]|0;
   $40 = ($38|0)==($18|0);
   if ($40) {
    $41 = ((($39)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($$0|0)==($42|0);
    if ($43) {
     label = 12;
     break;
    }
    $46 = HEAP32[$2>>2]|0;
    $47 = (FUNCTION_TABLE_iii[$46 & 15]($$0,$42)|0);
    $48 = ($47|0)==(0);
    $49 = HEAP32[$45>>2]|0;
    if ($48) {
     $$1 = $49;
     break;
    } else {
     $$036$be = $49;
    }
   } else {
    $$036$be = $39;
   }
   $50 = ((($$036$be)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $$037 = 0;
    label = 17;
    break;
   } else {
    $39 = $51;$45 = $50;
   }
  }
  if ((label|0) == 12) {
   $44 = HEAP32[$45>>2]|0;
   $$1 = $44;
  }
  else if ((label|0) == 17) {
   return ($$037|0);
  }
  $53 = ($$1|0)==(0|0);
  if ($53) {
   $$037 = 0;
   return ($$037|0);
  } else {
   $$140 = $$1;
  }
 }
 $54 = ((($$140)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $$037 = $55;
 return ($$037|0);
}
function _get_parser() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_options()|0);
 $1 = (_lily_new_state($0)|0);
 _lily_op_allow_sys($0,1);
 return ($1|0);
}
function _run_parser($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_parse_string($0,16156,$1)|0);
 return ($2|0);
}
function _destroy_parser($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_free_state($0);
 return;
}
function _get_parser_error($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_get_error($0)|0);
 return ($1|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[4652]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((112|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4652]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 18652;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup_514($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[4652]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((113|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_544($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=2780; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((16164 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 16644;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 16644;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 16644;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 16644 : (16646);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (16645);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 16644;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 16644;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 16654;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 16661;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (16662) : (16667);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (16664);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (16628 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(16692,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(16692,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 16680 : 16684;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 18595 : 16688;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 16644;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (16628 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (16644 + ($255)|0);
    $$332 = $or$cond282 ? 16644 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 16644;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (16694 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 16782;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 16782;
  } else {
   $$01113 = 16782;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _isprint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -32)|0;
 $2 = ($1>>>0)<(95);
 $3 = $2&1;
 return ($3|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 15]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (18586 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (18595 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (2892 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (2892 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (2892 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (2924 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(18599,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((18636)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(18632)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(18632)>>2] = $15;
  }
  ___unlock(((18636)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 15]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[694]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[694]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((18636)|0));
   $$02325 = HEAP32[(18632)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((18636)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 15]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(18599,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 3;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 1;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 2;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 1;
   $37 = HEAP32[(18612)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((18636)|0));
   $40 = HEAP32[(18632)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(18632)>>2] = $7;
   ___unlock(((18636)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 15]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $11 = $10;
  } else {
   ___unlockfile($3);
   $11 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $11 = $8;
 }
 $12 = ($11|0)==($4|0);
 if ($12) {
  $14 = $2;
 } else {
  $13 = (($11>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $18 = $6;
   } else {
    $18 = 0;
   }
   $7 = ((($1)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (___toread($1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $12 = ((($1)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($1)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + -8|0);
    $17 = ($13>>>0)>($16>>>0);
    if ($17) {
     $20 = $0&255;
     $21 = ((($13)) + -1|0);
     HEAP32[$12>>2] = $21;
     HEAP8[$21>>0] = $20;
     $22 = HEAP32[$1>>2]|0;
     $23 = $22 & -17;
     HEAP32[$1>>2] = $23;
     $24 = ($18|0)==(0);
     if ($24) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $19 = ($18|0)==(0);
   if ($19) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $34 = $8;
 } else {
  $34 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 15]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $35 = ($34|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($34|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,$2,1,$1)|0);
 $4 = (($3) + -1)|0;
 return ($4|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4664]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18696 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4664] = $24;
     } else {
      $25 = HEAP32[(18672)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(18664)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (18696 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4664] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(18672)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(18676)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (18696 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4664] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(18672)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(18664)>>2] = $84;
     HEAP32[(18676)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(18660)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (18960 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(18672)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (18960 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(18660)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(18672)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(18672)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(18672)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(18676)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (18696 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[4664] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(18672)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(18664)>>2] = $$0191$i;
      HEAP32[(18676)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(18660)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (18960 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (18960 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(18664)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(18672)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (18960 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(18660)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(18672)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(18672)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(18672)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (18696 + ($425<<2)|0);
          $427 = HEAP32[4664]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4664] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(18672)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (18960 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(18660)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(18672)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(18672)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(18664)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(18676)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(18676)>>2] = $511;
   HEAP32[(18664)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(18664)>>2] = 0;
   HEAP32[(18676)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(18668)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(18668)>>2] = $526;
  $527 = HEAP32[(18680)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(18680)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[4782]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(19136)>>2] = 4096;
  HEAP32[(19132)>>2] = 4096;
  HEAP32[(19140)>>2] = -1;
  HEAP32[(19144)>>2] = -1;
  HEAP32[(19148)>>2] = 0;
  HEAP32[(19100)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[4782] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(19136)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(19096)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(19088)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(19100)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(18680)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (19104);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(19132)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(19088)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(19096)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(19136)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(19100)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(19100)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(19088)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(19088)>>2] = $624;
  $625 = HEAP32[(19092)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(19092)>>2] = $624;
  }
  $627 = HEAP32[(18680)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(18672)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(18672)>>2] = $$748$i;
    }
    HEAP32[(19104)>>2] = $$748$i;
    HEAP32[(19108)>>2] = $$723947$i;
    HEAP32[(19116)>>2] = 0;
    $632 = HEAP32[4782]|0;
    HEAP32[(18692)>>2] = $632;
    HEAP32[(18688)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (18696 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(18680)>>2] = $646;
    HEAP32[(18668)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(19144)>>2]|0;
    HEAP32[(18684)>>2] = $652;
   } else {
    $$024370$i = (19104);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(18668)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(18680)>>2] = $676;
       HEAP32[(18668)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(19144)>>2]|0;
       HEAP32[(18684)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(18672)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(18672)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (19104);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (19104);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(18668)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(18668)>>2] = $724;
        HEAP32[(18680)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(18676)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(18664)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(18664)>>2] = $730;
         HEAP32[(18676)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (18696 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[4664]|0;
            $757 = $756 & $755;
            HEAP32[4664] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (18960 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(18660)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(18660)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(18672)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(18672)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(18672)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (18696 + ($834<<2)|0);
         $836 = HEAP32[4664]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[4664] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(18672)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (18960 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(18660)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(18660)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(18672)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(18672)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (19104);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(18680)>>2] = $944;
    HEAP32[(18668)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(19144)>>2]|0;
    HEAP32[(18684)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(19104)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(19104)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(19104)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(19104)+12>>2]|0;
    HEAP32[(19104)>>2] = $$748$i;
    HEAP32[(19108)>>2] = $$723947$i;
    HEAP32[(19116)>>2] = 0;
    HEAP32[(19112)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (18696 + ($965<<2)|0);
      $967 = HEAP32[4664]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[4664] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(18672)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (18960 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(18660)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(18660)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(18672)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(18672)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(18668)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(18668)>>2] = $1047;
   $1048 = HEAP32[(18680)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(18680)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18672)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(18676)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(18664)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (18696 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4664]|0;
     $38 = $37 & $36;
     HEAP32[4664] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (18960 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(18660)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(18660)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(18672)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(18672)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(18672)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(18680)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(18668)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(18668)>>2] = $123;
   HEAP32[(18680)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(18676)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(18676)>>2] = 0;
   HEAP32[(18664)>>2] = 0;
   return;
  }
  $128 = HEAP32[(18676)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(18664)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(18664)>>2] = $131;
   HEAP32[(18676)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (18696 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(18672)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[4664]|0;
     $155 = $154 & $153;
     HEAP32[4664] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(18672)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(18672)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(18672)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (18960 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(18660)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(18660)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(18672)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(18672)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(18672)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(18676)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(18664)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (18696 + ($236<<2)|0);
  $238 = HEAP32[4664]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4664] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(18672)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (18960 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(18660)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(18660)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(18672)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(18672)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(18688)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(18688)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (19112);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(18688)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(18672)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(19136)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(18680)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(18668)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(18680)>>2] = $40;
  HEAP32[(18668)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(18676)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(18664)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(18664)>>2] = $storemerge1;
  HEAP32[(18676)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (18696 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[4664]|0;
    $93 = $92 & $91;
    HEAP32[4664] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (18960 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(18660)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(18660)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(18672)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(18672)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(18672)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(18672)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(18676)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(18664)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (18696 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[4664]|0;
     $34 = $33 & $32;
     HEAP32[4664] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (18960 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(18660)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(18660)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(18672)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(18672)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(18672)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(18672)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(18680)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(18668)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(18668)>>2] = $118;
   HEAP32[(18680)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(18676)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(18676)>>2] = 0;
   HEAP32[(18664)>>2] = 0;
   return;
  }
  $123 = HEAP32[(18676)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(18664)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(18664)>>2] = $126;
   HEAP32[(18676)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (18696 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[4664]|0;
     $149 = $148 & $147;
     HEAP32[4664] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (18960 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(18660)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(18660)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(18672)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(18672)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(18672)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(18676)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(18664)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (18696 + ($227<<2)|0);
  $229 = HEAP32[4664]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[4664] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(18672)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (18960 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(18660)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(18660)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(18672)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(18672)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
    $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $10$1 = tempRet0;
    STACKTOP = __stackBase__;
    return (tempRet0 = $10$1, $10$0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,_lily_builtin_loader,_lily_random_loader,_lily_sys_loader,_lily_value_compare,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,_handle_rewind,_parser_loop,_lily_pop_lex_entry,_lily_mb_flush,_lily_release_jump,_lily_jump_back,_lily_result_drop,_lily_builtin_print,_lily_builtin_calltrace,_lily_builtin_assert,_lily_builtin_Boolean_to_i,_lily_builtin_Boolean_to_s,_lily_builtin_Byte_to_i,_lily_builtin_ByteString_each_byte,_lily_builtin_ByteString_encode,_lily_builtin_ByteString_size,_lily_builtin_ByteString_slice,_lily_builtin_DivisionByZeroError_new,_lily_builtin_Double_to_i,_lily_builtin_Dynamic_new,_lily_builtin_Either_is_left,_lily_builtin_Either_is_right,_lily_builtin_Either_left,_lily_builtin_Either_right,_lily_builtin_Exception_new,_lily_builtin_File_close,_lily_builtin_File_each_line,_lily_builtin_File_open
,_lily_builtin_File_print,_lily_builtin_File_read,_lily_builtin_File_read_line,_lily_builtin_File_write,_lily_builtin_Function_doc,_lily_builtin_Hash_clear,_lily_builtin_Hash_delete,_lily_builtin_Hash_each_pair,_lily_builtin_Hash_get,_lily_builtin_Hash_has_key,_lily_builtin_Hash_keys,_lily_builtin_Hash_map_values,_lily_builtin_Hash_merge,_lily_builtin_Hash_reject,_lily_builtin_Hash_select,_lily_builtin_Hash_size,_lily_builtin_IndexError_new,_lily_builtin_Integer_to_bool,_lily_builtin_Integer_to_byte,_lily_builtin_Integer_to_d,_lily_builtin_Integer_to_s,_lily_builtin_IOError_new,_lily_builtin_KeyError_new,_lily_builtin_List_clear,_lily_builtin_List_count,_lily_builtin_List_delete_at,_lily_builtin_List_each,_lily_builtin_List_each_index,_lily_builtin_List_fill,_lily_builtin_List_fold
,_lily_builtin_List_insert,_lily_builtin_List_join,_lily_builtin_List_map,_lily_builtin_List_pop,_lily_builtin_List_push,_lily_builtin_List_reject,_lily_builtin_List_select,_lily_builtin_List_size,_lily_builtin_List_shift,_lily_builtin_List_slice,_lily_builtin_List_unshift,_lily_builtin_Option_and,_lily_builtin_Option_and_then,_lily_builtin_Option_is_none,_lily_builtin_Option_is_some,_lily_builtin_Option_map,_lily_builtin_Option_or,_lily_builtin_Option_or_else,_lily_builtin_Option_unwrap,_lily_builtin_Option_unwrap_or,_lily_builtin_Option_unwrap_or_else,_lily_builtin_RuntimeError_new,_lily_builtin_String_format,_lily_builtin_String_ends_with,_lily_builtin_String_find,_lily_builtin_String_html_encode,_lily_builtin_String_is_alnum,_lily_builtin_String_is_alpha,_lily_builtin_String_is_digit,_lily_builtin_String_is_space
,_lily_builtin_String_lower,_lily_builtin_String_lstrip,_lily_builtin_String_parse_i,_lily_builtin_String_replace,_lily_builtin_String_rstrip,_lily_builtin_String_slice,_lily_builtin_String_split,_lily_builtin_String_starts_with,_lily_builtin_String_strip,_lily_builtin_String_to_bytestring,_lily_builtin_String_trim,_lily_builtin_String_upper,_lily_builtin_Tuple_merge,_lily_builtin_Tuple_push,_lily_builtin_ValueError_new,_destroy_Random,_lily_random_Random_new,_lily_random_Random_between,_lily_sys_getenv,_lily_deref,_add_call_frame,_add_catch_entry,_builtin_stdout_print,_cleanup_514,_cleanup_544,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_if_handler,_do_handler,_var_handler,_for_handler,_try_handler,_case_handler,_else_handler,_elif_handler,_enum_handler,_while_handler,_raise_handler,_match_handler,_break_handler,_class_handler,_define_handler,_return_handler,_except_handler,_import_handler,_private_handler,_protected_handler,_continue_handler,_fix_first_file_name,_lily_call_prepare,_lily_push_value,_lily_call_exec_prepared,_lily_return_hash,_grow_vm_registers,_do_o_interpolation
,_lily_value_assign,_do_o_get_item,_do_o_get_property,_do_o_set_item,_do_o_set_property,_do_o_build_hash,_do_o_build_list_tuple,_do_o_build_enum,_do_o_dynamic_cast,_do_o_create_function,_do_o_raise,_do_o_new_instance,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,___stdio_close,_lily_jump_setup,_lily_result_value,_lily_result_boolean,_maybe_catch_exception,_make_cell_from,_numhash,_strhash,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viii = [b4,_lily_load_str,_build_hash,_vm_error,_prep_registers,_lily_move_unit,b4,b4];
var FUNCTION_TABLE_iii = [b5,_fputs,_lily_arg_hash,_lily_arg_function,_lily_new_hash_like_sized,_strcmp,_do_o_optarg_dispatch,_do_o_create_closure,_do_o_load_class_closure,_do_o_load_closure,_numcmp,b5,b5,b5,b5,b5];

  return { ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _run_parser: _run_parser, _fflush: _fflush, _bitshift64Ashr: _bitshift64Ashr, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, ___divdi3: ___divdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _realloc: _realloc, _i64Add: _i64Add, _pthread_self: _pthread_self, ___remdi3: ___remdi3, _get_parser_error: _get_parser_error, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _get_parser: _get_parser, _memmove: _memmove, _malloc: _malloc, _destroy_parser: _destroy_parser, _memset: _memset, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _run_parser = Module["_run_parser"] = asm["_run_parser"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var _get_parser_error = Module["_get_parser_error"] = asm["_get_parser_error"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _get_parser = Module["_get_parser"] = asm["_get_parser"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _destroy_parser = Module["_destroy_parser"] = asm["_destroy_parser"];
var _memset = Module["_memset"] = asm["_memset"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



