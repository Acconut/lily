// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 20160;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([3,55,0,0,0,0,0,0,116,114,117,101,0,0,0,0,4,42,0,0,0,0,0,0,115,101,108,102,0,0,0,0,253,54,0,0,0,0,0,0,102,97,108,115,101,0,0,0,150,10,0,0,0,0,0,0,95,95,102,105,108,101,95,95,159,10,0,0,0,0,0,0,95,95,108,105,110,101,95,95,168,10,0,0,0,0,0,0,95,95,102,117,110,99,116,105,181,10,0,0,0,0,0,0,105,102,0,0,0,0,0,0,184,10,0,0,0,0,0,0,100,111,0,0,0,0,0,0,187,10,0,0,0,0,0,0,118,97,114,0,0,0,0,0,191,10,0,0,0,0,0,0,102,111,114,0,0,0,0,0,195,10,0,0,0,0,0,0,116,114,121,0,0,0,0,0,199,10,0,0,0,0,0,0,99,97,115,101,0,0,0,0,167,26,0,0,0,0,0,0,101,108,115,101,0,0,0,0,162,26,0,0,0,0,0,0,101,108,105,102,0,0,0,0,204,10,0,0,0,0,0,0,101,110,117,109,0,0,0,0,209,10,0,0,0,0,0,0,119,104,105,108,101,0,0,0,215,10,0,0,0,0,0,0,114,97,105,115,101,0,0,0,221,10,0,0,0,0,0,0,109,97,116,99,104,0,0,0,227,10,0,0,0,0,0,0,98,114,101,97,107,0,0,0,233,10,0,0,0,0,0,0,99,108,97,115,115,0,0,0,239,10,0,0,0,0,0,0,100,101,102,105,110,101,0,0,246,10,0,0,0,0,0,0,114,101,116,117,114,110,0,0,253,10,0,0,0,0,0,0,101,120,99,101,112,116,0,0,4,11,0,0,0,0,0,0,105,109,112,111,114,116,0,0,82,27,0,0,0,0,0,0,112,114,105,118,97,116,101,0,90,27,0,0,0,0,0,0,112,114,111,116,101,99,116,101,11,11,0,0,0,0,0,0,99,111,110,116,105,110,117,101,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,0,0,208,1,0,0,4,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,27,0,0,0,16,2,0,0,9,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,1,0,0,0,255,255,255,255,7,0,0,0,0,0,0,0,255,255,255,255,8,0,0,0,0,0,0,0,7,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,10,0,0,0,0,0,0,0,24,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,12,0,0,0,0,0,0,0,25,0,0,0,13,0,0,0,0,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,26,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,22,0,0,0,17,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,0,0,0,0,23,0,0,0,19,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,0,0,0,0,4,0,0,0,21,0,0,0,0,0,0,0,11,0,0,0,22,0,0,0,0,0,0,0,27,0,0,0,23,0,0,0,0,0,0,0,5,0,0,0,24,0,0,0,0,0,0,0,6,0,0,0,25,0,0,0,0,0,0,0,12,0,0,0,26,0,0,0,0,0,0,0,28,0,0,0,27,0,0,0,0,0,0,0,21,0,0,0,28,0,0,0,0,0,0,0,2,0,0,0,29,0,0,0,0,0,0,0,255,255,255,255,30,0,0,0,1,0,0,0,255,255,255,255,31,0,0,0,0,0,0,0,255,255,255,255,32,0,0,0,0,0,0,0,255,255,255,255,33,0,0,0,0,0,0,0,255,255,255,255,34,0,0,0,0,0,0,0,255,255,255,255,35,0,0,0,1,0,0,0,255,255,255,255,36,0,0,0,1,0,0,0,255,255,255,255,37,0,0,0,1,0,0,0,255,255,255,255,38,0,0,0,1,0,0,0,255,255,255,255,39,0,0,0,1,0,0,0,255,255,255,255,40,0,0,0,1,0,0,0,255,255,255,255,41,0,0,0,0,0,0,0,255,255,255,255,42,0,0,0,0,0,0,0,255,255,255,255,43,0,0,0,0,0,0,0,255,255,255,255,44,0,0,0,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,0,18,0,0,0,46,0,0,0,0,0,0,0,14,0,0,0,47,0,0,0,0,0,0,0,19,0,0,0,48,0,0,0,0,0,0,0,255,255,255,255,49,0,0,0,1,0,0,0,255,255,255,255,50,0,0,0,0,0,0,0,20,0,0,0,51,0,0,0,0,0,0,0,255,255,255,255,52,0,0,0,1,0,0,0,255,255,255,255,53,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,54,41,0,0,59,41,0,0,90,41,0,0,64,41,0,0,66,41,0,0,76,41,0,0,78,41,0,0,38,41,0,0,41,41,0,0,229,58,0,0,49,41,0,0,69,41,0,0,81,41,0,0,211,41,0,0,216,41,0,0,32,41,0,0,36,41,0,0,59,41,0,0,213,41,0,0,218,41,0,0,228,41,0,0,88,41,0,0,56,41,0,0,61,41,0,0,43,41,0,0,46,41,0,0,51,41,0,0,72,41,0,0,84,41,0,0,34,33,0,0,40,33,0,0,178,35,0,0,167,35,0,0,156,35,0,0,143,35,0,0,134,35,0,0,126,35,0,0,160,70,0,0,171,33,0,0,204,33,0,0,251,54,0,0,116,35,0,0,126,35,0,0,134,35,0,0,143,35,0,0,156,35,0,0,167,35,0,0,178,35,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,13,0,0,0,22,41,0,0,24,41,0,0,26,41,0,0,28,41,0,0,30,41,0,0,32,41,0,0,34,41,0,0,36,41,0,0,38,41,0,0,41,41,0,0,43,41,0,0,229,58,0,0,46,41,0,0,49,41,0,0,51,41,0,0,54,41,0,0,56,41,0,0,59,41,0,0,61,41,0,0,64,41,0,0,66,41,0,0,69,41,0,0,72,41,0,0,76,41,0,0,78,41,0,0,81,41,0,0,84,41,0,0,88,41,0,0,90,41,0,0,93,41,0,0,95,41,0,0,104,41,0,0,107,41,0,0,110,41,0,0,112,41,0,0,115,41,0,0,123,41,0,0,139,41,0,0,148,41,0,0,161,41,0,0,184,41,0,0,191,41,0,0,202,41,0,0,105,68,0,0,211,41,0,0,213,41,0,0,216,41,0,0,218,41,0,0,221,41,0,0,224,41,0,0,228,41,0,0,231,41,0,0,245,41,0,0,248,41,0,0,208,1,0,0,16,2,0,0,160,70,0,0,14,42,0,0,27,42,0,0,41,42,0,0,55,42,0,0,70,42,0,0,96,42,0,0,106,42,0,0,131,42,0,0,155,42,0,0,162,42,0,0,184,42,0,0,197,42,0,0,242,42,0,0,42,43,0,0,51,43,0,0,75,43,0,0,85,43,0,0,108,43,0,0,124,43,0,0,161,43,0,0,199,43,0,0,235,43,0,0,16,44,0,0,27,44,0,0,39,44,0,0,116,44,0,0,123,44,0,0,138,44,0,0,178,44,0,0,206,44,0,0,226,44,0,0,0,45,0,0,20,45,0,0,31,45,0,0,38,45,0,0,63,45,0,0,91,45,0,0,134,45,0,0,163,45,0,0,200,45,0,0,232,45,0,0,33,46,0,0,81,46,0,0,140,46,0,0,199,46,0,0,231,46,0,0,22,47,0,0,32,47,0,0,60,47,0,0,85,47,0,0,109,47,0,0,133,47,0,0,177,47,0,0,222,47,0,0,229,47,0,0,250,47,0,0,44,48,0,0,77,48,0,0,117,48,0,0,169,48,0,0,199,48,0,0,240,48,0,0,16,49,0,0,51,49,0,0,95,49,0,0,116,49,0,0,138,49,0,0,189,49,0,0,240,49,0,0,12,50,0,0,35,50,0,0,60,50,0,0,73,50,0,0,116,50,0,0,177,50,0,0,210,50,0,0,243,50,0,0,35,51,0,0,75,51,0,0,132,51,0,0,158,51,0,0,189,51,0,0,237,51,0,0,248,51,0,0,0,52,0,0,49,52,0,0,58,52,0,0,94,52,0,0,133,52,0,0,163,52,0,0,191,52,0,0,219,52,0,0,247,52,0,0,19,53,0,0,43,53,0,0,75,53,0,0,110,53,0,0,142,53,0,0,180,53,0,0,218,53,0,0,249,53,0,0,16,54,0,0,40,54,0,0,77,54,0,0,123,54,0,0,131,54,0,0,170,54,0,0,204,54,0,0,251,54,0,0,168,8,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,172,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,9,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,180,70,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,9,0,0,148,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,188,74,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,67,0,95,95,102,105,108,101,95,95,0,95,95,108,105,110,101,95,95,0,95,95,102,117,110,99,116,105,111,110,95,95,0,105,102,0,100,111,0,118,97,114,0,102,111,114,0,116,114,121,0,99,97,115,101,0,101,110,117,109,0,119,104,105,108,101,0,114,97,105,115,101,0,109,97,116,99,104,0,98,114,101,97,107,0,99,108,97,115,115,0,100,101,102,105,110,101,0,114,101,116,117,114,110,0,101,120,99,101,112,116,0,105,109,112,111,114,116,0,99,111,110,116,105,110,117,101,0,69,120,112,101,99,116,101,100,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,67,108,97,115,115,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,78,117,109,101,114,105,99,32,115,99,111,111,112,32,116,121,112,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,46,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,100,101,99,108,97,114,97,116,105,111,110,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,93,39,44,32,110,111,116,32,39,37,115,39,46,0,67,108,97,115,115,32,37,115,32,101,120,112,101,99,116,115,32,37,100,32,116,121,112,101,40,115,41,44,32,98,117,116,32,103,111,116,32,37,100,32,116,121,112,101,40,115,41,46,0,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,0,78,111,110,45,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,102,111,108,108,111,119,115,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,46,0,84,121,112,101,32,39,94,84,39,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,32,118,97,108,117,101,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,61,62,39,32,111,114,32,39,41,39,32,97,102,116,101,114,32,118,97,114,97,114,103,115,46,0,78,117,109,101,114,105,99,32,115,99,111,111,112,105,110,103,32,116,121,112,101,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,116,111,32,116,104,101,32,98,97,99,107,101,110,100,46,0,110,101,119,0,108,105,108,121,95,37,115,95,37,115,95,37,115,0,84,111,111,32,109,97,110,121,32,103,101,110,101,114,105,99,115,46,0,73,110,118,97,108,105,100,32,103,101,110,101,114,105,99,32,110,97,109,101,32,40,119,97,110,116,101,100,32,37,115,44,32,103,111,116,32,37,115,41,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,39,37,115,39,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,99,108,97,115,115,46,0,37,115,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,102,111,114,32,97,32,66,111,111,108,101,97,110,46,0,39,37,115,39,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,118,97,114,105,97,110,116,32,110,97,109,101,100,32,39,37,115,39,46,0,79,110,108,121,32,118,97,114,105,97,110,116,115,32,116,104,97,116,32,116,97,107,101,32,110,111,32,97,114,103,117,109,101,110,116,115,32,99,97,110,32,98,101,32,100,101,102,97,117,108,116,32,97,114,103,117,109,101,110,116,115,46,0,65,32,99,108,97,115,115,32,99,97,110,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,105,116,115,101,108,102,33,0,39,37,115,39,32,99,97,110,110,111,116,32,98,101,32,105,110,104,101,114,105,116,101,100,32,102,114,111,109,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,104,101,114,101,32,102,111,114,32,105,110,104,101,114,105,116,101,100,32,110,101,119,46,0,65,116,116,101,109,112,116,32,116,111,32,117,115,101,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,118,97,108,117,101,32,39,37,115,39,46,0,39,115,101,108,102,39,32,109,117,115,116,32,98,101,32,117,115,101,100,32,119,105,116,104,105,110,32,97,32,99,108,97,115,115,46,0,67,97,110,110,111,116,32,105,109,112,108,105,99,105,116,108,121,32,117,115,101,32,116,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,111,102,32,97,110,32,101,110,117,109,46,0,67,108,97,115,115,32,37,115,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,37,115,46,37,115,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,37,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,80,114,111,112,101,114,116,105,101,115,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,32,40,39,118,97,114,39,32,107,101,121,119,111,114,100,32,109,105,115,115,105,110,103,63,41,0,80,114,111,112,101,114,116,121,32,37,115,32,105,115,32,110,111,116,32,105,110,32,99,108,97,115,115,32,37,115,46,37,115,0,69,120,112,101,99,116,101,100,32,99,108,111,115,105,110,103,32,116,111,107,101,110,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,79,112,116,105,111,110,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,37,115,39,32,111,114,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,44,39,46,0,69,120,112,101,99,116,101,100,32,97,32,107,101,121,32,61,62,32,118,97,108,117,101,32,112,97,105,114,32,98,101,102,111,114,101,32,39,44,39,46,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,39,37,115,39,46,0,77,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,32,119,105,116,104,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,69,120,112,101,99,116,101,100,32,39,119,104,105,108,101,39,44,32,110,111,116,32,39,37,115,39,46,0,67,108,97,115,115,32,112,114,111,112,101,114,116,105,101,115,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,64,46,0,67,97,110,110,111,116,32,117,115,101,32,97,32,99,108,97,115,115,32,112,114,111,112,101,114,116,121,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,65,32,109,101,116,104,111,100,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,0,80,114,111,112,101,114,116,121,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,105,110,32,99,108,97,115,115,32,37,115,46,0,65,110,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,114,101,113,117,105,114,101,100,32,104,101,114,101,46,0,69,120,112,101,99,116,101,100,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,37,115,46,0,76,111,111,112,32,118,97,114,32,109,117,115,116,32,98,101,32,116,121,112,101,32,105,110,116,101,103,101,114,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,105,110,0,69,120,112,101,99,116,101,100,32,39,105,110,39,44,32,110,111,116,32,39,37,115,39,46,0,40,102,111,114,32,115,116,97,114,116,41,0,70,111,114,32,114,97,110,103,101,32,118,97,108,117,101,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,97,110,32,97,115,115,105,103,110,109,101,110,116,46,0,40,102,111,114,32,101,110,100,41,0,98,121,0,69,120,112,101,99,116,101,100,32,39,98,121,39,44,32,110,111,116,32,39,37,115,39,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,46,0,39,101,120,99,101,112,116,39,32,116,121,112,101,32,99,97,110,110,111,116,32,104,97,118,101,32,115,117,98,116,121,112,101,115,46,0,97,115,0,69,120,112,101,99,116,101,100,32,39,97,115,39,44,32,110,111,116,32,39,37,115,39,46,0,39,99,97,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,117,116,115,105,100,101,32,111,102,32,39,109,97,116,99,104,39,46,0,39,101,108,115,101,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,39,101,108,105,102,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,110,32,101,110,117,109,32,104,101,114,101,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,32,40,116,111,111,32,115,104,111,114,116,41,46,0,67,97,110,110,111,116,32,100,101,99,108,97,114,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,67,108,97,115,115,32,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,65,32,98,117,105,108,116,45,105,110,32,99,108,97,115,115,32,110,97,109,101,100,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,65,32,99,108,97,115,115,32,119,105,116,104,32,116,104,101,32,110,97,109,101,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,118,97,114,105,97,110,116,46,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,115,46,0,65,110,32,101,110,117,109,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,118,97,114,105,97,110,116,115,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,102,117,110,99,116,105,111,110,32,104,101,114,101,46,0,65,32,112,114,111,112,101,114,116,121,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,0,40,115,101,108,102,41,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,100,101,102,105,110,101,46,0,39,115,101,108,102,39,32,114,101,116,117,114,110,32,116,121,112,101,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,99,108,97,115,115,32,109,101,116,104,111,100,115,46,0,69,120,112,101,99,116,101,100,32,39,125,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,110,111,116,32,39,37,115,39,46,0,39,114,97,105,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,37,115,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,114,101,116,117,114,110,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,32,40,110,111,32,114,101,116,117,114,110,32,116,121,112,101,32,103,105,118,101,110,41,46,0,77,97,116,99,104,32,98,108,111,99,107,32,99,97,110,110,111,116,32,98,101,32,105,110,32,97,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,37,115,32,105,115,32,110,111,116,32,97,32,109,101,109,98,101,114,32,111,102,32,101,110,117,109,32,37,115,46,0,65,108,114,101,97,100,121,32,104,97,118,101,32,97,32,99,97,115,101,32,102,111,114,32,118,97,114,105,97,110,116,32,37,115,46,0,95,0,77,97,116,99,104,32,112,97,116,116,101,114,110,32,110,111,116,32,101,120,104,97,117,115,116,105,118,101,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,32,99,97,115,101,40,115,41,32,97,114,101,32,109,105,115,115,105,110,103,58,10,0,42,32,37,115,0,39,98,114,101,97,107,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,39,114,101,116,117,114,110,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,102,117,110,99,116,105,111,110,46,0,39,101,120,99,101,112,116,39,32,111,117,116,115,105,100,101,32,39,116,114,121,39,46,0,39,105,109,112,111,114,116,39,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,116,104,101,32,115,97,110,100,98,111,120,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,118,97,114,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,98,117,116,32,103,111,116,32,39,37,115,39,46,0,39,99,111,110,116,105,110,117,101,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,37,115,39,46,0,69,109,112,116,121,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,46,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,97,32,115,105,110,103,108,101,32,101,120,112,114,101,115,115,105,111,110,46,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,99,111,109,109,97,110,100,32,100,111,101,115,32,110,111,116,32,114,101,116,117,114,110,32,97,32,118,97,108,117,101,46,0,40,108,97,109,98,100,97,41,0,67,97,110,110,111,116,32,105,110,102,101,114,32,116,121,112,101,32,111,102,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,124,39,44,32,110,111,116,32,39,37,115,39,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,98,108,111,99,107,40,115,41,32,97,116,32,101,110,100,32,111,102,32,112,97,114,115,105,110,103,46,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,37,115,46,0,37,115,46,0,58,32,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,10,0,84,114,97,99,101,98,97,99,107,58,10,0,32,32,32,32,102,114,111,109,32,91,67,93,58,32,105,110,32,37,115,37,115,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,58,32,105,110,32,37,115,37,115,37,115,10,0,95,95,109,97,105,110,95,95,0,40,102,111,114,32,115,116,101,112,41,0,40,102,111,114,32,116,101,109,112,41,0,39,98,114,101,97,107,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,39,99,111,110,116,105,110,117,101,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,39,125,39,32,111,117,116,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,0,77,105,115,115,105,110,103,32,114,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,97,116,32,101,110,100,32,111,102,32,102,117,110,99,116,105,111,110,46,0,42,99,108,111,115,117,114,101,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,52,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,54,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,0,101,108,105,102,0,101,108,115,101,0,39,37,115,39,32,97,102,116,101,114,32,39,101,108,115,101,39,46,0,39,101,120,99,101,112,116,39,32,99,108,97,117,115,101,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,46,0,39,101,108,115,101,39,32,119,105,116,104,105,110,32,97,110,32,101,120,104,97,117,115,116,105,118,101,32,109,97,116,99,104,46,0,39,101,108,115,101,39,32,99,97,110,110,111,116,32,98,101,32,116,104,101,32,111,110,108,121,32,99,108,97,117,115,101,32,119,105,116,104,105,110,32,97,32,109,97,116,99,104,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,112,114,105,118,97,116,101,0,112,114,111,116,101,99,116,101,100,0,37,115,46,37,115,32,105,115,32,109,97,114,107,101,100,32,37,115,44,32,97,110,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,104,101,114,101,46,0,86,97,114,105,97,110,116,32,37,115,32,115,104,111,117,108,100,32,110,111,116,32,103,101,116,32,97,114,103,115,46,0,67,108,97,115,115,32,37,115,32,104,97,115,32,110,111,32,109,101,116,104,111,100,32,111,114,32,112,114,111,112,101,114,116,121,32,110,97,109,101,100,32,37,115,46,0,85,115,101,32,64,60,110,97,109,101,62,32,116,111,32,103,101,116,47,115,101,116,32,112,114,111,112,101,114,116,105,101,115,44,32,110,111,116,32,115,101,108,102,46,60,110,97,109,101,62,46,0,67,97,110,110,111,116,32,97,110,111,110,121,109,111,117,115,108,121,32,99,97,108,108,32,114,101,115,117,108,116,105,110,103,32,116,121,112,101,32,39,94,84,39,46,0,110,111,110,101,0,46,46,0,40,97,110,111,110,121,109,111,117,115,41,0,60,110,101,119,62,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,37,115,37,115,37,115,32,40,37,115,32,102,111,114,32,37,115,37,115,37,115,41,46,0,65,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,37,115,37,115,37,115,32,105,115,32,105,110,118,97,108,105,100,58,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,76,101,102,116,32,115,105,100,101,32,111,102,32,37,115,32,105,115,32,110,111,116,32,97,115,115,105,103,110,97,98,108,101,46,0,67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,73,110,118,97,108,105,100,32,99,111,109,112,111,117,110,100,32,111,112,58,32,37,115,46,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,94,84,32,37,115,32,94,84,46,0,37,115,32,105,110,100,101,120,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,46,0,104,97,115,104,32,105,110,100,101,120,32,115,104,111,117,108,100,32,98,101,32,116,121,112,101,32,39,94,84,39,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,116,117,112,108,101,32,115,117,98,115,99,114,105,112,116,115,32,109,117,115,116,32,98,101,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,115,46,0,73,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,94,84,46,0,67,97,110,110,111,116,32,115,117,98,115,99,114,105,112,116,32,116,121,112,101,32,39,94,84,39,46,0,67,97,110,110,111,116,32,99,108,111,115,101,32,111,118,101,114,32,97,32,118,97,114,32,111,102,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,32,105,110,32,116,104,105,115,32,115,99,111,112,101,46,0,67,97,110,110,111,116,32,110,101,115,116,32,97,110,32,97,115,115,105,103,110,109,101,110,116,32,119,105,116,104,105,110,32,97,110,32,101,120,112,114,101,115,115,105,111,110,46,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,37,115,37,115,46,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,100,111,101,115,32,110,111,116,32,121,105,101,108,100,32,97,32,118,97,108,117,101,46,0,84,121,112,101,32,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,0,76,105,115,116,32,101,108,101,109,101,110,116,115,0,37,115,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,105,115,116,101,110,116,32,116,121,112,101,46,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,72,97,115,104,32,107,101,121,115,0,72,97,115,104,32,118,97,108,117,101,115,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,97,110,32,101,109,112,116,121,32,116,117,112,108,101,46,0,67,97,115,116,115,32,102,114,111,109,32,68,121,110,97,109,105,99,32,99,97,110,110,111,116,32,105,110,99,108,117,100,101,32,115,117,98,116,121,112,101,115,46,0,67,97,110,110,111,116,32,99,97,115,116,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,112,114,111,112,101,114,116,121,32,39,64,37,115,39,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,97,110,32,101,110,117,109,32,118,97,108,117,101,46,0,69,120,112,101,99,116,101,100,32,116,121,112,101,32,39,105,110,116,101,103,101,114,39,44,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,67,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,94,84,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,116,121,112,101,46,0,39,114,101,116,117,114,110,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,114,101,116,117,114,110,32,101,120,112,101,99,116,101,100,32,116,121,112,101,32,39,94,84,39,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,39,114,97,105,115,101,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,73,110,118,97,108,105,100,32,99,108,97,115,115,32,39,37,115,39,32,103,105,118,101,110,32,116,111,32,114,97,105,115,101,46,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,69,114,114,111,114,0,83,121,110,116,97,120,69,114,114,111,114,0,37,48,51,100,0,37,100,116,0,37,103,0,37,112,0,44,32,0,93,40,0,32,40,0,32,61,62,32,0,124,32,32,32,32,0,91,46,46,46,93,0,98,117,105,108,116,45,105,110,32,0,60,37,115,102,117,110,99,116,105,111,110,32,37,115,37,115,37,115,62,0,117,110,105,116,0,111,112,101,110,0,99,108,111,115,101,100,0,60,37,115,32,102,105,108,101,32,97,116,32,37,112,62,0,60,37,115,37,115,37,115,32,97,116,32,37,112,62,0,70,0,103,101,116,101,110,118,0,40,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,82,0,97,114,103,118,0,76,105,115,116,91,83,116,114,105,110,103,93,0,115,121,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,0,1,2,3,5,8,7,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,69,120,99,101,112,116,105,111,110,0,73,79,69,114,114,111,114,0,75,101,121,69,114,114,111,114,0,82,117,110,116,105,109,101,69,114,114,111,114,0,86,97,108,117,101,69,114,114,111,114,0,73,110,100,101,120,69,114,114,111,114,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,37,100,58,0,91,67,93,0,37,115,58,37,115,32,102,114,111,109,32,37,115,37,115,37,115,0,65,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,46,0,70,117,110,99,116,105,111,110,32,99,97,108,108,32,114,101,99,117,114,115,105,111,110,32,108,105,109,105,116,32,114,101,97,99,104,101,100,46,0,83,117,98,115,99,114,105,112,116,32,105,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,34,94,69,34,0,37,100,0,102,111,114,32,108,111,111,112,32,115,116,101,112,32,99,97,110,110,111,116,32,98,101,32,48,46,0,115,116,100,111,117,116,0,112,114,105,110,116,0,73,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,46,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,46,0,73,110,102,105,110,105,116,101,32,108,111,111,112,32,105,110,32,99,111,109,112,97,114,105,115,111,110,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,78,101,115,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,46,0,77,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,0,34,34,34,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,0,78,101,119,108,105,110,101,32,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,115,116,114,105,110,103,46,0,73,110,118,97,108,105,100,32,117,116,102,45,56,32,115,101,113,117,101,110,99,101,32,111,110,32,108,105,110,101,32,37,100,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,78,101,119,108,105,110,101,32,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,0,67,111,109,109,101,110,116,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,99,111,109,109,101,110,116,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,69,120,112,101,99,116,101,100,32,39,34,39,32,97,102,116,101,114,32,39,36,39,46,0,69,120,112,101,99,116,101,100,32,97,32,98,97,115,101,32,49,48,32,110,117,109,98,101,114,32,97,102,116,101,114,32,101,120,112,111,110,101,110,116,46,0,69,120,112,111,110,101,110,116,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,68,111,117,98,108,101,32,118,97,108,117,101,32,119,105,116,104,32,66,121,116,101,32,115,117,102,102,105,120,46,0,66,121,116,101,32,118,97,108,117,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,115,105,103,110,46,0,66,121,116,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,73,110,116,101,103,101,114,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,68,111,117,98,108,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,39,46,46,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,116,111,107,101,110,32,40,101,120,112,101,99,116,101,100,32,49,32,111,114,32,51,32,100,111,116,115,41,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,108,97,109,98,100,97,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,70,111,117,110,100,32,63,62,32,98,117,116,32,110,111,116,32,101,120,112,101,99,116,105,110,103,32,116,97,103,115,46,0,84,97,103,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,105,110,99,108,117,100,101,100,32,102,105,108,101,115,46,0,60,63,108,105,108,121,0,70,105,108,101,115,32,105,110,32,116,101,109,112,108,97,116,101,32,109,111,100,101,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,39,60,63,108,105,108,121,39,46,0,63,108,105,108,121,0,40,0,41,0,44,0,125,0,91,0,94,0,58,0,33,0,33,61,0,37,0,37,61,0,42,61,0,47,0,47,61,0,43,0,43,61,0,45,0,45,61,0,60,0,60,61,0,60,60,0,60,60,61,0,62,0,62,61,0,62,62,0,62,62,61,0,61,0,61,61,0,123,0,97,32,108,97,109,98,100,97,0,60,91,0,93,62,0,93,0,61,62,0,97,32,108,97,98,101,108,0,97,32,112,114,111,112,101,114,116,121,32,110,97,109,101,0,97,32,115,116,114,105,110,103,0,97,32,98,121,116,101,115,116,114,105,110,103,0,97,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,116,114,105,110,103,0,97,32,98,121,116,101,0,97,110,32,105,110,116,101,103,101,114,0,97,32,100,111,117,98,108,101,0,38,0,38,38,0,124,0,124,124,0,64,40,0,46,46,46,0,124,62,0,105,110,118,97,108,105,100,32,116,111,107,101,110,0,63,62,0,101,110,100,32,111,102,32,102,105,108,101,0,115,101,108,102,0,85,110,105,116,0,82,0,115,116,100,105,110,0,70,105,108,101,0,82,0,115,116,100,101,114,114,0,70,105,108,101,0,82,0,115,116,100,111,117,116,0,70,105,108,101,0,70,0,112,114,105,110,116,0,91,65,93,40,65,41,0,70,0,99,97,108,108,116,114,97,99,101,0,58,76,105,115,116,91,83,116,114,105,110,103,93,0,67,2,66,111,111,108,101,97,110,0,109,58,116,111,95,105,0,40,66,111,111,108,101,97,110,41,58,73,110,116,101,103,101,114,0,109,58,116,111,95,115,0,40,66,111,111,108,101,97,110,41,58,83,116,114,105,110,103,0,67,1,66,121,116,101,0,109,58,116,111,95,105,0,40,66,121,116,101,41,58,73,110,116,101,103,101,114,0,67,1,66,121,116,101,83,116,114,105,110,103,0,109,58,101,110,99,111,100,101,0,40,66,121,116,101,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,66,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,67,1,68,111,117,98,108,101,0,109,58,116,111,95,105,0,40,68,111,117,98,108,101,41,58,73,110,116,101,103,101,114,0,67,1,68,121,110,97,109,105,99,0,109,58,60,110,101,119,62,0,91,65,93,40,65,41,58,68,121,110,97,109,105,99,0,69,4,69,105,116,104,101,114,0,91,65,44,32,66,93,0,109,58,105,115,95,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,109,58,105,115,95,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,109,58,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,65,93,0,109,58,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,66,93,0,86,0,76,101,102,116,0,40,65,41,0,86,0,82,105,103,104,116,0,40,66,41,0,66,0,69,120,99,101,112,116,105,111,110,0,40,109,58,83,116,114,105,110,103,41,123,32,118,97,114,32,64,109,101,115,115,97,103,101,32,61,32,109,32,118,97,114,32,64,116,114,97,99,101,98,97,99,107,58,32,76,105,115,116,91,83,116,114,105,110,103,93,32,61,32,91,93,32,125,0,67,6,70,105,108,101,0,109,58,99,108,111,115,101,0,40,70,105,108,101,41,0,109,58,101,97,99,104,95,108,105,110,101,0,40,70,105,108,101,44,70,117,110,99,116,105,111,110,40,66,121,116,101,83,116,114,105,110,103,41,41,0,109,58,111,112,101,110,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,70,105,108,101,0,109,58,112,114,105,110,116,0,91,65,93,40,70,105,108,101,44,65,41,0,109,58,114,101,97,100,95,108,105,110,101,0,40,70,105,108,101,41,58,66,121,116,101,83,116,114,105,110,103,0,109,58,119,114,105,116,101,0,91,65,93,40,70,105,108,101,44,65,41,0,67,0,70,117,110,99,116,105,111,110,0,67,11,72,97,115,104,0,109,58,99,108,101,97,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,0,109,58,100,101,108,101,116,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,0,109,58,101,97,99,104,95,112,97,105,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,41,41,0,109,58,103,101,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,44,66,41,58,66,0,109,58,104,97,115,95,107,101,121,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,58,66,111,111,108,101,97,110,0,109,58,107,101,121,115,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,76,105,115,116,91,65,93,0,109,58,109,97,112,95,118,97,108,117,101,115,0,91,65,44,66,44,67,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,66,61,62,67,41,41,58,72,97,115,104,91,65,44,67,93,0,109,58,109,101,114,103,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,72,97,115,104,91,65,44,66,93,46,46,46,41,58,72,97,115,104,91,65,44,66,93,0,109,58,114,101,106,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,61,62,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,66,93,0,109,58,115,101,108,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,66,61,62,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,66,93,0,109,58,115,105,122,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,73,110,116,101,103,101,114,0,66,0,73,110,100,101,120,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,67,4,73,110,116,101,103,101,114,0,109,58,116,111,95,98,111,111,108,0,40,73,110,116,101,103,101,114,41,58,66,111,111,108,101,97,110,0,109,58,116,111,95,98,121,116,101,0,40,73,110,116,101,103,101,114,41,58,66,121,116,101,0,109,58,116,111,95,100,0,40,73,110,116,101,103,101,114,41,58,68,111,117,98,108,101,0,109,58,116,111,95,115,0,40,73,110,116,101,103,101,114,41,58,83,116,114,105,110,103,0,66,0,73,79,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,66,0,75,101,121,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,67,17,76,105,115,116,0,109,58,99,108,101,97,114,0,91,65,93,40,76,105,115,116,91,65,93,41,0,109,58,99,111,117,110,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,73,110,116,101,103,101,114,0,109,58,100,101,108,101,116,101,95,97,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,41,0,109,58,101,97,99,104,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,41,41,58,76,105,115,116,91,65,93,0,109,58,101,97,99,104,95,105,110,100,101,120,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,73,110,116,101,103,101,114,41,41,58,76,105,115,116,91,65,93,0,109,58,102,105,108,108,0,91,65,93,40,73,110,116,101,103,101,114,44,65,41,58,76,105,115,116,91,65,93,0,109,58,102,111,108,100,0,91,65,93,40,76,105,115,116,91,65,93,44,65,44,70,117,110,99,116,105,111,110,40,65,44,65,61,62,65,41,41,58,65,0,109,58,105,110,115,101,114,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,44,65,41,0,109,58,106,111,105,110,0,91,65,93,40,76,105,115,116,91,65,93,44,42,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,109,97,112,0,91,65,44,66,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,76,105,115,116,91,66,93,0,109,58,112,111,112,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,109,58,112,117,115,104,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,109,58,114,101,106,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,109,58,115,101,108,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,109,58,115,105,122,101,0,91,65,93,40,76,105,115,116,91,65,93,41,58,73,110,116,101,103,101,114,0,109,58,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,109,58,117,110,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,69,10,79,112,116,105,111,110,0,91,65,93,0,109,58,97,110,100,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,66,93,41,58,79,112,116,105,111,110,91,66,93,0,109,58,97,110,100,95,116,104,101,110,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,79,112,116,105,111,110,91,66,93,41,41,58,79,112,116,105,111,110,91,66,93,0,109,58,105,115,95,110,111,110,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,109,58,105,115,95,115,111,109,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,109,58,109,97,112,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,79,112,116,105,111,110,91,66,93,0,109,58,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,65,93,41,58,79,112,116,105,111,110,91,65,93,0,109,58,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,79,112,116,105,111,110,91,65,93,41,41,58,79,112,116,105,111,110,91,65,93,0,109,58,117,110,119,114,97,112,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,65,0,109,58,117,110,119,114,97,112,95,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,65,41,58,65,0,109,58,117,110,119,114,97,112,95,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,65,41,41,58,65,0,86,0,83,111,109,101,0,40,65,41,0,86,0,78,111,110,101,0,0,66,0,82,117,110,116,105,109,101,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,67,16,83,116,114,105,110,103,0,109,58,101,110,100,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,102,105,110,100,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,58,104,116,109,108,95,101,110,99,111,100,101,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,105,115,95,97,108,110,117,109,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,105,115,95,97,108,112,104,97,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,105,115,95,100,105,103,105,116,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,105,115,95,115,112,97,99,101,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,108,111,119,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,108,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,112,97,114,115,101,95,105,0,40,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,58,114,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,115,112,108,105,116,0,40,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,76,105,115,116,91,83,116,114,105,110,103,93,0,109,58,115,116,97,114,116,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,109,58,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,116,114,105,109,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,109,58,117,112,112,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,66,1,84,97,105,110,116,101,100,0,91,65,93,40,118,58,65,41,123,32,118,97,114,32,64,118,97,108,117,101,32,61,32,118,32,125,0,109,58,115,97,110,105,116,105,122,101,0,91,65,44,66,93,40,84,97,105,110,116,101,100,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,66,0,67,2,84,117,112,108,101,0,109,58,109,101,114,103,101,0,40,84,117,112,108,101,91,49,93,44,84,117,112,108,101,91,50,93,41,58,84,117,112,108,101,91,49,44,50,93,0,109,58,112,117,115,104,0,91,65,93,40,84,117,112,108,101,91,49,93,44,65,41,58,84,117,112,108,101,91,49,44,65,93,0,66,0,86,97,108,117,101,69,114,114,111,114,0,40,109,115,103,58,32,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,115,103,41,32,123,125,0,90,0,102,97,108,115,101,0,116,114,117,101,0,101,114,114,111,114,0,73,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,103,105,118,101,110,46,0,69,114,114,110,111,32,37,100,58,32,94,82,32,40,37,115,41,46,0,67,97,110,110,111,116,32,114,101,109,111,118,101,32,107,101,121,32,102,114,111,109,32,104,97,115,104,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,46,0,37,108,108,100,0,67,97,110,110,111,116,32,100,101,108,101,116,101,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,108,105,115,116,32,40,109,105,110,105,109,117,109,58,32,37,100,41,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,115,116,32,40,109,97,120,105,109,117,109,58,32,37,100,41,0,82,101,112,101,97,116,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,62,61,32,48,32,40,37,100,32,103,105,118,101,110,41,46,0,80,111,112,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,83,104,105,102,116,32,111,110,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,117,110,119,114,97,112,32,99,97,108,108,101,100,32,111,110,32,78,111,110,101,46,0,38,97,109,112,59,0,38,108,116,59,0,38,103,116,59,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,255,255,255,255,255,255,255,255,255,255,255,67,97,110,110,111,116,32,115,112,108,105,116,32,98,121,32,101,109,112,116,121,32,115,116,114,105,110,103,46,0,32,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,32,9,13,10,0,114,0,119,0,73,110,116,101,103,101,114,0,68,111,117,98,108,101,0,83,116,114,105,110,103,0,66,121,116,101,0,66,121,116,101,83,116,114,105,110,103,0,66,111,111,108,101,97,110,0,70,117,110,99,116,105,111,110,0,68,121,110,97,109,105,99,0,76,105,115,116,0,72,97,115,104,0,84,117,112,108,101,0,70,105,108,101,0,63,0,42,0,126,49,0,126,50,0,91,116,114,121,105,116,93,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        }
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result == 'function') {
            result = Runtime.addFunction(result);
            lib.cached_functions = result;
          }
          return result;
        }
      }
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  var _llvm_fabs_f64=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_dlsym": _dlsym, "_abort": _abort, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_pthread_self": _pthread_self, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "_dlclose": _dlclose, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _dlsym=env._dlsym;
  var _abort=env._abort;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _pthread_self=env._pthread_self;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _dlclose=env._dlclose;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _lily_move_boolean($v,$0,$1) {
 $v = $v|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$v>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($v);
 }
 $5 = ((($v)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 HEAP32[$v>>2] = 6;
 return;
}
function _lily_move_byte($v,$z) {
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = $z&255;
 $4 = ((($v)) + 8|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$v>>2] = 4;
 return;
}
function _lily_move_bytestring($v,$z) {
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 HEAP32[$v>>2] = 524293;
 return;
}
function _lily_move_double($v,$z) {
 $v = $v|0;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = ((($v)) + 8|0);
 HEAPF64[$3>>3] = $z;
 HEAP32[$v>>2] = 2;
 return;
}
function _lily_move_dynamic($v,$z) {
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 HEAP32[$v>>2] = 655368;
 return;
}
function _lily_move_empty_variant($f,$v) {
 $f = $f|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = ((($v)) + 8|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $f&65535;
 $9 = $8 | 2097152;
 HEAP32[$v>>2] = $9;
 return;
}
function _lily_move_instance_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 262144;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_move_file($v,$z) {
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 HEAP32[$v>>2] = 524300;
 return;
}
function _lily_move_function_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 7;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_move_hash_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 10;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_move_integer($v,$0,$1) {
 $v = $v|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$v>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($v);
 }
 $5 = ((($v)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 HEAP32[$v>>2] = 1;
 return;
}
function _lily_move_list_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 9;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_move_string($v,$z) {
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 HEAP32[$v>>2] = 524291;
 return;
}
function _lily_move_tuple_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 11;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_move_unit($v,$0,$1) {
 $v = $v|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$v>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($v);
 }
 $5 = ((($v)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 HEAP32[$v>>2] = 27;
 return;
}
function _lily_move_variant_f($f,$v,$z) {
 $f = $f|0;
 $v = $v|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($v);
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$z>>2] = $4;
 $5 = ((($v)) + 8|0);
 HEAP32[$5>>2] = $z;
 $6 = $f | 2097152;
 HEAP32[$v>>2] = $6;
 return;
}
function _lily_new_value_stack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_vs_push($vs,$value) {
 $vs = $vs|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($vs)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$vs>>2]|0;
  $8 = $4 << 3;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$vs>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$vs>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 HEAP32[$12>>2] = $value;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$0>>2] = $14;
 return;
}
function _lily_vs_pop($vs) {
 $vs = $vs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$vs>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_free_value_stack($vs) {
 $vs = $vs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $i$01 = 0;
  while(1) {
   $3 = HEAP32[$vs>>2]|0;
   $4 = (($3) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   _lily_free($5);
   $6 = (($i$01) + 1)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = ($6>>>0)<($7>>>0);
   if ($8) {
    $i$01 = $6;
   } else {
    break;
   }
  }
 }
 $9 = HEAP32[$vs>>2]|0;
 _lily_free($9);
 _lily_free($vs);
 return;
}
function _lily_new_state($options) {
 $options = $options|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(92)|0);
 $1 = ((($options)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 88|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = 0;
 $5 = (_lily_new_raiser()|0);
 $6 = ((($0)) + 18|0);
 HEAP16[$6>>1] = 1;
 $7 = ((($0)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 76|0);
 HEAP32[$8>>2] = $5;
 $9 = (_lily_new_expr_state()|0);
 $10 = ((($0)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = (_lily_new_generic_pool()|0);
 $12 = ((($0)) + 40|0);
 HEAP32[$12>>2] = $11;
 $13 = (_lily_new_symtab($11)|0);
 $14 = ((($0)) + 64|0);
 HEAP32[$14>>2] = $13;
 $15 = (_lily_new_vm_state($options,$5)|0);
 $16 = ((($0)) + 68|0);
 HEAP32[$16>>2] = $15;
 $17 = (_lily_malloc(24)|0);
 $18 = ((($0)) + 84|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($17)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$16>>2]|0;
 $21 = ((($20)) + 84|0);
 HEAP32[$21>>2] = $0;
 $22 = HEAP32[$16>>2]|0;
 _lily_register_pkg_builtin($22);
 $23 = HEAP32[$14>>2]|0;
 $24 = HEAP32[$4>>2]|0;
 _lily_set_builtin($23,$24);
 $25 = HEAP32[$14>>2]|0;
 _lily_init_pkg_builtin($25);
 $26 = HEAP32[$14>>2]|0;
 $27 = (_lily_new_emit_state($26,$5)|0);
 $28 = ((($0)) + 60|0);
 HEAP32[$28>>2] = $27;
 $29 = (_lily_new_lex_state($options,$5)|0);
 $30 = ((($0)) + 56|0);
 HEAP32[$30>>2] = $29;
 $31 = (_lily_new_msgbuf()|0);
 $32 = ((($0)) + 48|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($0)) + 80|0);
 HEAP32[$33>>2] = $options;
 $34 = (_lily_new_buffer_u16(4)|0);
 $35 = ((($0)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$10>>2]|0;
 $37 = ((($0)) + 24|0);
 HEAP32[$37>>2] = $36;
 $38 = (_lily_new_value_stack()|0);
 $39 = ((($0)) + 36|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$28>>2]|0;
 $41 = ((($40)) + 104|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 72|0);
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$14>>2]|0;
 $45 = HEAP32[$16>>2]|0;
 $46 = ((($45)) + 88|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$8>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$16>>2]|0;
 $51 = ((($50)) + 80|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[$30>>2]|0;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$14>>2]|0;
 $55 = ((($54)) + 96|0);
 HEAP32[$55>>2] = $53;
 $56 = HEAP32[$30>>2]|0;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$37>>2]|0;
 $59 = ((($58)) + 28|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[$30>>2]|0;
 $61 = ((($60)) + 16|0);
 $62 = HEAP32[$28>>2]|0;
 $63 = ((($62)) + 88|0);
 HEAP32[$63>>2] = $61;
 $64 = HEAP32[$14>>2]|0;
 $65 = HEAP32[$28>>2]|0;
 $66 = ((($65)) + 112|0);
 HEAP32[$66>>2] = $64;
 $67 = HEAP32[$28>>2]|0;
 $68 = ((($67)) + 108|0);
 HEAP32[$68>>2] = $0;
 $69 = HEAP32[$14>>2]|0;
 $70 = HEAP32[$30>>2]|0;
 $71 = ((($70)) + 52|0);
 HEAP32[$71>>2] = $69;
 $72 = HEAP32[$28>>2]|0;
 $73 = ((($72)) + 96|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($0)) + 28|0);
 HEAP32[$75>>2] = $74;
 $76 = HEAP32[$28>>2]|0;
 _lily_emit_enter_main($76);
 $77 = HEAP32[$14>>2]|0;
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($0)) + 52|0);
 HEAP32[$81>>2] = $80;
 $82 = (_new_module($0,0,0)|0);
 $83 = ((($0)) + 8|0);
 HEAP32[$83>>2] = $82;
 $84 = HEAP32[$14>>2]|0;
 $85 = ((($84)) + 28|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 16|0);
 HEAP32[$87>>2] = $82;
 $88 = HEAP32[$83>>2]|0;
 $89 = HEAP32[$14>>2]|0;
 $90 = ((($89)) + 12|0);
 HEAP32[$90>>2] = $88;
 $91 = ((($options)) + 2|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = ($92<<24>>24)==(0);
 if ($93) {
  $95 = ((($0)) + 16|0);
  HEAP16[$95>>1] = 0;
  $96 = HEAP32[$16>>2]|0;
  return ($96|0);
 }
 $94 = HEAP32[$16>>2]|0;
 _lily_pkg_sys_init($94,$options);
 $95 = ((($0)) + 16|0);
 HEAP16[$95>>1] = 0;
 $96 = HEAP32[$16>>2]|0;
 return ($96|0);
}
function _new_module($parser,$path,$dynaload_table) {
 $parser = $parser|0;
 $path = $path|0;
 $dynaload_table = $dynaload_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(52)|0);
 $1 = ($path|0)==(0|0);
 if ($1) {
  $6 = ((($0)) + 10|0);
  ;HEAP16[$6>>1]=0|0;HEAP16[$6+2>>1]=0|0;HEAP16[$6+4>>1]=0|0;HEAP16[$6+6>>1]=0|0;HEAP16[$6+8>>1]=0|0;HEAP16[$6+10>>1]=0|0;HEAP16[$6+12>>1]=0|0;
 } else {
  $2 = (_strlen($path)|0);
  $3 = (($2) + 1)|0;
  $4 = (_lily_malloc($3)|0);
  $5 = ((($0)) + 20|0);
  HEAP32[$5>>2] = $4;
  (_strcpy($4,$path)|0);
  _set_module_names_by_path($0,$path);
 }
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = $dynaload_table;
 $8 = ($dynaload_table|0)==(0|0);
 if ($8) {
  label = 7;
 } else {
  $9 = HEAP32[$dynaload_table>>2]|0;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   label = 7;
  } else {
   $12 = $10&255;
   $13 = $12 << 1;
   $14 = (_lily_malloc($13)|0);
   $15 = ((($0)) + 48|0);
   HEAP32[$15>>2] = $14;
   _memset(($14|0),0,($13|0))|0;
  }
 }
 if ((label|0) == 7) {
  $16 = ((($0)) + 48|0);
  HEAP32[$16>>2] = 0;
 }
 HEAP32[$0>>2] = 0;
 $17 = ((($0)) + 24|0);
 $18 = ((($0)) + 44|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 4|0);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
 HEAP16[$19>>1] = 5;
 $20 = ((($0)) + 6|0);
 HEAP16[$20>>1] = 0;
 $21 = HEAP32[$parser>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  HEAP32[$parser>>2] = $0;
  $25 = ((($parser)) + 4|0);
  HEAP32[$25>>2] = $0;
  return ($0|0);
 } else {
  $23 = ((($parser)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$24>>2] = $0;
  HEAP32[$23>>2] = $0;
  return ($0|0);
 }
 return (0)|0;
}
function _set_module_names_by_path($module,$path) {
 $module = $module|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $load_len$0 = 0, $slash$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$path>>0]|0;
 $1 = ($0<<24>>24)==(91);
 if ($1) {
  $2 = (_lily_malloc(1)|0);
  $3 = ((($module)) + 12|0);
  HEAP32[$3>>2] = $2;
  HEAP8[$2>>0] = 0;
  $4 = (_lily_malloc(2)|0);
  $5 = ((($module)) + 16|0);
  HEAP32[$5>>2] = $4;
  HEAP8[$4>>0]=46&255;HEAP8[$4+1>>0]=46>>8;
  $6 = ((($module)) + 10|0);
  HEAP16[$6>>1] = 0;
  return;
 }
 $7 = (_strrchr($path,47)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (_lily_malloc(1)|0);
  $10 = ((($module)) + 16|0);
  HEAP32[$10>>2] = $9;
  HEAP8[$9>>0] = 0;
  $slash$0 = $path;
 } else {
  $11 = $7;
  $12 = $path;
  $13 = (($11) - ($12))|0;
  $14 = (($13) + 1)|0;
  $15 = (_lily_malloc($14)|0);
  $16 = ((($module)) + 16|0);
  HEAP32[$16>>2] = $15;
  (_strncpy($15,$path,$13)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13)|0);
  HEAP8[$18>>0] = 0;
  $19 = ((($7)) + 1|0);
  $slash$0 = $19;
 }
 $20 = (_strrchr($slash$0,46)|0);
 $21 = $20;
 $22 = $slash$0;
 $23 = (($21) - ($22))|0;
 $24 = ($20|0)==(0|0);
 if ($24) {
  $25 = (_strlen($path)|0);
  $load_len$0 = $25;
 } else {
  $load_len$0 = $23;
 }
 $26 = (($load_len$0) + 1)|0;
 $27 = (_lily_malloc($26)|0);
 $28 = ((($module)) + 12|0);
 HEAP32[$28>>2] = $27;
 (_strncpy($27,$slash$0,$load_len$0)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($load_len$0)|0);
 HEAP8[$30>>0] = 0;
 $31 = (_strlen($path)|0);
 $32 = $31&65535;
 $33 = ((($module)) + 10|0);
 HEAP16[$33>>1] = $32;
 return;
}
function _lily_free_state($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $module_iter$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_free_raiser($3);
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_free_expr_state($5);
 $6 = ((($1)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_free_vm($7);
 $8 = ((($1)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_free_lex_state($9);
 $10 = ((($1)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_free_emit_state($11);
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_free_buffer_u16($13);
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$1>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = ((($1)) + 64|0);
  $module_iter$01 = $17;
  while(1) {
   $20 = ((($module_iter$01)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   _free_links_until($21);
   $22 = HEAP32[$module_iter$01>>2]|0;
   $23 = ((($module_iter$01)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    _lily_library_free($24);
   }
   $26 = HEAP32[$19>>2]|0;
   _lily_free_module_symbols($26,$module_iter$01);
   $27 = ((($module_iter$01)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   _lily_free($28);
   $29 = ((($module_iter$01)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   _lily_free($30);
   $31 = ((($module_iter$01)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   _lily_free($32);
   $33 = ((($module_iter$01)) + 48|0);
   $34 = HEAP32[$33>>2]|0;
   _lily_free($34);
   _lily_free($module_iter$01);
   $35 = ($22|0)==(0|0);
   if ($35) {
    break;
   } else {
    $module_iter$01 = $22;
   }
  }
 }
 $36 = ((($1)) + 64|0);
 $37 = HEAP32[$36>>2]|0;
 _lily_free_symtab($37);
 $38 = ((($1)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 _lily_free_generic_pool($39);
 $40 = ((($1)) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 _lily_free_value_stack($41);
 $42 = ((($1)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_free_msgbuf($43);
 $44 = ((($1)) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 _lily_free_type_maker($45);
 $46 = ((($1)) + 84|0);
 $47 = HEAP32[$46>>2]|0;
 _lily_free($47);
 $48 = ((($1)) + 80|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 3|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  _lily_free($1);
  return;
 }
 _lily_free_options($49);
 _lily_free($1);
 return;
}
function _free_links_until($link_iter) {
 $link_iter = $link_iter|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($link_iter|0)==(0|0);
 if ($0) {
  return;
 } else {
  $$01 = $link_iter;
 }
 while(1) {
  $1 = ((($$01)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($$01)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_free($4);
  _lily_free($$01);
  $5 = ($2|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$01 = $2;
  }
 }
 return;
}
function _lily_register_package($s,$name,$dynaload_table,$loader) {
 $s = $s|0;
 $name = $name|0;
 $dynaload_table = $dynaload_table|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_new_module($1,$name,$dynaload_table)|0);
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = $loader;
 $4 = ((($2)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 | 1;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 return;
}
function _lily_dynaload_exception($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$parser>>2]|0;
 $1 = (_try_toplevel_dynaload($parser,$0,$name)|0);
 return ($1|0);
}
function _try_toplevel_dynaload($parser,$m,$name) {
 $parser = $parser|0;
 $m = $m|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$0 = 0, $i$0 = 0, $i$0$lcssa = 0;
 var $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($m)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $entry$0 = $3;$i$0 = 1;
 while(1) {
  $4 = ((($entry$0)) + 2|0);
  $5 = (_strcmp($4,$name)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $i$0$lcssa = $i$0;
   break;
  }
  $8 = ((($entry$0)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($i$0) + 1)|0;
  $12 = (($11) + ($10))|0;
  $13 = (($1) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(90);
  if ($16) {
   $result$0 = 0;
   label = 5;
   break;
  } else {
   $entry$0 = $14;$i$0 = $12;
  }
 }
 if ((label|0) == 5) {
  return ($result$0|0);
 }
 $7 = (_run_dynaload($parser,$m,$i$0$lcssa)|0);
 $result$0 = $7;
 return ($result$0|0);
}
function _run_dynaload($parser,$m,$dyna_pos) {
 $parser = $parser|0;
 $m = $m|0;
 $dyna_pos = $dyna_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($m)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($dyna_pos<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$7>>2] = $m;
 switch ($6<<24>>24) {
 case 82:  {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($dyna_pos<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 2|0);
  $13 = (_strlen($12)|0);
  $14 = (($12) + ($13)|0);
  $15 = ((($14)) + 1|0);
  $16 = (_type_by_name($parser,$15)|0);
  $17 = ((($parser)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_lily_emit_new_dyna_var($18,$m,$16,$12)|0);
  _update_cid_table($parser,$m);
  $20 = ((($m)) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($parser)) + 80|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($m)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iiii[$21 & 15]($23,$25,$dyna_pos)|0);
  $27 = ((($19)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&65535;
  $30 = ((($26)) + 6|0);
  HEAP16[$30>>1] = $29;
  $31 = ((($parser)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  _lily_vs_push($32,$26);
  $result$0 = $19;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 case 70:  {
  $33 = (_dynaload_function($parser,$m,0,$dyna_pos)|0);
  $result$0 = $33;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 case 67:  {
  $34 = (_dynaload_class($parser,$m,$dyna_pos)|0);
  $result$0 = $34;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 case 66:  {
  $35 = (_dynaload_bootstrap($parser,$m,$dyna_pos)|0);
  $result$0 = $35;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 case 86:  {
  $36 = (_dynaload_variant($parser,$m,$dyna_pos)|0);
  $result$0 = $36;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 case 69:  {
  $37 = (_dynaload_enum($parser,$m,$dyna_pos)|0);
  $result$0 = $37;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
  break;
 }
 default: {
  $result$0 = 0;
  HEAP32[$7>>2] = $8;
  return ($result$0|0);
 }
 }
 return (0)|0;
}
function _type_by_name($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_load_copy_string($1,1,$name);
 $2 = HEAP32[$0>>2]|0;
 _lily_lexer($2);
 $3 = (_get_type_raw($parser,0)|0);
 $4 = HEAP32[$0>>2]|0;
 _lily_pop_lex_entry($4);
 return ($3|0);
}
function _get_type_raw($parser,$flags) {
 $parser = $parser|0;
 $flags = $flags|0;
 var $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $arg_flags = 0, $cls$0 = 0, $i$0 = 0, $i1$1 = 0, $phitmp = 0, $result$0 = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $arg_flags = sp + 48|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 35:  {
   $4 = (_resolve_class_name($parser)|0);
   $cls$0 = $4;
   break;
  }
  case 41:  {
   $5 = $flags & 16384;
   $6 = ($5|0)==(0);
   if ($6) {
    $$pr = HEAP32[$2>>2]|0;
    $15 = $$pr;
    label = 6;
    break L1;
   } else {
    $7 = ((($1)) + 32|0);
    $8 = $7;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (_get_scoop_class($parser,$10)|0);
    $cls$0 = $14;
    break L1;
   }
   break;
  }
  default: {
   $15 = $3;
   label = 6;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $16 = ($15|0)==(35);
  if ($16) {
   $cls$0 = 0;
  } else {
   $17 = ((($parser)) + 76|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_tokname(35)|0);
   $20 = HEAP32[$2>>2]|0;
   $21 = (_tokname($20)|0);
   HEAP32[$vararg_buffer>>2] = $19;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $21;
   _lily_raise($18,1,2836,$vararg_buffer);
   // unreachable;
  }
 }
 $22 = ((($cls$0)) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ($23<<16>>16)==(3);
 if ($24) {
  $25 = ((($parser)) + 76|0);
  $26 = HEAP32[$25>>2]|0;
  _lily_raise($26,1,2932,$vararg_buffer2);
  // unreachable;
 }
 $27 = ((($cls$0)) + 46|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)==(0);
 if ($29) {
  $30 = ((($cls$0)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $result$0 = $31;
  _lily_lexer($1);
  STACKTOP = sp;return ($result$0|0);
 }
 $32 = ((($cls$0)) + 8|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ($33<<16>>16)==(7);
 _lily_lexer($1);
 $35 = HEAP32[$2>>2]|0;
 if (!($34)) {
  $36 = ($35|0)==(4);
  if (!($36)) {
   $37 = ((($parser)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (_tokname(4)|0);
   $40 = HEAP32[$2>>2]|0;
   $41 = (_tokname($40)|0);
   HEAP32[$vararg_buffer4>>2] = $39;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $41;
   _lily_raise($38,1,2836,$vararg_buffer4);
   // unreachable;
  }
  $42 = ((($parser)) + 72|0);
  $43 = ((($parser)) + 76|0);
  $i$0 = 0;
  L23: while(1) {
   _lily_lexer($1);
   $44 = HEAP32[$42>>2]|0;
   $45 = (_get_type_raw($parser,$flags)|0);
   _lily_tm_add($44,$45);
   $46 = (($i$0) + 1)|0;
   $47 = HEAP32[$2>>2]|0;
   switch ($47|0) {
   case 2:  {
    $i$0 = $46;
    break;
   }
   case 33:  {
    $$lcssa15 = $46;
    break L23;
    break;
   }
   default: {
    label = 17;
    break L23;
   }
   }
  }
  if ((label|0) == 17) {
   $48 = HEAP32[$43>>2]|0;
   $49 = (_tokname($47)|0);
   HEAP32[$vararg_buffer8>>2] = $49;
   _lily_raise($48,1,2976,$vararg_buffer8);
   // unreachable;
  }
  $50 = HEAP32[$42>>2]|0;
  $51 = (_lily_tm_make($50,0,$cls$0,$$lcssa15)|0);
  _ensure_valid_type($parser,$51);
  $result$0 = $51;
  _lily_lexer($1);
  STACKTOP = sp;return ($result$0|0);
 }
 $52 = ($35|0)==(0);
 if (!($52)) {
  $53 = ((($parser)) + 76|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_tokname(0)|0);
  $56 = HEAP32[$2>>2]|0;
  $57 = (_tokname($56)|0);
  HEAP32[$vararg_buffer11>>2] = $55;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $57;
  _lily_raise($54,1,2836,$vararg_buffer11);
  // unreachable;
 }
 _lily_lexer($1);
 $58 = $flags & 16384;
 HEAP32[$arg_flags>>2] = $58;
 $59 = ((($parser)) + 72|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[442]|0;
 _lily_tm_add($60,$63);
 $64 = HEAP32[$2>>2]|0;
 switch ($64|0) {
 case 1: case 34:  {
  $75 = $64;$i1$1 = 1;
  break;
 }
 default: {
  $65 = HEAP32[$59>>2]|0;
  $66 = (_get_nameless_arg($parser,$arg_flags)|0);
  _lily_tm_add($65,$66);
  $67 = HEAP32[$2>>2]|0;
  $68 = ($67|0)==(2);
  if ($68) {
   $72 = 1;
   while(1) {
    _lily_lexer($1);
    $69 = HEAP32[$59>>2]|0;
    $70 = (_get_nameless_arg($parser,$arg_flags)|0);
    _lily_tm_add($69,$70);
    $71 = (($72) + 1)|0;
    $73 = HEAP32[$2>>2]|0;
    $74 = ($73|0)==(2);
    if ($74) {
     $72 = $71;
    } else {
     $$lcssa = $72;$$lcssa14 = $73;
     break;
    }
   }
   $phitmp = (($$lcssa) + 2)|0;
   $75 = $$lcssa14;$i1$1 = $phitmp;
  } else {
   $75 = $67;$i1$1 = 2;
  }
 }
 }
 $76 = ($75|0)==(34);
 if ($76) {
  _lily_lexer($1);
  $77 = HEAP32[$59>>2]|0;
  $78 = (_get_type_raw($parser,$flags)|0);
  _lily_tm_insert($77,$62,$78);
 }
 $79 = HEAP32[$2>>2]|0;
 $80 = ($79|0)==(1);
 if (!($80)) {
  $81 = ((($parser)) + 76|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_tokname(1)|0);
  $84 = HEAP32[$2>>2]|0;
  $85 = (_tokname($84)|0);
  HEAP32[$vararg_buffer15>>2] = $83;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $85;
  _lily_raise($82,1,2836,$vararg_buffer15);
  // unreachable;
 }
 $86 = HEAP32[$59>>2]|0;
 $87 = HEAP32[$arg_flags>>2]|0;
 $88 = (_lily_tm_make($86,$87,$cls$0,$i1$1)|0);
 $result$0 = $88;
 _lily_lexer($1);
 STACKTOP = sp;return ($result$0|0);
}
function _resolve_class_name($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$2 = 0, $search_module$0 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(35);
 if (!($6)) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(35)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise($8,1,2836,$vararg_buffer);
  // unreachable;
 }
 $12 = (_resolve_module($parser)|0);
 $13 = ((($3)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_find_class($1,$12,$14)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $result$2 = $15;
  STACKTOP = sp;return ($result$2|0);
 }
 $17 = ($12|0)==(0|0);
 if ($17) {
  $18 = ((($1)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $search_module$0 = $19;
 } else {
  $search_module$0 = $12;
 }
 $20 = ((($search_module$0)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = HEAP32[$13>>2]|0;
  $24 = (_find_run_class_dynaload($parser,$search_module$0,$23)|0);
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $result$2 = $24;
   STACKTOP = sp;return ($result$2|0);
  }
 }
 $26 = ((($1)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $34 = ((($parser)) + 76|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $36;
  _lily_raise($35,1,2861,$vararg_buffer2);
  // unreachable;
 }
 $31 = HEAP32[$13>>2]|0;
 $32 = (_find_run_class_dynaload($parser,$27,$31)|0);
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = ((($parser)) + 76|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $36;
  _lily_raise($35,1,2861,$vararg_buffer2);
  // unreachable;
 } else {
  $result$2 = $32;
  STACKTOP = sp;return ($result$2|0);
 }
 return (0)|0;
}
function _resolve_module($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0$lcssa = 0, $search_entry$01 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_find_module($1,0,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $result$0$lcssa = 0;
  STACKTOP = sp;return ($result$0$lcssa|0);
 }
 $8 = ((($3)) + 40|0);
 $9 = ((($parser)) + 76|0);
 $10 = ((($parser)) + 76|0);
 $search_entry$01 = $6;
 while(1) {
  _lily_lexer($3);
  $11 = HEAP32[$8>>2]|0;
  $12 = ($11|0)==(43);
  if (!($12)) {
   label = 4;
   break;
  }
  _lily_lexer($3);
  $17 = HEAP32[$8>>2]|0;
  $18 = ($17|0)==(35);
  if (!($18)) {
   label = 6;
   break;
  }
  $23 = HEAP32[$4>>2]|0;
  $24 = (_lily_find_module($1,$search_entry$01,$23)|0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   $result$0$lcssa = $search_entry$01;
   label = 8;
   break;
  } else {
   $search_entry$01 = $24;
  }
 }
 if ((label|0) == 4) {
  $13 = HEAP32[$10>>2]|0;
  $14 = (_tokname(43)|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise($13,1,2836,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 6) {
  $19 = HEAP32[$9>>2]|0;
  $20 = (_tokname(35)|0);
  $21 = HEAP32[$8>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer2>>2] = $20;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $22;
  _lily_raise($19,1,2836,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($result$0$lcssa|0);
 }
 return (0)|0;
}
function _find_run_class_dynaload($parser,$m,$name) {
 $parser = $parser|0;
 $m = $m|0;
 $name = $name|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_try_toplevel_dynaload($parser,$m,$name)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return (0|0);
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = ($3<<16>>16)==(1);
  $$ = $4 ? 0 : $0;
  return ($$|0);
 }
 return (0)|0;
}
function _get_scoop_class($parser,$which) {
 $parser = $parser|0;
 $which = $which|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old_class_iter$0 = 0, $old_class_iter$0$lcssa = 0, $old_class_iter$02 = 0, $old_class_iter$03 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($which|0)>(2);
 $1 = ($which|0)==(0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $2 = ((($parser)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  _lily_raise($3,1,2888,$vararg_buffer);
  // unreachable;
 }
 $4 = ((($parser)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = (65535 - ($which))|0;
 $old_class_iter$02 = HEAP32[$6>>2]|0;
 $8 = ($old_class_iter$02|0)==(0|0);
 if ($8) {
  $old_class_iter$0$lcssa = 0;
  STACKTOP = sp;return ($old_class_iter$0$lcssa|0);
 } else {
  $old_class_iter$03 = $old_class_iter$02;
 }
 while(1) {
  $9 = ((($old_class_iter$03)) + 8|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($11|0)==($7|0);
  if ($12) {
   $old_class_iter$0$lcssa = $old_class_iter$03;
   label = 6;
   break;
  }
  $old_class_iter$0 = HEAP32[$old_class_iter$03>>2]|0;
  $13 = ($old_class_iter$0|0)==(0|0);
  if ($13) {
   $old_class_iter$0$lcssa = 0;
   label = 6;
   break;
  } else {
   $old_class_iter$03 = $old_class_iter$0;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($old_class_iter$0$lcssa|0);
 }
 return (0)|0;
}
function _ensure_valid_type($parser,$type) {
 $parser = $parser|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ((($type)) + 10|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($type)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 46|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($2|0)==($7|0);
 $9 = ($6<<16>>16)==(-1);
 $or$cond = $9 | $8;
 if (!($or$cond)) {
  $10 = ((($parser)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($4)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  _lily_raise($11,1,3014,$vararg_buffer);
  // unreachable;
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($parser)) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 80|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($14|0)==($18|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = ((($type)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 6|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 & 1;
 $28 = ($27<<16>>16)==(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = ((($24)) + 8|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = ($30<<16>>16)==(-5);
 if ($31) {
  STACKTOP = sp;return;
 } else {
  $32 = ((($parser)) + 76|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $22;
  _lily_raise($33,1,3063,$vararg_buffer3);
  // unreachable;
 }
}
function _get_nameless_arg($parser,$flags) {
 $parser = $parser|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(11);
 $5 = HEAP32[$flags>>2]|0;
 if ($4) {
  $6 = $5 | 2048;
  HEAP32[$flags>>2] = $6;
  _lily_lexer($1);
 } else {
  $7 = $5 & 2048;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = ((($parser)) + 76|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_raise($10,1,3093,$vararg_buffer);
   // unreachable;
  }
 }
 $11 = HEAP32[$flags>>2]|0;
 $12 = (_get_type_raw($parser,$11)|0);
 $13 = HEAP32[$flags>>2]|0;
 $14 = $13 & 2048;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 & 2;
  $21 = ($20<<16>>16)==(0);
  if ($21) {
   $22 = ((($parser)) + 76|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $12;
   _lily_raise($23,1,3142,$vararg_buffer1);
   // unreachable;
  }
  $24 = ((($parser)) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 88|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_make_type_of_class($parser,$27,$12)|0);
  $type$0 = $28;
  STACKTOP = sp;return ($type$0|0);
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = ($29|0)==(49);
 if ($30) {
  $31 = ((($parser)) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_make_type_of_class($parser,$34,$12)|0);
  _lily_lexer($1);
  $36 = HEAP32[$2>>2]|0;
  switch ($36|0) {
  case 1: case 34:  {
   break;
  }
  default: {
   $37 = ((($parser)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   _lily_raise($38,1,3181,$vararg_buffer3);
   // unreachable;
  }
  }
  $39 = HEAP32[$flags>>2]|0;
  $40 = $39 | 512;
  HEAP32[$flags>>2] = $40;
  $type$0 = $35;
  STACKTOP = sp;return ($type$0|0);
 }
 $41 = ((($12)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42 & 8192;
 $44 = ($43<<16>>16)==(0);
 if ($44) {
  $type$0 = $12;
  STACKTOP = sp;return ($type$0|0);
 }
 $45 = $13 & 16384;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = ((($parser)) + 76|0);
  $48 = HEAP32[$47>>2]|0;
  _lily_raise($48,1,3224,$vararg_buffer5);
  // unreachable;
 }
 $49 = HEAP32[$flags>>2]|0;
 $50 = $49 | 8192;
 HEAP32[$flags>>2] = $50;
 $type$0 = $12;
 STACKTOP = sp;return ($type$0|0);
}
function _make_type_of_class($parser,$cls,$type) {
 $parser = $parser|0;
 $cls = $cls|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_tm_add($1,$type);
 $2 = HEAP32[$0>>2]|0;
 $3 = (_lily_tm_make($2,0,$cls,1)|0);
 return ($3|0);
}
function _update_cid_table($parser,$m) {
 $parser = $parser|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cid_entry$03 = 0, $cls$01 = 0, $counter$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($m)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($m)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($parser)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$parser>>2]|0;
 $9 = ($3<<24>>24)>(0);
 if (!($9)) {
  return;
 }
 $10 = ((($2)) + 1|0);
 $11 = $3 << 24 >> 24;
 $cid_entry$03 = $10;$counter$02 = 0;
 while(1) {
  $12 = (($5) + ($counter$02<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(0);
  do {
   if ($14) {
    $15 = (_lily_find_class($7,$m,$cid_entry$03)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = (_lily_find_class($7,$8,$cid_entry$03)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      break;
     } else {
      $cls$01 = $17;
     }
    } else {
     $cls$01 = $15;
    }
    $19 = ((($cls$01)) + 8|0);
    $20 = HEAP16[$19>>1]|0;
    HEAP16[$12>>1] = $20;
   }
  } while(0);
  $21 = (_strlen($cid_entry$03)|0);
  $22 = (($21) + 1)|0;
  $23 = (($cid_entry$03) + ($22)|0);
  $24 = (($counter$02) + 1)|0;
  $exitcond = ($24|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $cid_entry$03 = $23;$counter$02 = $24;
  }
 }
 return;
}
function _dynaload_function($parser,$m,$cls,$dyna_index) {
 $parser = $parser|0;
 $m = $m|0;
 $cls = $cls|0;
 $dyna_index = $dyna_index|0;
 var $$ = 0, $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $cls_name$0 = 0, $flags = 0, $func$0$in = 0, $i$0 = 0, $i$1 = 0;
 var $save_generic_start = 0, $source$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $save_generic_start = sp + 24|0;
 $flags = sp + 20|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($m)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($dyna_index<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 2|0);
 $7 = (_strlen($6)|0);
 $8 = (($6) + ($7)|0);
 $9 = ((($8)) + 1|0);
 $10 = ((($parser)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_load_str($1,1,$9);
 _lily_lexer($1);
 $14 = ($cls|0)==(0|0);
 $source$0 = $14 ? $m : $cls;
 $15 = ((($m)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $23 = ((($parser)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_mb_flush($24);
  $25 = HEAP8[$6>>0]|0;
  $26 = ($25<<24>>24)==(60);
  $$ = $26 ? 3278 : $6;
  if ($14) {
   $cls_name$0 = 18083;
  } else {
   $27 = ((($cls)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $cls_name$0 = $28;
  }
  $29 = ((($m)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($m)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $cls_name$0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$;
  $33 = (_lily_mb_sprintf($24,3282,$vararg_buffer)|0);
  $34 = (_lily_library_get($30,$33)|0);
  $func$0$in = $34;
 } else {
  $18 = ((($parser)) + 80|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($m)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$16 & 15]($19,$21,$dyna_index)|0);
  $func$0$in = $22;
 }
 $35 = HEAP32[$10>>2]|0;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $m;
 $37 = ((($parser)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 _lily_gp_save_and_hide($38,$save_generic_start);
 _collect_generics($parser);
 $39 = ((($parser)) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$flags>>2] = 16384;
 $43 = HEAP32[442]|0;
 _lily_tm_add($40,$43);
 $44 = ((($1)) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 do {
  if ($46) {
   _lily_lexer($1);
   $47 = ((($parser)) + 76|0);
   $i$0 = 1;
   L10: while(1) {
    $48 = HEAP32[$39>>2]|0;
    $49 = (_get_nameless_arg($parser,$flags)|0);
    _lily_tm_add($48,$49);
    $50 = (($i$0) + 1)|0;
    $51 = HEAP32[$44>>2]|0;
    switch ($51|0) {
    case 1:  {
     $$lcssa = $50;
     label = 10;
     break L10;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     label = 11;
     break L10;
    }
    }
    _lily_lexer($1);
    $i$0 = $50;
   }
   if ((label|0) == 10) {
    _lily_lexer($1);
    $$pr = HEAP32[$44>>2]|0;
    $54 = $$pr;$i$1 = $$lcssa;
    break;
   }
   else if ((label|0) == 11) {
    $52 = HEAP32[$47>>2]|0;
    $53 = (_tokname($51)|0);
    HEAP32[$vararg_buffer3>>2] = $53;
    _lily_raise($52,1,3357,$vararg_buffer3);
    // unreachable;
   }
  } else {
   $54 = $45;$i$1 = 1;
  }
 } while(0);
 $55 = ($54|0)==(6);
 if (!($55)) {
  $58 = HEAP32[$flags>>2]|0;
  $59 = $58 & -16385;
  $60 = HEAP32[$39>>2]|0;
  $61 = HEAP32[$10>>2]|0;
  $62 = ((($61)) + 72|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (_lily_tm_make($60,$59,$63,$i$1)|0);
  $65 = ((($parser)) + 60|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_lily_emit_new_tied_dyna_var($66,$func$0$in,$source$0,$64,$6)|0);
  $68 = HEAP32[$37>>2]|0;
  $69 = HEAP32[$save_generic_start>>2]|0;
  _lily_gp_restore_and_unhide($68,$69);
  _lily_pop_lex_entry($1);
  $70 = HEAP32[$10>>2]|0;
  $71 = ((($70)) + 12|0);
  HEAP32[$71>>2] = $13;
  STACKTOP = sp;return ($67|0);
 }
 _lily_lexer($1);
 $56 = HEAP32[$39>>2]|0;
 $57 = (_get_type_raw($parser,16384)|0);
 _lily_tm_insert($56,$42,$57);
 $58 = HEAP32[$flags>>2]|0;
 $59 = $58 & -16385;
 $60 = HEAP32[$39>>2]|0;
 $61 = HEAP32[$10>>2]|0;
 $62 = ((($61)) + 72|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_lily_tm_make($60,$59,$63,$i$1)|0);
 $65 = ((($parser)) + 60|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (_lily_emit_new_tied_dyna_var($66,$func$0$in,$source$0,$64,$6)|0);
 $68 = HEAP32[$37>>2]|0;
 $69 = HEAP32[$save_generic_start>>2]|0;
 _lily_gp_restore_and_unhide($68,$69);
 _lily_pop_lex_entry($1);
 $70 = HEAP32[$10>>2]|0;
 $71 = ((($70)) + 12|0);
 HEAP32[$71>>2] = $13;
 STACKTOP = sp;return ($67|0);
}
function _collect_generics($parser) {
 $parser = $parser|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 28|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(4);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($parser)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_gp_num_in_scope($6)|0);
 $8 = (($7) + 65)|0;
 $9 = $8&255;
 HEAP8[$name>>0] = $9;
 $10 = ((($name)) + 1|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($1)) + 12|0);
 $12 = ((($parser)) + 76|0);
 $13 = ((($parser)) + 76|0);
 $14 = ((($parser)) + 76|0);
 $ch$0 = $9;
 L4: while(1) {
  _lily_lexer($1);
  $15 = HEAP32[$2>>2]|0;
  $16 = ($15|0)==(35);
  if (!($16)) {
   label = 4;
   break;
  }
  $21 = HEAP32[$11>>2]|0;
  $22 = HEAP8[$21>>0]|0;
  $23 = $ch$0 << 24 >> 24;
  $24 = ($22<<24>>24)==($ch$0<<24>>24);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = ((($21)) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   label = 7;
   break;
  }
  $31 = HEAP32[$5>>2]|0;
  $32 = (($23) + -65)|0;
  _lily_gp_push($31,$name,$32);
  _lily_lexer($1);
  $33 = (($ch$0) + 1)<<24>>24;
  $34 = HEAP32[$2>>2]|0;
  switch ($34|0) {
  case 33:  {
   $$lcssa = $33;
   label = 11;
   break L4;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 12;
   break L4;
  }
  }
  HEAP8[$name>>0] = $33;
  $ch$0 = $33;
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$14>>2]|0;
  $18 = (_tokname(35)|0);
  $19 = HEAP32[$2>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  _lily_raise($17,1,2836,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $28 = ($ch$0<<24>>24)==(91);
  $29 = HEAP32[$13>>2]|0;
  if ($28) {
   _lily_raise($29,1,3296,$vararg_buffer2);
   // unreachable;
  } else {
   $30 = HEAP32[$11>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $name;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $30;
   _lily_raise($29,1,3315,$vararg_buffer4);
   // unreachable;
  }
 }
 else if ((label|0) == 11) {
  _lily_lexer($1);
  $35 = $$lcssa << 24 >> 24;
  $36 = (($35) + -65)|0;
  $37 = ((($parser)) + 60|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 100|0);
  $40 = HEAP32[$39>>2]|0;
  _lily_ts_generics_seen($40,$36);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $41 = HEAP32[$12>>2]|0;
  $42 = (_tokname($34)|0);
  HEAP32[$vararg_buffer8>>2] = $42;
  _lily_raise($41,1,2976,$vararg_buffer8);
  // unreachable;
 }
}
function _dynaload_class($parser,$m,$dyna_index) {
 $parser = $parser|0;
 $m = $m|0;
 $dyna_index = $dyna_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($m)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($dyna_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 2|0);
 $7 = (_lily_new_class($5,$6)|0);
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 | 128;
 $12 = $11&65535;
 HEAP16[$8>>1] = $12;
 $13 = $dyna_index&65535;
 $14 = ((($7)) + 50|0);
 HEAP16[$14>>1] = $13;
 return ($7|0);
}
function _dynaload_bootstrap($parser,$m,$dyna_index) {
 $parser = $parser|0;
 $m = $m|0;
 $dyna_index = $dyna_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $es = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $es = sp;
 $0 = ((($m)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($dyna_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 2|0);
 $5 = (_strlen($4)|0);
 $6 = (($4) + ($5)|0);
 $7 = ((($6)) + 1|0);
 $8 = ((($parser)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_load_str($9,1,$7);
 $10 = ((($parser)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_lily_new_class($11,$4)|0);
 $13 = (($dyna_index) + 1)|0;
 $14 = $13&65535;
 $15 = ((($12)) + 50|0);
 HEAP16[$15>>1] = $14;
 $16 = HEAP32[$parser>>2]|0;
 $17 = ($16|0)==($m|0);
 L1: do {
  if ($17) {
   $18 = HEAP32[$10>>2]|0;
   $19 = ((($18)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + -1)|0;
   HEAP32[$19>>2] = $21;
   switch ($dyna_index|0) {
   case 13:  {
    $22 = ((($12)) + 8|0);
    HEAP16[$22>>1] = 25;
    break L1;
    break;
   }
   case 25:  {
    $23 = ((($12)) + 8|0);
    HEAP16[$23>>1] = 19;
    break L1;
    break;
   }
   case 46:  {
    $24 = ((($12)) + 8|0);
    HEAP16[$24>>1] = 24;
    break L1;
    break;
   }
   case 52:  {
    $25 = ((($12)) + 8|0);
    HEAP16[$25>>1] = 20;
    break L1;
    break;
   }
   case 53:  {
    $26 = ((($12)) + 8|0);
    HEAP16[$26>>1] = 21;
    break L1;
    break;
   }
   case 85:  {
    $27 = ((($12)) + 8|0);
    HEAP16[$27>>1] = 22;
    break L1;
    break;
   }
   case 103:  {
    $28 = ((($12)) + 8|0);
    HEAP16[$28>>1] = 26;
    break L1;
    break;
   }
   case 108:  {
    $29 = ((($12)) + 8|0);
    HEAP16[$29>>1] = 23;
    break L1;
    break;
   }
   default: {
    $30 = ((($12)) + 8|0);
    HEAP16[$30>>1] = 12345;
    break L1;
   }
   }
  }
 } while(0);
 _init_expr_state($parser,$es);
 _parse_class_body($parser,$12);
 _fini_expr_state($parser);
 $31 = HEAP32[$8>>2]|0;
 _lily_pop_lex_entry($31);
 STACKTOP = sp;return ($12|0);
}
function _init_expr_state($parser,$new_es) {
 $parser = $parser|0;
 $new_es = $new_es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($new_es)) + 22|0);
 HEAP16[$4>>1] = $3;
 $5 = HEAP16[$2>>1]|0;
 $6 = ((($new_es)) + 24|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($new_es)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($new_es)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($new_es)) + 32|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($parser)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 16|0);
 $16 = ((($new_es)) + 28|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($1)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($new_es)) + 16|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($new_es)) + 20|0);
 HEAP16[$20>>1] = 0;
 HEAP32[$new_es>>2] = 0;
 $21 = ((($new_es)) + 4|0);
 HEAP32[$21>>2] = 0;
 HEAP32[$0>>2] = $new_es;
 return;
}
function _parse_class_body($parser,$cls) {
 $parser = $parser|0;
 $cls = $cls|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $save_generic_start = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $save_generic_start = sp + 8|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_gp_save_and_hide($5,$save_generic_start);
 _parse_class_header($parser,$cls);
 $6 = ((($1)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(19);
 if ($8) {
  _parse_inheritance($parser,$cls);
  $$pr = HEAP32[$6>>2]|0;
  $9 = $$pr;
 } else {
  $9 = $7;
 }
 $10 = ($9|0)==(29);
 if ($10) {
  _parse_multiline_block_body($parser,1);
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  _determine_class_gc_flag($18);
  HEAP32[$2>>2] = $3;
  $19 = ((($parser)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_emit_leave_block($20);
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$save_generic_start>>2]|0;
  _lily_gp_restore_and_unhide($21,$22);
  STACKTOP = sp;return;
 } else {
  $11 = ((($parser)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(29)|0);
  $14 = HEAP32[$6>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise($12,1,2836,$vararg_buffer);
  // unreachable;
 }
}
function _parse_class_header($parser,$cls) {
 $parser = $parser|0;
 $cls = $cls|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $i$0 = 0, $i$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $flags = sp + 12|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_emit_new_define_var($3,$5,$cls,7250)|0);
 _lily_lexer($1);
 _collect_generics($parser);
 $7 = ((($parser)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_gp_num_in_scope($8)|0);
 $10 = $9&65535;
 $11 = ((($cls)) + 46|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($12,12);
 $13 = (_build_self_type($parser,$cls)|0);
 $14 = ((($parser)) + 44|0);
 HEAP32[$14>>2] = $13;
 HEAP32[$flags>>2] = 0;
 $15 = ((($parser)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($parser)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$14>>2]|0;
 _lily_tm_add($20,$21);
 $22 = ((($1)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 do {
  if ($24) {
   _lily_lexer($1);
   $25 = HEAP32[$22>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ((($parser)) + 76|0);
   if ($26) {
    $28 = HEAP32[$27>>2]|0;
    _lily_raise($28,1,3395,$vararg_buffer);
    // unreachable;
   } else {
    $i$0 = 1;
   }
   L5: while(1) {
    $29 = HEAP32[$19>>2]|0;
    $30 = (_get_named_arg($parser,$flags)|0);
    _lily_tm_add($29,$30);
    $31 = (($i$0) + 1)|0;
    $32 = HEAP32[$22>>2]|0;
    switch ($32|0) {
    case 1:  {
     $$lcssa = $31;
     label = 6;
     break L5;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     label = 7;
     break L5;
    }
    }
    _lily_lexer($1);
    $i$0 = $31;
   }
   if ((label|0) == 6) {
    _lily_lexer($1);
    $i$1 = $$lcssa;
    break;
   }
   else if ((label|0) == 7) {
    $33 = HEAP32[$27>>2]|0;
    $34 = (_tokname($32)|0);
    HEAP32[$vararg_buffer1>>2] = $34;
    _lily_raise($33,1,3357,$vararg_buffer1);
    // unreachable;
   }
  } else {
   $i$1 = 1;
  }
 } while(0);
 $35 = HEAP32[$19>>2]|0;
 $36 = HEAP32[$flags>>2]|0;
 $37 = ((($parser)) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_lily_tm_make($35,$36,$40,$i$1)|0);
 $42 = ((($6)) + 12|0);
 HEAP32[$42>>2] = $41;
 $43 = HEAP32[$2>>2]|0;
 $44 = HEAP32[$14>>2]|0;
 $45 = ((($41)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 _lily_emit_update_function_block($43,$44,$47);
 $48 = HEAP32[$flags>>2]|0;
 $49 = $48 & 2048;
 $50 = ($49|0)==(0);
 if ($50) {
  STACKTOP = sp;return;
 }
 $51 = HEAP32[$2>>2]|0;
 $52 = HEAP32[$15>>2]|0;
 _lily_emit_write_optargs($51,$52,$18);
 STACKTOP = sp;return;
}
function _build_self_type($parser,$cls) {
 $parser = $parser|0;
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $generics_used$01 = 0, $name = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $name = sp;
 $0 = ((($parser)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_gp_num_in_scope($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $22 = ((($cls)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $result$0 = $23;
  STACKTOP = sp;return ($result$0|0);
 }
 HEAP16[$name>>1] = 65;
 $4 = ((($parser)) + 64|0);
 $5 = ((($parser)) + 72|0);
 $generics_used$01 = $2;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = (_lily_find_class($6,0,$name)|0);
  $8 = HEAP32[$5>>2]|0;
  $9 = ((($7)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_tm_add($8,$10);
  $11 = HEAP8[$name>>0]|0;
  $12 = (($11) + 1)<<24>>24;
  HEAP8[$name>>0] = $12;
  $13 = (($generics_used$01) + -1)|0;
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  } else {
   $generics_used$01 = $13;
  }
 }
 $15 = ((($parser)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP8[$name>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = (($18) + -65)|0;
 $20 = (_lily_tm_make($16,0,$cls,$19)|0);
 $21 = ((($cls)) + 12|0);
 HEAP32[$21>>2] = $20;
 $result$0 = $20;
 STACKTOP = sp;return ($result$0|0);
}
function _get_named_arg($parser,$flags) {
 $parser = $parser|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_find_var($3,0,$5)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _lily_raise($9,1,3428,$vararg_buffer);
  // unreachable;
 }
 $11 = ((($parser)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = (_lily_emit_new_scoped_var($12,0,$13)|0);
 _lily_lexer($1);
 $15 = ((($1)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(6);
 if (!($17)) {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(6)|0);
  $21 = HEAP32[$15>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  _lily_raise($19,1,2836,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($1);
 $23 = (_get_nameless_arg($parser,$flags)|0);
 $24 = HEAP32[$flags>>2]|0;
 $25 = $24 & 2048;
 $26 = ($25|0)==(0);
 if ($26) {
  $31 = ((($14)) + 12|0);
  HEAP32[$31>>2] = $23;
  STACKTOP = sp;return ($23|0);
 } else {
  $27 = ((($23)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($14)) + 12|0);
  HEAP32[$30>>2] = $29;
  _collect_optarg_for($parser,$14);
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _collect_optarg_for($parser,$var) {
 $parser = $parser|0;
 $var = $var|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $expect$0 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($var)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $expect$0 = 41;
 } else {
  $13 = ((($3)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($9|0)==($14|0);
  if ($15) {
   $expect$0 = 42;
  } else {
   $16 = ((($3)) + 52|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($9|0)==($17|0);
   if ($18) {
    $expect$0 = 37;
   } else {
    $19 = ((($3)) + 56|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($9|0)==($20|0);
    if ($21) {
     $expect$0 = 40;
    } else {
     $22 = ((($3)) + 60|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($9|0)==($23|0);
     $$ = $24 ? 38 : 35;
     $expect$0 = $$;
    }
   }
  }
 }
 $25 = ((($1)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(27);
 if (!($27)) {
  $28 = ((($parser)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_tokname(27)|0);
  $31 = HEAP32[$25>>2]|0;
  $32 = (_tokname($31)|0);
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $32;
  _lily_raise($29,1,2836,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $33 = HEAP32[$25>>2]|0;
 $34 = ($33|0)==($expect$0|0);
 if (!($34)) {
  $35 = ((($parser)) + 76|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_tokname($expect$0)|0);
  $38 = HEAP32[$25>>2]|0;
  $39 = (_tokname($38)|0);
  HEAP32[$vararg_buffer2>>2] = $37;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $39;
  _lily_raise($36,1,2836,$vararg_buffer2);
  // unreachable;
 }
 $40 = ((($var)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&65535;
 _lily_u16_write_1($5,$42);
 $43 = ((($3)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($9|0)==($44|0);
 if ($45) {
  $46 = ((($1)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_constant_by_name($47)|0);
  switch ($48|0) {
  case 0: case 2:  {
   break;
  }
  default: {
   $49 = ((($parser)) + 76|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $47;
   _lily_raise($50,1,3458,$vararg_buffer6);
   // unreachable;
  }
  }
  $51 = ($48|0)==(0);
  $52 = $51&1;
  _lily_u16_write_2($5,43,$52);
  _lily_lexer($1);
  STACKTOP = sp;return;
 }
 switch ($expect$0|0) {
 case 35:  {
  $53 = ((($1)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_lily_find_scoped_variant($9,$54)|0);
  $56 = ($55|0)==(0|0);
  if ($56) {
   $57 = ((($parser)) + 76|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($9)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$53>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $60;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $61;
   _lily_raise($58,1,3507,$vararg_buffer9);
   // unreachable;
  }
  $62 = ((($55)) + 6|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 & 16;
  $65 = ($64<<16>>16)==(0);
  if ($65) {
   $66 = ((($parser)) + 76|0);
   $67 = HEAP32[$66>>2]|0;
   _lily_raise($67,1,3548,$vararg_buffer13);
   // unreachable;
  }
  $68 = ((($55)) + 8|0);
  $69 = HEAP16[$68>>1]|0;
  _lily_u16_write_2($5,45,$69);
  _lily_lexer($1);
  STACKTOP = sp;return;
  break;
 }
 case 40:  {
  $70 = ((($1)) + 32|0);
  $71 = $70;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = $73&65535;
  $78 = $77 & 255;
  _lily_u16_write_2($5,44,$78);
  _lily_lexer($1);
  STACKTOP = sp;return;
  break;
 }
 case 41:  {
  $83 = ((($1)) + 32|0);
  $84 = $83;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (_i64Add(($86|0),($89|0),32768,0)|0);
  $91 = tempRet0;
  $92 = ($91>>>0)<(0);
  $93 = ($90>>>0)<(65536);
  $94 = ($91|0)==(0);
  $95 = $94 & $93;
  $96 = $92 | $95;
  if ($96) {
   $97 = $86&65535;
   _lily_u16_write_2($5,42,$97);
   _lily_lexer($1);
   STACKTOP = sp;return;
  } else {
   $98 = (_lily_get_integer_literal($3,$86,$89)|0);
   $99 = ((($98)) + 6|0);
   $100 = HEAP16[$99>>1]|0;
   _lily_u16_write_2($5,41,$100);
   _lily_lexer($1);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $79 = ((($1)) + 48|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 6|0);
  $82 = HEAP16[$81>>1]|0;
  _lily_u16_write_2($5,41,$82);
  _lily_lexer($1);
  STACKTOP = sp;return;
 }
 }
}
function _constant_by_name($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_shorthash_for_name($name)|0);
 $1 = tempRet0;
 $2 = (16);
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($0|0);
 $9 = ($7|0)==($1|0);
 $10 = $8 & $9;
 if ($10) {
  $11 = HEAP32[2]|0;
  $12 = (_strcmp($11,$name)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $14 = (16);
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)>($1>>>0);
 $21 = ($16>>>0)>($0>>>0);
 $22 = ($19|0)==($1|0);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = (32);
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)==($0|0);
 $32 = ($30|0)==($1|0);
 $33 = $31 & $32;
 if ($33) {
  $34 = HEAP32[(24)>>2]|0;
  $35 = (_strcmp($34,$name)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $37 = (32);
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>($1>>>0);
 $44 = ($39>>>0)>($0>>>0);
 $45 = ($42|0)==($1|0);
 $46 = $45 & $44;
 $47 = $43 | $46;
 if ($47) {
  $$0 = -1;
  return ($$0|0);
 }
 $48 = (48);
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($50|0)==($0|0);
 $55 = ($53|0)==($1|0);
 $56 = $54 & $55;
 if ($56) {
  $57 = HEAP32[(40)>>2]|0;
  $58 = (_strcmp($57,$name)|0);
  $59 = ($58|0)==(0);
  if ($59) {
   $$0 = 2;
   return ($$0|0);
  }
 }
 $60 = (48);
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65>>>0)>($1>>>0);
 $67 = ($62>>>0)>($0>>>0);
 $68 = ($65|0)==($1|0);
 $69 = $68 & $67;
 $70 = $66 | $69;
 if ($70) {
  $$0 = -1;
  return ($$0|0);
 }
 $71 = (64);
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = ($73|0)==($0|0);
 $78 = ($76|0)==($1|0);
 $79 = $77 & $78;
 if ($79) {
  $80 = HEAP32[(56)>>2]|0;
  $81 = (_strcmp($80,$name)|0);
  $82 = ($81|0)==(0);
  if ($82) {
   $$0 = 3;
   return ($$0|0);
  }
 }
 $83 = (64);
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88>>>0)>($1>>>0);
 $90 = ($85>>>0)>($0>>>0);
 $91 = ($88|0)==($1|0);
 $92 = $91 & $90;
 $93 = $89 | $92;
 if ($93) {
  $$0 = -1;
  return ($$0|0);
 }
 $94 = (80);
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = ($96|0)==($0|0);
 $101 = ($99|0)==($1|0);
 $102 = $100 & $101;
 if ($102) {
  $103 = HEAP32[(72)>>2]|0;
  $104 = (_strcmp($103,$name)|0);
  $105 = ($104|0)==(0);
  if ($105) {
   $$0 = 4;
   return ($$0|0);
  }
 }
 $106 = (80);
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111>>>0)>($1>>>0);
 $113 = ($108>>>0)>($0>>>0);
 $114 = ($111|0)==($1|0);
 $115 = $114 & $113;
 $116 = $112 | $115;
 if ($116) {
  $$0 = -1;
  return ($$0|0);
 }
 $117 = (96);
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($117) + 4)|0;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = ($119|0)==($0|0);
 $124 = ($122|0)==($1|0);
 $125 = $123 & $124;
 if ($125) {
  $126 = HEAP32[(88)>>2]|0;
  $127 = (_strcmp($126,$name)|0);
  $128 = ($127|0)==(0);
  if ($128) {
   $$0 = 5;
   return ($$0|0);
  }
 }
 $$0 = -1;
 return ($$0|0);
}
function _shorthash_for_name($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ch$01 = 0, $i$02 = 0, $shift$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $19 = 0;$20 = 0;
  tempRet0 = ($19);
  return ($20|0);
 } else {
  $11 = 0;$3 = $0;$9 = 0;$ch$01 = $name;$i$02 = 0;$shift$03 = 0;
 }
 while(1) {
  $2 = $3 << 24 >> 24;
  $4 = ($2|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_bitshift64Shl(($2|0),($5|0),($shift$03|0))|0);
  $7 = tempRet0;
  $8 = $6 | $9;
  $10 = $7 | $11;
  $12 = ((($ch$01)) + 1|0);
  $13 = (($i$02) + 1)|0;
  $14 = (($shift$03) + 8)|0;
  $15 = HEAP8[$12>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  $17 = ($13|0)!=(8);
  $18 = $17 & $16;
  if ($18) {
   $11 = $10;$3 = $15;$9 = $8;$ch$01 = $12;$i$02 = $13;$shift$03 = $14;
  } else {
   $19 = $10;$20 = $8;
   break;
  }
 }
 tempRet0 = ($19);
 return ($20|0);
}
function _parse_inheritance($parser,$cls) {
 $parser = $parser|0;
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35);
 if (!($4)) {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_tokname(35)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (_tokname($8)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _lily_raise($6,1,2836,$vararg_buffer);
  // unreachable;
 }
 $10 = (_resolve_class_name($parser)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($parser)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($1)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $15;
  _lily_raise($13,1,2861,$vararg_buffer2);
  // unreachable;
 }
 $16 = ($10|0)==($cls|0);
 if ($16) {
  $17 = ((($parser)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  _lily_raise($18,1,3611,$vararg_buffer5);
  // unreachable;
 }
 $19 = ((($10)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20<<16>>16)==(3);
 if ($21) {
  $26 = ((($parser)) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($1)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $29;
  _lily_raise($27,1,3647,$vararg_buffer7);
  // unreachable;
 }
 $22 = ((($10)) + 6|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 & 132;
 $25 = ($24<<16>>16)==(0);
 if (!($25)) {
  $26 = ((($parser)) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($1)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $29;
  _lily_raise($27,1,3647,$vararg_buffer7);
  // unreachable;
 }
 $30 = ((($cls)) + 32|0);
 HEAP32[$30>>2] = $10;
 $31 = ((($10)) + 48|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ((($cls)) + 48|0);
 HEAP16[$33>>1] = $32;
 $34 = (_lily_find_method($10,7250)|0);
 $35 = ((($parser)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 _rewind_expr_state($36);
 _lily_es_enter_tree($36,0);
 _lily_es_push_inherited_new($36,$34);
 _lily_es_collect_arg($36);
 _lily_lexer($1);
 $37 = HEAP32[$2>>2]|0;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $43 = HEAP32[$35>>2]|0;
  _lily_es_leave_tree($43);
  $44 = ((($parser)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  _lily_emit_eval_expr($45,$36);
  STACKTOP = sp;return;
 }
 _lily_lexer($1);
 $39 = HEAP32[$2>>2]|0;
 $40 = ($39|0)==(1);
 if ($40) {
  $41 = ((($parser)) + 76|0);
  $42 = HEAP32[$41>>2]|0;
  _lily_raise($42,1,3678,$vararg_buffer10);
  // unreachable;
 }
 _expression_raw($parser,4);
 _lily_lexer($1);
 $44 = ((($parser)) + 60|0);
 $45 = HEAP32[$44>>2]|0;
 _lily_emit_eval_expr($45,$36);
 STACKTOP = sp;return;
}
function _rewind_expr_state($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$es>>2] = 0;
 $0 = ((($es)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($es)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($es)) + 8|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _expression_raw($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $$pr = 0, $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 $1 = ((($parser)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($state|0)==(4);
 $$state = $3 ? 3 : $state;
 HEAP32[$0>>2] = $$state;
 $4 = ((($2)) + 40|0);
 $5 = ((($parser)) + 24|0);
 $6 = ((($parser)) + 76|0);
 $7 = ((($parser)) + 24|0);
 $8 = ((($parser)) + 24|0);
 $9 = ((($parser)) + 24|0);
 $10 = ((($parser)) + 24|0);
 $11 = ((($parser)) + 24|0);
 $12 = ((($parser)) + 24|0);
 $13 = ((($parser)) + 24|0);
 $14 = ((($parser)) + 24|0);
 $15 = ((($parser)) + 24|0);
 $16 = ((($parser)) + 28|0);
 $17 = ((($2)) + 12|0);
 $18 = ((($2)) + 20|0);
 $19 = ((($parser)) + 24|0);
 L1: while(1) {
  $20 = HEAP32[$4>>2]|0;
  $21 = (((592 + (($20*12)|0)|0)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)==(35);
  L3: do {
   if ($23) {
    $24 = HEAP32[$0>>2]|0;
    $25 = ($24|0)==(2);
    if ($25) {
     label = 4;
     break L1;
    }
    _expression_word($parser,$0);
    label = 51;
   } else {
    $30 = ($22|0)==(-1);
    if (!($30)) {
     $31 = HEAP32[$0>>2]|0;
     $32 = ($31|0)==(2);
     if ($32) {
      $33 = HEAP32[$19>>2]|0;
      _lily_es_push_binary_op($33,$22);
      HEAP32[$0>>2] = 1;
      break;
     }
     $34 = ($20|0)==(17);
     if (!($34)) {
      label = 13;
      break L1;
     }
     _expression_unary($parser,$0);
     label = 51;
     break;
    }
    do {
     switch ($20|0) {
     case 0:  {
      $35 = HEAP32[$0>>2]|0;
      $36 = $35 | 2;
      $37 = ($36|0)==(3);
      if ($37) {
       $38 = HEAP32[$8>>2]|0;
       _lily_es_enter_tree($38,4);
       HEAP32[$0>>2] = 1;
       break L3;
      }
      $39 = ($35|0)==(2);
      if (!($39)) {
       label = 51;
       break L3;
      }
      $40 = HEAP32[$9>>2]|0;
      _lily_es_enter_tree($40,0);
      HEAP32[$0>>2] = 3;
      break L3;
      break;
     }
     case 4:  {
      $41 = HEAP32[$0>>2]|0;
      $42 = $41 | 2;
      $43 = ($42|0)==(3);
      if ($43) {
       $44 = HEAP32[$10>>2]|0;
       _lily_es_enter_tree($44,2);
       HEAP32[$0>>2] = 3;
       break L3;
      }
      $45 = ($41|0)==(2);
      if (!($45)) {
       label = 51;
       break L3;
      }
      $46 = HEAP32[$11>>2]|0;
      _lily_es_enter_tree($46,1);
      HEAP32[$0>>2] = 1;
      break L3;
      break;
     }
     case 36:  {
      $47 = HEAP32[$0>>2]|0;
      $48 = ($47|0)==(2);
      if ($48) {
       label = 24;
       break L1;
      }
      _expression_property($parser,$0);
      label = 51;
      break L3;
      break;
     }
     case 31:  {
      $49 = HEAP32[$0>>2]|0;
      $50 = ($49|0)==(2);
      if ($50) {
       label = 27;
       break L1;
      }
      $51 = HEAP32[$12>>2]|0;
      _lily_es_enter_tree($51,12);
      HEAP32[$0>>2] = 3;
      break L3;
      break;
     }
     case 32: case 33: case 1:  {
      $52 = HEAP32[$0>>2]|0;
      $53 = ($52|0)==(1);
      if ($53) {
       label = 31;
       break L1;
      }
      $54 = HEAP32[$13>>2]|0;
      $55 = ((($54)) + 20|0);
      $56 = HEAP16[$55>>1]|0;
      $57 = ($56<<16>>16)==(0);
      if ($57) {
       label = 31;
       break L1;
      }
      _check_valid_close_tok($parser);
      $58 = HEAP32[$13>>2]|0;
      _lily_es_leave_tree($58);
      if ($3) {
       $59 = HEAP32[$4>>2]|0;
       $60 = ($59|0)==(1);
       if ($60) {
        $61 = HEAP32[$13>>2]|0;
        $62 = ((($61)) + 20|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = ($63<<16>>16)==(0);
        if ($64) {
         label = 36;
         break L1;
        }
       }
      }
      HEAP32[$0>>2] = 2;
      break L3;
      break;
     }
     case 40: case 39: case 38: case 37: case 42: case 41:  {
      _expression_literal($parser,$0);
      label = 51;
      break L3;
      break;
     }
     case 43:  {
      _expression_dot($parser,$0);
      label = 51;
      break L3;
      break;
     }
     case 7: case 17:  {
      _expression_unary($parser,$0);
      label = 51;
      break L3;
      break;
     }
     case 30:  {
      $65 = HEAP32[$0>>2]|0;
      $66 = ($65|0)==(2);
      if ($66) {
       $67 = HEAP32[$14>>2]|0;
       _lily_es_enter_tree($67,0);
      }
      $68 = HEAP32[$15>>2]|0;
      $69 = ((($68)) + 24|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = HEAP32[$16>>2]|0;
      $73 = HEAP32[$17>>2]|0;
      _lily_sp_insert($72,$73,$69);
      $74 = HEAP32[$15>>2]|0;
      $75 = HEAP32[$18>>2]|0;
      _lily_es_push_text($74,15,$75,$71);
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(2);
      if ($77) {
       $78 = HEAP32[$15>>2]|0;
       _lily_es_leave_tree($78);
      }
      HEAP32[$0>>2] = 2;
      break L3;
      break;
     }
     default: {
      $79 = (((592 + (($20*12)|0)|0)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0);
      if (!($81)) {
       $82 = HEAP32[$7>>2]|0;
       $83 = ((($82)) + 20|0);
       $84 = HEAP16[$83>>1]|0;
       $85 = ($84<<16>>16)==(0);
       $86 = HEAP32[$0>>2]|0;
       $87 = ($86|0)==(2);
       $or$cond5 = $85 & $87;
       if ($or$cond5) {
        label = 47;
        break L1;
       }
      }
      $88 = HEAP32[$4>>2]|0;
      switch ($88|0) {
      case 34: case 2:  {
       break;
      }
      default: {
       label = 50;
       break L1;
      }
      }
      _expression_comma_arrow($parser,$0);
      label = 51;
      break L3;
     }
     }
    } while(0);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   $$pr = HEAP32[$0>>2]|0;
   switch ($$pr|0) {
   case 5:  {
    label = 56;
    break L1;
    break;
   }
   case 6:  {
    label = 52;
    break L1;
    break;
   }
   default: {
   }
   }
   $92 = $$pr & 8;
   $93 = ($92|0)==(0);
   if (!($93)) {
    $94 = $$pr & -9;
    HEAP32[$0>>2] = $94;
    continue;
   }
  }
  _lily_lexer($2);
 }
 switch (label|0) {
  case 4: {
   $26 = HEAP32[$5>>2]|0;
   $27 = ((($26)) + 20|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = ($28<<16>>16)==(0);
   if ($29) {
    HEAP32[$0>>2] = 5;
    STACKTOP = sp;return;
   } else {
    HEAP32[$0>>2] = 6;
    $89 = HEAP32[$6>>2]|0;
    $90 = HEAP32[$4>>2]|0;
    $91 = (_tokname($90)|0);
    HEAP32[$vararg_buffer>>2] = $91;
    _lily_raise($89,1,4207,$vararg_buffer);
    // unreachable;
   }
   break;
  }
  case 13: {
   HEAP32[$0>>2] = 6;
   $89 = HEAP32[$6>>2]|0;
   $90 = HEAP32[$4>>2]|0;
   $91 = (_tokname($90)|0);
   HEAP32[$vararg_buffer>>2] = $91;
   _lily_raise($89,1,4207,$vararg_buffer);
   // unreachable;
   break;
  }
  case 24: {
   HEAP32[$0>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 27: {
   HEAP32[$0>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 31: {
   HEAP32[$0>>2] = 6;
   $89 = HEAP32[$6>>2]|0;
   $90 = HEAP32[$4>>2]|0;
   $91 = (_tokname($90)|0);
   HEAP32[$vararg_buffer>>2] = $91;
   _lily_raise($89,1,4207,$vararg_buffer);
   // unreachable;
   break;
  }
  case 36: {
   HEAP32[$0>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 47: {
   HEAP32[$0>>2] = 5;
   STACKTOP = sp;return;
   break;
  }
  case 50: {
   HEAP32[$0>>2] = 6;
   $89 = HEAP32[$6>>2]|0;
   $90 = HEAP32[$4>>2]|0;
   $91 = (_tokname($90)|0);
   HEAP32[$vararg_buffer>>2] = $91;
   _lily_raise($89,1,4207,$vararg_buffer);
   // unreachable;
   break;
  }
  case 52: {
   $89 = HEAP32[$6>>2]|0;
   $90 = HEAP32[$4>>2]|0;
   $91 = (_tokname($90)|0);
   HEAP32[$vararg_buffer>>2] = $91;
   _lily_raise($89,1,4207,$vararg_buffer);
   // unreachable;
   break;
  }
  case 56: {
   STACKTOP = sp;return;
   break;
  }
 }
}
function _expression_word($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $search_module$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_resolve_module($parser)|0);
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_find_var($1,$4,$6)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _dispatch_word_as_var($parser,$7,$state);
  STACKTOP = sp;return;
 }
 $9 = ($4|0)==(0|0);
 L5: do {
  if ($9) {
   $10 = HEAP32[$5>>2]|0;
   $11 = (_constant_by_name($10)|0);
   switch ($11|0) {
   case -1:  {
    break L5;
    break;
   }
   case 1:  {
    $12 = ((($parser)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $15 = ((($parser)) + 76|0);
     $16 = HEAP32[$15>>2]|0;
     _lily_raise($16,1,3763,$vararg_buffer);
     // unreachable;
    }
    break;
   }
   default: {
   }
   }
   _push_constant($parser,$11);
   HEAP32[$state>>2] = 2;
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$5>>2]|0;
 $19 = (_lily_find_class($17,$4,$18)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  _dispatch_word_as_class($parser,$19,$state);
  STACKTOP = sp;return;
 }
 if ($9) {
  $21 = ((($parser)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = ((($22)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$5>>2]|0;
   $27 = (_lily_find_method($25,$26)|0);
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = ((($parser)) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    _lily_es_push_method($30,$27);
    HEAP32[$state>>2] = 2;
    STACKTOP = sp;return;
   }
  }
  $31 = ((($1)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $search_module$0 = $32;
 } else {
  $search_module$0 = $4;
 }
 $33 = ((($search_module$0)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $39 = ((($parser)) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $41;
  _lily_raise($40,1,3909,$vararg_buffer1);
  // unreachable;
 }
 $36 = HEAP32[$5>>2]|0;
 $37 = (_try_toplevel_dynaload($parser,$search_module$0,$36)|0);
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = ((($parser)) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $41;
  _lily_raise($40,1,3909,$vararg_buffer1);
  // unreachable;
 }
 _dispatch_dynaload($parser,$37,$state);
 STACKTOP = sp;return;
}
function _dispatch_word_as_var($parser,$var,$state) {
 $parser = $parser|0;
 $var = $var|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($var)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($var)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  _lily_raise($6,1,3722,$vararg_buffer);
  // unreachable;
 }
 $9 = $2 & 64;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _push_maybe_method($parser,$var);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 }
 $11 = $2 & 512;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = ((($parser)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_es_push_global_var($14,$var);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 }
 $15 = ((($var)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($parser)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 82|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($16|0)==($21|0);
 $23 = ((($parser)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 if ($22) {
  _lily_es_push_local_var($24,$var);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 } else {
  _lily_es_push_upvalue($24,$var);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _push_maybe_method($parser,$func) {
 $parser = $parser|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($func)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($parser)) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_lily_class_greater_eq($1,$7)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = ((($parser)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_es_push_method($11,$func);
    return;
   }
  }
 }
 $12 = ((($parser)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_es_push_defined_func($13,$func);
 return;
}
function _push_constant($parser,$key_id) {
 $parser = $parser|0;
 $key_id = $key_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($key_id|0) {
 case 4:  {
  $4 = ((($parser)) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7&65535;
  _lily_es_push_integer($1,$8);
  return;
  break;
 }
 case 3:  {
  $9 = ((($3)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_lily_get_string_literal($3,$12)|0);
  _push_literal($parser,$13);
  return;
  break;
 }
 case 5:  {
  $14 = ((($parser)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_lily_get_string_literal($3,$19)|0);
  _push_literal($parser,$20);
  return;
  break;
 }
 case 0:  {
  _lily_es_push_boolean($1,1);
  return;
  break;
 }
 case 2:  {
  _lily_es_push_boolean($1,0);
  return;
  break;
 }
 case 1:  {
  _lily_es_push_self($1);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _push_literal($parser,$lit) {
 $parser = $parser|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $literal_cls$0 = 0, $literal_cls$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$lit>>1]|0;
 L1: do {
  switch ($0<<16>>16) {
  case 1:  {
   $1 = ((($parser)) + 64|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ((($2)) + 44|0);
   $literal_cls$0$in = $3;
   break;
  }
  case 2:  {
   $4 = ((($parser)) + 64|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 48|0);
   $literal_cls$0$in = $6;
   break;
  }
  case 3:  {
   $7 = ((($parser)) + 64|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 52|0);
   $literal_cls$0$in = $9;
   break;
  }
  default: {
   $10 = ($0<<16>>16)==(5);
   $11 = ((($parser)) + 64|0);
   $12 = HEAP32[$11>>2]|0;
   if ($10) {
    $13 = ((($12)) + 60|0);
    $literal_cls$0$in = $13;
    break L1;
   } else {
    $14 = ((($12)) + 92|0);
    $literal_cls$0$in = $14;
    break L1;
   }
  }
  }
 } while(0);
 $literal_cls$0 = HEAP32[$literal_cls$0$in>>2]|0;
 $15 = ((($parser)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($literal_cls$0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($lit)) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 _lily_es_push_literal($16,$18,$20);
 return;
}
function _dispatch_word_as_class($parser,$cls,$state) {
 $parser = $parser|0;
 $cls = $cls|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cls)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(3);
 if ($2) {
  $3 = ((($parser)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_es_push_variant($4,$cls);
  HEAP32[$state>>2] = 2;
  return;
 } else {
  _expression_class_access($parser,$cls,$state);
  return;
 }
}
function _expression_class_access($parser,$cls,$state) {
 $parser = $parser|0;
 $cls = $cls|0;
 $state = $state|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(43);
 if (!($4)) {
  $5 = ((($cls)) + 6|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & 4;
  $8 = ($7<<16>>16)==(0);
  if (!($8)) {
   $9 = ((($parser)) + 76|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_raise($10,1,3799,$vararg_buffer);
   // unreachable;
  }
  $11 = (_lily_find_or_dl_member($parser,$cls,7250)|0);
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = ((($parser)) + 76|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($cls)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $16;
   _lily_raise($14,1,3849,$vararg_buffer1);
   // unreachable;
  }
  $17 = ((($parser)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  _lily_es_push_static_func($18,$11);
  HEAP32[$state>>2] = 10;
  STACKTOP = sp;return;
 }
 HEAP32[$state>>2] = 2;
 _lily_lexer($1);
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(35);
 if (!($20)) {
  $21 = ((($parser)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_tokname(35)|0);
  $24 = HEAP32[$2>>2]|0;
  $25 = (_tokname($24)|0);
  HEAP32[$vararg_buffer3>>2] = $23;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $25;
  _lily_raise($22,1,2836,$vararg_buffer3);
  // unreachable;
 }
 $26 = ((($1)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_lily_find_or_dl_member($parser,$cls,$27)|0);
 $29 = ($28|0)==(0|0);
 do {
  if (!($29)) {
   $30 = ((($28)) + 4|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ($31<<16>>16)==(1);
   if ($32) {
    $33 = ((($28)) + 40|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==($cls|0);
    if (!($35)) {
     break;
    }
    $$pr = HEAP16[$30>>1]|0;
    $36 = $$pr;
   } else {
    $36 = $31;
   }
   $37 = ($36<<16>>16)==(4);
   if (!($37)) {
    $38 = ((($parser)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    _lily_es_push_static_func($39,$28);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $40 = ((($cls)) + 6|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 & 4;
 $43 = ($42<<16>>16)==(0);
 if ($43) {
  $49 = ((($parser)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($cls)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $52;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $53;
  _lily_raise($50,1,3887,$vararg_buffer7);
  // unreachable;
 }
 $44 = HEAP32[$26>>2]|0;
 $45 = (_lily_find_scoped_variant($cls,$44)|0);
 $46 = ($45|0)==(0|0);
 if ($46) {
  $49 = ((($parser)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($cls)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $52;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $53;
  _lily_raise($50,1,3887,$vararg_buffer7);
  // unreachable;
 }
 $47 = ((($parser)) + 24|0);
 $48 = HEAP32[$47>>2]|0;
 _lily_es_push_variant($48,$45);
 STACKTOP = sp;return;
}
function _lily_find_or_dl_member($parser,$cls,$name) {
 $parser = $parser|0;
 $cls = $cls|0;
 $name = $name|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$0 = 0, $entry$1 = 0, $index$0 = 0, $index$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_find_var($1,0,$name)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($cls|0);
  if ($6) {
   $$2 = $2;
   return ($$2|0);
  }
 }
 $7 = (_lily_find_member($cls,$name)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$2 = $7;
  return ($$2|0);
 }
 $9 = ((($cls)) + 50|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $$2 = 0;
  return ($$2|0);
 }
 $12 = $10&65535;
 $13 = ((($cls)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($12<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $entry$0 = $18;$index$0 = $12;
 while(1) {
  $19 = ((($entry$0)) + 2|0);
  $20 = (_strcmp($name,$19)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $entry$1 = $entry$0;$index$1 = $index$0;
   break;
  }
  $22 = (($index$0) + 1)|0;
  $23 = (($16) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(109);
  if ($26) {
   $entry$0 = $24;$index$0 = $22;
  } else {
   $entry$1 = $24;$index$1 = $22;
   break;
  }
 }
 $27 = HEAP8[$entry$1>>0]|0;
 $28 = ($27<<24>>24)==(109);
 if (!($28)) {
  $$2 = 0;
  return ($$2|0);
 }
 $29 = (_dynaload_function($parser,$14,$cls,$index$1)|0);
 $$2 = $29;
 return ($$2|0);
}
function _dispatch_dynaload($parser,$dl_item,$state) {
 $parser = $parser|0;
 $dl_item = $dl_item|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dl_item)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(1);
 if (!($4)) {
  _dispatch_word_as_class($parser,$dl_item,$state);
  return;
 }
 $5 = ((($dl_item)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 64;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  _lily_es_push_global_var($1,$dl_item);
 } else {
  _lily_es_push_defined_func($1,$dl_item);
 }
 HEAP32[$state>>2] = 2;
 return;
}
function _expression_unary($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$state>>2]|0;
 $1 = ($0|0)==(2);
 L1: do {
  if ($1) {
   $storemerge = 6;
  } else {
   $2 = ((($parser)) + 56|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($3)) + 40|0);
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 17:  {
    $6 = ((($parser)) + 24|0);
    $7 = HEAP32[$6>>2]|0;
    _lily_es_push_unary_op($7,17);
    $storemerge = 1;
    break L1;
    break;
   }
   case 7:  {
    $8 = ((($parser)) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    _lily_es_push_unary_op($9,16);
    $storemerge = 1;
    break L1;
    break;
   }
   default: {
    $storemerge = 1;
    break L1;
   }
   }
  }
 } while(0);
 HEAP32[$state>>2] = $storemerge;
 return;
}
function _expression_property($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($parser)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise($4,1,3935,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($parser)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_lily_find_property($11,$8)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($parser)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 18|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = ($19<<16>>16)==(12);
  $$ = $20 ? 3993 : 18083;
  $21 = ((($parser)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $8;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $24;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $$;
  _lily_raise($22,1,4019,$vararg_buffer1);
  // unreachable;
 } else {
  $25 = ((($parser)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  _lily_es_push_property($26,$12);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _check_valid_close_tok($parser) {
 $parser = $parser|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $expect$0 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_es_get_saved_tree($5)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 255;
 $10 = $9 | 4;
 $11 = ($10<<16>>16)==(4);
 $12 = ($9<<16>>16)==(11);
 $or$cond3 = $12 | $11;
 $13 = ($9<<16>>16)==(12);
 $$ = $13 ? 32 : 33;
 $expect$0 = $or$cond3 ? 1 : $$;
 $14 = ($3|0)==($expect$0|0);
 if ($14) {
  STACKTOP = sp;return;
 } else {
  $15 = ((($parser)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_tokname($expect$0)|0);
  $18 = (_tokname($3)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  _lily_raise($16,1,4053,$vararg_buffer);
  // unreachable;
 }
}
function _expression_literal($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scan_string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $scan_string = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$state>>2]|0;
 $5 = ($4|0)==(2);
 $$off = (($3) + -41)|0;
 $6 = ($$off>>>0)<(2);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (_maybe_digit_fixup($parser)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
  HEAP32[$state>>2] = 5;
  STACKTOP = sp;return;
 }
 if ($5) {
  HEAP32[$state>>2] = 6;
  STACKTOP = sp;return;
 }
 switch ($3|0) {
 case 39:  {
  $9 = ((($parser)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($parser)) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($parser)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_mb_flush($14);
  $15 = ((($1)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  _lily_mb_add($14,$16);
  $17 = (_lily_mb_get($14)|0);
  HEAP32[$scan_string>>2] = $17;
  _lily_es_enter_tree($10,22);
  $18 = ((($10)) + 24|0);
  $19 = ((($parser)) + 28|0);
  $20 = ((($1)) + 20|0);
  while(1) {
   $21 = (_lily_scan_interpolation_piece($1,$scan_string)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $28 = HEAP32[$15>>2]|0;
    $29 = (_lily_get_string_literal($12,$28)|0);
    _push_literal($parser,$29);
   } else {
    $23 = HEAP16[$18>>1]|0;
    $24 = $23&65535;
    $25 = HEAP32[$19>>2]|0;
    $26 = HEAP32[$15>>2]|0;
    _lily_sp_insert($25,$26,$18);
    $27 = HEAP32[$20>>2]|0;
    _lily_es_push_text($10,23,$27,$24);
   }
   $30 = HEAP32[$9>>2]|0;
   _lily_es_collect_arg($30);
   $31 = HEAP32[$scan_string>>2]|0;
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    break;
   }
  }
  _lily_es_leave_tree($10);
  _lily_mb_flush($14);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 41:  {
  $34 = ((($1)) + 32|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (_i64Add(($37|0),($40|0),32768,0)|0);
  $42 = tempRet0;
  $43 = ($42>>>0)<(0);
  $44 = ($41>>>0)<(65536);
  $45 = ($42|0)==(0);
  $46 = $45 & $44;
  $47 = $43 | $46;
  if ($47) {
   $48 = ((($parser)) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $37&65535;
   _lily_es_push_integer($49,$50);
  } else {
   $51 = ((($parser)) + 64|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_lily_get_integer_literal($52,$37,$40)|0);
   _push_literal($parser,$53);
  }
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 40:  {
  $54 = ((($parser)) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($1)) + 32|0);
  $57 = $56;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $59&255;
  _lily_es_push_byte($55,$63);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $64 = ((($1)) + 48|0);
  $65 = HEAP32[$64>>2]|0;
  _push_literal($parser,$65);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
 }
 }
}
function _maybe_digit_fixup($parser) {
 $parser = $parser|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fixed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(45);
 switch ($8<<24>>24) {
 case 43: case 45:  {
  break;
 }
 default: {
  $fixed$0 = 0;
  return ($fixed$0|0);
 }
 }
 $$ = $9&1;
 $10 = ((($parser)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_es_push_binary_op($11,$$);
 _lily_lexer_digit_rescan($1);
 $12 = ((($1)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(41);
 if (!($14)) {
  $34 = ((($1)) + 48|0);
  $35 = HEAP32[$34>>2]|0;
  _push_literal($parser,$35);
  $fixed$0 = 1;
  return ($fixed$0|0);
 }
 $15 = ((($1)) + 32|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Add(($18|0),($21|0),32768,0)|0);
 $23 = tempRet0;
 $24 = ($23>>>0)<(0);
 $25 = ($22>>>0)<(65536);
 $26 = ($23|0)==(0);
 $27 = $26 & $25;
 $28 = $24 | $27;
 if ($28) {
  $29 = HEAP32[$10>>2]|0;
  $30 = $18&65535;
  _lily_es_push_integer($29,$30);
  $fixed$0 = 1;
  return ($fixed$0|0);
 } else {
  $31 = ((($parser)) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_lily_get_integer_literal($32,$18,$21)|0);
  _push_literal($parser,$33);
  $fixed$0 = 1;
  return ($fixed$0|0);
 }
 return (0)|0;
}
function _expression_dot($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $option_cls$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 35:  {
  $4 = ((($parser)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 24|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = ((($parser)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_sp_insert($10,$12,$6);
  _lily_es_push_text($5,8,0,$8);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 48:  {
  _lily_lexer($1);
  $13 = (_get_type_raw($parser,0)|0);
  $14 = ((($parser)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_lily_find_class($15,$17,4092)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $20 = HEAP32[$16>>2]|0;
   $21 = (_find_run_class_dynaload($parser,$20,4092)|0);
   $option_cls$0 = $21;
  } else {
   $option_cls$0 = $18;
  }
  $22 = ((($parser)) + 72|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_tm_add($23,$13);
  $24 = HEAP32[$22>>2]|0;
  $25 = (_lily_tm_make($24,0,$option_cls$0,1)|0);
  $26 = ((($parser)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  _lily_es_enter_typecast($27,$25);
  $28 = HEAP32[$26>>2]|0;
  _lily_es_leave_tree($28);
  HEAP32[$state>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $29 = ((($parser)) + 76|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_tokname(35)|0);
  $32 = (_tokname(48)|0);
  $33 = HEAP32[$2>>2]|0;
  $34 = (_tokname($33)|0);
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $32;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _lily_raise($30,1,4099,$vararg_buffer);
  // unreachable;
 }
 }
}
function _expression_comma_arrow($parser,$state) {
 $parser = $parser|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_raise($8,1,4139,$vararg_buffer);
  // unreachable;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (_lily_es_get_saved_tree($9)|0);
 $11 = ((($1)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 L4: do {
  switch ($12|0) {
  case 2:  {
   $13 = ((($10)) + 4|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 & 255;
   $16 = ($15<<16>>16)==(3);
   if ($16) {
    $17 = ((($10)) + 14|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 & 1;
    $20 = ($19<<16>>16)==(0);
    if ($20) {
     $21 = ((($parser)) + 76|0);
     $22 = HEAP32[$21>>2]|0;
     _lily_raise($22,1,4166,$vararg_buffer1);
     // unreachable;
    }
   }
   break;
  }
  case 34:  {
   $23 = ((($10)) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 & 255;
   switch ($25<<16>>16) {
   case 2:  {
    $26 = ((($10)) + 14|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)==(0);
    if ($28) {
     $29 = $24 & -256;
     $30 = $29 | 3;
     HEAP16[$23>>1] = $30;
     break L4;
    } else {
     $31 = ((($parser)) + 76|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (_tokname(34)|0);
     HEAP32[$vararg_buffer3>>2] = $33;
     _lily_raise($32,1,4207,$vararg_buffer3);
     // unreachable;
    }
    break;
   }
   case 3:  {
    $34 = ((($10)) + 14|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35 & 1;
    $37 = ($36<<16>>16)==(0);
    if ($37) {
     break L4;
    }
    $38 = ((($parser)) + 76|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (_tokname(34)|0);
    HEAP32[$vararg_buffer5>>2] = $40;
    _lily_raise($39,1,4207,$vararg_buffer5);
    // unreachable;
    break;
   }
   default: {
    $38 = ((($parser)) + 76|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (_tokname(34)|0);
    HEAP32[$vararg_buffer5>>2] = $40;
    _lily_raise($39,1,4207,$vararg_buffer5);
    // unreachable;
   }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $41 = HEAP32[$2>>2]|0;
 _lily_es_collect_arg($41);
 HEAP32[$state>>2] = 1;
 STACKTOP = sp;return;
}
function _parse_multiline_block_body($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($multi|0)==(0);
 if ($2) {
  $3 = ((($parser)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise($4,1,4230,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $5 = ((($1)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(3);
 if ($7) {
  _lily_lexer($1);
  STACKTOP = sp;return;
 }
 _statement($parser,1);
 $$pr = HEAP32[$5>>2]|0;
 $8 = ($$pr|0)==(3);
 if ($8) {
  _lily_lexer($1);
  STACKTOP = sp;return;
 } else {
  $9 = ((($parser)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_tokname(3)|0);
  $12 = HEAP32[$5>>2]|0;
  $13 = (_tokname($12)|0);
  HEAP32[$vararg_buffer1>>2] = $11;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $13;
  _lily_raise($10,1,2836,$vararg_buffer1);
  // unreachable;
 }
}
function _statement($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $$lcssa = 0, $$off = 0, $$off20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = ((($1)) + 12|0);
 $4 = ((($parser)) + 60|0);
 $5 = ((($parser)) + 24|0);
 $6 = ($multi|0)==(0);
 $7 = ((($parser)) + 60|0);
 $8 = ((($parser)) + 24|0);
 L1: while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ($9|0)==(35);
  do {
   if ($10) {
    $11 = HEAP32[$3>>2]|0;
    $12 = (_keyword_by_name($11)|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     _expression($parser);
     $16 = HEAP32[$4>>2]|0;
     $17 = HEAP32[$5>>2]|0;
     _lily_emit_eval_expr($16,$17);
     break;
    } else {
     _lily_lexer($1);
     $14 = (1240 + ($12<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 63]($parser,$multi);
     break;
    }
   } else {
    $$off = (($9) + -41)|0;
    $18 = ($$off>>>0)<(2);
    $19 = ($9|0)==(37);
    $or$cond3 = $19 | $18;
    $20 = $9 | 4;
    $21 = ($20|0)==(4);
    $22 = $21 | $or$cond3;
    $23 = ($9|0)==(31);
    $or$cond9 = $23 | $22;
    $24 = $9 | 2;
    $25 = ($24|0)==(38);
    $26 = $25 | $or$cond9;
    $$off20 = (($9) + -39)|0;
    $27 = ($$off20>>>0)<(2);
    $28 = $27 | $26;
    if (!($28)) {
     $$lcssa = $9;
     break L1;
    }
    _expression($parser);
    $29 = HEAP32[$7>>2]|0;
    $30 = HEAP32[$8>>2]|0;
    _lily_emit_eval_expr($29,$30);
   }
  } while(0);
  if ($6) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $31 = ($multi|0)==(0);
 if ($31) {
  $32 = ((($parser)) + 76|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_tokname($$lcssa)|0);
  HEAP32[$vararg_buffer>>2] = $34;
  _lily_raise($33,1,6177,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _keyword_by_name($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_shorthash_for_name($name)|0);
 $1 = tempRet0;
 $i$01 = 0;
 while(1) {
  $2 = (((104 + ($i$01<<4)|0)) + 8|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)==($0|0);
  $10 = ($8|0)==($1|0);
  $11 = $9 & $10;
  if ($11) {
   $12 = (104 + ($i$01<<4)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_strcmp($13,$name)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $$0 = $i$01;
    label = 6;
    break;
   }
  }
  $16 = $2;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21>>>0)>($1>>>0);
  $23 = ($18>>>0)>($0>>>0);
  $24 = ($21|0)==($1|0);
  $25 = $24 & $23;
  $26 = $22 | $25;
  if ($26) {
   $$0 = -1;
   label = 6;
   break;
  }
  $27 = (($i$01) + 1)|0;
  $28 = ($27|0)<(21);
  if ($28) {
   $i$01 = $27;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _if_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $$cmp = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $have_else$0 = 0, $have_else$0$ph = 0, $or$cond3 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($3,0);
 _expression($parser);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($parser)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_emit_eval_condition($4,$6);
 $7 = ((($1)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(6);
 if (!($9)) {
  $10 = ((($parser)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_tokname(6)|0);
  $13 = HEAP32[$7>>2]|0;
  $14 = (_tokname($13)|0);
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise($11,1,2836,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $15 = HEAP32[$7>>2]|0;
 $16 = ($15|0)==(29);
 $17 = $16&1;
 if ($16) {
  _lily_lexer($1);
  $have_else$0$ph = 0;
  label = 5;
 } else {
  $18 = $15;$have_else$0 = 0;
 }
 while(1) {
  if ((label|0) == 5) {
   label = 0;
   $$pr = HEAP32[$7>>2]|0;
   $18 = $$pr;$have_else$0 = $have_else$0$ph;
  }
  L10: do {
   switch ($18|0) {
   case 35:  {
    $19 = ((($1)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_keyword_by_name($20)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     _expression($parser);
     $23 = HEAP32[$2>>2]|0;
     $24 = HEAP32[$5>>2]|0;
     _lily_emit_eval_expr($23,$24);
     break L10;
    }
    $25 = $21 & -2;
    $$cmp = ($25|0)==(6);
    if (!($$cmp)) {
     _lily_lexer($1);
     $26 = (1240 + ($21<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_vii[$27 & 63]($parser,$17);
    }
    break;
   }
   case 3:  {
    break;
   }
   default: {
    _expression($parser);
    $28 = HEAP32[$2>>2]|0;
    $29 = HEAP32[$5>>2]|0;
    _lily_emit_eval_expr($28,$29);
   }
   }
  } while(0);
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30|0)==(35);
  $32 = ($have_else$0|0)==(0);
  $or$cond3 = $32 & $31;
  if (!($or$cond3)) {
   $39 = ($30|0)==(3);
   $40 = $16 ^ 1;
   $or$cond7 = $39 | $40;
   if ($or$cond7) {
    break;
   } else {
    $have_else$0$ph = $have_else$0;
    label = 5;
    continue;
   }
  }
  $33 = ((($1)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_keyword_by_name($34)|0);
  $36 = $35 | 1;
  $37 = ($36|0)==(7);
  if (!($37)) {
   if ($16) {
    $have_else$0$ph = $have_else$0;
    label = 5;
    continue;
   } else {
    label = 21;
    break;
   }
  }
  $38 = ($35|0)==(7);
  _lily_lexer($1);
  if ($38) {
   _do_elif($parser);
   $have_else$0$ph = $have_else$0;
   label = 5;
   continue;
  } else {
   _do_else($parser);
   $have_else$0$ph = 1;
   label = 5;
   continue;
  }
 }
 if ((label|0) == 21) {
  $41 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($41);
  STACKTOP = sp;return;
 }
 if (!($16)) {
  $41 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($41);
  STACKTOP = sp;return;
 }
 _lily_lexer($1);
 $41 = HEAP32[$2>>2]|0;
 _lily_emit_leave_block($41);
 STACKTOP = sp;return;
}
function _expression($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _rewind_expr_state($1);
 _expression_raw($parser,1);
 return;
}
function _do_elif($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_change_block_to($3,1);
 _expression($parser);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($parser)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_emit_eval_condition($4,$6);
 $7 = ((($1)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(6);
 if ($9) {
  _lily_lexer($1);
  STACKTOP = sp;return;
 } else {
  $10 = ((($parser)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_tokname(6)|0);
  $13 = HEAP32[$7>>2]|0;
  $14 = (_tokname($13)|0);
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise($11,1,2836,$vararg_buffer);
  // unreachable;
 }
}
function _do_else($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_change_block_to($3,2);
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(6);
 if ($6) {
  _lily_lexer($1);
  STACKTOP = sp;return;
 } else {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(6)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise($8,1,2836,$vararg_buffer);
  // unreachable;
 }
}
function _do_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($3,4);
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(6);
 if (!($6)) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(6)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise($8,1,2836,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(29);
 if ($13) {
  _parse_multiline_block_body($parser,$multi);
 } else {
  _statement($parser,0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(35);
 if (!($15)) {
  $16 = ((($parser)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_tokname(35)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer2>>2] = $18;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $20;
  _lily_raise($17,1,2836,$vararg_buffer2);
  // unreachable;
 }
 $21 = ((($1)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_strcmp($22,2769)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  _lily_lexer($1);
  $27 = ((($parser)) + 64|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = ((($29)) + 76|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  _lily_hide_block_vars($28,$32);
  _expression($parser);
  $33 = HEAP32[$2>>2]|0;
  $34 = ((($parser)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  _lily_emit_eval_condition($33,$35);
  $36 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($36);
  STACKTOP = sp;return;
 } else {
  $25 = ((($parser)) + 76|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $22;
  _lily_raise($26,1,4273,$vararg_buffer6);
  // unreachable;
 }
}
function _var_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_var($parser,0);
 return;
}
function _parse_var($parser,$modifiers) {
 $parser = $parser|0;
 $modifiers = $modifiers|0;
 var $$ = 0, $$8 = 0, $$pr9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $modifiers | 1;
 $3 = ((($parser)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 18|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(12);
 $$ = $9 ? 36 : 35;
 $$8 = $9 ? 35 : 36;
 $10 = ((($parser)) + 24|0);
 $11 = ((($1)) + 40|0);
 $12 = ((($parser)) + 76|0);
 $13 = ((($parser)) + 76|0);
 $14 = ((($parser)) + 76|0);
 L1: while(1) {
  $15 = HEAP32[$10>>2]|0;
  _rewind_expr_state($15);
  $16 = HEAP32[$11>>2]|0;
  $17 = ($16|0)==($$8|0);
  if ($17) {
   _bad_decl_token($parser);
  }
  $18 = HEAP32[$11>>2]|0;
  $19 = ($18|0)==($$|0);
  if (!($19)) {
   label = 5;
   break;
  }
  $24 = ($18|0)==(35);
  do {
   if ($24) {
    $25 = (_get_named_var($parser,0)|0);
    $26 = ((($25)) + 6|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27&65535;
    $29 = $28 | 1;
    $30 = $29&65535;
    HEAP16[$26>>1] = $30;
    $31 = $28 & 512;
    $32 = ($31|0)==(0);
    $33 = HEAP32[$10>>2]|0;
    if ($32) {
     _lily_es_push_local_var($33,$25);
     $sym$0 = $25;
     break;
    } else {
     _lily_es_push_global_var($33,$25);
     $sym$0 = $25;
     break;
    }
   } else {
    $34 = (_get_named_property($parser,$2)|0);
    $35 = HEAP32[$10>>2]|0;
    _lily_es_push_property($35,$34);
    $sym$0 = $34;
   }
  } while(0);
  $36 = HEAP32[$11>>2]|0;
  $37 = ($36|0)==(6);
  if ($37) {
   _lily_lexer($1);
   $38 = (_get_type_raw($parser,0)|0);
   $39 = ((($sym$0)) + 12|0);
   HEAP32[$39>>2] = $38;
   $$pr9 = HEAP32[$11>>2]|0;
   $40 = $$pr9;
  } else {
   $40 = $36;
  }
  $41 = ($40|0)==(27);
  if (!($41)) {
   label = 14;
   break;
  }
  $43 = HEAP32[$10>>2]|0;
  _lily_es_push_binary_op($43,21);
  _lily_lexer($1);
  _expression_raw($parser,1);
  $44 = HEAP32[$3>>2]|0;
  $45 = HEAP32[$10>>2]|0;
  _lily_emit_eval_expr($44,$45);
  $46 = HEAP32[$11>>2]|0;
  $47 = $46 | 1;
  $48 = ($47|0)==(53);
  if ($48) {
   label = 19;
   break;
  }
  switch ($46|0) {
  case 3: case 35: case 36:  {
   label = 19;
   break L1;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 17;
   break L1;
  }
  }
  _lily_lexer($1);
 }
 if ((label|0) == 5) {
  $20 = HEAP32[$14>>2]|0;
  $21 = (_tokname($$)|0);
  $22 = HEAP32[$11>>2]|0;
  $23 = (_tokname($22)|0);
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $23;
  _lily_raise($20,1,2836,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $42 = HEAP32[$13>>2]|0;
  _lily_raise($42,1,4481,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $49 = HEAP32[$12>>2]|0;
  $50 = (_tokname($46)|0);
  HEAP32[$vararg_buffer4>>2] = $50;
  _lily_raise($49,1,4528,$vararg_buffer4);
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _bad_decl_token($parser) {
 $parser = $parser|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35);
 $$ = $4 ? 4301 : 4337;
 $5 = ((($parser)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_raise($6,1,$$,$vararg_buffer);
 // unreachable;
}
function _get_named_var($parser,$var_type) {
 $parser = $parser|0;
 $var_type = $var_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_find_var($3,0,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $11 = ((($parser)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$4>>2]|0;
  $14 = (_lily_emit_new_scoped_var($12,$var_type,$13)|0);
  _lily_lexer($1);
  STACKTOP = sp;return ($14|0);
 } else {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _lily_raise($9,1,3428,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _get_named_property($parser,$flags) {
 $parser = $parser|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_find_member($7,$3)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $17 = ((($parser)) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $flags & -2;
  $20 = (_lily_add_class_property($18,$7,0,$3,$19)|0);
  $21 = HEAP32[$0>>2]|0;
  _lily_lexer($21);
  STACKTOP = sp;return ($20|0);
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(1);
 $13 = ((($parser)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($7)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 if ($12) {
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  _lily_raise($14,1,4391,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer2>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $16;
  _lily_raise($14,1,4441,$vararg_buffer2);
  // unreachable;
 }
 return (0)|0;
}
function _for_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $for_step$0 = 0, $loop_var$0 = 0;
 var $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35);
 if (!($4)) {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_tokname(35)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (_tokname($8)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _lily_raise($6,1,2836,$vararg_buffer);
  // unreachable;
 }
 $10 = ((($parser)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_emit_enter_block($11,5);
 $12 = ((($parser)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_find_var($13,0,$15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$12>>2]|0;
  $19 = ((($18)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$10>>2]|0;
  $22 = ((($20)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$14>>2]|0;
  $25 = (_lily_emit_new_local_var($21,$23,$24)|0);
  $loop_var$0 = $25;
 } else {
  $26 = ((($16)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = ($31<<16>>16)==(1);
  if ($32) {
   $loop_var$0 = $16;
  } else {
   $33 = ((($parser)) + 76|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $27;
   _lily_raise($34,1,4557,$vararg_buffer2);
   // unreachable;
  }
 }
 _lily_lexer($1);
 $35 = HEAP32[$2>>2]|0;
 $36 = ($35|0)==(35);
 if (!($36)) {
  $37 = ((($parser)) + 76|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_tokname(35)|0);
  $40 = HEAP32[$2>>2]|0;
  $41 = (_tokname($40)|0);
  HEAP32[$vararg_buffer5>>2] = $39;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $41;
  _lily_raise($38,1,2836,$vararg_buffer5);
  // unreachable;
 }
 $42 = HEAP32[$14>>2]|0;
 $43 = (_strcmp($42,4603)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = ((($parser)) + 76|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $42;
  _lily_raise($46,1,4606,$vararg_buffer9);
  // unreachable;
 }
 _lily_lexer($1);
 $47 = (_parse_for_range_value($parser,4631)|0);
 $48 = HEAP32[$2>>2]|0;
 $49 = ($48|0)==(49);
 if (!($49)) {
  $50 = ((($parser)) + 76|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_tokname(49)|0);
  $53 = HEAP32[$2>>2]|0;
  $54 = (_tokname($53)|0);
  HEAP32[$vararg_buffer12>>2] = $52;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $54;
  _lily_raise($51,1,2836,$vararg_buffer12);
  // unreachable;
 }
 _lily_lexer($1);
 $55 = (_parse_for_range_value($parser,4694)|0);
 $56 = HEAP32[$2>>2]|0;
 $57 = ($56|0)==(35);
 do {
  if ($57) {
   $58 = HEAP32[$14>>2]|0;
   $59 = (_strcmp($58,4704)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    _lily_lexer($1);
    $63 = (_parse_for_range_value($parser,6563)|0);
    $for_step$0 = $63;
    break;
   } else {
    $61 = ((($parser)) + 76|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $58;
    _lily_raise($62,1,4707,$vararg_buffer16);
    // unreachable;
   }
  } else {
   $for_step$0 = 0;
  }
 } while(0);
 $64 = HEAP32[$10>>2]|0;
 $65 = HEAP32[$0>>2]|0;
 $66 = ((($65)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 _lily_emit_finalize_for_in($64,$loop_var$0,$47,$55,$for_step$0,$67);
 $68 = HEAP32[$2>>2]|0;
 $69 = ($68|0)==(6);
 if (!($69)) {
  $70 = ((($parser)) + 76|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_tokname(6)|0);
  $73 = HEAP32[$2>>2]|0;
  $74 = (_tokname($73)|0);
  HEAP32[$vararg_buffer19>>2] = $72;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = $74;
  _lily_raise($71,1,2836,$vararg_buffer19);
  // unreachable;
 }
 _lily_lexer($1);
 $75 = HEAP32[$2>>2]|0;
 $76 = ($75|0)==(29);
 if ($76) {
  _parse_multiline_block_body($parser,$multi);
  $77 = HEAP32[$10>>2]|0;
  _lily_emit_leave_block($77);
  STACKTOP = sp;return;
 } else {
  _statement($parser,0);
  $77 = HEAP32[$10>>2]|0;
  _lily_emit_leave_block($77);
  STACKTOP = sp;return;
 }
}
function _parse_for_range_value($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _expression($parser);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & 255;
 $6 = ($5<<16>>16)==(27);
 $7 = ($4&65535)>(5375);
 $or$cond = $7 & $6;
 if ($or$cond) {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise($9,1,4643,$vararg_buffer);
  // unreachable;
 } else {
  $10 = ((($parser)) + 64|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($parser)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($13)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_lily_emit_new_local_var($15,$17,$name)|0);
  $19 = HEAP32[$14>>2]|0;
  _lily_emit_eval_expr_to_var($19,$1,$18);
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _try_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($3,6);
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_emit_try($4,$7);
 $8 = ((($1)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(6);
 if (!($10)) {
  $11 = ((($parser)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(6)|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise($12,1,2836,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)==(29);
 $18 = $17&1;
 $19 = ($multi|0)==(0);
 $or$cond = $19 & $17;
 if ($or$cond) {
  $20 = ((($parser)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_raise($21,1,4230,$vararg_buffer2);
  // unreachable;
 }
 if ($17) {
  _lily_lexer($1);
 }
 $22 = ((($1)) + 12|0);
 $23 = $17 ^ 1;
 $24 = ((($1)) + 12|0);
 $25 = ((($parser)) + 24|0);
 L10: while(1) {
  $26 = HEAP32[$8>>2]|0;
  L12: do {
   switch ($26|0) {
   case 3:  {
    break L10;
    break;
   }
   case 35:  {
    $27 = HEAP32[$24>>2]|0;
    $28 = (_keyword_by_name($27)|0);
    switch ($28|0) {
    case 16:  {
     break L12;
     break;
    }
    case -1:  {
     _expression($parser);
     $29 = HEAP32[$2>>2]|0;
     $30 = HEAP32[$25>>2]|0;
     _lily_emit_eval_expr($29,$30);
     break L12;
     break;
    }
    default: {
     _lily_lexer($1);
     $31 = (1240 + ($28<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vii[$32 & 63]($parser,$18);
     break L12;
    }
    }
    break;
   }
   default: {
    _statement($parser,0);
   }
   }
  } while(0);
  $$pr = HEAP32[$8>>2]|0;
  $33 = ($$pr|0)==(35);
  if (!($33)) {
   $37 = ($$pr|0)==(3);
   $or$cond3 = $37 | $23;
   if ($or$cond3) {
    break;
   } else {
    continue;
   }
  }
  $34 = HEAP32[$22>>2]|0;
  $35 = (_keyword_by_name($34)|0);
  $36 = ($35|0)==(16);
  if ($36) {
   _lily_lexer($1);
   _process_except($parser);
   continue;
  } else {
   if ($17) {
    continue;
   } else {
    label = 20;
    break;
   }
  }
 }
 if ((label|0) == 20) {
  $38 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($38);
  STACKTOP = sp;return;
 }
 if (!($17)) {
  $38 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($38);
  STACKTOP = sp;return;
 }
 _lily_lexer($1);
 $38 = HEAP32[$2>>2]|0;
 _lily_emit_leave_block($38);
 STACKTOP = sp;return;
}
function _process_except($parser) {
 $parser = $parser|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exception_var$0 = 0, $new_type$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_get_type_raw($parser,0)|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(19);
 if ($7) {
  $new_type$0 = 8;
 } else {
  $8 = (_lily_class_greater_eq_id(19,$4)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($parser)) + 76|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($4)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   _lily_raise($11,1,4732,$vararg_buffer);
   // unreachable;
  }
  $14 = ((($4)) + 46|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)==(0);
  if ($16) {
   $new_type$0 = 7;
  } else {
   $17 = ((($parser)) + 76|0);
   $18 = HEAP32[$17>>2]|0;
   _lily_raise($18,1,4769,$vararg_buffer1);
   // unreachable;
  }
 }
 $19 = ((($parser)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 _lily_emit_change_block_to($20,$new_type$0);
 $21 = ((($1)) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(35);
 do {
  if ($23) {
   $24 = HEAP32[$0>>2]|0;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strcmp($26,4805)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = ((($parser)) + 76|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($1)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $32;
    _lily_raise($30,1,4808,$vararg_buffer3);
    // unreachable;
   }
   _lily_lexer($1);
   $33 = HEAP32[$21>>2]|0;
   $34 = ($33|0)==(35);
   if (!($34)) {
    $35 = ((($parser)) + 76|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_tokname(35)|0);
    $38 = HEAP32[$21>>2]|0;
    $39 = (_tokname($38)|0);
    HEAP32[$vararg_buffer6>>2] = $37;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $39;
    _lily_raise($36,1,2836,$vararg_buffer6);
    // unreachable;
   }
   $40 = ((($parser)) + 64|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($1)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_lily_find_var($41,0,$43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    $50 = HEAP32[$19>>2]|0;
    $51 = ((($4)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = HEAP32[$42>>2]|0;
    $54 = (_lily_emit_new_local_var($50,$52,$53)|0);
    _lily_lexer($1);
    $$pr = HEAP32[$21>>2]|0;
    $55 = $$pr;$exception_var$0 = $54;
    break;
   } else {
    $46 = ((($parser)) + 76|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($44)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $49;
    _lily_raise($47,1,3428,$vararg_buffer10);
    // unreachable;
   }
  } else {
   $55 = $22;$exception_var$0 = 0;
  }
 } while(0);
 $56 = ($55|0)==(6);
 if ($56) {
  $62 = HEAP32[$19>>2]|0;
  $63 = ((($4)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($1)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  _lily_emit_except($62,$64,$exception_var$0,$66);
  _lily_lexer($1);
  STACKTOP = sp;return;
 } else {
  $57 = ((($parser)) + 76|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_tokname(6)|0);
  $60 = HEAP32[$21>>2]|0;
  $61 = (_tokname($60)|0);
  HEAP32[$vararg_buffer13>>2] = $59;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $61;
  _lily_raise($58,1,2836,$vararg_buffer13);
  // unreachable;
 }
}
function _case_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_raise($1,1,4833,$vararg_buffer);
 // unreachable;
}
function _else_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_raise($1,1,4872,$vararg_buffer);
 // unreachable;
}
function _elif_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_raise($1,1,4893,$vararg_buffer);
 // unreachable;
}
function _enum_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_parse_enum($parser,0)|0);
 return;
}
function _parse_enum($parser,$is_dynaload) {
 $parser = $parser|0;
 $is_dynaload = $is_dynaload|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $save_generic_start = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $variant_count$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $save_generic_start = sp + 60|0;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($is_dynaload|0)==(0);
 if ($4) {
  $5 = ((($3)) + 18|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(14);
  if (!($7)) {
   $8 = ((($3)) + 52|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($parser)) + 76|0);
    $12 = HEAP32[$11>>2]|0;
    _lily_raise($12,1,4914,$vararg_buffer);
    // unreachable;
   }
  }
 }
 $13 = ((($parser)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(35);
 if (!($17)) {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(35)|0);
  $21 = HEAP32[$15>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  _lily_raise($19,1,2836,$vararg_buffer1);
  // unreachable;
 }
 if ($4) {
  $23 = ((($14)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  _ensure_valid_class($parser,$24);
 }
 $25 = ((($parser)) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($14)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_lily_new_enum($26,$28)|0);
 _lily_lexer($14);
 $30 = ((($parser)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 _lily_gp_save_and_hide($31,$save_generic_start);
 _collect_generics($parser);
 $32 = HEAP32[$30>>2]|0;
 $33 = (_lily_gp_num_in_scope($32)|0);
 $34 = $33&65535;
 $35 = ((($29)) + 46|0);
 HEAP16[$35>>1] = $34;
 $36 = HEAP32[$0>>2]|0;
 _lily_emit_enter_block($36,10);
 $37 = (_build_self_type($parser,$29)|0);
 $38 = ((($parser)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$38>>2] = $37;
 $40 = HEAP32[$15>>2]|0;
 $41 = ($40|0)==(29);
 if (!($41)) {
  $42 = ((($parser)) + 76|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_tokname(29)|0);
  $45 = HEAP32[$15>>2]|0;
  $46 = (_tokname($45)|0);
  HEAP32[$vararg_buffer4>>2] = $44;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $46;
  _lily_raise($43,1,2836,$vararg_buffer4);
  // unreachable;
 }
 _lily_lexer($14);
 $47 = HEAP32[$15>>2]|0;
 $48 = ($47|0)==(43);
 $49 = $48&1;
 $50 = ((($parser)) + 76|0);
 $51 = ((($parser)) + 76|0);
 $52 = ((($parser)) + 76|0);
 $variant_count$0 = 0;
 L15: while(1) {
  if ($48) {
   $53 = HEAP32[$15>>2]|0;
   $54 = ($53|0)==(43);
   if (!($54)) {
    label = 14;
    break;
   }
   _lily_lexer($14);
  }
  $59 = HEAP32[$15>>2]|0;
  $60 = ($59|0)==(35);
  if (!($60)) {
   label = 17;
   break;
  }
  if ($4) {
   $65 = HEAP32[$25>>2]|0;
   $66 = HEAP32[$27>>2]|0;
   $67 = (_lily_find_class($65,0,$66)|0);
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    if (!($48)) {
     label = 22;
     break;
    }
    $69 = ((($67)) + 32|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==($29|0);
    if ($71) {
     label = 22;
     break;
    }
   }
  }
  $74 = HEAP32[$25>>2]|0;
  $75 = HEAP32[$27>>2]|0;
  $76 = (_lily_new_variant($74,$29,$75)|0);
  $77 = (($variant_count$0) + 1)|0;
  _lily_lexer($14);
  $78 = HEAP32[$15>>2]|0;
  $79 = ($78|0)==(0);
  if ($79) {
   _parse_variant_header($parser,$76);
   $$pr = HEAP32[$15>>2]|0;
   $80 = $$pr;
  } else {
   $80 = $78;
  }
  switch ($80|0) {
  case 3:  {
   $$lcssa = $77;
   label = 28;
   break L15;
   break;
  }
  case 35:  {
   break;
  }
  default: {
   $variant_count$0 = $77;
   continue L15;
  }
  }
  $81 = HEAP32[$27>>2]|0;
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)==(100);
  if (!($83)) {
   $variant_count$0 = $77;
   continue;
  }
  $84 = (_keyword_by_name($81)|0);
  $85 = ($84|0)==(14);
  if ($85) {
   $$lcssa = $77;
   label = 28;
   break;
  } else {
   $variant_count$0 = $77;
  }
 }
 if ((label|0) == 14) {
  $55 = HEAP32[$50>>2]|0;
  $56 = (_tokname(43)|0);
  $57 = HEAP32[$15>>2]|0;
  $58 = (_tokname($57)|0);
  HEAP32[$vararg_buffer8>>2] = $56;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $58;
  _lily_raise($55,1,2836,$vararg_buffer8);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $61 = HEAP32[$52>>2]|0;
  $62 = (_tokname(35)|0);
  $63 = HEAP32[$15>>2]|0;
  $64 = (_tokname($63)|0);
  HEAP32[$vararg_buffer12>>2] = $62;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $64;
  _lily_raise($61,1,2836,$vararg_buffer12);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $72 = HEAP32[$51>>2]|0;
  $73 = HEAP32[$27>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $73;
  _lily_raise($72,1,5097,$vararg_buffer16);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $86 = ($$lcssa|0)<(2);
  if ($86) {
   $87 = ((($parser)) + 76|0);
   $88 = HEAP32[$87>>2]|0;
   _lily_raise($88,1,5217,$vararg_buffer19);
   // unreachable;
  }
  $89 = HEAP32[$25>>2]|0;
  _lily_finish_enum($89,$29,$49,$37);
  if (!($4)) {
   $100 = HEAP32[$0>>2]|0;
   _lily_emit_leave_block($100);
   HEAP32[$38>>2] = $39;
   $101 = HEAP32[$30>>2]|0;
   $102 = HEAP32[$save_generic_start>>2]|0;
   _lily_gp_restore_and_unhide($101,$102);
   _lily_lexer($14);
   STACKTOP = sp;return ($29|0);
  }
  $90 = HEAP32[$15>>2]|0;
  $91 = ($90|0)==(35);
  if (!($91)) {
   $100 = HEAP32[$0>>2]|0;
   _lily_emit_leave_block($100);
   HEAP32[$38>>2] = $39;
   $101 = HEAP32[$30>>2]|0;
   $102 = HEAP32[$save_generic_start>>2]|0;
   _lily_gp_restore_and_unhide($101,$102);
   _lily_lexer($14);
   STACKTOP = sp;return ($29|0);
  }
  $92 = ((($parser)) + 76|0);
  L43: while(1) {
   _lily_lexer($14);
   _define_handler($parser,1);
   $93 = HEAP32[$15>>2]|0;
   switch ($93|0) {
   case 3:  {
    label = 36;
    break L43;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 35;
    break L43;
   }
   }
   $94 = HEAP32[$27>>2]|0;
   $95 = (_keyword_by_name($94)|0);
   $96 = ($95|0)==(14);
   if (!($96)) {
    label = 35;
    break;
   }
  }
  if ((label|0) == 35) {
   $97 = HEAP32[$92>>2]|0;
   $98 = HEAP32[$15>>2]|0;
   $99 = (_tokname($98)|0);
   HEAP32[$vararg_buffer21>>2] = $99;
   _lily_raise($97,1,5432,$vararg_buffer21);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $100 = HEAP32[$0>>2]|0;
   _lily_emit_leave_block($100);
   HEAP32[$38>>2] = $39;
   $101 = HEAP32[$30>>2]|0;
   $102 = HEAP32[$save_generic_start>>2]|0;
   _lily_gp_restore_and_unhide($101,$102);
   _lily_lexer($14);
   STACKTOP = sp;return ($29|0);
  }
 }
 return (0)|0;
}
function _ensure_valid_class($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($name)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ((($parser)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $name;
  _lily_raise($4,1,4942,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($parser)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(14);
 if (!($11)) {
  $12 = ((($8)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = ((($parser)) + 76|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_raise($16,1,4986,$vararg_buffer1);
   // unreachable;
  }
 }
 $17 = ((($parser)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_lily_find_class($18,0,$name)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = ((($parser)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $name;
  _lily_raise($22,1,5015,$vararg_buffer3);
  // unreachable;
 }
 $23 = HEAP32[$17>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_try_toplevel_dynaload($parser,$25,$name)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = ((($26)) + 4|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = ($29<<16>>16)==(1);
 if ($30) {
  STACKTOP = sp;return;
 } else {
  $31 = ((($parser)) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $name;
  _lily_raise($32,1,5053,$vararg_buffer6);
  // unreachable;
 }
}
function _parse_variant_header($parser,$variant_cls) {
 $parser = $parser|0;
 $variant_cls = $variant_cls|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $i$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $flags = sp + 20|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise($6,1,5140,$vararg_buffer);
  // unreachable;
 }
 HEAP32[$flags>>2] = 0;
 $7 = ((($parser)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[442]|0;
 _lily_tm_add($8,$9);
 $10 = ((($parser)) + 76|0);
 $11 = ((($parser)) + 76|0);
 $i$0 = 1;
 L4: while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = (_get_nameless_arg($parser,$flags)|0);
  _lily_tm_add($12,$13);
  $14 = HEAP32[$flags>>2]|0;
  $15 = $14 & 2048;
  $16 = ($15|0)==(0);
  if (!($16)) {
   label = 5;
   break;
  }
  $18 = (($i$0) + 1)|0;
  $19 = HEAP32[$2>>2]|0;
  switch ($19|0) {
  case 1:  {
   $$lcssa = $18;
   label = 9;
   break L4;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   label = 8;
   break L4;
  }
  }
  _lily_lexer($1);
  $i$0 = $18;
 }
 if ((label|0) == 5) {
  $17 = HEAP32[$11>>2]|0;
  _lily_raise($17,1,5175,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = HEAP32[$10>>2]|0;
  $21 = (_tokname($19)|0);
  HEAP32[$vararg_buffer3>>2] = $21;
  _lily_raise($20,1,3357,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 9) {
  _lily_lexer($1);
  $22 = HEAP32[$7>>2]|0;
  $23 = HEAP32[$flags>>2]|0;
  $24 = ((($parser)) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 72|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_lily_tm_make($22,$23,$27,$$lcssa)|0);
  $29 = ((($variant_cls)) + 12|0);
  HEAP32[$29>>2] = $28;
  $30 = ((($variant_cls)) + 6|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $32 & 65519;
  $34 = $33&65535;
  HEAP16[$30>>1] = $34;
  STACKTOP = sp;return;
 }
}
function _define_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_define($parser,0);
 return;
}
function _parse_define($parser,$modifiers) {
 $parser = $parser|0;
 $modifiers = $modifiers|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $save_generic_start = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $save_generic_start = sp + 16|0;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 switch ($5<<16>>16) {
 case 10: case 12: case 11: case 14:  {
  break;
 }
 default: {
  $6 = ((($3)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($parser)) + 76|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_raise($10,1,5258,$vararg_buffer);
   // unreachable;
  }
 }
 }
 $11 = ((($parser)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($parser)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_gp_save($14,$save_generic_start);
 _parse_define_header($parser,$modifiers);
 $15 = ((($12)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(29);
 if (!($17)) {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(29)|0);
  $21 = HEAP32[$15>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  _lily_raise($19,1,2836,$vararg_buffer1);
  // unreachable;
 }
 _parse_multiline_block_body($parser,1);
 $23 = HEAP32[$0>>2]|0;
 _lily_emit_leave_block($23);
 $24 = HEAP32[$13>>2]|0;
 $25 = HEAP32[$save_generic_start>>2]|0;
 _lily_gp_restore($24,$25);
 $26 = HEAP32[$0>>2]|0;
 $27 = ((($26)) + 76|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 18|0);
 $30 = HEAP16[$29>>1]|0;
 switch ($30<<16>>16) {
 case 10: case 12:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $31 = ((($parser)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($parser)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($32)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 _lily_add_class_method($32,$36,$40);
 STACKTOP = sp;return;
}
function _parse_define_header($parser,$modifiers) {
 $parser = $parser|0;
 $modifiers = $modifiers|0;
 var $$pr = 0, $$pr1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arg_flags = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $parent$0 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr16 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $arg_flags = sp + 48|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35);
 if (!($4)) {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_tokname(35)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (_tokname($8)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _lily_raise($6,1,2836,$vararg_buffer);
  // unreachable;
 }
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _ensure_unique_method_name($parser,$11);
 $12 = ((($parser)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $parent$0 = 0;
 } else {
  $15 = ((($13)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $parent$0 = $16;
 }
 $17 = ((($parser)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($parser)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$10>>2]|0;
 $22 = (_lily_emit_new_define_var($18,$20,$parent$0,$21)|0);
 HEAP32[$arg_flags>>2] = 0;
 $23 = ((($parser)) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($parser)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[442]|0;
 _lily_tm_add($24,$31);
 _lily_lexer($1);
 _collect_generics($parser);
 $32 = HEAP32[$17>>2]|0;
 _lily_emit_enter_block($32,11);
 $33 = HEAP32[$12>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $i$0 = 0;
 } else {
  $35 = HEAP32[$23>>2]|0;
  _lily_tm_add($35,$33);
  $36 = HEAP32[$17>>2]|0;
  $37 = HEAP32[$12>>2]|0;
  $38 = (_lily_emit_new_local_var($36,$37,5341)|0);
  $39 = HEAP32[$12>>2]|0;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($22)) + 40|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($22)) + 6|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = $45 | $modifiers;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
  $48 = HEAP32[$17>>2]|0;
  $49 = ((($48)) + 76|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 44|0);
  HEAP32[$51>>2] = $38;
  $i$0 = 1;
 }
 $52 = HEAP32[$2>>2]|0;
 $53 = ($52|0)==(0);
 do {
  if ($53) {
   _lily_lexer($1);
   $54 = HEAP32[$2>>2]|0;
   $55 = ($54|0)==(1);
   if ($55) {
    $56 = ((($parser)) + 76|0);
    $57 = HEAP32[$56>>2]|0;
    _lily_raise($57,1,5348,$vararg_buffer2);
    // unreachable;
   } else {
    $58 = $54;$i$1 = $i$0;
   }
   L14: while(1) {
    $59 = ($58|0)==(35);
    if (!($59)) {
     label = 11;
     break;
    }
    $65 = HEAP32[$23>>2]|0;
    $66 = (_get_named_arg($parser,$arg_flags)|0);
    _lily_tm_add($65,$66);
    $67 = (($i$1) + 1)|0;
    $68 = HEAP32[$2>>2]|0;
    switch ($68|0) {
    case 1:  {
     label = 14;
     break L14;
     break;
    }
    case 2:  {
     break;
    }
    default: {
     label = 15;
     break L14;
    }
    }
    _lily_lexer($1);
    $$pr = HEAP32[$2>>2]|0;
    $58 = $$pr;$i$1 = $67;
   }
   if ((label|0) == 11) {
    $60 = ((($parser)) + 76|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (_tokname(35)|0);
    $63 = HEAP32[$2>>2]|0;
    $64 = (_tokname($63)|0);
    HEAP32[$vararg_buffer4>>2] = $62;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $64;
    _lily_raise($61,1,2836,$vararg_buffer4);
    // unreachable;
   }
   else if ((label|0) == 14) {
    _lily_lexer($1);
    $$pr1 = HEAP32[$2>>2]|0;
    $72 = $$pr1;$i$2 = $67;
    break;
   }
   else if ((label|0) == 15) {
    $69 = ((($parser)) + 76|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (_tokname($68)|0);
    HEAP32[$vararg_buffer8>>2] = $71;
    _lily_raise($70,1,3357,$vararg_buffer8);
    // unreachable;
   }
  } else {
   $72 = $52;$i$2 = $i$0;
  }
 } while(0);
 $73 = ($72|0)==(6);
 do {
  if ($73) {
   _lily_lexer($1);
   $74 = HEAP32[$10>>2]|0;
   $75 = (_strcmp($74,10756)|0);
   $76 = ($75|0)==(0);
   if (!($76)) {
    $77 = HEAP32[$23>>2]|0;
    $78 = (_get_type_raw($parser,0)|0);
    _lily_tm_insert($77,$26,$78);
    break;
   }
   $79 = HEAP32[$17>>2]|0;
   $80 = ((($79)) + 76|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($81)) + 52|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(0|0);
   if ($84) {
    $88 = ((($parser)) + 76|0);
    $89 = HEAP32[$88>>2]|0;
    _lily_raise($89,1,5382,$vararg_buffer11);
    // unreachable;
   }
   $85 = ((($83)) + 18|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = ($86<<16>>16)==(12);
   if ($87) {
    $90 = HEAP32[$23>>2]|0;
    $91 = HEAP32[441]|0;
    $92 = ((($91)) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    _lily_tm_insert($90,$26,$93);
    _lily_lexer($1);
    break;
   } else {
    $88 = ((($parser)) + 76|0);
    $89 = HEAP32[$88>>2]|0;
    _lily_raise($89,1,5382,$vararg_buffer11);
    // unreachable;
   }
  }
 } while(0);
 $94 = HEAP32[$2>>2]|0;
 $95 = ($94|0)==(29);
 if (!($95)) {
  $96 = ((($parser)) + 76|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (_tokname(29)|0);
  $99 = HEAP32[$2>>2]|0;
  $100 = (_tokname($99)|0);
  HEAP32[$vararg_buffer13>>2] = $98;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $100;
  _lily_raise($97,1,2836,$vararg_buffer13);
  // unreachable;
 }
 $101 = HEAP32[$23>>2]|0;
 $102 = HEAP32[$arg_flags>>2]|0;
 $103 = ((($parser)) + 64|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 72|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($i$2) + 1)|0;
 $108 = (_lily_tm_make($101,$102,$106,$107)|0);
 $109 = ((($22)) + 12|0);
 HEAP32[$109>>2] = $108;
 $110 = HEAP32[$17>>2]|0;
 $111 = ((($108)) + 16|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = HEAP32[$112>>2]|0;
 _lily_emit_update_function_block($110,0,$113);
 $114 = HEAP32[$arg_flags>>2]|0;
 $115 = $114 & 2048;
 $116 = ($115|0)==(0);
 if ($116) {
  STACKTOP = sp;return;
 }
 $117 = HEAP32[$17>>2]|0;
 $118 = HEAP32[$27>>2]|0;
 _lily_emit_write_optargs($117,$118,$30);
 STACKTOP = sp;return;
}
function _ensure_unique_method_name($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_find_var($1,0,$name)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($parser)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $name;
  _lily_raise($5,1,3428,$vararg_buffer);
  // unreachable;
 }
 $6 = ((($parser)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ((($7)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_lily_find_property($10,$name)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 } else {
  $13 = ((($parser)) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($10)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $name;
  _lily_raise($14,1,5289,$vararg_buffer1);
  // unreachable;
 }
}
function _while_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($3,3);
 _expression($parser);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($parser)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_emit_eval_condition($4,$6);
 $7 = ((($1)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(6);
 if (!($9)) {
  $10 = ((($parser)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_tokname(6)|0);
  $13 = HEAP32[$7>>2]|0;
  $14 = (_tokname($13)|0);
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise($11,1,2836,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($1);
 $15 = HEAP32[$7>>2]|0;
 $16 = ($15|0)==(29);
 if ($16) {
  _parse_multiline_block_body($parser,$multi);
  $17 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($17);
  STACKTOP = sp;return;
 } else {
  _statement($parser,0);
  $17 = HEAP32[$2>>2]|0;
  _lily_emit_leave_block($17);
  STACKTOP = sp;return;
 }
}
function _raise_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(13);
 if ($6) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_raise($8,1,5468,$vararg_buffer);
  // unreachable;
 }
 _expression($parser);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($parser)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_emit_raise($9,$11);
 $12 = ($multi|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 _ensure_no_code_after_exit($parser,2775);
 STACKTOP = sp;return;
}
function _ensure_no_code_after_exit($parser,$name) {
 $parser = $parser|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 $5 = $3 | 1;
 $6 = ($5|0)==(53);
 $7 = $4 | $6;
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ($3|0)==(35);
 L4: do {
  if ($8) {
   $9 = ((($1)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_keyword_by_name($10)|0);
   $12 = $11 | 1;
   $13 = ($12|0)==(7);
   if ($13) {
    STACKTOP = sp;return;
   }
   switch ($11|0) {
   case 5: case 16:  {
    break;
   }
   default: {
    break L4;
   }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $14 = (_strcmp($name,2806)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $name;
  _lily_raise($19,1,5501,$vararg_buffer);
  // unreachable;
 }
 $16 = (_expecting_return_value($parser)|0);
 $17 = ($16|0)==(1);
 if ($17) {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $name;
  _lily_raise($19,1,5501,$vararg_buffer);
  // unreachable;
 } else {
  $20 = ((($parser)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_raise($21,1,5543,$vararg_buffer1);
  // unreachable;
 }
}
function _expecting_return_value($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[442]|0;
 $5 = ($3|0)!=($4|0);
 $6 = $5&1;
 return ($6|0);
}
function _match_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($multi|0)==(0);
 if ($0) {
  $1 = ((($parser)) + 76|0);
  $2 = HEAP32[$1>>2]|0;
  _lily_raise($2,1,5612,$vararg_buffer);
  // unreachable;
 }
 $3 = ((($parser)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($parser)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_emit_enter_block($6,9);
 _expression($parser);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($parser)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_emit_eval_match_expr($7,$9);
 $10 = HEAP32[$8>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($4)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(6);
 if (!($15)) {
  $16 = ((($parser)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_tokname(6)|0);
  $19 = HEAP32[$13>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $20;
  _lily_raise($17,1,2836,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($4);
 $21 = HEAP32[$13>>2]|0;
 $22 = ($21|0)==(29);
 if (!($22)) {
  $23 = ((($parser)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_tokname(29)|0);
  $26 = HEAP32[$13>>2]|0;
  $27 = (_tokname($26)|0);
  HEAP32[$vararg_buffer4>>2] = $25;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $27;
  _lily_raise($24,1,2836,$vararg_buffer4);
  // unreachable;
 }
 _lily_lexer($4);
 $28 = ((($4)) + 12|0);
 L10: while(1) {
  $29 = HEAP32[$13>>2]|0;
  switch ($29|0) {
  case 3:  {
   break L10;
   break;
  }
  case 35:  {
   break;
  }
  default: {
   _statement($parser,0);
   continue L10;
  }
  }
  $30 = HEAP32[$28>>2]|0;
  $31 = (_keyword_by_name($30)|0);
  switch ($31|0) {
  case 5:  {
   _lily_lexer($4);
   _process_match_case($parser,$12);
   continue L10;
   break;
  }
  case 6:  {
   _lily_lexer($4);
   _process_match_else($parser);
   continue L10;
   break;
  }
  case -1:  {
   _expression($parser);
   $34 = HEAP32[$5>>2]|0;
   $35 = HEAP32[$8>>2]|0;
   _lily_emit_eval_expr($34,$35);
   continue L10;
   break;
  }
  default: {
   _lily_lexer($4);
   $32 = (1240 + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 63]($parser,$multi);
   continue L10;
  }
  }
 }
 _ensure_proper_match_block($parser,$12);
 _lily_lexer($4);
 $36 = HEAP32[$5>>2]|0;
 _lily_emit_leave_block($36);
 STACKTOP = sp;return;
}
function _process_match_case($parser,$match_sym) {
 $parser = $parser|0;
 $match_sym = $match_sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$lcssa = 0, $i$03 = 0;
 var $i$12 = 0, $spot$0 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr5 = 0, $variant_case$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($match_sym)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(35);
 if (!($8)) {
  $9 = ((($parser)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_tokname(35)|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = (_tokname($12)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  _lily_raise($10,1,2836,$vararg_buffer);
  // unreachable;
 }
 $14 = ((($3)) + 48|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(0);
 L4: do {
  if ($16) {
   $i$0$lcssa = 0;$variant_case$0 = 0;
  } else {
   $17 = ((($5)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($3)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $i$03 = 0;
   while(1) {
    $21 = (($20) + ($i$03<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_strcmp($18,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $i$0$lcssa = $i$03;$variant_case$0 = $22;
     break L4;
    }
    $27 = (($i$03) + 1)|0;
    $28 = HEAP16[$14>>1]|0;
    $29 = $28&65535;
    $30 = ($27|0)<($29|0);
    if ($30) {
     $i$03 = $27;
    } else {
     $i$0$lcssa = $27;$variant_case$0 = 0;
     break;
    }
   }
  }
 } while(0);
 $31 = HEAP16[$14>>1]|0;
 $32 = $31&65535;
 $33 = ($i$0$lcssa|0)==($32|0);
 if ($33) {
  $34 = ((($parser)) + 76|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($5)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($3)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $37;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $39;
  _lily_raise($35,1,5658,$vararg_buffer2);
  // unreachable;
 }
 $40 = ((($parser)) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_lily_emit_add_match_case($41,$i$0$lcssa)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = ((($parser)) + 76|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($5)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $47;
  _lily_raise($45,1,5689,$vararg_buffer6);
  // unreachable;
 }
 $48 = ((($variant_case$0)) + 6|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 & 16;
 $51 = ($50<<16>>16)==(0);
 do {
  if ($51) {
   $52 = ((($parser)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($variant_case$0)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$40>>2]|0;
   $59 = ((($58)) + 100|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($match_sym)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62&65535;
   $64 = ((($57)) + 10|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = (($66) + 65535)|0;
   $68 = $67&65535;
   _lily_u16_write_2($53,$63,$68);
   _lily_lexer($5);
   $69 = HEAP32[$6>>2]|0;
   $70 = ($69|0)==(0);
   if (!($70)) {
    $71 = ((($parser)) + 76|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (_tokname(0)|0);
    $74 = HEAP32[$6>>2]|0;
    $75 = (_tokname($74)|0);
    HEAP32[$vararg_buffer9>>2] = $73;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $75;
    _lily_raise($72,1,2836,$vararg_buffer9);
    // unreachable;
   }
   _lily_lexer($5);
   $76 = HEAP32[$6>>2]|0;
   $77 = ($76|0)==(35);
   if (!($77)) {
    $78 = ((($parser)) + 76|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_tokname(35)|0);
    $81 = HEAP32[$6>>2]|0;
    $82 = (_tokname($81)|0);
    HEAP32[$vararg_buffer13>>2] = $80;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = $82;
    _lily_raise($79,1,2836,$vararg_buffer13);
    // unreachable;
   }
   $83 = HEAP16[$64>>1]|0;
   $84 = ($83&65535)>(1);
   L24: do {
    if ($84) {
     $85 = ((($57)) + 16|0);
     $86 = ((($5)) + 12|0);
     $87 = ((($parser)) + 76|0);
     $88 = ((($parser)) + 76|0);
     $i$12 = 1;
     while(1) {
      $89 = HEAP32[$85>>2]|0;
      $90 = (($89) + ($i$12<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = (_lily_ts_resolve_by_second($60,$1,$91)|0);
      $93 = HEAP32[$86>>2]|0;
      $94 = (_strcmp($93,5725)|0);
      $95 = ($94|0)==(0);
      if ($95) {
       $96 = HEAP32[$40>>2]|0;
       $97 = (_lily_emit_get_storage_spot($96,$92)|0);
       _lily_lexer($5);
       $spot$0 = $97;
      } else {
       $98 = (_get_named_var($parser,$92)|0);
       $99 = ((($98)) + 8|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100&65535;
       $spot$0 = $101;
      }
      _lily_u16_write_1($53,$spot$0);
      $102 = HEAP16[$64>>1]|0;
      $103 = $102&65535;
      $104 = (($103) + -1)|0;
      $105 = ($i$12|0)==($104|0);
      if (!($105)) {
       $106 = HEAP32[$6>>2]|0;
       $107 = ($106|0)==(2);
       if (!($107)) {
        label = 23;
        break;
       }
       _lily_lexer($5);
       $112 = HEAP32[$6>>2]|0;
       $113 = ($112|0)==(35);
       if (!($113)) {
        label = 25;
        break;
       }
      }
      $118 = (($i$12) + 1)|0;
      $119 = HEAP16[$64>>1]|0;
      $120 = $119&65535;
      $121 = ($118|0)<($120|0);
      if ($121) {
       $i$12 = $118;
      } else {
       break L24;
      }
     }
     if ((label|0) == 23) {
      $108 = HEAP32[$88>>2]|0;
      $109 = (_tokname(2)|0);
      $110 = HEAP32[$6>>2]|0;
      $111 = (_tokname($110)|0);
      HEAP32[$vararg_buffer17>>2] = $109;
      $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $111;
      _lily_raise($108,1,2836,$vararg_buffer17);
      // unreachable;
     }
     else if ((label|0) == 25) {
      $114 = HEAP32[$87>>2]|0;
      $115 = (_tokname(35)|0);
      $116 = HEAP32[$6>>2]|0;
      $117 = (_tokname($116)|0);
      HEAP32[$vararg_buffer21>>2] = $115;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = $117;
      _lily_raise($114,1,2836,$vararg_buffer21);
      // unreachable;
     }
    }
   } while(0);
   $122 = HEAP32[$6>>2]|0;
   $123 = ($122|0)==(1);
   if ($123) {
    $129 = $55&65535;
    _lily_u16_write_1($53,$129);
    $130 = HEAP32[$40>>2]|0;
    _lily_emit_variant_decompose($130,$53);
    HEAP32[$54>>2] = $55;
    break;
   } else {
    $124 = ((($parser)) + 76|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (_tokname(1)|0);
    $127 = HEAP32[$6>>2]|0;
    $128 = (_tokname($127)|0);
    HEAP32[$vararg_buffer25>>2] = $126;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = $128;
    _lily_raise($125,1,2836,$vararg_buffer25);
    // unreachable;
   }
  }
 } while(0);
 _lily_lexer($5);
 $131 = HEAP32[$6>>2]|0;
 $132 = ($131|0)==(6);
 if ($132) {
  _lily_lexer($5);
  STACKTOP = sp;return;
 } else {
  $133 = ((($parser)) + 76|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (_tokname(6)|0);
  $136 = HEAP32[$6>>2]|0;
  $137 = (_tokname($136)|0);
  HEAP32[$vararg_buffer29>>2] = $135;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = $137;
  _lily_raise($134,1,2836,$vararg_buffer29);
  // unreachable;
 }
}
function _process_match_else($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(6);
 if ($4) {
  $10 = ((($parser)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_emit_do_match_else($11);
  _lily_lexer($1);
  STACKTOP = sp;return;
 } else {
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_tokname(6)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (_tokname($8)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _lily_raise($6,1,2836,$vararg_buffer);
  // unreachable;
 }
}
function _ensure_proper_match_block($parser,$match_sym) {
 $parser = $parser|0;
 $match_sym = $match_sym|0;
 var $$counter$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $counter$0$lcssa = 0, $counter$05 = 0, $counter$23 = 0, $counter$3 = 0, $error$02 = 0, $error$1 = 0, $error$2 = 0, $error$2$lcssa = 0, $i$04 = 0, $i$11 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($parser)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($match_sym)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 52|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($5&65535)<($17&65535);
 if ($18) {
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($19)) + 52|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $29 = $15;$counter$05 = 0;$i$04 = $6;
  while(1) {
   $28 = ((($29)) + 4|0);
   $30 = HEAP32[$28>>2]|0;
   $31 = (($30) + ($i$04<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   $34 = $33&1;
   $$counter$0 = (($34) + ($counter$05))|0;
   $35 = (($i$04) + 1)|0;
   $36 = ($35|0)<($22|0);
   if ($36) {
    $29 = $19;$counter$05 = $$counter$0;$i$04 = $35;
   } else {
    $counter$0$lcssa = $$counter$0;
    break;
   }
  }
 } else {
  $counter$0$lcssa = 0;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($23)) + 52|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($5&65535)<($25&65535);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = ((($14)) + 40|0);
 $38 = $23;$counter$23 = $counter$0$lcssa;$error$02 = 0;$i$11 = $6;
 while(1) {
  $37 = ((($38)) + 4|0);
  $39 = HEAP32[$37>>2]|0;
  $40 = (($39) + ($i$11<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0);
  if ($42) {
   $43 = ($error$02|0)==(0);
   if ($43) {
    _lily_mb_add($10,5727);
    $error$1 = 1;
   } else {
    $error$1 = $error$02;
   }
   $44 = HEAP32[$27>>2]|0;
   $45 = (($44) + ($i$11<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer>>2] = $48;
   _lily_mb_add_fmt($10,5793,$vararg_buffer);
   $49 = ($counter$23|0)>(1);
   if ($49) {
    _lily_mb_add_char($10,10);
    $50 = (($counter$23) + -1)|0;
    $counter$3 = $50;$error$2 = $error$1;
   } else {
    $counter$3 = $counter$23;$error$2 = $error$1;
   }
  } else {
   $counter$3 = $counter$23;$error$2 = $error$02;
  }
  $51 = (($i$11) + 1)|0;
  $52 = HEAP32[$0>>2]|0;
  $53 = ((($52)) + 52|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = ($51|0)<($55|0);
  if ($56) {
   $38 = $52;$counter$23 = $counter$3;$error$02 = $error$2;$i$11 = $51;
  } else {
   $error$2$lcssa = $error$2;
   break;
  }
 }
 $57 = ($error$2$lcssa|0)==(0);
 if ($57) {
  STACKTOP = sp;return;
 } else {
  $58 = HEAP32[$7>>2]|0;
  $59 = (_lily_mb_get($10)|0);
  _lily_raise($58,1,$59,$vararg_buffer1);
  // unreachable;
 }
}
function _break_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_emit_break($1);
 $2 = ($multi|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($parser)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(3);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise($9,1,5798,$vararg_buffer);
  // unreachable;
 }
}
function _class_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(14);
 if (!($6)) {
  $7 = ((($3)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($parser)) + 76|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_raise($11,1,5844,$vararg_buffer);
   // unreachable;
  }
 }
 $12 = ((($parser)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(35);
 if ($16) {
  $22 = ((($13)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  _ensure_valid_class($parser,$23);
  $24 = ((($parser)) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$22>>2]|0;
  $27 = (_lily_new_class($25,$26)|0);
  _parse_class_body($parser,$27);
  STACKTOP = sp;return;
 } else {
  $17 = ((($parser)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_tokname(35)|0);
  $20 = HEAP32[$14>>2]|0;
  $21 = (_tokname($20)|0);
  HEAP32[$vararg_buffer1>>2] = $19;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $21;
  _lily_raise($18,1,2836,$vararg_buffer1);
  // unreachable;
 }
}
function _return_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 switch ($5<<16>>16) {
 case 12:  {
  $6 = ((($parser)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise($7,1,5872,$vararg_buffer);
  // unreachable;
  break;
 }
 case 13:  {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise($9,1,5917,$vararg_buffer1);
  // unreachable;
  break;
 }
 case 14:  {
  $13 = ((($parser)) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_raise($14,1,5951,$vararg_buffer3);
  // unreachable;
  break;
 }
 default: {
  $10 = ((($3)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = ((($parser)) + 76|0);
   $14 = HEAP32[$13>>2]|0;
   _lily_raise($14,1,5951,$vararg_buffer3);
   // unreachable;
  }
  $15 = (_expecting_return_value($parser)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   _expression($parser);
  }
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($parser)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  _lily_emit_eval_return($17,$19);
  $20 = ($multi|0)==(0);
  if ($20) {
   STACKTOP = sp;return;
  }
  _ensure_no_code_after_exit($parser,2806);
  STACKTOP = sp;return;
 }
 }
}
function _except_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_raise($1,1,5988,$vararg_buffer);
 // unreachable;
}
function _import_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_raise($1,1,6012,$vararg_buffer);
 // unreachable;
}
function _private_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($parser,6994,8);
 return;
}
function _parse_modifier($parser,$name,$modifier) {
 $parser = $parser|0;
 $name = $name|0;
 $modifier = $modifier|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(12);
 if (!($6)) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $name;
  _lily_raise($8,1,6053,$vararg_buffer);
  // unreachable;
 }
 $9 = ((($parser)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(35);
 if (!($13)) {
  $14 = ((($parser)) + 76|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_tokname(35)|0);
  $17 = HEAP32[$11>>2]|0;
  $18 = (_tokname($17)|0);
  HEAP32[$vararg_buffer1>>2] = $16;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $18;
  _lily_raise($15,1,2836,$vararg_buffer1);
  // unreachable;
 }
 $19 = HEAP32[$9>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_keyword_by_name($21)|0);
 switch ($22|0) {
 case 2:  {
  _lily_lexer($10);
  _parse_var($parser,$modifier);
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  _lily_lexer($10);
  _parse_define($parser,$modifier);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $23 = ((($parser)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($10)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $26;
  _lily_raise($24,1,6079,$vararg_buffer5);
  // unreachable;
 }
 }
}
function _protected_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($parser,7002,16);
 return;
}
function _continue_handler($parser,$multi) {
 $parser = $parser|0;
 $multi = $multi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_emit_continue($1);
 $2 = ($multi|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($parser)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(3);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  $8 = ((($parser)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise($9,1,6128,$vararg_buffer);
  // unreachable;
 }
}
function _determine_class_gc_flag($target) {
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$06 = 0, $mark$0 = 0, $mark$1$ = 0, $mark$1$lcssa = 0, $mark$19 = 0, $mark$25 = 0, $mark$4 = 0, $member_iter$0 = 0, $member_iter$010 = 0, $member_iter$08 = 0, $parent_iter$015 = 0, $parent_iter$1 = 0, $parent_iter$13 = 0, $parent_iter$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($target)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $mark$0 = 0;
  } else {
   $3 = ((($1)) + 6|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = $4&65535;
   $6 = $5 & 96;
   $7 = ($6|0)==(32);
   if (!($7)) {
    $parent_iter$015 = $1;
    while(1) {
     $13 = ((($parent_iter$015)) + 6|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = $14&65535;
     $16 = $15 | 256;
     $17 = $16&65535;
     HEAP16[$13>>1] = $17;
     $18 = HEAP32[$parent_iter$015>>2]|0;
     $19 = ($18|0)==(0|0);
     if ($19) {
      $mark$0 = $6;
      break L1;
     } else {
      $parent_iter$015 = $18;
     }
    }
   }
   $8 = ((($target)) + 6|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9&65535;
   $11 = $10 | 32;
   $12 = $11&65535;
   HEAP16[$8>>1] = $12;
   return;
  }
 } while(0);
 $20 = ((($target)) + 36|0);
 $member_iter$08 = HEAP32[$20>>2]|0;
 $21 = ($member_iter$08|0)==(0|0);
 if ($21) {
  $mark$1$lcssa = $mark$0;
 } else {
  $mark$19 = $mark$0;$member_iter$010 = $member_iter$08;
  while(1) {
   $22 = ((($member_iter$010)) + 4|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = ($23<<16>>16)==(1);
   if ($24) {
    $mark$4 = $mark$19;
   } else {
    $25 = ((($member_iter$010)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (_get_gc_flags_for($target,$26)|0);
    $28 = $27 | $mark$19;
    $29 = ((($26)) + 10|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = ($30<<16>>16)==(0);
    if ($31) {
     $mark$4 = $28;
    } else {
     $32 = HEAP16[$29>>1]|0;
     $33 = ($32<<16>>16)==(0);
     if ($33) {
      $mark$4 = $28;
     } else {
      $34 = ((($26)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = HEAP16[$29>>1]|0;
      $37 = $36&65535;
      $i$06 = 0;$mark$25 = $28;
      while(1) {
       $38 = (($35) + ($i$06<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_get_gc_flags_for($target,$39)|0);
       $41 = $40 | $mark$25;
       $42 = (($i$06) + 1)|0;
       $43 = ($42|0)<($37|0);
       if ($43) {
        $i$06 = $42;$mark$25 = $41;
       } else {
        $mark$4 = $41;
        break;
       }
      }
     }
    }
   }
   $member_iter$0 = HEAP32[$member_iter$010>>2]|0;
   $44 = ($member_iter$0|0)==(0|0);
   if ($44) {
    $mark$1$lcssa = $mark$4;
    break;
   } else {
    $mark$19 = $mark$4;$member_iter$010 = $member_iter$0;
   }
  }
 }
 $45 = $mark$1$lcssa & 32;
 $46 = ($45|0)==(0);
 $47 = $mark$1$lcssa & 65471;
 $mark$1$ = $46 ? $mark$1$lcssa : $47;
 $parent_iter$13 = HEAP32[$0>>2]|0;
 $48 = ($parent_iter$13|0)==(0|0);
 if (!($48)) {
  $parent_iter$14 = $parent_iter$13;
  while(1) {
   $49 = ((($parent_iter$14)) + 6|0);
   $50 = HEAP16[$49>>1]|0;
   $51 = $50&65535;
   $52 = $51 & 65279;
   $53 = $52&65535;
   HEAP16[$49>>1] = $53;
   $parent_iter$1 = HEAP32[$parent_iter$14>>2]|0;
   $54 = ($parent_iter$1|0)==(0|0);
   if ($54) {
    break;
   } else {
    $parent_iter$14 = $parent_iter$1;
   }
  }
 }
 $55 = ((($target)) + 6|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $57 & 65279;
 $59 = $58 | $mark$1$;
 $60 = $59&65535;
 HEAP16[$55>>1] = $60;
 return;
}
function _get_gc_flags_for($top_class,$target) {
 $top_class = $top_class|0;
 $target = $target|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $result_flag$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($target|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($target)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(-5);
 if ($5) {
  $6 = ((($top_class)) + 46|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)==(0);
  $$ = $8 ? 32 : 64;
  $$0 = $$;
  return ($$0|0);
 }
 $9 = ((($2)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 32;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = 32;
  return ($$0|0);
 }
 $14 = $11 & 64;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = 64;
  return ($$0|0);
 }
 $16 = $11 & 256;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = 32;
  return ($$0|0);
 }
 $18 = ((($target)) + 10|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ($19<<16>>16)==(0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = HEAP16[$18>>1]|0;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = ((($target)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP16[$18>>1]|0;
 $26 = $25&65535;
 $i$02 = 0;$result_flag$01 = 0;
 while(1) {
  $27 = (($24) + ($i$02<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_get_gc_flags_for($top_class,$28)|0);
  $30 = $29 | $result_flag$01;
  $31 = (($i$02) + 1)|0;
  $32 = ($31|0)<($26|0);
  if ($32) {
   $i$02 = $31;$result_flag$01 = $30;
  } else {
   $$0 = $30;
   break;
  }
 }
 return ($$0|0);
}
function _fini_expr_state($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 return;
}
function _dynaload_variant($parser,$m,$dyna_index) {
 $parser = $parser|0;
 $m = $m|0;
 $dyna_index = $dyna_index|0;
 var $$pn = 0, $$pn$phi = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$0 = 0, $entry$0$in = 0, $enum_pos$0 = 0, $enum_pos$0$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($dyna_index) + -1)|0;
 $1 = ((($m)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $$pn = $0;$enum_pos$0 = $0;
 while(1) {
  $entry$0$in = (($2) + ($$pn<<2)|0);
  $entry$0 = HEAP32[$entry$0$in>>2]|0;
  $3 = HEAP8[$entry$0>>0]|0;
  $4 = ($3<<24>>24)==(69);
  $5 = (($enum_pos$0) + -1)|0;
  if ($4) {
   $enum_pos$0$lcssa = $enum_pos$0;
   break;
  } else {
   $$pn$phi = $enum_pos$0;$enum_pos$0 = $5;$$pn = $$pn$phi;
  }
 }
 $6 = (($2) + ($dyna_index<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($enum_pos$0$lcssa) + 1)|0;
 (_dynaload_enum($parser,$m,$8)|0);
 $9 = ((($parser)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($7)) + 2|0);
 $12 = (_lily_find_class($10,$m,$11)|0);
 return ($12|0);
}
function _dynaload_enum($parser,$m,$dyna_index) {
 $parser = $parser|0;
 $m = $m|0;
 $dyna_index = $dyna_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$0 = 0, $entry_index$0 = 0, $entry_index$1 = 0, $save_generics = 0, $save_next_class_id$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_generics = sp;
 $0 = ((($m)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($dyna_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 2|0);
 $5 = ((($parser)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_mb_flush($6);
 _lily_mb_add($6,$4);
 $7 = (_strlen($4)|0);
 $8 = (($4) + ($7)|0);
 $9 = ((($8)) + 1|0);
 _lily_mb_add($6,$9);
 _lily_mb_add_char($6,123);
 $entry_index$0 = $dyna_index;
 while(1) {
  $10 = (($entry_index$0) + 1)|0;
  $11 = (($1) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(86);
  if ($14) {
   $entry$0 = $12;$entry_index$1 = $10;
   break;
  } else {
   $entry_index$0 = $10;
  }
 }
 while(1) {
  $15 = ((($entry$0)) + 2|0);
  _lily_mb_add($6,$15);
  $16 = (_strlen($15)|0);
  $17 = (($15) + ($16)|0);
  $18 = ((($17)) + 1|0);
  _lily_mb_add($6,$18);
  _lily_mb_add_char($6,32);
  $19 = (($entry_index$1) + 1)|0;
  $20 = (($1) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(86);
  if ($23) {
   $entry$0 = $21;$entry_index$1 = $19;
  } else {
   break;
  }
 }
 _lily_mb_add_char($6,125);
 $24 = ((($parser)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_lily_mb_get($6)|0);
 _lily_load_copy_string($25,1,$26);
 $27 = HEAP32[$24>>2]|0;
 _lily_lexer($27);
 $28 = HEAP32[$parser>>2]|0;
 $29 = ($28|0)==($m|0);
 do {
  if ($29) {
   $30 = ((($parser)) + 64|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 36|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$2>>2]|0;
   $35 = ((($34)) + 2|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)==(79);
   if ($37) {
    HEAP32[$32>>2] = 13;
    $save_next_class_id$0 = $33;
    break;
   } else {
    HEAP32[$32>>2] = 16;
    $save_next_class_id$0 = $33;
    break;
   }
  } else {
   $save_next_class_id$0 = 0;
  }
 } while(0);
 $38 = ((($parser)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 _lily_gp_save_and_hide($39,$save_generics);
 $40 = (_parse_enum($parser,1)|0);
 $41 = HEAP32[$38>>2]|0;
 $42 = HEAP32[$save_generics>>2]|0;
 _lily_gp_restore_and_unhide($41,$42);
 $43 = (($dyna_index) + 1)|0;
 $44 = $43&65535;
 $45 = ((($40)) + 50|0);
 HEAP16[$45>>1] = $44;
 $46 = ($save_next_class_id$0|0)==(0);
 if ($46) {
  $50 = HEAP32[$24>>2]|0;
  _lily_pop_lex_entry($50);
  STACKTOP = sp;return ($40|0);
 }
 $47 = ((($parser)) + 64|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 36|0);
 HEAP32[$49>>2] = $save_next_class_id$0;
 $50 = HEAP32[$24>>2]|0;
 _lily_pop_lex_entry($50);
 STACKTOP = sp;return ($40|0);
}
function _lily_parser_interp_eval($parser,$start_line,$text) {
 $parser = $parser|0;
 $start_line = $start_line|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $es = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $es = sp + 20|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_load_copy_string($1,1,$text);
 $2 = ((($1)) + 16|0);
 HEAP32[$2>>2] = $start_line;
 $3 = HEAP32[$0>>2]|0;
 _lily_lexer($3);
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(53);
 if ($6) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_raise($8,1,6205,$vararg_buffer);
  // unreachable;
 }
 _init_expr_state($parser,$es);
 _expression($parser);
 $9 = ((($parser)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($parser)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_emit_eval_interp_expr($10,$12)|0);
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(53);
 if (!($15)) {
  $16 = ((($parser)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_tokname($14)|0);
  HEAP32[$vararg_buffer1>>2] = $18;
  _lily_raise($17,1,6232,$vararg_buffer1);
  // unreachable;
 }
 $19 = ($13|0)==(0|0);
 if ($19) {
  $20 = ((($parser)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_raise($21,1,6281,$vararg_buffer3);
  // unreachable;
 } else {
  _fini_expr_state($parser);
  _lily_pop_lex_entry($1);
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _lily_parser_lambda_eval($parser,$lambda_start_line,$lambda_body,$expect_type) {
 $parser = $parser|0;
 $lambda_start_line = $lambda_start_line|0;
 $lambda_body = $lambda_body|0;
 $expect_type = $expect_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args_collected$0 = 0, $es = 0, $flags$0 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $es = sp + 16|0;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_load_copy_string($1,1,$lambda_body);
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = $lambda_start_line;
 $7 = ((($parser)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($parser)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_lily_emit_new_define_var($8,$10,0,6328)|0);
 $12 = HEAP32[$7>>2]|0;
 _lily_emit_enter_block($12,13);
 _lily_lexer($1);
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[442]|0;
 _lily_tm_add($13,$14);
 $15 = ((($1)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 switch ($16|0) {
 case 46:  {
  $17 = (_collect_lambda_args($parser,$expect_type)|0);
  $phitmp = (($17) + 1)|0;
  $args_collected$0 = $phitmp;
  break;
 }
 case 47:  {
  $args_collected$0 = 1;
  break;
 }
 default: {
  $18 = ((($parser)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  _lily_raise($19,1,4207,$vararg_buffer);
  // unreachable;
 }
 }
 _init_expr_state($parser,$es);
 $20 = (_parse_lambda_body($parser,$expect_type)|0);
 _fini_expr_state($parser);
 $21 = HEAP32[$15>>2]|0;
 $22 = ($21|0)==(3);
 if (!($22)) {
  $23 = ((($parser)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_tokname(3)|0);
  $26 = HEAP32[$15>>2]|0;
  $27 = (_tokname($26)|0);
  HEAP32[$vararg_buffer1>>2] = $25;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $27;
  _lily_raise($24,1,2836,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($1);
 $28 = ($20|0)==(0|0);
 if (!($28)) {
  $29 = HEAP32[$2>>2]|0;
  _lily_tm_insert($29,$5,$20);
 }
 $30 = ($expect_type|0)==(0|0);
 if ($30) {
  $flags$0 = 0;
 } else {
  $31 = ((($expect_type)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = ($34<<16>>16)==(7);
  if ($35) {
   $36 = ((($expect_type)) + 6|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37 & 512;
   $39 = $38&65535;
   $flags$0 = $39;
  } else {
   $flags$0 = 0;
  }
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = ((($parser)) + 64|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_lily_tm_make($40,$flags$0,$44,$args_collected$0)|0);
 $46 = ((($11)) + 12|0);
 HEAP32[$46>>2] = $45;
 $47 = HEAP32[$7>>2]|0;
 _lily_emit_leave_block($47);
 _lily_pop_lex_entry($1);
 STACKTOP = sp;return ($11|0);
}
function _collect_lambda_args($parser,$expect_type) {
 $parser = $parser|0;
 $expect_type = $expect_type|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg_type$1 = 0, $num_args$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($expect_type|0)==(0|0);
 if ($0) {
  $25 = -1;
 } else {
  $1 = ((($expect_type)) + 10|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2&65535;
  $25 = $3;
 }
 $4 = ((($parser)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = ((($parser)) + 72|0);
 $8 = ((($parser)) + 76|0);
 $9 = ((($expect_type)) + 16|0);
 $10 = ((($parser)) + 76|0);
 $11 = ((($5)) + 12|0);
 $12 = ((($parser)) + 76|0);
 $num_args$0 = 0;
 L4: while(1) {
  _lily_lexer($5);
  $13 = HEAP32[$6>>2]|0;
  $14 = ($13|0)==(35);
  if (!($14)) {
   label = 5;
   break;
  }
  $19 = (_get_named_var($parser,0)|0);
  $20 = HEAP32[$6>>2]|0;
  $21 = ($20|0)==(6);
  if ($21) {
   _lily_lexer($5);
   $22 = (_get_type_raw($parser,0)|0);
   $23 = ((($19)) + 12|0);
   HEAP32[$23>>2] = $22;
   $arg_type$1 = $22;
  } else {
   $24 = ($num_args$0|0)<($25|0);
   if (!($24)) {
    label = 11;
    break;
   }
   $26 = (($num_args$0) + 1)|0;
   $27 = HEAP32[$9>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    label = 11;
    break;
   }
   $31 = ((($29)) + 6|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32 & 4096;
   $34 = ($33<<16>>16)==(0);
   if (!($34)) {
    label = 11;
    break;
   }
   $37 = ((($19)) + 12|0);
   HEAP32[$37>>2] = $29;
   $arg_type$1 = $29;
  }
  $38 = HEAP32[$7>>2]|0;
  _lily_tm_add($38,$arg_type$1);
  $39 = (($num_args$0) + 1)|0;
  $40 = HEAP32[$6>>2]|0;
  switch ($40|0) {
  case 2:  {
   $num_args$0 = $39;
   break;
  }
  case 46:  {
   $$lcssa = $39;
   label = 15;
   break L4;
   break;
  }
  default: {
   label = 14;
   break L4;
  }
  }
 }
 if ((label|0) == 5) {
  $15 = HEAP32[$12>>2]|0;
  $16 = (_tokname(35)|0);
  $17 = HEAP32[$6>>2]|0;
  $18 = (_tokname($17)|0);
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  _lily_raise($15,1,2836,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $35 = HEAP32[$10>>2]|0;
  $36 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $36;
  _lily_raise($35,1,6337,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $41 = HEAP32[$8>>2]|0;
  $42 = (_tokname($40)|0);
  HEAP32[$vararg_buffer5>>2] = $42;
  _lily_raise($41,1,6364,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return (0)|0;
}
function _parse_lambda_body($parser,$expect_type) {
 $parser = $parser|0;
 $expect_type = $expect_type|0;
 var $$lcssa = 0, $$lcssa8 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = ((($1)) + 12|0);
 $4 = ((($parser)) + 60|0);
 $5 = ((($parser)) + 24|0);
 L1: while(1) {
  $$pr = HEAP32[$2>>2]|0;
  $6 = $$pr;
  while(1) {
   $7 = ($6|0)==(35);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[$3>>2]|0;
   $9 = (_keyword_by_name($8)|0);
   $10 = ($9|0)==(-1);
   if ($10) {
    break;
   }
   _lily_lexer($1);
   _handle_multiline($parser,$9);
   $21 = HEAP32[$2>>2]|0;
   $22 = ($21|0)==(3);
   if ($22) {
    $result_type$0 = 0;
    label = 10;
    break L1;
   } else {
    $6 = $21;
   }
  }
  _expression($parser);
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)==(3);
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$5>>2]|0;
  if ($12) {
   $$lcssa = $13;$$lcssa8 = $14;
   break;
  }
  _lily_emit_eval_expr($13,$14);
 }
 if ((label|0) == 10) {
  return ($result_type$0|0);
 }
 _lily_emit_eval_lambda_body($$lcssa,$$lcssa8,$expect_type);
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $result_type$0 = 0;
  return ($result_type$0|0);
 }
 $19 = ((($17)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $result_type$0 = $20;
 return ($result_type$0|0);
}
function _handle_multiline($parser,$key_id) {
 $parser = $parser|0;
 $key_id = $key_id|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1240 + ($key_id<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vii[$1 & 63]($parser,1);
 return;
}
function _fix_first_file_name($parser,$filename) {
 $parser = $parser|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 HEAP32[$2>>2] = $filename;
 $3 = HEAP32[$0>>2]|0;
 _set_module_names_by_path($3,$filename);
 $4 = ((($parser)) + 18|0);
 HEAP16[$4>>1] = 0;
 return;
}
function _handle_rewind($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _rewind_parser($parser,$1);
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 0;
 }
 $7 = ((($parser)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = ((($8)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($8)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($parser)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($parser)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 16|0);
 HEAP32[$24>>2] = $23;
 return;
}
function _rewind_parser($parser,$rs) {
 $parser = $parser|0;
 $rs = $rs|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_iter$0 = 0, $block_iter$0$in = 0, $block_iter$0$lcssa6 = 0, $call_iter$0 = 0, $call_iter$0$lcssa = 0, $catch_iter$0 = 0, $catch_iter$0$lcssa = 0, $save_iter$0 = 0, $save_iter$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($parser)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 10|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($4)) + 12|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($parser)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = 0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($8)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($8)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($parser)) + 24|0);
 HEAP32[$13>>2] = $8;
 $14 = ((($8)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $save_iter$0 = $15;
 while(1) {
  $16 = ((($save_iter$0)) + 8|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($save_iter$0)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $save_iter$0$lcssa = $save_iter$0;
   break;
  } else {
   $save_iter$0 = $18;
  }
 }
 HEAP32[$14>>2] = $save_iter$0$lcssa;
 $20 = ((($8)) + 20|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($parser)) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($22)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($22)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = ((($29)) + 4|0);
  HEAP32[$31>>2] = 0;
 }
 $32 = ((($22)) + 40|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($22)) + 44|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($22)) + 52|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($22)) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($22)) + 56|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($22)) + 60|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($22)) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$35>>2]|0;
 $$pn = $44;
 while(1) {
  $block_iter$0$in = ((($$pn)) + 48|0);
  $block_iter$0 = HEAP32[$block_iter$0$in>>2]|0;
  $45 = ($block_iter$0|0)==($43|0);
  if ($45) {
   break;
  }
  $46 = ((($block_iter$0)) + 18|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = ($47&65535)>(10);
  if ($48) {
   $block_iter$0$lcssa6 = $block_iter$0;
   label = 8;
   break;
  } else {
   $$pn = $block_iter$0;
  }
 }
 if ((label|0) == 8) {
  $49 = ((($block_iter$0$lcssa6)) + 10|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = ((($22)) + 64|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  HEAP16[$53>>1] = $50;
 }
 $54 = HEAP32[$35>>2]|0;
 HEAP32[$40>>2] = $54;
 $55 = ((($22)) + 72|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($22)) + 82|0);
 HEAP16[$56>>1] = 1;
 $57 = HEAP32[$21>>2]|0;
 $58 = ((($57)) + 100|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 6|0);
 HEAP16[$60>>1] = 0;
 $61 = ((($59)) + 4|0);
 HEAP16[$61>>1] = 0;
 $62 = ((($parser)) + 56|0);
 $63 = HEAP32[$62>>2]|0;
 _lily_rewind_lex_state($63);
 $64 = ((($rs)) + 16|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$62>>2]|0;
 $67 = ((($66)) + 16|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($parser)) + 76|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 _lily_mb_flush($71);
 $72 = ((($69)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 _lily_mb_flush($73);
 $74 = ((($69)) + 16|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($69)) + 12|0);
 HEAP32[$75>>2] = 0;
 $76 = ((($parser)) + 68|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 72|0);
 $79 = HEAP32[$78>>2]|0;
 $catch_iter$0 = $79;
 while(1) {
  $80 = ((($catch_iter$0)) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0|0);
  if ($82) {
   $catch_iter$0$lcssa = $catch_iter$0;
   break;
  } else {
   $catch_iter$0 = $81;
  }
 }
 HEAP32[$78>>2] = $catch_iter$0$lcssa;
 $83 = ((($77)) + 76|0);
 HEAP32[$83>>2] = 0;
 $84 = ((($77)) + 20|0);
 HEAP16[$84>>1] = 0;
 $85 = ((($77)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$77>>2] = $86;
 $87 = ((($77)) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 $call_iter$0 = $88;
 while(1) {
  $89 = ((($call_iter$0)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(0|0);
  if ($91) {
   $call_iter$0$lcssa = $call_iter$0;
   break;
  } else {
   $call_iter$0 = $90;
  }
 }
 HEAP32[$87>>2] = $call_iter$0$lcssa;
 $92 = ((($call_iter$0$lcssa)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($77)) + 12|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($77)) + 16|0);
 HEAP32[$95>>2] = 0;
 $96 = ((($parser)) + 64|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($parser)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$rs>>2]|0;
 $101 = ((($rs)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($parser)) + 16|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104&65535;
 _lily_rewind_symtab($97,$99,$100,$102,$105);
 return;
}
function _parser_loop($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_lexer($1);
 $2 = ((($1)) + 40|0);
 $3 = ((($parser)) + 76|0);
 $4 = ((($parser)) + 60|0);
 $5 = ((($parser)) + 60|0);
 $6 = ((($parser)) + 76|0);
 $7 = ((($parser)) + 60|0);
 $8 = ((($parser)) + 24|0);
 L1: while(1) {
  $9 = HEAP32[$2>>2]|0;
  switch ($9|0) {
  case 35:  {
   _statement($parser,1);
   continue L1;
   break;
  }
  case 3:  {
   $10 = HEAP32[$4>>2]|0;
   _lily_emit_leave_block($10);
   _lily_lexer($1);
   continue L1;
   break;
  }
  case 53: case 52:  {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 76|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 52|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    label = 6;
    break L1;
   }
   _setup_and_exec_vm($parser);
   $18 = HEAP32[$2>>2]|0;
   $19 = ($18|0)==(52);
   if (!($19)) {
    label = 12;
    break L1;
   }
   $20 = HEAP32[$0>>2]|0;
   _lily_lexer_handle_page_data($20);
   $21 = HEAP32[$2>>2]|0;
   $22 = ($21|0)==(53);
   if ($22) {
    label = 12;
    break L1;
   }
   _lily_lexer($1);
   continue L1;
   break;
  }
  case 40: case 30: case 39: case 38: case 4: case 0: case 37: case 42: case 41:  {
   _expression($parser);
   $23 = HEAP32[$7>>2]|0;
   $24 = HEAP32[$8>>2]|0;
   _lily_emit_eval_expr($23,$24);
   continue L1;
   break;
  }
  default: {
   label = 11;
   break L1;
  }
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$6>>2]|0;
  _lily_raise($17,1,6402,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $25 = HEAP32[$3>>2]|0;
  $26 = (_tokname($9)|0);
  HEAP32[$vararg_buffer1>>2] = $26;
  _lily_raise($25,1,6443,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _setup_and_exec_vm($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_register_classes($1,$3);
 $4 = ((($parser)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_prepare_main($5);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($parser)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_vm_prep($6,$7,$10,$12);
 _update_all_cid_tables($parser);
 $13 = ((($parser)) + 16|0);
 HEAP16[$13>>1] = 1;
 $14 = HEAP32[$2>>2]|0;
 _lily_vm_execute($14);
 HEAP16[$13>>1] = 0;
 $15 = HEAP32[$4>>2]|0;
 _lily_reset_main($15);
 return;
}
function _update_all_cid_tables($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $entry_iter$0 = 0, $entry_iter$01 = 0, $entry_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $entry_iter$01 = HEAP32[$parser>>2]|0;
 $0 = ($entry_iter$01|0)==(0|0);
 if ($0) {
  return;
 } else {
  $entry_iter$02 = $entry_iter$01;
 }
 while(1) {
  $1 = ((($entry_iter$02)) + 48|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   _update_cid_table($parser,$entry_iter$02);
  }
  $entry_iter$0 = HEAP32[$entry_iter$02>>2]|0;
  $4 = ($entry_iter$0|0)==(0|0);
  if ($4) {
   break;
  } else {
   $entry_iter$02 = $entry_iter$0;
  }
 }
 return;
}
function _lily_parse_string($s,$name,$str) {
 $s = $s|0;
 $name = $name|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_parse_string($1,1,$name,$str)|0);
 return ($2|0);
}
function _parse_string($parser,$mode,$name,$str) {
 $parser = $parser|0;
 $mode = $mode|0;
 $name = $name|0;
 $str = $str|0;
 var $$0$reg2mem$0 = 0, $$reg2mem19$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = ((($parser)) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  label = 4;
 } else {
  __THREW__ = 0;
  invoke_vii(22,($parser|0),($name|0));
  $3 = __THREW__; __THREW__ = 0;
  if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = (threwValue); } else { $4 = -1; };
  $5 = tempRet0;
  $cond = ($4|0)==(1);
  if ($cond) {
   $$reg2mem19$0 = $5;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  __THREW__ = 0;
  invoke_vi(1,($parser|0));
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
  $8 = tempRet0;
  $cond25 = ($7|0)==(1);
  if ($cond25) {
   $$reg2mem19$0 = $8;
  } else {
   $9 = ((($parser)) + 76|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   _setjmpTable = _saveSetjmp($12,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $13 = __THREW__; __THREW__ = 0;
   if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
   $15 = tempRet0;
   $cond26 = ($14|0)==(1);
   if ($cond26) {
    $$reg2mem19$0 = $15;
   } else {
    $$reg2mem19$0 = 0;
   }
  }
 }
 while(1) {
  $16 = ($$reg2mem19$0|0)==(0);
  if (!($16)) {
   label = 13;
   break;
  }
  $17 = ((($parser)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  invoke_viii(1,($18|0),($mode|0),($str|0));
  $19 = __THREW__; __THREW__ = 0;
  if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
  $21 = tempRet0;
  $cond21 = ($20|0)==(1);
  if ($cond21) {
   $$reg2mem19$0 = $21;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(2,($parser|0));
  $22 = __THREW__; __THREW__ = 0;
  if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = (threwValue); } else { $23 = -1; };
  $24 = tempRet0;
  $cond22 = ($23|0)==(1);
  if ($cond22) {
   $$reg2mem19$0 = $24;
   continue;
  }
  $25 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  invoke_vi(3,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
  $28 = tempRet0;
  $cond23 = ($27|0)==(1);
  if ($cond23) {
   $$reg2mem19$0 = $28;
   continue;
  }
  $29 = ((($parser)) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  __THREW__ = 0;
  invoke_vi(4,($30|0));
  $31 = __THREW__; __THREW__ = 0;
  if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = (threwValue); } else { $32 = -1; };
  $33 = tempRet0;
  $cond24 = ($32|0)==(1);
  if ($cond24) {
   $$reg2mem19$0 = $33;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $$0$reg2mem$0 = 1;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 else if ((label|0) == 13) {
  $34 = ((($parser)) + 84|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 20|0);
  HEAP32[$36>>2] = 1;
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _lily_get_error($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 _build_error($1);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_mb_get($4)|0);
 return ($5|0);
}
function _build_error($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $class_name$0 = 0, $frame$01 = 0, $func_name$0 = 0, $separator$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_mb_flush($3);
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$parser>>2]|0;
  $10 = ($8|0)==($9|0);
  if (!($10)) {
   $11 = HEAP32[$9>>2]|0;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($8)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$vararg_buffer>>2] = $14;
    _lily_mb_add_fmt($3,6464,$vararg_buffer);
   }
  }
 }
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_mb_get($16)|0);
 $18 = (_lily_name_for_error($1)|0);
 _lily_mb_add($3,$18);
 $19 = HEAP8[$17>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  _lily_mb_add_char($3,10);
 } else {
  HEAP32[$vararg_buffer1>>2] = $17;
  _lily_mb_add_fmt($3,6468,$vararg_buffer1);
 }
 $21 = ((($parser)) + 16|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  $24 = ((($parser)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   STACKTOP = sp;return;
  }
  $28 = ((($1)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = ((($25)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $39 = $32;
  } else {
   $39 = $29;
  }
  $33 = ((($parser)) + 64|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $38;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $39;
  _lily_mb_add_fmt($3,6474,$vararg_buffer4);
  STACKTOP = sp;return;
 }
 $40 = ((($parser)) + 68|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_mb_add($3,6490);
 $44 = ($43|0)==(0|0);
 if ($44) {
  STACKTOP = sp;return;
 } else {
  $frame$01 = $43;
 }
 while(1) {
  $45 = HEAP32[$frame$01>>2]|0;
  $46 = ((($45)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($45)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)==(0|0);
  if ($50) {
   $class_name$0 = 18083;$func_name$0 = $49;$separator$0 = 18083;
  } else {
   $51 = (_strcmp($49,7250)|0);
   $52 = ($51|0)==(0);
   if ($52) {
    $class_name$0 = $47;$func_name$0 = 18083;$separator$0 = 18083;
   } else {
    $class_name$0 = $47;$func_name$0 = $49;$separator$0 = 17513;
   }
  }
  $53 = HEAP32[$frame$01>>2]|0;
  $54 = ((($53)) + 36|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if ($56) {
   HEAP32[$vararg_buffer8>>2] = $class_name$0;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $separator$0;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $func_name$0;
   _lily_mb_add_fmt($3,6502,$vararg_buffer8);
  } else {
   $57 = ((($45)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($frame$01)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $60;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $62;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $class_name$0;
   $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
   HEAP32[$vararg_ptr18>>2] = $separator$0;
   $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
   HEAP32[$vararg_ptr19>>2] = $func_name$0;
   _lily_mb_add_fmt($3,6527,$vararg_buffer13);
  }
  $63 = ((($frame$01)) + 32|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   break;
  } else {
   $frame$01 = $64;
  }
 }
 STACKTOP = sp;return;
}
function _lily_new_type_system($tm,$dynamic_type,$question_type) {
 $tm = $tm|0;
 $dynamic_type = $dynamic_type|0;
 $question_type = $question_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(32)|0);
 $1 = (_lily_malloc(16)|0);
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = $tm;
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 4|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 10|0);
 HEAP16[$4>>1] = 4;
 $5 = ((($0)) + 8|0);
 HEAP16[$5>>1] = 1;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = $dynamic_type;
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = $question_type;
 $9 = HEAP32[$0>>2]|0;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 12|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 return ($0|0);
}
function _lily_free_type_system($ts) {
 $ts = $ts|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ts|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ts>>2]|0;
  _lily_free($1);
 }
 _lily_free($ts);
 return;
}
function _lily_ts_resolve_with($ts,$type,$fallback) {
 $ts = $ts|0;
 $type = $type|0;
 $fallback = $fallback|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $exitcond = 0, $i$02 = 0, $ret$1 = 0, $target$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $ret$1 = 0;
  return ($ret$1|0);
 }
 $1 = ((($type)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & 9216;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $ret$1 = $type;
  return ($ret$1|0);
 }
 $5 = ((($type)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 46|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(0);
 if (!($9)) {
  $10 = ((($ts)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($type)) + 10|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ((($ts)) + 6|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  _lily_tm_reserve($11,$18);
  $19 = ((($type)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$10>>2]|0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP16[$12>>1]|0;
  $25 = ($24<<16>>16)==(0);
  if ($25) {
   $$lcssa = $21;
  } else {
   $29 = $21;$i$02 = 0;
   while(1) {
    $26 = (($20) + ($i$02<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_lily_ts_resolve_with($ts,$27,$fallback)|0);
    _lily_tm_add_unchecked($29,$28);
    $30 = (($i$02) + 1)|0;
    $31 = HEAP16[$12>>1]|0;
    $32 = $31&65535;
    $33 = ($30|0)<($32|0);
    $34 = HEAP32[$10>>2]|0;
    if ($33) {
     $29 = $34;$i$02 = $30;
    } else {
     $$lcssa = $34;
     break;
    }
   }
  }
  $35 = HEAP16[$1>>1]|0;
  $36 = $35&65535;
  $37 = HEAP32[$5>>2]|0;
  $38 = ((($$lcssa)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) - ($23))|0;
  $41 = (_lily_tm_make($$lcssa,$36,$37,$40)|0);
  $ret$1 = $41;
  return ($ret$1|0);
 }
 $42 = ((($6)) + 8|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($43<<16>>16)==(-5);
 if ($45) {
  $46 = ((($ts)) + 4|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = ((($type)) + 8|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = (($51) + ($48))|0;
  $53 = HEAP32[$ts>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if (!($56)) {
   $57 = ((($55)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 8|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = ($60<<16>>16)==(-6);
   if (!($61)) {
    $ret$1 = $55;
    return ($ret$1|0);
   }
  }
  $62 = HEAP16[$46>>1]|0;
  $63 = $62&65535;
  $64 = HEAP16[$49>>1]|0;
  $65 = $64&65535;
  $66 = (($65) + ($63))|0;
  $67 = HEAP32[$ts>>2]|0;
  $68 = (($67) + ($66<<2)|0);
  HEAP32[$68>>2] = $fallback;
  $ret$1 = $fallback;
  return ($ret$1|0);
 }
 $69 = ($43&65535)>(65532);
 if (!($69)) {
  $ret$1 = $type;
  return ($ret$1|0);
 }
 $70 = $44 ^ 65535;
 $71 = (((($ts)) + 12|0) + ($70<<1)|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72&65535;
 $74 = (($73) + -1)|0;
 $75 = ($74|0)==(0);
 if ($75) {
  $ret$1 = $type;
  return ($ret$1|0);
 }
 $76 = (($70) + -1)|0;
 $77 = (((($ts)) + 12|0) + ($76<<1)|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = $78&65535;
 $80 = ($79|0)<($74|0);
 if ($80) {
  $81 = ((($ts)) + 28|0);
  $82 = $72&65535;
  $83 = (($82) + -1)|0;
  $target$01 = $79;
  while(1) {
   $84 = HEAP32[$81>>2]|0;
   $85 = HEAP32[$ts>>2]|0;
   $86 = (($85) + ($target$01<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   _lily_tm_add_unchecked($84,$87);
   $88 = (($target$01) + 1)|0;
   $exitcond = ($88|0)==($83|0);
   if ($exitcond) {
    break;
   } else {
    $target$01 = $88;
   }
  }
 }
 $89 = HEAP32[$ts>>2]|0;
 $90 = (($89) + ($74<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $ret$1 = $91;
 return ($ret$1|0);
}
function _lily_ts_resolve($ts,$type) {
 $ts = $ts|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_ts_resolve_with($ts,$type,$1)|0);
 return ($2|0);
}
function _lily_ts_check($ts,$left,$right) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_raw($ts,$left,$right,2)|0);
 return ($0|0);
}
function _check_raw($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $ret$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($left|0)==(0|0);
 $1 = ($right|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $2 = ($left|0)==($right|0);
  $3 = $2&1;
  $$not = $2 ^ 1;
  $4 = $flags & 8;
  $5 = ($4|0)==(0);
  $or$cond3 = $5 | $$not;
  if ($or$cond3) {
   $ret$0 = $3;
   return ($ret$0|0);
  }
  $6 = ((($ts)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_tm_add($7,$left);
  $ret$0 = $3;
  return ($ret$0|0);
 }
 $8 = ((($left)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(-6);
 if ($12) {
  $13 = $flags & 8;
  $14 = ($13|0)==(0);
  if ($14) {
   $ret$0 = 1;
   return ($ret$0|0);
  }
  $15 = ((($ts)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  _lily_tm_add($16,$right);
  $ret$0 = 1;
  return ($ret$0|0);
 }
 $17 = ((($right)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 8|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20<<16>>16)==(-6);
 if ($21) {
  $22 = $flags & 8;
  $23 = ($22|0)==(0);
  if ($23) {
   $ret$0 = 1;
   return ($ret$0|0);
  }
  $24 = ((($ts)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_tm_add($25,$left);
  $ret$0 = 1;
  return ($ret$0|0);
 }
 switch ($11<<16>>16) {
 case -5:  {
  $26 = (_check_generic($ts,$left,$right,$flags)|0);
  $ret$0 = $26;
  return ($ret$0|0);
  break;
 }
 case 7:  {
  label = 12;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 12) {
  $27 = ($20<<16>>16)==(7);
  if ($27) {
   $28 = (_check_function($ts,$left,$right,$flags)|0);
   $ret$0 = $28;
   return ($ret$0|0);
  }
 }
 $29 = HEAP32[$8>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP16[$30>>1]|0;
 switch ($31<<16>>16) {
 case 11:  {
  $32 = (_check_tuple($ts,$left,$right,$flags)|0);
  $ret$0 = $32;
  return ($ret$0|0);
  break;
 }
 case -2:  {
  $33 = (_collect_scoop($ts,$left,$right,$flags)|0);
  $ret$0 = $33;
  return ($ret$0|0);
  break;
 }
 default: {
  $34 = (_check_misc($ts,$left,$right,$flags)|0);
  $ret$0 = $34;
  return ($ret$0|0);
 }
 }
 return (0)|0;
}
function _check_generic($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ($left|0)==($right|0);
  $3 = $2&1;
  $$not = $2 ^ 1;
  $4 = $flags & 8;
  $5 = ($4|0)==(0);
  $or$cond = $5 | $$not;
  if ($or$cond) {
   $ret$2 = $3;
   return ($ret$2|0);
  }
  $6 = ((($ts)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_tm_add($7,$left);
  $ret$2 = $3;
  return ($ret$2|0);
 }
 $8 = ((($ts)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ((($left)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($13) + ($10))|0;
 $15 = HEAP32[$ts>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = ((($ts)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==($20|0);
  if (!($21)) {
   $24 = ($17|0)==($right|0);
   if ($24) {
    $ret$2 = 1;
    return ($ret$2|0);
   }
   $25 = ((($17)) + 6|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 & 4096;
   $28 = ($27<<16>>16)==(0);
   if ($28) {
    $33 = $flags | 1;
    $34 = (_check_raw($ts,$17,$right,$33)|0);
    $ret$2 = $34;
    return ($ret$2|0);
   }
   $29 = (_lily_ts_unify($ts,$17,$right)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    $ret$2 = 0;
    return ($ret$2|0);
   }
   $31 = HEAP32[$ts>>2]|0;
   $32 = (($31) + ($14<<2)|0);
   HEAP32[$32>>2] = $29;
   $ret$2 = 1;
   return ($ret$2|0);
  }
 }
 $22 = HEAP32[$ts>>2]|0;
 $23 = (($22) + ($14<<2)|0);
 HEAP32[$23>>2] = $right;
 $ret$2 = 1;
 return ($ret$2|0);
}
function _lily_ts_unify($ts,$left,$right) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_check_raw($ts,$left,$right,11)|0);
 $5 = ($4|0)==(0);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  $8 = ((($6)) + 4|0);
  HEAP32[$8>>2] = $3;
  $result$0 = 0;
  return ($result$0|0);
 } else {
  $7 = (_lily_tm_pop($6)|0);
  $result$0 = $7;
  return ($result$0|0);
 }
 return (0)|0;
}
function _check_function($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$09 = 0, $or$cond = 0, $or$cond5 = 0, $ret$4 = 0, $right_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_tm_pos($1)|0);
 $3 = $flags & 9;
 $4 = ((($left)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($right)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3 | 2;
 $11 = (_check_raw($ts,$6,$9,$10)|0);
 $12 = ($11|0)!=(0);
 $13 = $flags & 8;
 $14 = ($13|0)==(0);
 $or$cond = $14 | $12;
 if (!($or$cond)) {
  $15 = HEAP32[$0>>2]|0;
  _lily_tm_restore($15,$2);
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[442]|0;
  _lily_tm_add($16,$17);
 }
 $18 = ((($left)) + 10|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ((($right)) + 10|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($19&65535)>($21&65535);
 if ($22) {
  $23 = ($19<<16>>16)==(2);
  if ($23) {
   $24 = HEAP32[$4>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 8|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30&65535)>(65532);
   if ($31) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $$0 = 0;
  return ($$0|0);
 }
 $32 = $3 | 4;
 $33 = HEAP16[$18>>1]|0;
 $34 = ($33&65535)>(1);
 L12: do {
  if ($34) {
   $i$09 = 1;
   while(1) {
    $39 = HEAP32[$4>>2]|0;
    $40 = (($39) + ($i$09<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$7>>2]|0;
    $43 = (($42) + ($i$09<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 8|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = ($48<<16>>16)==(-4);
    if ($49) {
     $50 = ((($41)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($51)) + 8|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = ($53<<16>>16)==(-4);
     if ($54) {
      $right_type$0 = $44;
     } else {
      $55 = ((($44)) + 16|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = HEAP32[$56>>2]|0;
      $right_type$0 = $57;
     }
    } else {
     $right_type$0 = $44;
    }
    $58 = (_check_raw($ts,$41,$right_type$0,$32)|0);
    $59 = ($58|0)==(0);
    $37 = (($i$09) + 1)|0;
    if ($59) {
     $ret$4 = 0;
     break L12;
    }
    $35 = HEAP16[$18>>1]|0;
    $36 = $35&65535;
    $38 = ($37|0)<($36|0);
    if ($38) {
     $i$09 = $37;
    } else {
     $ret$4 = 1;
     break;
    }
   }
  } else {
   $ret$4 = 1;
  }
 } while(0);
 $60 = ($ret$4|0)==(0);
 $61 = $flags & 8;
 $62 = ($61|0)==(0);
 $or$cond5 = $62 | $60;
 if ($or$cond5) {
  $$0 = $ret$4;
  return ($$0|0);
 }
 $63 = HEAP16[$18>>1]|0;
 $64 = $63&65535;
 _simple_unify($ts,$left,$right,$64);
 $$0 = $ret$4;
 return ($$0|0);
}
function _simple_unify($ts,$left,$right,$num_subtypes) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $num_subtypes = $num_subtypes|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($left)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($right)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($3&65535)<($7&65535);
 $$ = $8 ? $1 : $5;
 $9 = ($num_subtypes|0)==(0);
 if ($9) {
  $21 = ((($ts)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($$)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_tm_add($22,$24);
  return;
 } else {
  $10 = ((($left)) + 6|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ((($right)) + 6|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = $12 & 512;
  $17 = $16 & $15;
  $18 = ((($ts)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_lily_tm_make($19,$17,$$,$num_subtypes)|0);
  _lily_tm_add($19,$20);
  return;
 }
}
function _check_tuple($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($right)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(11);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($left)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 8192;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  $9 = ((($left)) + 10|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ((($right)) + 10|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($10<<16>>16)==($12<<16>>16);
  if (!($13)) {
   $$0 = 0;
   return ($$0|0);
  }
  $14 = (_check_misc($ts,$left,$right,$flags)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = $flags & 8;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($left)) + 10|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ((($right)) + 10|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($18&65535)>($20&65535);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = $20&65535;
 $23 = ((($ts)) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ((($ts)) + 6|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = (($28) + ($25))|0;
 $30 = ((($left)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $37 ^ 65535;
 $39 = (($29) + ($22))|0;
 $40 = ((($ts)) + 10|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = ($39>>>0)<($42>>>0);
 if (!($43)) {
  _grow_types($ts);
 }
 $44 = HEAP16[$19>>1]|0;
 $45 = $44&65535;
 $46 = ($44<<16>>16)==(0);
 if ($46) {
  $$lcssa = $45;
 } else {
  $47 = ((($right)) + 16|0);
  $48 = HEAP16[$19>>1]|0;
  $49 = $48&65535;
  $i$01 = 0;
  while(1) {
   $50 = HEAP32[$47>>2]|0;
   $51 = (($50) + ($i$01<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($i$01) + ($29))|0;
   $54 = HEAP32[$ts>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   HEAP32[$55>>2] = $52;
   $56 = (($i$01) + 1)|0;
   $57 = ($56|0)<($49|0);
   if ($57) {
    $i$01 = $56;
   } else {
    $$lcssa = $49;
    break;
   }
  }
 }
 $58 = HEAP16[$26>>1]|0;
 $59 = $58&65535;
 $60 = (($59) + ($$lcssa))|0;
 $61 = $60&65535;
 HEAP16[$26>>1] = $61;
 $62 = HEAP16[$23>>1]|0;
 $63 = $62&65535;
 $64 = (($63) + ($60))|0;
 $65 = $64&65535;
 $66 = (((($ts)) + 12|0) + ($38<<1)|0);
 HEAP16[$66>>1] = $65;
 $$0 = 1;
 return ($$0|0);
}
function _check_misc($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$02 = 0, $$not = 0, $$ret$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $num_subtypes = 0, $or$cond = 0, $or$cond4 = 0, $or$cond9 = 0, $ret$0 = 0, $ret$16 = 0;
 var $ret$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $num_subtypes = sp;
 $0 = $flags & 2;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $3 = $flags & 4;
   $4 = ($3|0)==(0);
   if ($4) {
    $6 = (_invariant_check($left,$right,$num_subtypes)|0);
    $ret$0 = $6;
    break;
   } else {
    $5 = (_non_invariant_check($right,$left,$num_subtypes)|0);
    $ret$0 = $5;
    break;
   }
  } else {
   $2 = (_non_invariant_check($left,$right,$num_subtypes)|0);
   $ret$0 = $2;
  }
 } while(0);
 $7 = ($ret$0|0)!=(0);
 $8 = HEAP32[$num_subtypes>>2]|0;
 $9 = ($8|0)!=(0);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $flags & 9;
  $11 = ((($left)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($right)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$num_subtypes>>2]|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = HEAP32[$num_subtypes>>2]|0;
   $i$05 = 0;$ret$16 = 1;
   while(1) {
    $18 = (($12) + ($i$05<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($14) + ($i$05<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_check_raw($ts,$19,$21,$10)|0);
    $23 = ($22|0)==(0);
    $$ret$1 = $23 ? 0 : $ret$16;
    $24 = (($i$05) + 1)|0;
    $$not = $23 ^ 1;
    $25 = ($24|0)<($17|0);
    $or$cond9 = $25 & $$not;
    if ($or$cond9) {
     $i$05 = $24;$ret$16 = $$ret$1;
    } else {
     $$02 = $10;$ret$4 = $$ret$1;
     break;
    }
   }
  } else {
   $$02 = $10;$ret$4 = 1;
  }
 } else {
  $$02 = $flags;$ret$4 = $ret$0;
 }
 $26 = ($ret$4|0)==(0);
 $27 = $$02 & 8;
 $28 = ($27|0)==(0);
 $or$cond4 = $26 | $28;
 if ($or$cond4) {
  STACKTOP = sp;return ($ret$4|0);
 }
 $29 = HEAP32[$num_subtypes>>2]|0;
 _simple_unify($ts,$left,$right,$29);
 STACKTOP = sp;return ($ret$4|0);
}
function _non_invariant_check($left,$right,$num_subtypes) {
 $left = $left|0;
 $right = $right|0;
 $num_subtypes = $num_subtypes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($left)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($right)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_class_greater_eq($1,$3)|0);
 $5 = ((($left)) + 10|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 HEAP32[$num_subtypes>>2] = $7;
 return ($4|0);
}
function _lily_class_greater_eq($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($left|0)==($right|0);
 L1: do {
  if ($0) {
   $ret$0 = 1;
  } else {
   $$0 = $right;
   while(1) {
    $1 = ($$0|0)==(0|0);
    if ($1) {
     $ret$0 = 0;
     break L1;
    }
    $2 = ((($$0)) + 32|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==($left|0);
    if ($4) {
     $ret$0 = 1;
     break;
    } else {
     $$0 = $3;
    }
   }
  }
 } while(0);
 return ($ret$0|0);
}
function _invariant_check($left,$right,$num_subtypes) {
 $left = $left|0;
 $right = $right|0;
 $num_subtypes = $num_subtypes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($left)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($right)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 $5 = $4&1;
 $6 = ((($left)) + 10|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 HEAP32[$num_subtypes>>2] = $8;
 return ($5|0);
}
function _grow_types($ts) {
 $ts = $ts|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 10|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = $3&65535;
 HEAP16[$0>>1] = $4;
 $5 = HEAP32[$ts>>2]|0;
 $6 = $2 << 3;
 $7 = $6 & 262136;
 $8 = (_lily_realloc($5,$7)|0);
 HEAP32[$ts>>2] = $8;
 return;
}
function _collect_scoop($ts,$left,$right,$flags) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags & 8;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ts)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($ts)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + ($4))|0;
 $9 = ((($left)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 ^ 65535;
 $15 = ((($right)) + 10|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($17) + ($8))|0;
 $19 = ((($ts)) + 10|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($18>>>0)<($21>>>0);
 if (!($22)) {
  _grow_types($ts);
 }
 $23 = HEAP32[$ts>>2]|0;
 $24 = (($23) + ($8<<2)|0);
 HEAP32[$24>>2] = $right;
 $25 = HEAP16[$5>>1]|0;
 $26 = $25&65535;
 $27 = (($26) + 1)|0;
 $28 = $27&65535;
 HEAP16[$5>>1] = $28;
 $29 = HEAP16[$2>>1]|0;
 $30 = $29&65535;
 $31 = (($30) + ($27))|0;
 $32 = $31&65535;
 $33 = (((($ts)) + 12|0) + ($14<<1)|0);
 HEAP16[$33>>1] = $32;
 $$0 = 1;
 return ($$0|0);
}
function _lily_ts_type_greater_eq($ts,$left,$right) {
 $ts = $ts|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_raw($ts,$left,$right,3)|0);
 return ($0|0);
}
function _lily_ts_resolve_by_second($ts,$first,$second) {
 $ts = $ts|0;
 $first = $first|0;
 $second = $second|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($ts)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($2) + 1)|0;
 $7 = (($6) + ($5))|0;
 $8 = ((($first)) + 10|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($7) + ($10))|0;
 $12 = ((($ts)) + 10|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($11>>>0)<($14>>>0);
 if (!($15)) {
  _grow_types($ts);
 }
 $16 = HEAP16[$8>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  $29 = $7&65535;
  HEAP16[$0>>1] = $29;
  $30 = (_lily_ts_resolve($ts,$second)|0);
  HEAP16[$0>>1] = $1;
  return ($30|0);
 }
 $18 = ((($first)) + 16|0);
 $19 = HEAP16[$8>>1]|0;
 $20 = $19&65535;
 $i$01 = 0;
 while(1) {
  $21 = HEAP32[$18>>2]|0;
  $22 = (($21) + ($i$01<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($i$01) + ($7))|0;
  $25 = HEAP32[$ts>>2]|0;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $23;
  $27 = (($i$01) + 1)|0;
  $28 = ($27|0)<($20|0);
  if ($28) {
   $i$01 = $27;
  } else {
   break;
  }
 }
 $29 = $7&65535;
 HEAP16[$0>>1] = $29;
 $30 = (_lily_ts_resolve($ts,$second)|0);
 HEAP16[$0>>1] = $1;
 return ($30|0);
}
function _lily_ts_resolve_as_question($ts) {
 $ts = $ts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 12|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($ts)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535)<($1&65535);
 if ($4) {
  $5 = $3&65535;
  $6 = ((($ts)) + 24|0);
  $7 = $1&65535;
  $i$01 = $5;
  while(1) {
   $8 = HEAP32[$ts>>2]|0;
   $9 = (($8) + ($i$01<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP32[$6>>2]|0;
    HEAP32[$9>>2] = $12;
   }
   $13 = (($i$01) + 1)|0;
   $exitcond = ($13|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $13;
   }
  }
 }
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 return;
}
function _lily_ts_default_incomplete_solves($ts) {
 $ts = $ts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $j$0$lcssa = 0, $j$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 12|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($ts)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ts)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5&65535)<($1&65535);
 if (!($6)) {
  return;
 }
 $7 = $5&65535;
 $8 = ((($ts)) + 28|0);
 $9 = ((($ts)) + 28|0);
 $10 = ((($ts)) + 28|0);
 $11 = ((($ts)) + 20|0);
 $12 = $1&65535;
 $i$02 = $7;
 while(1) {
  $13 = HEAP32[$ts>>2]|0;
  $14 = (($13) + ($i$02<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = ($15|0)==($3|0);
  $or$cond = $16 | $17;
  if (!($or$cond)) {
   $18 = ((($15)) + 6|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 & 4096;
   $21 = ($20<<16>>16)==(0);
   if (!($21)) {
    $22 = ((($15)) + 10|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = ($23<<16>>16)==(0);
    if ($24) {
     $j$0$lcssa = 0;
    } else {
     $25 = ((($15)) + 16|0);
     $j$01 = 0;
     while(1) {
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + ($j$01<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==(0|0);
      if ($29) {
       label = 10;
      } else {
       $30 = ((($28)) + 6|0);
       $31 = HEAP16[$30>>1]|0;
       $32 = $31 & 4096;
       $33 = ($32<<16>>16)==(0);
       if ($33) {
        label = 10;
       } else {
        $34 = HEAP32[$10>>2]|0;
        $35 = HEAP32[$11>>2]|0;
        _lily_tm_add($34,$35);
       }
      }
      if ((label|0) == 10) {
       label = 0;
       $36 = HEAP32[$9>>2]|0;
       _lily_tm_add($36,$28);
      }
      $37 = (($j$01) + 1)|0;
      $38 = HEAP16[$22>>1]|0;
      $39 = $38&65535;
      $40 = ($37|0)<($39|0);
      if ($40) {
       $j$01 = $37;
      } else {
       $j$0$lcssa = $37;
       break;
      }
     }
    }
    $41 = HEAP32[$8>>2]|0;
    $42 = ((($15)) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_lily_tm_make($41,0,$43,$j$0$lcssa)|0);
    $45 = HEAP32[$ts>>2]|0;
    $46 = (($45) + ($i$02<<2)|0);
    HEAP32[$46>>2] = $44;
   }
  }
  $47 = (($i$02) + 1)|0;
  $exitcond = ($47|0)==($12|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $47;
  }
 }
 return;
}
function _lily_ts_scope_save($ts,$p) {
 $ts = $ts|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 HEAP16[$p>>1] = $1;
 $2 = ((($ts)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($p)) + 2|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($p)) + 8|0);
 $6 = ((($ts)) + 12|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = HEAP16[$2>>1]|0;
 $18 = $17&65535;
 $19 = HEAP16[$0>>1]|0;
 $20 = $19&65535;
 $21 = (($20) + ($18))|0;
 $22 = $21&65535;
 HEAP16[$0>>1] = $22;
 $23 = ((($ts)) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 HEAP16[$2>>1] = $24;
 $25 = $24&65535;
 $26 = (($25) + ($21))|0;
 $27 = $26&65535;
 HEAP16[$6>>1] = $27;
 $28 = HEAP16[$0>>1]|0;
 $29 = $28&65535;
 $30 = HEAP16[$2>>1]|0;
 $31 = $30&65535;
 $32 = (($31) + ($29))|0;
 $33 = ((($ts)) + 10|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34&65535;
 $36 = ($32>>>0)<($35>>>0);
 if (!($36)) {
  _grow_types($ts);
 }
 $37 = HEAP16[$2>>1]|0;
 $38 = ($37<<16>>16)==(0);
 if ($38) {
  return;
 }
 $39 = HEAP16[$0>>1]|0;
 $40 = $39&65535;
 $41 = HEAP16[$2>>1]|0;
 $42 = $41&65535;
 $i$01 = 0;
 while(1) {
  $43 = (($40) + ($i$01))|0;
  $44 = HEAP32[$ts>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = 0;
  $46 = (($i$01) + 1)|0;
  $47 = ($46|0)<($42|0);
  if ($47) {
   $i$01 = $46;
  } else {
   break;
  }
 }
 return;
}
function _lily_ts_scope_restore($ts,$p) {
 $ts = $ts|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$p>>1]|0;
 $1 = ((($ts)) + 4|0);
 HEAP16[$1>>1] = $0;
 $2 = ((($p)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($ts)) + 6|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($ts)) + 12|0);
 $6 = ((($p)) + 8|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 return;
}
function _lily_ts_generics_seen($ts,$amount) {
 $ts = $ts|0;
 $amount = $amount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ts)) + 8|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($2|0)<($amount|0);
 if (!($3)) {
  return;
 }
 $4 = $amount&65535;
 HEAP16[$0>>1] = $4;
 return;
}
function _lily_class_greater_eq_id($left_id,$right) {
 $left_id = $left_id|0;
 $right = $right|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($right|0)==(0|0);
 if ($0) {
  $ret$0 = 0;
  return ($ret$0|0);
 } else {
  $$01 = $right;
 }
 while(1) {
  $1 = ((($$01)) + 8|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2&65535;
  $4 = ($3|0)==($left_id|0);
  if ($4) {
   $ret$0 = 1;
   label = 4;
   break;
  }
  $5 = ((($$01)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $ret$0 = 0;
   label = 4;
   break;
  } else {
   $$01 = $6;
  }
 }
 if ((label|0) == 4) {
  return ($ret$0|0);
 }
 return (0)|0;
}
function _lily_library_get($source,$name) {
 $source = $source|0;
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_dlsym(($source|0),($name|0))|0);
 return ($0|0);
}
function _lily_library_free($source) {
 $source = $source|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_dlclose(($source|0))|0);
 return;
}
function _lily_new_emit_state($symtab,$raiser) {
 $symtab = $symtab|0;
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(120)|0);
 $1 = (_lily_new_buffer_u16(4)|0);
 HEAP32[$0>>2] = $1;
 $2 = (_lily_malloc(16)|0);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_lily_new_type_maker()|0);
 $5 = ((($0)) + 104|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($symtab)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($symtab)) + 92|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_new_type_system($4,$9,$13)|0);
 $15 = ((($0)) + 100|0);
 HEAP32[$15>>2] = $14;
 $16 = (_lily_new_buffer_u16(32)|0);
 $17 = ((($0)) + 12|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = (_new_storage_stack()|0);
 $20 = ((($0)) + 64|0);
 HEAP32[$20>>2] = $19;
 $21 = (_lily_malloc(16)|0);
 $22 = ((($0)) + 20|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($0)) + 24|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($0)) + 32|0);
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (_lily_new_string_pile()|0);
 $30 = ((($0)) + 96|0);
 HEAP32[$30>>2] = $29;
 $31 = HEAP32[$6>>2]|0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$5>>2]|0;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = $33;
 $36 = HEAP32[$10>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$5>>2]|0;
 $40 = ((($39)) + 12|0);
 HEAP32[$40>>2] = $38;
 $41 = (_lily_malloc(32)|0);
 $42 = ((($0)) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($0)) + 40|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($0)) + 42|0);
 HEAP16[$44>>1] = 8;
 $45 = ((($0)) + 44|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($0)) + 46|0);
 HEAP16[$46>>1] = 4;
 $47 = ((($0)) + 52|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($0)) + 54|0);
 HEAP16[$48>>1] = 4;
 $49 = ((($0)) + 76|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($0)) + 82|0);
 HEAP16[$50>>1] = 0;
 $51 = ((($0)) + 92|0);
 HEAP32[$51>>2] = $raiser;
 $52 = ((($0)) + 84|0);
 HEAP32[$52>>2] = 1;
 return ($0|0);
}
function _new_storage_stack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = (_new_storage()|0);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = (_new_storage()|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = (_new_storage()|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = (_new_storage()|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($0)) + 4|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 6|0);
 HEAP16[$14>>1] = 4;
 return ($0|0);
}
function _new_storage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 6|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 4|0);
 HEAP16[$4>>1] = 2;
 return ($0|0);
}
function _lily_free_emit_state($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current$0 = 0, $current$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $current$0 = $1;
 while(1) {
  $2 = ($current$0|0)==(0|0);
  if ($2) {
   break;
  }
  $3 = ((($current$0)) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $current$11 = $current$0;
   label = 4;
   break;
  } else {
   $current$0 = $4;
  }
 }
 if ((label|0) == 4) {
  while(1) {
   label = 0;
   $6 = ((($current$11)) + 48|0);
   $7 = HEAP32[$6>>2]|0;
   _lily_free($current$11);
   $8 = ($7|0)==(0|0);
   if ($8) {
    break;
   } else {
    $current$11 = $7;
    label = 4;
   }
  }
 }
 $9 = ((($emit)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 _free_storage_stack($10);
 $11 = ((($emit)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_free_string_pile($12);
 $13 = ((($emit)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_free($14);
 $15 = ((($emit)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 _lily_free($16);
 $17 = ((($emit)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_free($18);
 $19 = ((($emit)) + 100|0);
 $20 = HEAP32[$19>>2]|0;
 _lily_free_type_system($20);
 $21 = ((($emit)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 _lily_free($22);
 $23 = ((($emit)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = HEAP32[$emit>>2]|0;
  _lily_free_buffer_u16($26);
  $27 = ((($emit)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_free_buffer_u16($28);
  _lily_free($emit);
  return;
 }
 _lily_free_buffer_u16($24);
 $26 = HEAP32[$emit>>2]|0;
 _lily_free_buffer_u16($26);
 $27 = ((($emit)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 _lily_free_buffer_u16($28);
 _lily_free($emit);
 return;
}
function _free_storage_stack($stack) {
 $stack = $stack|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stack)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $i$01 = 0;
  while(1) {
   $3 = HEAP32[$stack>>2]|0;
   $4 = (($3) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   _lily_free($5);
   $6 = (($i$01) + 1)|0;
   $7 = HEAP16[$0>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   if ($9) {
    $i$01 = $6;
   } else {
    break;
   }
  }
 }
 $10 = HEAP32[$stack>>2]|0;
 _lily_free($10);
 _lily_free($stack);
 return;
}
function _lily_emit_enter_main($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[442]|0;
 _lily_tm_add($1,$2);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($emit)) + 112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_tm_make($3,0,$7,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = (_lily_new_raw_var($9,$8,6554)|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($10)) + 36|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($10)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = $15 | 64;
 $17 = $16&65535;
 HEAP16[$13>>1] = $17;
 $18 = (_lily_malloc(56)|0);
 $19 = ((($10)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_new_native_function_val(0,$20)|0);
 $22 = HEAP32[$4>>2]|0;
 HEAP32[$22>>2] = $10;
 $23 = HEAP32[$4>>2]|0;
 $24 = ((($23)) + 28|0);
 HEAP32[$24>>2] = $21;
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$21>>2] = $26;
 $27 = HEAP32[$4>>2]|0;
 _lily_store_function($27,$10,$21);
 $28 = ((($18)) + 52|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($18)) + 48|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($18)) + 18|0);
 HEAP16[$30>>1] = 14;
 $31 = ((($18)) + 4|0);
 HEAP32[$31>>2] = $10;
 $32 = ((($18)) + 40|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($18)) + 44|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($18)) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($18)) + 24|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($18)) + 32|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($18)) + 14|0);
 HEAP16[$37>>1] = -1;
 $38 = ((($18)) + 16|0);
 HEAP8[$38>>0] = 0;
 $39 = ((($18)) + 10|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($emit)) + 56|0);
 HEAP32[$40>>2] = $10;
 $41 = HEAP32[442]|0;
 $42 = ((($emit)) + 60|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($emit)) + 76|0);
 HEAP32[$43>>2] = $18;
 $44 = ((($emit)) + 82|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = (($45) + 1)<<16>>16;
 HEAP16[$44>>1] = $46;
 $47 = ((($emit)) + 68|0);
 HEAP32[$47>>2] = $18;
 $48 = ((($emit)) + 72|0);
 HEAP32[$48>>2] = $18;
 return;
}
function _new_native_function_val($class_name,$name) {
 $class_name = $class_name|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(44)|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = $class_name;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = $name;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP16[$5>>1] = -1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 14|0);
 HEAP16[$8>>1] = -1;
 return ($0|0);
}
function _lily_emit_new_local_var($emit,$type,$name) {
 $emit = $emit|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_var($1,$type,$name)|0);
 $3 = ((($emit)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($emit)) + 82|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ((($2)) + 36|0);
 HEAP32[$15>>2] = $14;
 return ($2|0);
}
function _lily_emit_new_scoped_var($emit,$type,$name) {
 $emit = $emit|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_var($1,$type,$name)|0);
 $3 = ((($emit)) + 82|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(1);
 if ($5) {
  $6 = ((($emit)) + 68|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($2)) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$6>>2]|0;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = ((($2)) + 6|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $17 | 512;
  $19 = $18&65535;
  HEAP16[$15>>1] = $19;
  $29 = HEAP16[$3>>1]|0;
  $30 = $29&65535;
  $31 = ((($2)) + 36|0);
  HEAP32[$31>>2] = $30;
  return ($2|0);
 } else {
  $20 = ((($emit)) + 72|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($2)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$20>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  $29 = HEAP16[$3>>1]|0;
  $30 = $29&65535;
  $31 = ((($2)) + 36|0);
  HEAP32[$31>>2] = $30;
  return ($2|0);
 }
 return (0)|0;
}
function _lily_emit_new_define_var($emit,$type,$parent,$name) {
 $emit = $emit|0;
 $type = $type|0;
 $parent = $parent|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $class_name$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_var($1,$type,$name)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 36|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($2)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 | 64;
 $14 = $13&65535;
 HEAP16[$10>>1] = $14;
 $15 = ($parent|0)==(0|0);
 if ($15) {
  $class_name$0 = 0;
 } else {
  $16 = ((($parent)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $class_name$0 = $17;
 }
 $18 = ((($2)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_new_native_function_val($class_name$0,$19)|0);
 $21 = HEAP32[$0>>2]|0;
 _lily_store_function($21,$2,$20);
 return ($2|0);
}
function _lily_emit_new_tied_dyna_var($emit,$func,$source,$type,$name) {
 $emit = $emit|0;
 $func = $func|0;
 $source = $source|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $func_val$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_unlinked_var($1,$type,$name)|0);
 $3 = ((($2)) + 36|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($2)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 | 1088;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($source)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(5);
 if ($17) {
  $18 = ((($source)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$2>>2] = $19;
  HEAP32[$18>>2] = $2;
  $20 = (_new_foreign_function_val($func,0,$name)|0);
  $21 = ((($source)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($20)) + 40|0);
  HEAP32[$23>>2] = $22;
  $func_val$0 = $20;
  $35 = ((($type)) + 10|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = ((($func_val$0)) + 14|0);
  HEAP16[$37>>1] = $36;
  $38 = HEAP32[$0>>2]|0;
  _lily_store_function($38,$2,$func_val$0);
  return ($2|0);
 } else {
  $24 = ((($source)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$2>>2] = $25;
  HEAP32[$24>>2] = $2;
  $26 = ((($2)) + 40|0);
  HEAP32[$26>>2] = $source;
  $27 = ((($source)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_new_foreign_function_val($func,$28,$name)|0);
  $30 = ((($source)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($29)) + 40|0);
  HEAP32[$34>>2] = $33;
  $func_val$0 = $29;
  $35 = ((($type)) + 10|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = ((($func_val$0)) + 14|0);
  HEAP16[$37>>1] = $36;
  $38 = HEAP32[$0>>2]|0;
  _lily_store_function($38,$2,$func_val$0);
  return ($2|0);
 }
 return (0)|0;
}
function _new_foreign_function_val($func,$class_name,$name) {
 $func = $func|0;
 $class_name = $class_name|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(44)|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = $class_name;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = $name;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = $func;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP16[$5>>1] = -1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 14|0);
 HEAP16[$8>>1] = -1;
 return ($0|0);
}
function _lily_emit_new_dyna_var($emit,$module,$type,$name) {
 $emit = $emit|0;
 $module = $module|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_unlinked_var($1,$type,$name)|0);
 $3 = ((($emit)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($2)) + 36|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($2)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = $15 | 512;
 $17 = $16&65535;
 HEAP16[$13>>1] = $17;
 $18 = ((($module)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$2>>2] = $19;
 HEAP32[$18>>2] = $2;
 return ($2|0);
}
function _lily_emit_get_storage_spot($emit,$type) {
 $emit = $emit|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get_storage($emit,$type)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2&65535;
 return ($3|0);
}
function _get_storage($emit,$type) {
 $emit = $emit|0;
 $type = $type|0;
 var $$lcssa = 0, $$lcssa46 = 0, $$lcssa48 = 0, $$lcssa51 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$011 = 0, $i$011$lcssa = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($emit)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($emit)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 10|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($7&65535)<($9&65535);
 L1: do {
  if ($10) {
   $11 = $7&65535;
   $12 = HEAP32[$1>>2]|0;
   $i$011 = $11;
   while(1) {
    $13 = (($12) + ($i$011<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $$lcssa = $14;$$lcssa48 = $15;$i$011$lcssa = $i$011;
     break;
    }
    $33 = ($16|0)==($type|0);
    if ($33) {
     $34 = ((($14)) + 16|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==($3|0);
     if (!($36)) {
      $$lcssa46 = $14;$$lcssa51 = $34;
      label = 9;
      break;
     }
    }
    $37 = (($i$011) + 1)|0;
    $38 = HEAP16[$8>>1]|0;
    $39 = $38&65535;
    $40 = ($37|0)<($39|0);
    if ($40) {
     $i$011 = $37;
    } else {
     $s$1 = $14;
     break L1;
    }
   }
   if ((label|0) == 9) {
    HEAP32[$$lcssa51>>2] = $3;
    $s$1 = $$lcssa46;
    break;
   }
   HEAP32[$$lcssa48>>2] = $type;
   $18 = HEAP32[$4>>2]|0;
   $19 = ((($18)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($$lcssa)) + 8|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$4>>2]|0;
   $23 = ((($22)) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = (($i$011$lcssa) + 1)|0;
   $27 = HEAP16[$8>>1]|0;
   $28 = $27&65535;
   $29 = ($26|0)==($28|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    _grow_storages($30);
   }
   $31 = $26&65535;
   $32 = ((($1)) + 4|0);
   HEAP16[$32>>1] = $31;
   $s$1 = $$lcssa;
  } else {
   $s$1 = 0;
  }
 } while(0);
 $41 = ((($s$1)) + 16|0);
 HEAP32[$41>>2] = $3;
 $42 = ((($s$1)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 & 65533;
 $46 = $45&65535;
 HEAP16[$42>>1] = $46;
 return ($s$1|0);
}
function _grow_storages($stack) {
 $stack = $stack|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stack)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = HEAP32[$stack>>2]|0;
 $5 = $2 << 3;
 $6 = (_lily_realloc($4,$5)|0);
 $7 = HEAP16[$0>>1]|0;
 $8 = $7&65535;
 $9 = ($8>>>0)<($3>>>0);
 if (!($9)) {
  HEAP32[$stack>>2] = $6;
  $15 = $3&65535;
  HEAP16[$0>>1] = $15;
  return;
 }
 $10 = $1&65535;
 $11 = $10 << 1;
 $i$01 = $8;
 while(1) {
  $12 = (_new_storage()|0);
  $13 = (($6) + ($i$01<<2)|0);
  HEAP32[$13>>2] = $12;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $14;
  }
 }
 HEAP32[$stack>>2] = $6;
 $15 = $3&65535;
 HEAP16[$0>>1] = $15;
 return;
}
function _lily_emit_write_optargs($emit,$optargs,$start) {
 $emit = $emit|0;
 $optargs = $optargs|0;
 $start = $start|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$12 = 0, $jump_target$0 = 0, $jump_target$0$lcssa = 0;
 var $jump_target$01 = 0, $jump_target$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($optargs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$optargs>>2]|0;
 $3 = ((($emit)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 $7 = (($1) - ($start))|0;
 $8 = (($7|0) / 3)&-1;
 $9 = (($8) + 1)|0;
 $10 = ((($emit)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($emit)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 65535)|0;
 $19 = $18&65535;
 $20 = $9&65535;
 _lily_u16_write_3($11,66,$19,$20);
 $21 = ($7|0)<(-2);
 $22 = HEAP32[$10>>2]|0;
 if ($21) {
  $$lcssa = $22;
 } else {
  $23 = $22;$i$04 = 0;
  while(1) {
   _lily_u16_write_1($23,0);
   $24 = (($i$04) + 1)|0;
   $25 = ($i$04|0)<($8|0);
   $26 = HEAP32[$10>>2]|0;
   if ($25) {
    $23 = $26;$i$04 = $24;
   } else {
    $$lcssa = $26;
    break;
   }
  }
 }
 $27 = ((($$lcssa)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $jump_target$01 = (($28) + -1)|0;
 $29 = ($1|0)==($start|0);
 if ($29) {
  $jump_target$0$lcssa = $jump_target$01;
  $48 = HEAP32[$10>>2]|0;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) - ($13))|0;
  $52 = $51&65535;
  $53 = HEAP32[$48>>2]|0;
  $54 = (($53) + ($jump_target$0$lcssa<<1)|0);
  HEAP16[$54>>1] = $52;
  return;
 } else {
  $i$12 = $start;$jump_target$03 = $jump_target$01;
 }
 while(1) {
  $30 = (($2) + ($i$12<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = (($i$12) + 1)|0;
  $33 = (($2) + ($32<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = (($i$12) + 2)|0;
  $36 = (($2) + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = HEAP32[$10>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) - ($13))|0;
  $42 = $41&65535;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($jump_target$03<<1)|0);
  HEAP16[$44>>1] = $42;
  $45 = HEAP32[$10>>2]|0;
  _lily_u16_write_4($45,$34,$6,$37,$31);
  $46 = (($i$12) + 3)|0;
  $jump_target$0 = (($jump_target$03) + -1)|0;
  $47 = ($46|0)==($1|0);
  if ($47) {
   $jump_target$0$lcssa = $jump_target$0;
   break;
  } else {
   $i$12 = $46;$jump_target$03 = $jump_target$0;
  }
 }
 $48 = HEAP32[$10>>2]|0;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) - ($13))|0;
 $52 = $51&65535;
 $53 = HEAP32[$48>>2]|0;
 $54 = (($53) + ($jump_target$0$lcssa<<1)|0);
 HEAP16[$54>>1] = $52;
 return;
}
function _lily_emit_finalize_for_in($emit,$user_loop_var,$for_start,$for_end,$for_step,$line_num) {
 $emit = $emit|0;
 $user_loop_var = $user_loop_var|0;
 $for_start = $for_start|0;
 $for_end = $for_end|0;
 $for_step = $for_step|0;
 $line_num = $line_num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $target$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($for_step|0)==(0|0);
 if ($4) {
  $5 = ((($3)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_lily_emit_new_local_var($emit,$6,6563)|0);
  $8 = ((($emit)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $line_num&65535;
  $11 = ((($7)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12&65535;
  _lily_u16_write_4($9,42,$10,1,$13);
  $$0 = $7;
 } else {
  $$0 = $for_step;
 }
 $14 = ((($emit)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = ((($3)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_lily_emit_new_local_var($emit,$20,6574)|0);
  $target$0$in = $21;
 } else {
  $target$0$in = $user_loop_var;
 }
 $22 = ((($emit)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $line_num&65535;
 $25 = ((($for_start)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26&65535;
 $28 = ((($for_end)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 $31 = ((($$0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($target$0$in)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&65535;
 _lily_u16_write_6($23,27,$24,$27,$30,$33,$36);
 if ($18) {
  $37 = HEAP32[$22>>2]|0;
  $38 = HEAP32[$34>>2]|0;
  $39 = $38&65535;
  $40 = ((($user_loop_var)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41&65535;
  _lily_u16_write_4($37,40,$24,$39,$42);
 }
 $43 = HEAP32[$22>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45&65535;
 $47 = ((($emit)) + 76|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 14|0);
 HEAP16[$49>>1] = $46;
 $50 = HEAP32[$22>>2]|0;
 $51 = HEAP32[$25>>2]|0;
 $52 = $51&65535;
 $53 = HEAP32[$28>>2]|0;
 $54 = $53&65535;
 $55 = HEAP32[$31>>2]|0;
 $56 = $55&65535;
 _lily_u16_write_5($50,26,$24,$52,$54,$56);
 $57 = HEAP32[$22>>2]|0;
 $58 = HEAP32[$34>>2]|0;
 $59 = $58&65535;
 _lily_u16_write_2($57,$59,6);
 $60 = HEAP32[$emit>>2]|0;
 $61 = HEAP32[$22>>2]|0;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 65535)|0;
 $65 = $64&65535;
 _lily_u16_write_1($60,$65);
 if (!($18)) {
  return;
 }
 $66 = HEAP32[$22>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $68 = $67&65535;
 $69 = ((($user_loop_var)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70&65535;
 _lily_u16_write_4($66,40,$24,$68,$71);
 return;
}
function _lily_emit_break($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 14|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(-1);
 if ($4) {
  $5 = ((($emit)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise($6,1,6585,$vararg_buffer);
  // unreachable;
 } else {
  $7 = (_find_deepest_loop($emit)|0);
  _write_pop_try_blocks_up_to($emit,$7);
  $8 = ((($emit)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_u16_write_2($9,24,1);
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 65535)|0;
  $14 = $13&65535;
  _inject_patch_into_block($emit,$7,$14);
  STACKTOP = sp;return;
 }
}
function _find_deepest_loop($emit) {
 $emit = $emit|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $block$0 = 0, $block$01 = 0, $block$02 = 0, $ret$0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $block$01 = HEAP32[$0>>2]|0;
 $1 = ($block$01|0)==(0|0);
 if ($1) {
  $ret$0 = 0;
  return ($ret$0|0);
 } else {
  $block$02 = $block$01;
 }
 while(1) {
  $2 = ((($block$02)) + 18|0);
  $3 = HEAP16[$2>>1]|0;
  $$off = (($3) + -3)<<16>>16;
  $switch = ($$off&65535)<(3);
  if ($switch) {
   $ret$0 = $block$02;
   label = 5;
   break;
  }
  $4 = ($3&65535)>(10);
  if ($4) {
   $ret$0 = 0;
   label = 5;
   break;
  }
  $5 = ((($block$02)) + 52|0);
  $block$0 = HEAP32[$5>>2]|0;
  $6 = ($block$0|0)==(0|0);
  if ($6) {
   $ret$0 = 0;
   label = 5;
   break;
  } else {
   $block$02 = $block$0;
  }
 }
 if ((label|0) == 5) {
  return ($ret$0|0);
 }
 return (0)|0;
}
function _write_pop_try_blocks_up_to($emit,$stop_block) {
 $emit = $emit|0;
 $stop_block = $stop_block|0;
 var $$try_count$0 = 0, $$try_count$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block_iter$0 = 0, $block_iter$02 = 0, $block_iter$04 = 0, $exitcond = 0, $i$01 = 0, $try_count$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $block_iter$02 = HEAP32[$0>>2]|0;
 $1 = ($block_iter$02|0)==($stop_block|0);
 if ($1) {
  return;
 } else {
  $block_iter$04 = $block_iter$02;$try_count$03 = 0;
 }
 while(1) {
  $2 = ((($block_iter$04)) + 18|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = ($3<<16>>16)==(6);
  $5 = $4&1;
  $$try_count$0 = (($5) + ($try_count$03))|0;
  $6 = ((($block_iter$04)) + 52|0);
  $block_iter$0 = HEAP32[$6>>2]|0;
  $7 = ($block_iter$0|0)==($stop_block|0);
  if ($7) {
   $$try_count$0$lcssa = $$try_count$0;
   break;
  } else {
   $block_iter$04 = $block_iter$0;$try_count$03 = $$try_count$0;
  }
 }
 $8 = ($$try_count$0$lcssa|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = ((($emit)) + 12|0);
 $i$01 = 0;
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  _lily_u16_write_1($10,52);
  $11 = (($i$01) + 1)|0;
  $exitcond = ($11|0)==($$try_count$0$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $11;
  }
 }
 return;
}
function _inject_patch_into_block($emit,$block,$patch) {
 $emit = $emit|0;
 $block = $block|0;
 $patch = $patch|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($block|0);
 $3 = HEAP32[$emit>>2]|0;
 if ($2) {
  _lily_u16_write_1($3,$patch);
  return;
 }
 $4 = ((($block)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 _lily_u16_inject($3,$8,$patch);
 $$01 = HEAP32[$4>>2]|0;
 $9 = ($$01|0)==(0|0);
 if ($9) {
  return;
 } else {
  $$02 = $$01;
 }
 while(1) {
  $10 = ((($$02)) + 8|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = (($11) + 1)<<16>>16;
  HEAP16[$10>>1] = $12;
  $13 = ((($$02)) + 48|0);
  $$0 = HEAP32[$13>>2]|0;
  $14 = ($$0|0)==(0|0);
  if ($14) {
   break;
  } else {
   $$02 = $$0;
  }
 }
 return;
}
function _lily_emit_continue($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 14|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(-1);
 if ($4) {
  $5 = ((($emit)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise($6,1,6617,$vararg_buffer);
  // unreachable;
 } else {
  $7 = (_find_deepest_loop($emit)|0);
  _write_pop_try_blocks_up_to($emit,$7);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + 14|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ((($emit)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($11) - ($15))|0;
  $17 = $16&65535;
  _lily_u16_write_2($13,24,$17);
  STACKTOP = sp;return;
 }
}
function _lily_emit_try($emit,$line_num) {
 $emit = $emit|0;
 $line_num = $line_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $line_num&65535;
 _lily_u16_write_3($1,51,$2,2);
 $3 = HEAP32[$emit>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 65535)|0;
 $8 = $7&65535;
 _lily_u16_write_1($3,$8);
 return;
}
function _lily_emit_except($emit,$except_type,$except_var,$line_num) {
 $emit = $emit|0;
 $except_type = $except_type|0;
 $except_var = $except_var|0;
 $line_num = $line_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($except_var|0)==(0|0);
 $1 = ((($emit)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $line_num&65535;
 if ($0) {
  $13 = ((($except_type)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  _lily_u16_write_5($2,53,$3,$16,0,4);
 } else {
  $4 = ((($except_var)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ((($except_var)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11&65535;
  _lily_u16_write_5($2,54,$3,$9,$12,4);
 }
 $17 = HEAP32[$emit>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 65535)|0;
 $22 = $21&65535;
 _lily_u16_write_1($17,$22);
 return;
}
function _get_unique_storage($emit,$type) {
 $emit = $emit|0;
 $type = $type|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 while(1) {
  $4 = (_get_storage($emit,$type)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($3|0);
  if (!($8)) {
   $$lcssa = $4;
   break;
  }
 }
 return ($$lcssa|0);
}
function _lily_emit_enter_block($emit,$block_type) {
 $emit = $emit|0;
 $block_type = $block_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $block_type$off = 0, $new_block$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_lily_malloc(56)|0);
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 48|0);
  HEAP32[$7>>2] = $5;
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($5)) + 52|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($5)) + 48|0);
  HEAP32[$10>>2] = 0;
  $new_block$0 = $5;
 } else {
  $new_block$0 = $3;
 }
 $11 = ((($new_block$0)) + 18|0);
 $12 = $block_type&65535;
 HEAP16[$11>>1] = $12;
 $13 = ((($emit)) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$new_block$0>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($new_block$0)) + 40|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($23)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($new_block$0)) + 44|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$emit>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 $31 = ((($new_block$0)) + 8|0);
 HEAP16[$31>>1] = $30;
 $32 = ((($new_block$0)) + 36|0);
 HEAP32[$32>>2] = -1;
 $33 = HEAP32[$0>>2]|0;
 $34 = ((($33)) + 14|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ((($new_block$0)) + 14|0);
 HEAP16[$36>>1] = $35;
 $37 = ((($new_block$0)) + 16|0);
 HEAP8[$37>>0] = 0;
 $38 = ($block_type>>>0)<(11);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($new_block$0)) + 24|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($new_block$0)) + 17|0);
  HEAP8[$43>>0] = 1;
  $block_type$off = (($block_type) + -3)|0;
  $44 = ($block_type$off>>>0)<(3);
  if ($44) {
   $45 = ((($emit)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48&65535;
   HEAP16[$36>>1] = $49;
   HEAP32[$0>>2] = $new_block$0;
   return;
  }
  $50 = ($block_type|0)==(10);
  if (!($50)) {
   HEAP32[$0>>2] = $new_block$0;
   return;
  }
  $51 = HEAP32[$13>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$22>>2] = $55;
  HEAP16[$36>>1] = -1;
  HEAP32[$0>>2] = $new_block$0;
  return;
 }
 $56 = HEAP32[$13>>2]|0;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 32|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($block_type|0)==(12);
 if ($61) {
  $62 = ((($58)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$22>>2] = $63;
 }
 $64 = HEAP32[$22>>2]|0;
 $65 = ((($60)) + 40|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($emit)) + 82|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = ($67&65535)>(1);
 if ($68) {
  $69 = HEAP32[$0>>2]|0;
  $70 = ((($69)) + 18|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = ($71<<16>>16)==(12);
  if (!($72)) {
   $73 = HEAP16[$11>>1]|0;
   $74 = ($73<<16>>16)==(12);
   if (!($74)) {
    $75 = ((($60)) + 6|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = $76&65535;
    $78 = $77 | 256;
    $79 = $78&65535;
    HEAP16[$75>>1] = $79;
   }
  }
 }
 $80 = ((($new_block$0)) + 32|0);
 HEAP32[$80>>2] = 0;
 switch ($block_type|0) {
 case 14:  {
  break;
 }
 case 13:  {
  HEAP32[$26>>2] = 0;
  label = 16;
  break;
 }
 default: {
  label = 16;
 }
 }
 if ((label|0) == 16) {
  $81 = HEAP16[$66>>1]|0;
  $82 = (($81) + 1)<<16>>16;
  HEAP16[$66>>1] = $82;
 }
 $83 = ((($emit)) + 72|0);
 HEAP32[$83>>2] = $new_block$0;
 $84 = ((($emit)) + 64|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($85)) + 4|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = ((($new_block$0)) + 10|0);
 HEAP16[$88>>1] = $87;
 $89 = ((($new_block$0)) + 4|0);
 HEAP32[$89>>2] = $60;
 $90 = ((($emit)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($new_block$0)) + 20|0);
 HEAP32[$94>>2] = $93;
 $95 = HEAP32[$90>>2]|0;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($new_block$0)) + 24|0);
 HEAP32[$98>>2] = $97;
 HEAP16[$36>>1] = -1;
 $99 = ((($emit)) + 56|0);
 HEAP32[$99>>2] = $60;
 HEAP32[$0>>2] = $new_block$0;
 return;
}
function _lily_emit_leave_block($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($emit)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise($6,1,6652,$vararg_buffer);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 18|0);
 $9 = HEAP16[$8>>1]|0;
 switch ($9<<16>>16) {
 case 3: case 5:  {
  $10 = ((($7)) + 14|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ((($emit)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) - ($16))|0;
  $18 = $17&65535;
  _lily_u16_write_2($14,24,$18);
  label = 8;
  break;
 }
 case 9:  {
  $19 = ((($7)) + 12|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ((($emit)) + 52|0);
  HEAP16[$21>>1] = $20;
  label = 9;
  break;
 }
 default: {
  $22 = $9 | 1;
  $23 = ($22<<16>>16)==(7);
  $24 = ($9<<16>>16)==(8);
  $or$cond5 = $24 | $23;
  if ($or$cond5) {
   $25 = HEAP32[$emit>>2]|0;
   $26 = (_lily_u16_pop($25)|0);
   $27 = $26&65535;
   $28 = ((($emit)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<1)|0);
   HEAP16[$31>>1] = 0;
   label = 8;
  } else {
   label = 8;
  }
 }
 }
 if ((label|0) == 8) {
  $32 = ($9<<16>>16)==(2);
  $33 = $9 | 1;
  $34 = ($33<<16>>16)==(9);
  $35 = $32 | $34;
  if ($35) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $36 = ((($7)) + 17|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)==(0);
  if (!($38)) {
   $39 = ((($7)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($emit)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$0>>2]|0;
    $47 = ((($46)) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 36|0);
    HEAP32[$49>>2] = $44;
   }
  }
 }
 $50 = ($9&65535)<(11);
 if ($50) {
  $51 = HEAP32[$7>>2]|0;
  $52 = ((($7)) + 8|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  _write_patches_since($emit,$54);
  $55 = ((($emit)) + 112|0);
  $56 = HEAP32[$55>>2]|0;
  _lily_hide_block_vars($56,$51);
  $57 = HEAP32[$0>>2]|0;
  $58 = ((($57)) + 52|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$0>>2] = $59;
  STACKTOP = sp;return;
 } else {
  _leave_function($emit,$7);
  $57 = HEAP32[$0>>2]|0;
  $58 = ((($57)) + 52|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$0>>2] = $59;
  STACKTOP = sp;return;
 }
}
function _write_patches_since($emit,$to) {
 $emit = $emit|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $from$0 = 0, $from$01 = 0, $from$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$emit>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($emit)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $from$01 = (($2) + -1)|0;
 $7 = ($from$01|0)<($to|0);
 if ($7) {
  return;
 } else {
  $from$02 = $from$01;
 }
 while(1) {
  $8 = HEAP32[$emit>>2]|0;
  $9 = (_lily_u16_pop($8)|0);
  $10 = $9&65535;
  $11 = ($9<<16>>16)==(0);
  if (!($11)) {
   $13 = HEAP32[$3>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($10<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = (($6) - ($10))|0;
   $19 = (($18) + ($17))|0;
   $20 = $19&65535;
   HEAP16[$15>>1] = $20;
  }
  $from$0 = (($from$02) + -1)|0;
  $12 = ($from$0|0)<($to|0);
  if ($12) {
   break;
  } else {
   $from$02 = $from$0;
  }
 }
 return;
}
function _leave_function($emit,$block) {
 $emit = $emit|0;
 $block = $block|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block$pn = 0;
 var $last_func_block$0 = 0, $last_func_block$0$in = 0, $last_func_block$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($block)) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 switch ($1<<16>>16) {
 case 12:  {
  $2 = ((($block)) + 40|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 6|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $6 & 96;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = $6 & 64;
   $10 = $9&65535;
   $11 = ($10&65535) >>> 6;
   $12 = (48 - ($11))<<16>>16;
   $13 = ((($block)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($emit)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($14<<1)|0);
   HEAP16[$18>>1] = $12;
  }
  $19 = ((($emit)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($emit)) + 88|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23&65535;
  $25 = ((($block)) + 44|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&65535;
  _lily_u16_write_3($20,31,$24,$29);
  break;
 }
 case 13:  {
  $30 = ((($emit)) + 56|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($emit)) + 60|0);
  HEAP32[$37>>2] = $36;
  label = 6;
  break;
 }
 default: {
  label = 6;
 }
 }
 do {
  if ((label|0) == 6) {
   $38 = ((($emit)) + 60|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[442]|0;
   $41 = ($39|0)==($40|0);
   if (!($41)) {
    $42 = HEAP32[441]|0;
    $43 = ((($42)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($39|0)==($44|0);
    if (!($45)) {
     $52 = HEAP16[$0>>1]|0;
     $53 = ($52<<16>>16)==(11);
     if (!($53)) {
      break;
     }
     $54 = ((($block)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($emit)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($55|0)==($59|0);
     if ($60) {
      break;
     }
     $61 = ((($emit)) + 92|0);
     $62 = HEAP32[$61>>2]|0;
     _lily_raise($62,1,6676,$vararg_buffer);
     // unreachable;
    }
   }
   $46 = ((($emit)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($emit)) + 88|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = $50&65535;
   _lily_u16_write_2($47,32,$51);
  }
 } while(0);
 _finalize_function_block($emit,$block);
 $block$pn = $block;
 while(1) {
  $last_func_block$0$in = ((($block$pn)) + 52|0);
  $last_func_block$0 = HEAP32[$last_func_block$0$in>>2]|0;
  $63 = ((($last_func_block$0)) + 18|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = ($64&65535)<(11);
  if ($65) {
   $block$pn = $last_func_block$0;
  } else {
   $$lcssa = $63;$last_func_block$0$lcssa = $last_func_block$0;
   break;
  }
 }
 $66 = ((($last_func_block$0$lcssa)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($emit)) + 76|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 18|0);
 $71 = HEAP16[$70>>1]|0;
 switch ($71<<16>>16) {
 case 12:  {
  $72 = ((($69)) + 40|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($block)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($emit)) + 112|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 32|0);
  HEAP32[$80>>2] = $75;
  $81 = HEAP32[$76>>2]|0;
  $82 = HEAP32[$74>>2]|0;
  _lily_add_class_method($81,$73,$82);
  break;
 }
 case 14:  {
  break;
 }
 default: {
  $83 = ((($block)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($emit)) + 112|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($86)) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 32|0);
  HEAP32[$89>>2] = $84;
 }
 }
 $90 = ((($emit)) + 56|0);
 HEAP32[$90>>2] = $67;
 $91 = ((($67)) + 12|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($emit)) + 60|0);
 HEAP32[$96>>2] = $95;
 $97 = ((($emit)) + 72|0);
 HEAP32[$97>>2] = $last_func_block$0$lcssa;
 $98 = ((($block)) + 20|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($emit)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 4|0);
 HEAP32[$102>>2] = $99;
 $103 = HEAP16[$0>>1]|0;
 $104 = ($103<<16>>16)==(14);
 if ($104) {
  STACKTOP = sp;return;
 }
 $105 = ((($emit)) + 82|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = (($106) + -1)<<16>>16;
 HEAP16[$105>>1] = $107;
 $108 = ((($block)) + 16|0);
 $109 = HEAP8[$108>>0]|0;
 $110 = ($109<<24>>24)==(1);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 $111 = HEAP16[$$lcssa>>1]|0;
 $112 = ($111<<16>>16)==(14);
 if ($112) {
  STACKTOP = sp;return;
 }
 $113 = ((($last_func_block$0$lcssa)) + 52|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)==(0|0);
 if ($115) {
  STACKTOP = sp;return;
 }
 $116 = HEAP32[$97>>2]|0;
 $117 = ((($116)) + 16|0);
 HEAP8[$117>>0] = 1;
 STACKTOP = sp;return;
}
function _finalize_function_block($emit,$function_block) {
 $emit = $emit|0;
 $function_block = $function_block|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $var_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_create_code_block_for($emit,$function_block)|0);
 $1 = ((($emit)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($emit)) + 82|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6&65535)>(1);
 if ($7) {
  $8 = ((($function_block)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($emit)) + 112|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($9|0);
  if (!($16)) {
   $var_iter$02 = $15;
   while(1) {
    $17 = HEAP32[$var_iter$02>>2]|0;
    $18 = ((($var_iter$02)) + 6|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19 & 64;
    $21 = ($20<<16>>16)==(0);
    if ($21) {
     $22 = ((($var_iter$02)) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     _lily_free($23);
     _lily_free($var_iter$02);
    } else {
     $24 = HEAP32[$10>>2]|0;
     $25 = ((($24)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$var_iter$02>>2] = $26;
     $27 = HEAP32[$10>>2]|0;
     $28 = ((($27)) + 16|0);
     HEAP32[$28>>2] = $var_iter$02;
    }
    $29 = ($17|0)==($9|0);
    if ($29) {
     break;
    } else {
     $var_iter$02 = $17;
    }
   }
  }
 }
 $30 = ((($function_block)) + 10|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = ((($emit)) + 64|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ($31&65535)<($35&65535);
 if (!($36)) {
  $$lcssa = $34;
  $49 = HEAP16[$30>>1]|0;
  HEAP16[$$lcssa>>1] = $49;
  $50 = $4&65535;
  $51 = ((($0)) + 14|0);
  HEAP16[$51>>1] = $50;
  return;
 }
 $37 = $31&65535;
 $39 = $33;$i$01 = $37;
 while(1) {
  $38 = HEAP32[$39>>2]|0;
  $40 = (($38) + ($i$01<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 12|0);
  HEAP32[$42>>2] = 0;
  $43 = (($i$01) + 1)|0;
  $44 = HEAP32[$32>>2]|0;
  $45 = ((($44)) + 4|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ($43|0)<($47|0);
  if ($48) {
   $39 = $44;$i$01 = $43;
  } else {
   $$lcssa = $45;
   break;
  }
 }
 $49 = HEAP16[$30>>1]|0;
 HEAP16[$$lcssa>>1] = $49;
 $50 = $4&65535;
 $51 = ((($0)) + 14|0);
 HEAP16[$51>>1] = $50;
 return;
}
function _create_code_block_for($emit,$function_block) {
 $emit = $emit|0;
 $function_block = $function_block|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code_size$0 = 0, $code_start$0 = 0, $source$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($function_block)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($emit)) + 112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($function_block)) + 16|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = ((($emit)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($emit)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) - ($19))|0;
  $$pn = $21;$code_size$0 = $24;$code_start$0 = $19;
 } else {
  _perform_closure_transform($emit,$12);
  $25 = ((($emit)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $$pn = $26;$code_size$0 = $28;$code_start$0 = 0;
 }
 $source$0 = HEAP32[$$pn>>2]|0;
 $29 = $code_size$0 << 1;
 $30 = (($29) + 2)|0;
 $31 = (_lily_malloc($30)|0);
 $32 = (($source$0) + ($code_start$0<<1)|0);
 _memcpy(($31|0),($32|0),($29|0))|0;
 $33 = $code_size$0&65535;
 $34 = ((($12)) + 10|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($12)) + 36|0);
 HEAP32[$35>>2] = $31;
 return ($12|0);
}
function _perform_closure_transform($emit,$f) {
 $emit = $emit|0;
 $f = $f|0;
 var $$lcssa = 0, $$lcssa12 = 0, $$off = 0, $$off2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $closure_prop2$0 = 0, $exitcond = 0, $i$043 = 0, $i$116 = 0;
 var $i$222 = 0, $i$326 = 0, $i$432 = 0, $i7$030 = 0, $iter_start$0 = 0, $j$014 = 0, $k$013 = 0, $k$013$lcssa = 0, $next_jump$037 = 0, $next_jump$1 = 0, $output_start$0 = 0, $patch_iter$038 = 0, $patch_iter$1 = 0, $pos$0 = 0, $pos$1 = 0, $pos$2 = 0, $pos$3 = 0, $sum = 0, $switch1 = 0, $switch3 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ci = sp + 12|0;
 $0 = ((($emit)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_lily_new_buffer_u16(8)|0);
  HEAP32[$0>>2] = $3;
 } else {
  $4 = ((($1)) + 4|0);
  HEAP32[$4>>2] = 0;
 }
 $5 = ((($emit)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_get_unique_storage($emit,$12)|0);
 $14 = (_find_closed_self_spot($emit)|0);
 $15 = ((($emit)) + 82|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(2);
 do {
  if ($17) {
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($f)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20&65535;
   $22 = ((($emit)) + 44|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = ((($13)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25&65535;
   _lily_u16_write_4($18,60,$21,$23,$26);
   $27 = HEAP32[$5>>2]|0;
   $28 = ((($27)) + 18|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = ($29<<16>>16)==(12);
   if ($30) {
    $31 = ((($27)) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 6|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $36 = $35 | 32;
    $37 = $36&65535;
    HEAP16[$33>>1] = $37;
    $38 = (($8) + 1)|0;
    $39 = ((($emit)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($38<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = (($8) + 2)|0;
    $45 = (($41) + ($44<<1)|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = (($8) + 3)|0;
    $48 = (($41) + ($47<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = HEAP32[$0>>2]|0;
    _lily_u16_write_4($50,48,$43,$46,$49);
    $51 = (($8) + 4)|0;
    $52 = ($14|0)==(-1);
    if (!($52)) {
     $53 = HEAP32[$0>>2]|0;
     $54 = $14&65535;
     _lily_u16_write_4($53,59,$43,$54,$49);
     $55 = ((($emit)) + 20|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (($56) + ($14<<2)|0);
     HEAP32[$57>>2] = 0;
    }
    $58 = HEAP32[$5>>2]|0;
    $59 = ((($58)) + 40|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (_lily_find_property($60,6721)|0);
    $62 = ($61|0)==(0|0);
    if ($62) {
     $iter_start$0 = $51;
    } else {
     $63 = HEAP32[$0>>2]|0;
     $64 = ((($61)) + 8|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $65&65535;
     $67 = HEAP32[$24>>2]|0;
     $68 = $67&65535;
     _lily_u16_write_5($63,50,$43,$66,$49,$68);
     $iter_start$0 = $51;
    }
   } else {
    $iter_start$0 = $8;
   }
  } else {
   $69 = HEAP32[$5>>2]|0;
   $70 = ((($69)) + 52|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    $73 = ((($71)) + 18|0);
    $74 = HEAP16[$73>>1]|0;
    $75 = ($74<<16>>16)==(12);
    if ($75) {
     $76 = ((($69)) + 18|0);
     $77 = HEAP16[$76>>1]|0;
     $78 = ($77<<16>>16)==(13);
     if ($78) {
      $113 = HEAP32[$0>>2]|0;
      $114 = ((($f)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115&65535;
      $117 = ((($13)) + 8|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $118&65535;
      _lily_u16_write_4($113,63,$116,0,$119);
      $120 = HEAP32[$5>>2]|0;
      $121 = ((($120)) + 44|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $iter_start$0 = $8;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = ((($emit)) + 88|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = HEAP32[$126>>2]|0;
      $128 = $127&65535;
      $129 = $14&65535;
      $130 = ((($122)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = $131&65535;
      _lily_u16_write_4($124,58,$128,$129,$132);
      $iter_start$0 = $8;
      break;
     }
     $79 = ((($69)) + 40|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (_lily_find_property($80,6721)|0);
     $82 = ((($80)) + 32|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==(0|0);
     if ($84) {
      label = 16;
     } else {
      $85 = ($83|0)==(0|0);
      if ($85) {
       $closure_prop2$0 = $81;
      } else {
       $86 = ((($81)) + 8|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($83)) + 48|0);
       $89 = HEAP16[$88>>1]|0;
       $90 = $89&65535;
       $91 = ($87>>>0)>($90>>>0);
       if ($91) {
        $closure_prop2$0 = $81;
       } else {
        label = 16;
       }
      }
     }
     if ((label|0) == 16) {
      $92 = ((($emit)) + 112|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ((($13)) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (_lily_add_class_property($93,$80,$95,6721,0)|0);
      $closure_prop2$0 = $96;
     }
     $97 = HEAP32[$0>>2]|0;
     $98 = ((($f)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $99&65535;
     $101 = ((($closure_prop2$0)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102&65535;
     $104 = HEAP32[$5>>2]|0;
     $105 = ((($104)) + 44|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($106)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $108&65535;
     $110 = ((($13)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = $111&65535;
     _lily_u16_write_5($97,62,$100,$103,$109,$112);
     $iter_start$0 = $8;
     break;
    }
   }
   $133 = HEAP32[$0>>2]|0;
   $134 = ((($f)) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135&65535;
   _lily_u16_write_2($133,63,$136);
   _write_closure_zap($emit);
   $137 = HEAP32[$0>>2]|0;
   $138 = ((($13)) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139&65535;
   _lily_u16_write_1($137,$140);
   $iter_start$0 = $8;
  }
 } while(0);
 _ensure_params_in_closure($emit);
 _setup_transform_table($emit);
 $141 = HEAP16[$15>>1]|0;
 $142 = ($141<<16>>16)==(2);
 if ($142) {
  $143 = ((($emit)) + 44|0);
  HEAP16[$143>>1] = 0;
 }
 $144 = ((($emit)) + 12|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = HEAP32[$145>>2]|0;
 $147 = $iter_start$0&65535;
 $148 = ((($145)) + 4|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = $149&65535;
 _lily_ci_init($ci,$146,$147,$150);
 $151 = ((($emit)) + 24|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = HEAP32[$ci>>2]|0;
 $154 = HEAP32[$emit>>2]|0;
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156&65535;
 $158 = (_lily_ci_next($ci)|0);
 $159 = ($158|0)==(0);
 if (!($159)) {
  $160 = ((($ci)) + 26|0);
  $161 = ((($ci)) + 4|0);
  $162 = ((($ci)) + 8|0);
  $163 = $156 & 65535;
  while(1) {
   $164 = HEAP16[$160>>1]|0;
   $165 = ($164<<16>>16)==(0);
   if (!($165)) {
    $168 = HEAP16[$161>>1]|0;
    $169 = $168&65535;
    $170 = HEAP16[$162>>1]|0;
    $171 = $170&65535;
    $172 = (($171) + ($169))|0;
    $173 = $164&65535;
    $174 = (($172) - ($173))|0;
    $i$043 = $174;
    while(1) {
     $175 = (($153) + ($i$043<<1)|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = ($176<<16>>16)==(0);
     if (!($177)) {
      $178 = $176 << 16 >> 16;
      $179 = HEAP32[$emit>>2]|0;
      $180 = HEAP16[$161>>1]|0;
      $181 = $180&65535;
      $182 = (($181) + ($178))|0;
      _maybe_add_jump($179,$163,$182);
     }
     $183 = (($i$043) + 1)|0;
     $184 = ($183|0)<($172|0);
     if ($184) {
      $i$043 = $183;
     } else {
      break;
     }
    }
   }
   $166 = (_lily_ci_next($ci)|0);
   $167 = ($166|0)==(0);
   if ($167) {
    break;
   }
  }
 }
 $185 = HEAP32[$emit>>2]|0;
 _lily_u16_write_2($185,-1,0);
 $186 = HEAP32[$emit>>2]|0;
 $187 = ((($186)) + 4|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $156 & 65535;
 $190 = HEAP32[$186>>2]|0;
 $191 = (($190) + ($189<<1)|0);
 $192 = HEAP16[$191>>1]|0;
 $193 = HEAP32[$144>>2]|0;
 $194 = HEAP32[$193>>2]|0;
 $195 = ((($193)) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $196&65535;
 _lily_ci_init($ci,$194,$147,$197);
 $198 = (_lily_ci_next($ci)|0);
 $199 = ($198|0)==(0);
 L44: do {
  if (!($199)) {
   $200 = ((($ci)) + 4|0);
   $201 = ((($ci)) + 12|0);
   $202 = ((($ci)) + 14|0);
   $203 = ((($ci)) + 16|0);
   $204 = ((($ci)) + 18|0);
   $205 = ((($ci)) + 20|0);
   $206 = ((($ci)) + 22|0);
   $207 = ((($ci)) + 24|0);
   $208 = ((($ci)) + 8|0);
   $209 = ((($ci)) + 26|0);
   $210 = ((($f)) + 4|0);
   $211 = ((($emit)) + 92|0);
   $212 = ((($f)) + 4|0);
   $213 = ((($emit)) + 92|0);
   $214 = ((($f)) + 4|0);
   $215 = ((($13)) + 8|0);
   $216 = ((($f)) + 4|0);
   $next_jump$037 = $192;$patch_iter$038 = $157;
   while(1) {
    $217 = HEAP16[$200>>1]|0;
    $218 = $217&65535;
    $219 = (($153) + ($218<<1)|0);
    $220 = HEAP16[$219>>1]|0;
    $221 = $220&65535;
    $222 = (($218) + 1)|0;
    $223 = HEAP16[$201>>1]|0;
    $224 = $223&65535;
    $225 = (($222) + ($224))|0;
    $226 = HEAP16[$202>>1]|0;
    $227 = ($226<<16>>16)==(0);
    L48: do {
     if ($227) {
      $pos$0 = $225;
     } else {
      switch ($221|0) {
      case 61:  {
       $228 = HEAP32[$215>>2]|0;
       $229 = $228&65535;
       $230 = (($153) + ($225<<1)|0);
       HEAP16[$230>>1] = $229;
       $231 = (($225) + 1)|0;
       $pos$0 = $231;
       break L48;
       break;
      }
      case 56: case 30:  {
       label = 36;
       break;
      }
      default: {
      }
      }
      if ((label|0) == 36) {
       label = 0;
       $232 = (($153) + ($225<<1)|0);
       $233 = HEAP16[$232>>1]|0;
       $234 = $233&65535;
       $235 = (($152) + ($234<<1)|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = ($236<<16>>16)==(-1);
       if (!($237)) {
        $238 = HEAP32[$0>>2]|0;
        $239 = HEAP32[$216>>2]|0;
        $240 = $239&65535;
        _lily_u16_write_4($238,58,$240,$236,$233);
       }
      }
      $241 = HEAP16[$202>>1]|0;
      $242 = $241&65535;
      $243 = (($242) + ($225))|0;
      $pos$0 = $243;
     }
    } while(0);
    $244 = HEAP16[$203>>1]|0;
    $245 = $244&65535;
    $246 = (($245) + ($pos$0))|0;
    $247 = HEAP16[$204>>1]|0;
    $248 = ($247<<16>>16)==(0);
    if ($248) {
     $pos$1 = $246;
    } else {
     $249 = HEAP16[$204>>1]|0;
     $250 = $249&65535;
     $251 = ($249<<16>>16)==(0);
     if ($251) {
      $$lcssa12 = $250;
     } else {
      $i$116 = 0;
      while(1) {
       $252 = (($i$116) + ($246))|0;
       $253 = (($153) + ($252<<1)|0);
       $254 = HEAP16[$253>>1]|0;
       $255 = $254&65535;
       $256 = (($152) + ($255<<1)|0);
       $257 = HEAP16[$256>>1]|0;
       $258 = ($257<<16>>16)==(-1);
       if (!($258)) {
        $259 = HEAP32[$0>>2]|0;
        $260 = HEAP32[$214>>2]|0;
        $261 = $260&65535;
        _lily_u16_write_4($259,58,$261,$257,$254);
       }
       $262 = (($i$116) + 1)|0;
       $263 = HEAP16[$204>>1]|0;
       $264 = $263&65535;
       $265 = ($262|0)<($264|0);
       if ($265) {
        $i$116 = $262;
       } else {
        $$lcssa12 = $264;
        break;
       }
      }
     }
     $266 = (($$lcssa12) + ($246))|0;
     $pos$1 = $266;
    }
    $267 = HEAP16[$205>>1]|0;
    $268 = ($267<<16>>16)==(0);
    if ($268) {
     $pos$2 = $pos$1;
    } else {
     $$off = (($221) + -61)|0;
     $switch1 = ($$off>>>0)<(3);
     if (!($switch1)) {
      label = 48;
      break;
     }
     $269 = $267&65535;
     $270 = (($269) + ($pos$1))|0;
     $pos$2 = $270;
    }
    $272 = HEAP16[$206>>1]|0;
    $273 = ($272<<16>>16)==(0);
    $274 = $272&65535;
    $output_start$0 = $273 ? 0 : $pos$2;
    $pos$3 = (($274) + ($pos$2))|0;
    $275 = HEAP16[$207>>1]|0;
    $276 = ($275<<16>>16)==(0);
    if (!($276)) {
     $277 = HEAP16[$200>>1]|0;
     $278 = $277&65535;
     $279 = (($153) + ($278<<1)|0);
     $280 = HEAP16[$279>>1]|0;
     $281 = $280&65535;
     $$off2 = (($281) + -28)|0;
     $switch3 = ($$off2>>>0)<(3);
     if (!($switch3)) {
      label = 55;
      break;
     }
     $282 = HEAP16[$207>>1]|0;
     $283 = ($282<<16>>16)==(0);
     if (!($283)) {
      $i$222 = 0;
      while(1) {
       $284 = (($pos$3) + ($i$222))|0;
       $285 = (($153) + ($284<<1)|0);
       $286 = HEAP16[$285>>1]|0;
       $287 = $286&65535;
       $288 = (($152) + ($287<<1)|0);
       $289 = HEAP16[$288>>1]|0;
       $290 = ($289<<16>>16)==(-1);
       if (!($290)) {
        $291 = HEAP32[$0>>2]|0;
        $292 = HEAP32[$212>>2]|0;
        $293 = $292&65535;
        _lily_u16_write_4($291,58,$293,$289,$286);
       }
       $294 = (($i$222) + 1)|0;
       $295 = HEAP16[$207>>1]|0;
       $296 = $295&65535;
       $297 = ($294|0)<($296|0);
       if ($297) {
        $i$222 = $294;
       } else {
        break;
       }
      }
     }
    }
    $299 = HEAP16[$200>>1]|0;
    $300 = $299&65535;
    $301 = ($299<<16>>16)==($next_jump$037<<16>>16);
    if ($301) {
     $302 = HEAP32[$0>>2]|0;
     $303 = ((($302)) + 4|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $304&65535;
     $306 = $patch_iter$038&65535;
     $307 = (($306) + 1)|0;
     $308 = HEAP32[$emit>>2]|0;
     $309 = HEAP32[$308>>2]|0;
     $310 = (($309) + ($307<<1)|0);
     HEAP16[$310>>1] = $305;
     $311 = (($306) + 2)|0;
     $312 = $311&65535;
     $313 = $311 & 65535;
     $314 = HEAP32[$emit>>2]|0;
     $315 = HEAP32[$314>>2]|0;
     $316 = (($315) + ($313<<1)|0);
     $317 = HEAP16[$316>>1]|0;
     $next_jump$1 = $317;$patch_iter$1 = $312;
    } else {
     $next_jump$1 = $next_jump$037;$patch_iter$1 = $patch_iter$038;
    }
    $318 = HEAP16[$200>>1]|0;
    $319 = $318&65535;
    $320 = HEAP16[$208>>1]|0;
    $321 = $320&65535;
    $322 = (($321) + ($319))|0;
    $323 = HEAP16[$209>>1]|0;
    $324 = $323&65535;
    $325 = (($322) - ($324))|0;
    $326 = ($300|0)<($325|0);
    if ($326) {
     $327 = $320&65535;
     $328 = $318&65535;
     $329 = (($327) + ($328))|0;
     $330 = $323&65535;
     $331 = (($329) - ($330))|0;
     $i$326 = $300;
     while(1) {
      $332 = HEAP32[$0>>2]|0;
      $333 = (($153) + ($i$326<<1)|0);
      $334 = HEAP16[$333>>1]|0;
      _lily_u16_write_1($332,$334);
      $335 = (($i$326) + 1)|0;
      $exitcond = ($335|0)==($331|0);
      if ($exitcond) {
       break;
      } else {
       $i$326 = $335;
      }
     }
     $$pr = HEAP16[$209>>1]|0;
     $336 = $$pr;
    } else {
     $336 = $323;
    }
    $337 = ($336<<16>>16)==(0);
    if (!($337)) {
     $338 = HEAP16[$209>>1]|0;
     $339 = ($338<<16>>16)==(0);
     if (!($339)) {
      $340 = $338&65535;
      $357 = $340;$i7$030 = 0;
      while(1) {
       $341 = (($i7$030) + ($325))|0;
       $342 = (($153) + ($341<<1)|0);
       $343 = HEAP16[$342>>1]|0;
       $344 = ($343<<16>>16)==(0);
       if ($344) {
        $362 = HEAP32[$0>>2]|0;
        _lily_u16_write_1($362,0);
       } else {
        $345 = $343&65535;
        $346 = HEAP16[$200>>1]|0;
        $347 = $346&65535;
        $348 = (($347) + ($345))|0;
        $349 = HEAP32[$emit>>2]|0;
        $350 = HEAP32[$0>>2]|0;
        $351 = ((($350)) + 4|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = $352&65535;
        $354 = HEAP16[$208>>1]|0;
        $355 = $354&65535;
        $356 = (($i7$030) - ($357))|0;
        $358 = (($356) + ($355))|0;
        $359 = $358&65535;
        _lily_u16_write_2($349,$353,$359);
        $360 = HEAP32[$0>>2]|0;
        $361 = $348&65535;
        _lily_u16_write_1($360,$361);
       }
       $363 = (($i7$030) + 1)|0;
       $364 = HEAP16[$209>>1]|0;
       $365 = $364&65535;
       $366 = ($363|0)<($365|0);
       if ($366) {
        $357 = $365;$i7$030 = $363;
       } else {
        break;
       }
      }
     }
    }
    $367 = HEAP16[$206>>1]|0;
    $368 = ($367<<16>>16)==(0);
    if (!($368)) {
     $371 = $367&65535;
     $372 = (($371) + ($output_start$0))|0;
     $i$432 = $output_start$0;
     while(1) {
      $373 = (($153) + ($i$432<<1)|0);
      $374 = HEAP16[$373>>1]|0;
      $375 = $374&65535;
      $376 = (($152) + ($375<<1)|0);
      $377 = HEAP16[$376>>1]|0;
      $378 = ($377<<16>>16)==(-1);
      if (!($378)) {
       $379 = HEAP32[$0>>2]|0;
       $380 = HEAP32[$210>>2]|0;
       $381 = $380&65535;
       _lily_u16_write_4($379,59,$381,$377,$374);
      }
      $382 = (($i$432) + 1)|0;
      $383 = ($382|0)<($372|0);
      if ($383) {
       $i$432 = $382;
      } else {
       break;
      }
     }
    }
    $369 = (_lily_ci_next($ci)|0);
    $370 = ($369|0)==(0);
    if ($370) {
     break L44;
    } else {
     $next_jump$037 = $next_jump$1;$patch_iter$038 = $patch_iter$1;
    }
   }
   if ((label|0) == 48) {
    $271 = HEAP32[$213>>2]|0;
    HEAP32[$vararg_buffer>>2] = $221;
    _lily_raise($271,0,6730,$vararg_buffer);
    // unreachable;
   }
   else if ((label|0) == 55) {
    $298 = HEAP32[$211>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $281;
    _lily_raise($298,0,6774,$vararg_buffer1);
    // unreachable;
   }
  }
 } while(0);
 $384 = $188 & 65535;
 $385 = HEAP32[$emit>>2]|0;
 $386 = ((($385)) + 4|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = ($384>>>0)<($387>>>0);
 if (!($388)) {
  $$lcssa = $386;
  HEAP32[$$lcssa>>2] = $189;
  STACKTOP = sp;return;
 }
 $389 = ($189>>>0)<($384>>>0);
 $391 = $385;$j$014 = $384;
 while(1) {
  $390 = HEAP32[$391>>2]|0;
  $392 = (($390) + ($j$014<<1)|0);
  $393 = HEAP16[$392>>1]|0;
  $394 = $393&65535;
  $395 = HEAP32[$0>>2]|0;
  $396 = HEAP32[$395>>2]|0;
  $397 = (($396) + ($394<<1)|0);
  $398 = HEAP16[$397>>1]|0;
  $399 = $398&65535;
  L116: do {
   if ($389) {
    $400 = HEAP32[$emit>>2]|0;
    $401 = HEAP32[$400>>2]|0;
    $k$013 = $189;
    while(1) {
     $402 = (($401) + ($k$013<<1)|0);
     $403 = HEAP16[$402>>1]|0;
     $404 = ($398<<16>>16)==($403<<16>>16);
     if ($404) {
      $k$013$lcssa = $k$013;
      break;
     }
     $423 = (($k$013) + 2)|0;
     $424 = ($423|0)<($384|0);
     if ($424) {
      $k$013 = $423;
     } else {
      break L116;
     }
    }
    $405 = (_count_transforms($emit,$399)|0);
    $406 = $405 << 2;
    $407 = (($k$013$lcssa) + 1)|0;
    $408 = HEAP32[$emit>>2]|0;
    $409 = HEAP32[$408>>2]|0;
    $410 = (($409) + ($407<<1)|0);
    $411 = HEAP16[$410>>1]|0;
    $412 = $411&65535;
    $413 = (($j$014) + 1)|0;
    $414 = (($409) + ($413<<1)|0);
    $415 = HEAP16[$414>>1]|0;
    $416 = $415&65535;
    $sum = (($406) + ($394))|0;
    $417 = (($412) - ($sum))|0;
    $418 = (($417) + ($416))|0;
    $419 = $418&65535;
    $420 = HEAP32[$0>>2]|0;
    $421 = HEAP32[$420>>2]|0;
    $422 = (($421) + ($394<<1)|0);
    HEAP16[$422>>1] = $419;
   }
  } while(0);
  $425 = (($j$014) + 2)|0;
  $426 = HEAP32[$emit>>2]|0;
  $427 = ((($426)) + 4|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = ($425>>>0)<($428>>>0);
  if ($429) {
   $391 = $426;$j$014 = $425;
  } else {
   $$lcssa = $427;
   break;
  }
 }
 HEAP32[$$lcssa>>2] = $189;
 STACKTOP = sp;return;
}
function _find_closed_self_spot($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $result$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 44|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $result$2 = -1;
  return ($result$2|0);
 }
 $3 = ((($emit)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $i$02 = 0;
 while(1) {
  $5 = (($4) + ($i$02<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($6)) + 4|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = ($9<<16>>16)==(1);
   if (!($10)) {
    $result$2 = $i$02;
    label = 6;
    break;
   }
  }
  $11 = (($i$02) + 1)|0;
  $12 = HEAP16[$0>>1]|0;
  $13 = $12&65535;
  $14 = ($11|0)<($13|0);
  if ($14) {
   $i$02 = $11;
  } else {
   $result$2 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($result$2|0);
 }
 return (0)|0;
}
function _write_closure_zap($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$02 = 0, $count$2 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_u16_write_1($1,0);
 $4 = ((($emit)) + 44|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $count$0$lcssa = 0;
  $28 = $count$0$lcssa&65535;
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($3<<1)|0);
  HEAP16[$31>>1] = $28;
  return;
 }
 $7 = ((($emit)) + 20|0);
 $8 = ((($emit)) + 82|0);
 $count$02 = 0;$i$01 = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = (($9) + ($i$01<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $count$2 = $count$02;
  } else {
   $13 = ((($11)) + 4|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = ($14<<16>>16)==(1);
   if ($15) {
    $16 = ((($11)) + 36|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP16[$8>>1]|0;
    $19 = $18&65535;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $21 = HEAP32[$0>>2]|0;
     $22 = $i$01&65535;
     _lily_u16_write_1($21,$22);
     $23 = (($count$02) + 1)|0;
     $count$2 = $23;
    } else {
     $count$2 = $count$02;
    }
   } else {
    $count$2 = $count$02;
   }
  }
  $24 = (($i$01) + 1)|0;
  $25 = HEAP16[$4>>1]|0;
  $26 = $25&65535;
  $27 = ($24|0)<($26|0);
  if ($27) {
   $count$02 = $count$2;$i$01 = $24;
  } else {
   $count$0$lcssa = $count$2;
   break;
  }
 }
 $28 = $count$0$lcssa&65535;
 $29 = HEAP32[$0>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($3<<1)|0);
 HEAP16[$31>>1] = $28;
 return;
}
function _ensure_params_in_closure($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $var_iter$0 = 0, $var_iter$01 = 0, $var_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 10|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + -1)|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = ((($emit)) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 32|0);
 $var_iter$01 = HEAP32[$15>>2]|0;
 $16 = ($var_iter$01|0)==($3|0);
 if ($16) {
  return;
 }
 $17 = ((($emit)) + 16|0);
 $18 = ((($3)) + 32|0);
 $var_iter$02 = $var_iter$01;
 while(1) {
  $19 = ((($var_iter$02)) + 6|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 & 4;
  $22 = ($21<<16>>16)==(0);
  if (!($22)) {
   $23 = ((($var_iter$02)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24>>>0)<($9>>>0);
   if ($25) {
    $26 = HEAP32[$17>>2]|0;
    $27 = HEAP32[$18>>2]|0;
    $28 = $27&65535;
    $29 = (_find_closed_sym_spot($emit,$var_iter$02)|0);
    $30 = $29&65535;
    $31 = $24&65535;
    _lily_u16_write_4($26,59,$28,$30,$31);
   }
  }
  $var_iter$0 = HEAP32[$var_iter$02>>2]|0;
  $32 = ($var_iter$0|0)==($3|0);
  if ($32) {
   break;
  } else {
   $var_iter$02 = $var_iter$0;
  }
 }
 return;
}
function _find_closed_sym_spot($emit,$sym) {
 $emit = $emit|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 44|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $result$0 = -1;
  return ($result$0|0);
 }
 $3 = ((($emit)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $i$01 = 0;
 while(1) {
  $5 = (($4) + ($i$01<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($sym|0);
  if ($7) {
   $result$0 = $i$01;
   label = 5;
   break;
  }
  $8 = (($i$01) + 1)|0;
  $9 = HEAP16[$0>>1]|0;
  $10 = $9&65535;
  $11 = ($8|0)<($10|0);
  if ($11) {
   $i$01 = $8;
  } else {
   $result$0 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($result$0|0);
 }
 return (0)|0;
}
function _setup_transform_table($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 32|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($emit)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($6>>>0)<(0);
 $12 = ($3>>>0)<($10>>>0);
 $13 = ($6|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $16 = ((($emit)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $10 << 1;
  $19 = (_lily_realloc($17,$18)|0);
  HEAP32[$16>>2] = $19;
  $20 = HEAP32[$7>>2]|0;
  $21 = ((($20)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = $22;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
 }
 $27 = ((($emit)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$7>>2]|0;
 $30 = ((($29)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 << 1;
 _memset(($28|0),-1,($32|0))|0;
 $33 = ((($emit)) + 44|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = ($34<<16>>16)==(0);
 if ($35) {
  return;
 }
 $36 = ((($emit)) + 20|0);
 $37 = ((($emit)) + 82|0);
 $i$01 = 0;
 while(1) {
  $38 = HEAP32[$36>>2]|0;
  $39 = (($38) + ($i$01<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = ((($40)) + 4|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43<<16>>16)==(1);
   if ($44) {
    $45 = ((($40)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP16[$37>>1]|0;
    $48 = $47&65535;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = $i$01&65535;
     $51 = ((($40)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$27>>2]|0;
     $54 = (($53) + ($52<<1)|0);
     HEAP16[$54>>1] = $50;
     $55 = HEAP32[$36>>2]|0;
     $56 = (($55) + ($i$01<<2)|0);
     HEAP32[$56>>2] = 0;
    }
   }
  }
  $57 = (($i$01) + 1)|0;
  $58 = HEAP16[$33>>1]|0;
  $59 = $58&65535;
  $60 = ($57|0)<($59|0);
  if ($60) {
   $i$01 = $57;
  } else {
   break;
  }
 }
 return;
}
function _maybe_add_jump($buffer,$i,$dest) {
 $buffer = $buffer|0;
 $i = $i|0;
 $dest = $dest|0;
 var $$014 = 0, $$014$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($buffer)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($i|0);
 L1: do {
  if ($2) {
   $3 = HEAP32[$buffer>>2]|0;
   $$014 = $i;
   while(1) {
    $4 = (($3) + ($$014<<1)|0);
    $5 = HEAP16[$4>>1]|0;
    $6 = $5&65535;
    $7 = ($6|0)>($dest|0);
    if ($7) {
     $$014$lcssa = $$014;
     break;
    }
    $not$ = ($6|0)==($dest|0);
    if ($not$) {
     label = 8;
     break;
    }
    $9 = (($$014) + 2)|0;
    $10 = ($9|0)<($1|0);
    if ($10) {
     $$014 = $9;
    } else {
     break L1;
    }
   }
   if ((label|0) == 8) {
    return;
   }
   _lily_u16_inject($buffer,$$014$lcssa,0);
   $8 = $dest&65535;
   _lily_u16_inject($buffer,$$014$lcssa,$8);
   return;
  }
 } while(0);
 $11 = $dest&65535;
 _lily_u16_write_2($buffer,$11,0);
 return;
}
function _count_transforms($emit,$start) {
 $emit = $emit|0;
 $start = $start|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $ci = 0, $count$0 = 0, $count$1$ = 0, $count$112 = 0;
 var $count$3 = 0, $count$4$ = 0, $count$410 = 0, $count$6 = 0, $i$013 = 0, $i1$011 = 0, $not$ = 0, $not$6 = 0, $not$7 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ci = sp;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $start&65535;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 _lily_ci_init($ci,$2,$3,$6);
 (_lily_ci_next($ci)|0);
 $7 = HEAP32[$ci>>2]|0;
 $8 = ((($emit)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($ci)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($7) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = (($12) + 1)|0;
 $16 = ((($ci)) + 12|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($15) + ($18))|0;
 $20 = ($14<<16>>16)==(30);
 switch ($14<<16>>16) {
 case 30: case 56:  {
  $21 = (($7) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($9) + ($23<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $not$ = ($25<<16>>16)!=(-1);
  $$ = $not$&1;
  $count$0 = $$;
  break;
 }
 default: {
  $count$0 = 0;
 }
 }
 $26 = ((($ci)) + 14|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = ((($ci)) + 16|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($28) + ($19))|0;
 $33 = (($32) + ($31))|0;
 $34 = ((($ci)) + 18|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ($35<<16>>16)==(0);
 if ($36) {
  $count$3 = $count$0;
 } else {
  $37 = HEAP16[$34>>1]|0;
  $38 = $37&65535;
  $count$112 = $count$0;$i$013 = 0;
  while(1) {
   $39 = (($i$013) + ($33))|0;
   $40 = (($7) + ($39<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = (($9) + ($42<<1)|0);
   $44 = HEAP16[$43>>1]|0;
   $not$7 = ($44<<16>>16)!=(-1);
   $45 = $not$7&1;
   $count$1$ = (($45) + ($count$112))|0;
   $46 = (($i$013) + 1)|0;
   $47 = ($46|0)<($38|0);
   if ($47) {
    $count$112 = $count$1$;$i$013 = $46;
   } else {
    $count$3 = $count$1$;
    break;
   }
  }
 }
 $48 = HEAP16[$34>>1]|0;
 $49 = $48&65535;
 $50 = ((($ci)) + 20|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = ((($ci)) + 22|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = $14 | 1;
 $57 = ($56<<16>>16)==(29);
 $or$cond5 = $20 | $57;
 if (!($or$cond5)) {
  $count$6 = $count$3;
  STACKTOP = sp;return ($count$6|0);
 }
 $58 = ((($ci)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59<<16>>16)==(0);
 if ($60) {
  $count$6 = $count$3;
  STACKTOP = sp;return ($count$6|0);
 }
 $61 = (($49) + ($33))|0;
 $62 = (($61) + ($52))|0;
 $63 = (($62) + ($55))|0;
 $64 = HEAP16[$58>>1]|0;
 $65 = $64&65535;
 $count$410 = $count$3;$i1$011 = 0;
 while(1) {
  $66 = (($63) + ($i1$011))|0;
  $67 = (($7) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = (($9) + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $not$6 = ($71<<16>>16)!=(-1);
  $72 = $not$6&1;
  $count$4$ = (($72) + ($count$410))|0;
  $73 = (($i1$011) + 1)|0;
  $74 = ($73|0)<($65|0);
  if ($74) {
   $count$410 = $count$4$;$i1$011 = $73;
  } else {
   $count$6 = $count$4$;
   break;
  }
 }
 STACKTOP = sp;return ($count$6|0);
}
function _lily_emit_change_block_to($emit,$new_type) {
 $emit = $emit|0;
 $new_type = $new_type|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_type$off = 0;
 var $new_type$off4 = 0, $save_jump$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($1)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($emit)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($5|0)==($9|0);
 if (!($10)) {
  $11 = ((($1)) + 17|0);
  HEAP8[$11>>0] = 0;
 }
 $new_type$off = (($new_type) + -1)|0;
 $12 = ($new_type$off>>>0)<(2);
 L4: do {
  if ($12) {
   $13 = ($3<<16>>16)==(2);
   if ($13) {
    $14 = ($new_type|0)==(1);
    $$ = $14 ? 6818 : 6823;
    $15 = ((($emit)) + 92|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer>>2] = $$;
    _lily_raise($16,1,6828,$vararg_buffer);
    // unreachable;
   }
  } else {
   $new_type$off4 = (($new_type) + -7)|0;
   $17 = ($new_type$off4>>>0)<(2);
   if ($17) {
    switch ($3<<16>>16) {
    case 8:  {
     $18 = ((($emit)) + 92|0);
     $19 = HEAP32[$18>>2]|0;
     _lily_raise($19,1,6847,$vararg_buffer1);
     // unreachable;
     break;
    }
    case 6:  {
     $20 = HEAP32[$6>>2]|0;
     _lily_u16_write_1($20,52);
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
   }
  }
 } while(0);
 $21 = HEAP32[$1>>2]|0;
 $22 = ((($emit)) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($21|0)==($27|0);
 if (!($28)) {
  _lily_hide_block_vars($23,$21);
 }
 $29 = HEAP32[$4>>2]|0;
 $30 = HEAP32[$6>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)==($32|0);
 if ($33) {
  $save_jump$0 = -1;
 } else {
  _lily_u16_write_2($30,24,1);
  $34 = HEAP32[$6>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + -1)|0;
  $save_jump$0 = $37;
 }
 $38 = HEAP32[$emit>>2]|0;
 $39 = (_lily_u16_pop($38)|0);
 $40 = $39&65535;
 $41 = ($39<<16>>16)==(0);
 if (!($41)) {
  $42 = HEAP32[$6>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = ((($42)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) - ($40))|0;
  $50 = (($49) + ($48))|0;
  $51 = $50&65535;
  HEAP16[$44>>1] = $51;
 }
 $52 = ($save_jump$0|0)==(-1);
 if ($52) {
  $55 = HEAP32[$0>>2]|0;
  $56 = ((($55)) + 18|0);
  $57 = $new_type&65535;
  HEAP16[$56>>1] = $57;
  STACKTOP = sp;return;
 }
 $53 = HEAP32[$emit>>2]|0;
 $54 = $save_jump$0&65535;
 _lily_u16_write_1($53,$54);
 $55 = HEAP32[$0>>2]|0;
 $56 = ((($55)) + 18|0);
 $57 = $new_type&65535;
 HEAP16[$56>>1] = $57;
 STACKTOP = sp;return;
}
function _lily_emit_variant_decompose($emit,$buffer) {
 $emit = $emit|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_u16_pop($buffer)|0);
 $1 = $0&65535;
 $2 = ((($buffer)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($emit)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($emit)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 _lily_u16_write_2($5,57,$9);
 $10 = ($1|0)<($3|0);
 if (!($10)) {
  return;
 }
 $i$01 = $1;
 while(1) {
  $11 = HEAP32[$4>>2]|0;
  $12 = HEAP32[$buffer>>2]|0;
  $13 = (($12) + ($i$01<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  _lily_u16_write_1($11,$14);
  $15 = (($i$01) + 1)|0;
  $exitcond = ($15|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 return;
}
function _lily_emit_add_match_case($emit,$pos) {
 $emit = $emit|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02 = 0, $is_first_case$0 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($emit)) + 52|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($3&65535)<($6&65535);
 L1: do {
  if ($7) {
   $8 = ((($emit)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $i$02 = $4;
   while(1) {
    $14 = (($9) + ($i$02<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(1);
    $12 = (($i$02) + 1)|0;
    if ($16) {
     $is_first_case$0 = 1;
     break L1;
    }
    $10 = HEAP16[$5>>1]|0;
    $11 = $10&65535;
    $13 = ($12|0)<($11|0);
    if ($13) {
     $i$02 = $12;
    } else {
     $is_first_case$0 = 0;
     break;
    }
   }
  } else {
   $is_first_case$0 = 0;
  }
 } while(0);
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($emit)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($19|0)!=($23|0);
 $or$cond = $is_first_case$0 & $24;
 if ($or$cond) {
  $25 = ((($17)) + 17|0);
  HEAP8[$25>>0] = 0;
 }
 $26 = (($4) + ($pos))|0;
 $27 = ((($emit)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($26<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $ret$0 = 0;
  return ($ret$0|0);
 }
 HEAP32[$29>>2] = 1;
 if ($is_first_case$0) {
  _write_match_exit_jump($emit);
 }
 _write_match_jump($emit,$pos);
 $32 = HEAP32[$0>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($emit)) + 112|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($33|0)==($39|0);
 if ($40) {
  $ret$0 = 1;
  return ($ret$0|0);
 }
 _lily_hide_block_vars($35,$33);
 $ret$0 = 1;
 return ($ret$0|0);
}
function _write_match_exit_jump($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_u16_write_2($1,24,1);
 $2 = HEAP32[$emit>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 65535)|0;
 $7 = $6&65535;
 _lily_u16_write_1($2,$7);
 return;
}
function _write_match_jump($emit,$pos) {
 $emit = $emit|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($pos))|0;
 $5 = ((($emit)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (5 - ($3))|0;
 $10 = (($9) + ($8))|0;
 $11 = $10&65535;
 $12 = HEAP32[$6>>2]|0;
 $13 = (($12) + ($4<<1)|0);
 HEAP16[$13>>1] = $11;
 return;
}
function _lily_emit_do_match_else($emit) {
 $emit = $emit|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$0$ = 0, $ok$0$$lcssa = 0, $ok$02 = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($emit)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 _write_match_exit_jump($emit);
 $9 = ((($emit)) + 52|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($3&65535)<($10&65535);
 if ($11) {
  $i$01 = $4;$ok$02 = 0;
 } else {
  $22 = ($8|0)==(1);
  $$ = $22 ? 6879 : 6914;
  $23 = ((($emit)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_raise($24,1,$$,$vararg_buffer);
  // unreachable;
 }
 while(1) {
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($i$01<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($8|0);
  $ok$0$ = $15 ? $ok$02 : 1;
  $16 = ($14|0)==(0);
  if ($16) {
   HEAP32[$13>>2] = 1;
   $17 = (($i$01) - ($4))|0;
   _write_match_jump($emit,$17);
  }
  $18 = (($i$01) + 1)|0;
  $19 = HEAP16[$9>>1]|0;
  $20 = $19&65535;
  $21 = ($18|0)<($20|0);
  if ($21) {
   $i$01 = $18;$ok$02 = $ok$0$;
  } else {
   $ok$0$$lcssa = $ok$0$;
   break;
  }
 }
 $phitmp = ($ok$0$$lcssa|0)==(0);
 if ($phitmp) {
  $22 = ($8|0)==(1);
  $$ = $22 ? 6879 : 6914;
  $23 = ((($emit)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_raise($24,1,$$,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _lily_emit_eval_match_expr($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$02 = 0, $i$11 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$es>>2]|0;
 $1 = ((($emit)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 _eval_enforce_value($emit,$0,0,6963);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 4;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $12 = ((($emit)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_raise($13,1,8165,$vararg_buffer);
  // unreachable;
 }
 $14 = ((($7)) + 48|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ((($emit)) + 52|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (($19) + ($16))|0;
 $21 = ((($emit)) + 54|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ($20>>>0)>($23>>>0);
 if ($24) {
  _grow_match_cases($emit);
 }
 $25 = HEAP16[$17>>1]|0;
 $26 = ((($2)) + 12|0);
 HEAP16[$26>>1] = $25;
 $27 = ($15<<16>>16)==(0);
 $28 = HEAP16[$17>>1]|0;
 $29 = $28&65535;
 if ($27) {
  $$lcssa = $29;
 } else {
  $30 = ((($emit)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP16[$17>>1]|0;
  $33 = $32&65535;
  $34 = $15&65535;
  $36 = $29;$i$02 = 0;
  while(1) {
   $35 = (($36) + ($i$02))|0;
   $37 = (($31) + ($35<<2)|0);
   HEAP32[$37>>2] = 0;
   $38 = (($i$02) + 1)|0;
   $exitcond6 = ($38|0)==($34|0);
   if ($exitcond6) {
    $$lcssa = $33;
    break;
   } else {
    $36 = $33;$i$02 = $38;
   }
  }
 }
 $39 = (($$lcssa) + ($16))|0;
 $40 = $39&65535;
 HEAP16[$17>>1] = $40;
 $41 = ((($emit)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 5)|0;
 $46 = ((($2)) + 28|0);
 HEAP32[$46>>2] = $45;
 $47 = HEAP32[$41>>2]|0;
 $48 = (($16) + 5)|0;
 _lily_u16_write_prep($47,$48);
 $49 = HEAP32[$41>>2]|0;
 $50 = ((($emit)) + 88|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = $52&65535;
 $54 = HEAP32[$0>>2]|0;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56&65535;
 $58 = ((($7)) + 8|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = (($60) + 1)|0;
 $62 = $61&65535;
 _lily_u16_write_5($49,56,$53,$57,$62,$15);
 $63 = ($15<<16>>16)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = $15&65535;
 $i$11 = 0;
 while(1) {
  $65 = HEAP32[$41>>2]|0;
  _lily_u16_write_1($65,0);
  $66 = (($i$11) + 1)|0;
  $exitcond = ($66|0)==($64|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $66;
  }
 }
 STACKTOP = sp;return;
}
function _eval_enforce_value($emit,$ast,$expect,$message) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _eval_tree($emit,$ast,$expect);
 $0 = ((($emit)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$ast>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($emit)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise($6,1,$message,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _eval_tree($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 255;
 do {
  switch ($2<<16>>16) {
  case 17: case 18: case 19: case 6: case 7:  {
   _emit_nonlocal_var($emit,$ast);
   return;
   break;
  }
  case 16:  {
   _emit_literal($emit,$ast);
   return;
   break;
  }
  case 26:  {
   _emit_integer($emit,$ast);
   return;
   break;
  }
  case 25:  {
   _emit_byte($emit,$ast);
   return;
   break;
  }
  case 24:  {
   _emit_boolean($emit,$ast);
   return;
   break;
  }
  case 0:  {
   _eval_call($emit,$ast,$expect);
   return;
   break;
  }
  case 27:  {
   $3 = ($1&65535)>(5375);
   if ($3) {
    $4 = ((($ast)) + 20|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ((($5)) + 4|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7 & 255;
    $9 = $8 | 2;
    $10 = ($9<<16>>16)==(7);
    L17: do {
     if ($10) {
      _eval_assign($emit,$ast);
     } else {
      switch ($8<<16>>16) {
      case 1:  {
       _eval_sub_assign($emit,$ast);
       break L17;
       break;
      }
      case 8:  {
       _eval_oo_assign($emit,$ast);
       break L17;
       break;
      }
      case 13:  {
       _eval_property_assign($emit,$ast);
       break L17;
       break;
      }
      case 21:  {
       _eval_upvalue_assign($emit,$ast);
       break L17;
       break;
      }
      default: {
       _eval_assign($emit,$ast);
       break L17;
      }
      }
     }
    } while(0);
    _assign_post_check($emit,$ast);
    return;
   }
   $11 = ($1&65535) >>> 8;
   switch ($11<<16>>16) {
   case 18: case 19:  {
    _eval_logical_op($emit,$ast);
    return;
    break;
   }
   case 20:  {
    _eval_func_pipe($emit,$ast,$expect);
    return;
    break;
   }
   default: {
    $12 = ((($ast)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15 & 255;
    $17 = ($16<<16>>16)==(5);
    if (!($17)) {
     _eval_tree($emit,$13,0);
    }
    $18 = ((($ast)) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 & 255;
    $23 = ($22<<16>>16)==(5);
    if (!($23)) {
     $24 = HEAP32[$12>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     _eval_tree($emit,$19,$27);
    }
    _emit_binary_op($emit,$ast);
    return;
   }
   }
   break;
  }
  case 4:  {
   $28 = ((($ast)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   _eval_tree($emit,$29,$expect);
   $30 = ((($29)) + 12|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ((($ast)) + 12|0);
   HEAP16[$32>>1] = $31;
   $33 = HEAP32[$29>>2]|0;
   HEAP32[$ast>>2] = $33;
   return;
   break;
  }
  case 9:  {
   _eval_unary_op($emit,$ast);
   return;
   break;
  }
  case 22:  {
   _eval_interpolation($emit,$ast);
   return;
   break;
  }
  case 2:  {
   _eval_build_list($emit,$ast,$expect);
   return;
   break;
  }
  case 3:  {
   _eval_build_hash($emit,$ast,$expect);
   return;
   break;
  }
  case 12:  {
   _eval_build_tuple($emit,$ast,$expect);
   return;
   break;
  }
  case 1:  {
   _eval_subscript($emit,$ast);
   return;
   break;
  }
  case 11:  {
   _eval_typecast($emit,$ast);
   return;
   break;
  }
  case 8:  {
   _eval_oo_access($emit,$ast);
   return;
   break;
  }
  case 13:  {
   _eval_property($emit,$ast);
   return;
   break;
  }
  case 14:  {
   _eval_variant($emit,$ast,$expect);
   return;
   break;
  }
  case 15:  {
   _eval_lambda($emit,$ast,$expect);
   return;
   break;
  }
  case 20:  {
   _eval_self($emit,$ast);
   return;
   break;
  }
  case 21:  {
   _eval_upvalue($emit,$ast);
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _emit_nonlocal_var($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $opcode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 255;
 $3 = $2&65535;
 switch ($3|0) {
 case 7:  {
  $opcode$0 = 39;
  break;
 }
 case 19:  {
  $4 = ((($ast)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  _ensure_valid_scope($emit,$5);
  label = 3;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $opcode$0 = 41;
 }
 $6 = ((($ast)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_get_storage($emit,$9)|0);
 $11 = ($opcode$0|0)==(39);
 if (!($11)) {
  $12 = ((($10)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = $14 | 2;
  $16 = $15&65535;
  HEAP16[$12>>1] = $16;
 }
 $17 = HEAP32[$6>>2]|0;
 $18 = ((($17)) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 & 256;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  $22 = ((($emit)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $opcode$0&65535;
  $25 = ((($ast)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26&65535;
  $28 = ((($17)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29&65535;
  $31 = ((($10)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32&65535;
  _lily_u16_write_4($23,$24,$27,$30,$33);
  HEAP32[$ast>>2] = $10;
  return;
 } else {
  _emit_create_function($emit,$17,$10);
  HEAP32[$ast>>2] = $10;
  return;
 }
}
function _ensure_valid_scope($emit,$sym) {
 $emit = $emit|0;
 $sym = $sym|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name$0 = 0, $name$0$in = 0, $or$cond = 0, $parent$0 = 0, $parent$0$in = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($sym)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 24;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($emit)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2 & 8;
 $10 = ((($sym)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(4);
 $13 = ((($sym)) + 32|0);
 $14 = ((($sym)) + 40|0);
 $parent$0$in = $12 ? $13 : $14;
 $name$0$in = ((($sym)) + 16|0);
 $parent$0 = HEAP32[$parent$0$in>>2]|0;
 $name$0 = HEAP32[$name$0$in>>2]|0;
 $15 = ($9|0)!=(0);
 $$not = $15 ^ 1;
 $16 = ($8|0)==($parent$0|0);
 $or$cond = $16 | $$not;
 if ($or$cond) {
  $17 = ($9|0)==(0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = ($8|0)==(0|0);
  if (!($18)) {
   $19 = (_lily_class_greater_eq($parent$0,$8)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    STACKTOP = sp;return;
   }
  }
 }
 $21 = $15 ? 6994 : 7002;
 $22 = ((($emit)) + 92|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($parent$0)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $25;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $name$0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $21;
 _lily_raise($23,1,7012,$vararg_buffer);
 // unreachable;
}
function _emit_create_function($emit,$func_sym,$target) {
 $emit = $emit|0;
 $func_sym = $func_sym|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($func_sym)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 $5 = ((($target)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 _lily_u16_write_4($1,61,0,$4,$7);
 $8 = ((($emit)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 HEAP8[$10>>0] = 1;
 return;
}
function _emit_literal($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_get_storage($emit,$1)|0);
 $3 = ((($emit)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($ast)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 $8 = ((($ast)) + 16|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11&65535;
 _lily_u16_write_4($4,41,$7,$9,$12);
 HEAP32[$ast>>2] = $2;
 return;
}
function _emit_integer($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_get_storage($emit,$5)|0);
 $7 = ((($emit)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($ast)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($ast)) + 16|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($6)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 _lily_u16_write_4($8,42,$11,$13,$16);
 HEAP32[$ast>>2] = $6;
 return;
}
function _emit_byte($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_get_storage($emit,$5)|0);
 $7 = ((($emit)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($ast)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($ast)) + 16|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($6)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 _lily_u16_write_4($8,44,$11,$13,$16);
 HEAP32[$ast>>2] = $6;
 return;
}
function _emit_boolean($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_get_storage($emit,$5)|0);
 $7 = ((($emit)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($ast)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($ast)) + 16|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($6)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 _lily_u16_write_4($8,43,$11,$13,$16);
 HEAP32[$ast>>2] = $6;
 return;
}
function _eval_call($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = ((($ast)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 255;
 $5 = ($4<<16>>16)==(14);
 if ($5) {
  _eval_variant($emit,$ast,$expect);
  STACKTOP = sp;return;
 } else {
  _process_call($emit,$p,$ast,$expect);
  $6 = ((($emit)) + 100|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_ts_scope_restore($7,$p);
  STACKTOP = sp;return;
 }
}
function _eval_variant($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $p = 0, $padded_type$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $p = sp + 8|0;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 255;
 L1: do {
  switch ($2<<16>>16) {
  case 27: case 0:  {
   $3 = ((($ast)) + 24|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 6|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8 & 16;
   $10 = ($9<<16>>16)==(0);
   if ($10) {
    $15 = ((($6)) + 32|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    _process_call($emit,$p,$ast,$expect);
    $19 = ((($emit)) + 100|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_lily_ts_resolve_with($20,$18,$22)|0);
    $24 = HEAP32[$19>>2]|0;
    _lily_ts_scope_restore($24,$p);
    $padded_type$1 = $23;
    break L1;
   } else {
    $11 = ((($emit)) + 92|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($6)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$vararg_buffer>>2] = $14;
    _lily_raise($12,1,7056,$vararg_buffer);
    // unreachable;
   }
   break;
  }
  default: {
   $25 = ((($ast)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 6|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 & 16;
   $30 = ($29<<16>>16)==(0);
   if ($30) {
    $31 = ((($26)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    _verify_argument_count($emit,$ast,$32,-1,0);
   }
   $33 = ((($emit)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($ast)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36&65535;
   $38 = ((($26)) + 8|0);
   $39 = HEAP16[$38>>1]|0;
   _lily_u16_write_3($34,45,$37,$39);
   $40 = ((($26)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 46|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43<<16>>16)==(0);
   $45 = ((($41)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   if ($44) {
    $padded_type$1 = $46;
   } else {
    $47 = ((($emit)) + 100|0);
    $48 = HEAP32[$47>>2]|0;
    _lily_ts_scope_save($48,$p);
    $49 = ($expect|0)==(0|0);
    if (!($49)) {
     $50 = ((($expect)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$40>>2]|0;
     $53 = ($51|0)==($52|0);
     if ($53) {
      $54 = HEAP32[$47>>2]|0;
      (_lily_ts_check($54,$46,$expect)|0);
     }
    }
    $55 = HEAP32[$47>>2]|0;
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (_lily_ts_resolve_with($55,$46,$57)|0);
    $59 = HEAP32[$47>>2]|0;
    _lily_ts_scope_restore($59,$p);
    $padded_type$1 = $58;
   }
  }
  }
 } while(0);
 $60 = ((($emit)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63&65535;
 $65 = ((($ast)) + 12|0);
 HEAP16[$65>>1] = $64;
 $66 = (_get_storage($emit,$padded_type$1)|0);
 $67 = HEAP32[$60>>2]|0;
 $68 = ((($66)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69&65535;
 _lily_u16_write_1($67,$70);
 HEAP32[$ast>>2] = $66;
 STACKTOP = sp;return;
}
function _process_call($emit,$p,$ast,$expect) {
 $emit = $emit|0;
 $p = $p|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $cs = sp;
 _begin_call($emit,$cs,$ast);
 $0 = ((($emit)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_ts_scope_save($1,$p);
 $2 = ((($ast)) + 14|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + -1)|0;
 _validate_and_prep_call($emit,$cs,$expect,$5);
 _eval_verify_call_args($emit,$cs);
 STACKTOP = sp;return;
}
function _begin_call($emit,$cs,$ast) {
 $emit = $emit|0;
 $cs = $cs|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $call_item$06 = 0, $call_item$07 = 0, $call_type$1 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($cs)) + 4|0);
 HEAP32[$0>>2] = $ast;
 $1 = ((($cs)) + 18|0);
 HEAP16[$1>>1] = 0;
 $2 = ((($ast)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 255;
 switch ($6<<16>>16) {
 case 6: case 17: case 18:  {
  $7 = ((($3)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 6|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & 256;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $call_item$07 = $8;
   label = 9;
  } else {
   $13 = HEAP32[$7>>2]|0;
   $14 = ((($13)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_get_storage($emit,$15)|0);
   $17 = HEAP32[$2>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   _emit_create_function($emit,$19,$16);
   $call_item$07 = $16;
   label = 9;
  }
  break;
 }
 case 19:  {
  $20 = ((($3)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _ensure_valid_scope($emit,$21);
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $call_item$07 = $24;
  label = 9;
  break;
 }
 case 8:  {
  _eval_oo_access_for_item($emit,$3);
  $25 = ((($3)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($28<<16>>16)==(4);
  if ($29) {
   _oo_property_read($emit,$3);
   $30 = HEAP32[$3>>2]|0;
   $call_item$07 = $30;
   label = 9;
  } else {
   $call_item$07 = $26;
   label = 9;
  }
  break;
 }
 case 14:  {
  $33 = ((($3)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $call_item$07 = $34;
   label = 9;
  } else {
   $call_item$06 = $34;$call_type$1 = $36;
  }
  break;
 }
 default: {
  _eval_tree($emit,$3,0);
  $31 = HEAP32[$2>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $call_item$07 = $32;
  label = 9;
 }
 }
 if ((label|0) == 9) {
  $38 = ((($call_item$07)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $call_item$06 = $call_item$07;$call_type$1 = $39;
 }
 $40 = ((($call_type$1)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 8|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = ($43<<16>>16)!=(7);
 $45 = ($6<<16>>16)!=(14);
 $or$cond5 = $45 & $44;
 if ($or$cond5) {
  $46 = ((($ast)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($emit)) + 92|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 16|0);
  HEAP32[$50>>2] = $47;
  $51 = HEAP32[$48>>2]|0;
  HEAP32[$vararg_buffer>>2] = $call_type$1;
  _lily_raise($51,1,7185,$vararg_buffer);
  // unreachable;
 }
 HEAP32[$cs>>2] = $call_item$06;
 $52 = ((($cs)) + 8|0);
 HEAP32[$52>>2] = $call_type$1;
 $53 = ((($call_type$1)) + 6|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54 & 512;
 $56 = ($55<<16>>16)==(0);
 if ($56) {
  $71 = ((($cs)) + 12|0);
  HEAP32[$71>>2] = 0;
  $72 = ((($cs)) + 16|0);
  HEAP16[$72>>1] = -1;
  STACKTOP = sp;return;
 } else {
  $57 = ((($call_type$1)) + 10|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  $60 = (($59) + -1)|0;
  $61 = ((($call_type$1)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($60<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($cs)) + 12|0);
  HEAP32[$68>>2] = $67;
  $69 = $60&65535;
  $70 = ((($cs)) + 16|0);
  HEAP16[$70>>1] = $69;
  STACKTOP = sp;return;
 }
}
function _eval_oo_access_for_item($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $lookup_class$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(13);
 if ($4) {
  $5 = ((($ast)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 & 255;
  $10 = ($9<<16>>16)==(20);
  if ($10) {
   _maybe_close_over_class_self($emit);
  }
 }
 $11 = ((($ast)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 & 255;
 $16 = ($15<<16>>16)==(5);
 if (!($16)) {
  _eval_tree($emit,$12,0);
 }
 $17 = HEAP32[$11>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ($24<<16>>16)==(3);
 if ($25) {
  $26 = ((($22)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $lookup_class$0 = $27;
 } else {
  $lookup_class$0 = $22;
 }
 $28 = ((($emit)) + 96|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($ast)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_lily_sp_get($29,$31)|0);
 $33 = ((($emit)) + 108|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_lily_find_or_dl_member($34,$lookup_class$0,$32)|0);
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = HEAP32[$11>>2]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($emit)) + 92|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 16|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[$40>>2]|0;
  $44 = ((($lookup_class$0)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer>>2] = $45;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $32;
  _lily_raise($43,1,7088,$vararg_buffer);
  // unreachable;
 }
 $46 = ((($35)) + 4|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = ($47<<16>>16)==(4);
 if (!($48)) {
  $60 = ((($ast)) + 20|0);
  HEAP32[$60>>2] = $35;
  _ensure_valid_scope($emit,$35);
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$11>>2]|0;
 $50 = ((($49)) + 4|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 & 255;
 $53 = ($52<<16>>16)==(20);
 if ($53) {
  $54 = ((($49)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($emit)) + 92|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 16|0);
  HEAP32[$58>>2] = $55;
  $59 = HEAP32[$56>>2]|0;
  HEAP32[$vararg_buffer2>>2] = 18083;
  _lily_raise($59,1,7133,$vararg_buffer2);
  // unreachable;
 } else {
  $60 = ((($ast)) + 20|0);
  HEAP32[$60>>2] = $35;
  _ensure_valid_scope($emit,$35);
  STACKTOP = sp;return;
 }
}
function _maybe_close_over_class_self($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $block$0 = 0, $block$0$in = 0, $block$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $block$0$in = $0;
 while(1) {
  $block$0 = HEAP32[$block$0$in>>2]|0;
  $1 = ((($block$0)) + 18|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = ($2<<16>>16)==(12);
  $4 = ((($block$0)) + 52|0);
  if ($3) {
   $block$0$lcssa = $block$0;
   break;
  } else {
   $block$0$in = $4;
  }
 }
 $5 = ((($block$0$lcssa)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_find_closed_sym_spot($emit,$6)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  _close_over_sym($emit,$6);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $18 = ((($emit)) + 72|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  HEAP8[$20>>0] = 1;
  return;
 }
 $13 = ((($6)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_get_storage($emit,$14)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 44|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($emit)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 16|0);
 HEAP8[$20>>0] = 1;
 return;
}
function _close_over_sym($emit,$sym) {
 $emit = $emit|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 44|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($emit)) + 46|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($1<<16>>16)==($3<<16>>16);
 if ($4) {
  _grow_closed_syms($emit);
 }
 $5 = HEAP16[$0>>1]|0;
 $6 = $5&65535;
 $7 = ((($emit)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 HEAP32[$9>>2] = $sym;
 $10 = HEAP16[$0>>1]|0;
 $11 = (($10) + 1)<<16>>16;
 HEAP16[$0>>1] = $11;
 $12 = ((($sym)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = $14 | 4;
 $16 = $15&65535;
 HEAP16[$12>>1] = $16;
 $17 = ((($emit)) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 16|0);
 HEAP8[$19>>0] = 1;
 return;
}
function _grow_closed_syms($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 46|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = $3&65535;
 HEAP16[$0>>1] = $4;
 $5 = ((($emit)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 << 3;
 $8 = $7 & 262136;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$5>>2] = $9;
 return;
}
function _oo_property_read($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_get_solved_property_type($emit,$ast)|0);
 $3 = (_get_storage($emit,$2)|0);
 $4 = ((($emit)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($ast)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&65535;
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($ast)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 $18 = ((($3)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19&65535;
 _lily_u16_write_5($5,49,$8,$11,$17,$20);
 HEAP32[$ast>>2] = $3;
 return;
}
function _get_solved_property_type($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $property_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 1024;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  $property_type$0 = $3;
  return ($property_type$0|0);
 }
 $8 = ((($emit)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($ast)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_ts_resolve_by_second($9,$14,$3)|0);
 $property_type$0 = $15;
 return ($property_type$0|0);
}
function _validate_and_prep_call($emit,$cs,$expect,$num_args) {
 $emit = $emit|0;
 $cs = $cs|0;
 $expect = $expect|0;
 $num_args = $num_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 255;
 $7 = ($6<<16>>16)==(8);
 $8 = ($6<<16>>16)==(18);
 $9 = $7 | $8;
 $10 = $9&1;
 $11 = ((($cs)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($num_args))|0;
 _verify_argument_count($emit,$1,$12,$13,$10);
 switch ($6<<16>>16) {
 case 8: case 18:  {
  _push_first_tree_value($emit,$cs);
  break;
 }
 default: {
 }
 }
 $14 = HEAP32[$11>>2]|0;
 $15 = ((($14)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 & 1024;
 $18 = ($17<<16>>16)==(0);
 if ($18) {
  return;
 }
 $19 = $6 | 16;
 $20 = ($19<<16>>16)==(21);
 $21 = ($6<<16>>16)==(17);
 $or$cond3 = $21 | $20;
 if ($or$cond3) {
  $22 = ((($emit)) + 100|0);
  $23 = HEAP32[$22>>2]|0;
  (_lily_ts_check($23,$14,$14)|0);
  return;
 }
 $24 = ((($14)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = ($expect|0)!=(0|0);
 $or$cond5 = $28 & $27;
 if (!($or$cond5)) {
  return;
 }
 $29 = ((($expect)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ((($26)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ($32<<16>>16)==($36<<16>>16);
 if (!($37)) {
  return;
 }
 $38 = ((($emit)) + 100|0);
 $39 = HEAP32[$38>>2]|0;
 (_lily_ts_check($39,$26,$expect)|0);
 return;
}
function _verify_argument_count($emit,$target,$call_type,$num_args,$count_first) {
 $emit = $emit|0;
 $target = $target|0;
 $call_type = $call_type|0;
 $num_args = $num_args|0;
 $count_first = $count_first|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arg_str = 0, $class_name = 0, $div_str$0 = 0, $max = 0, $max_str = 0, $min = 0, $min_str = 0, $name = 0, $or$cond = 0, $or$cond4 = 0, $separator = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $min = sp + 84|0;
 $max = sp + 80|0;
 $class_name = sp + 76|0;
 $separator = sp + 72|0;
 $name = sp + 68|0;
 $arg_str = sp + 88|0;
 $min_str = sp + 8|0;
 $max_str = sp;
 _get_func_min_max($call_type,$min,$max);
 $0 = ($num_args|0)==(-1);
 $1 = HEAP32[$min>>2]|0;
 $2 = ($1>>>0)>($num_args>>>0);
 $or$cond = $0 | $2;
 $3 = HEAP32[$max>>2]|0;
 $4 = ($3>>>0)<($num_args>>>0);
 $or$cond4 = $or$cond | $4;
 if (!($or$cond4)) {
  STACKTOP = sp;return;
 }
 $5 = ($count_first|0)==(0);
 if ($5) {
  $$0 = $num_args;
 } else {
  $6 = ((($target)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==(1);
  if ($12) {
   $13 = (($1) + -1)|0;
   HEAP32[$min>>2] = $13;
   $14 = (($num_args) + -1)|0;
   $15 = HEAP32[$max>>2]|0;
   $16 = ($15|0)==(-1);
   if ($16) {
    $$0 = $14;
   } else {
    $17 = (($15) + -1)|0;
    HEAP32[$max>>2] = $17;
    $$0 = $14;
   }
  } else {
   $$0 = $num_args;
  }
 }
 $18 = $min_str;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = $max_str;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = ($$0|0)==(-1);
 if ($26) {
  (_strncpy($arg_str,7230,8)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $$0;
  (_snprintf($arg_str,8,9291,$vararg_buffer)|0);
 }
 $27 = HEAP32[$min>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $27;
 (_snprintf($min_str,8,9291,$vararg_buffer1)|0);
 $28 = HEAP32[$max>>2]|0;
 $29 = ($27|0)==($28|0);
 if ($29) {
  $div_str$0 = 18083;
 } else {
  $30 = ($28|0)==(-1);
  if ($30) {
   $div_str$0 = 10550;
  } else {
   HEAP32[$vararg_buffer4>>2] = $28;
   (_snprintf($max_str,8,9291,$vararg_buffer4)|0);
   $div_str$0 = 7235;
  }
 }
 _get_error_name($target,$class_name,$separator,$name);
 $31 = ((($target)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($emit)) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = $32;
 $36 = HEAP32[$33>>2]|0;
 $37 = HEAP32[$class_name>>2]|0;
 $38 = HEAP32[$separator>>2]|0;
 $39 = HEAP32[$name>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $37;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $38;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $39;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $arg_str;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = $min_str;
 $vararg_ptr14 = ((($vararg_buffer7)) + 20|0);
 HEAP32[$vararg_ptr14>>2] = $div_str$0;
 $vararg_ptr15 = ((($vararg_buffer7)) + 24|0);
 HEAP32[$vararg_ptr15>>2] = $max_str;
 _lily_raise($36,1,7256,$vararg_buffer7);
 // unreachable;
}
function _get_func_min_max($call_type,$min,$max) {
 $call_type = $call_type|0;
 $min = $min|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($call_type)) + 10|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($2) + -1)|0;
 HEAP32[$min>>2] = $3;
 HEAP32[$max>>2] = $3;
 $4 = ((($call_type)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $25 = $6 & 512;
  $26 = ($25|0)==(0);
  if ($26) {
   return;
  }
  HEAP32[$max>>2] = -1;
  $27 = HEAP32[$min>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$min>>2] = $28;
  return;
 }
 $9 = HEAP16[$0>>1]|0;
 $10 = ($9&65535)>(1);
 L8: do {
  if ($10) {
   $11 = ((($call_type)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $i$01 = 1;
   while(1) {
    $13 = (($12) + ($i$01<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = ($18<<16>>16)==(-4);
    if ($19) {
     $i$0$lcssa = $i$01;
     break L8;
    }
    $20 = (($i$01) + 1)|0;
    $21 = HEAP16[$0>>1]|0;
    $22 = $21&65535;
    $23 = ($20|0)<($22|0);
    if ($23) {
     $i$01 = $20;
    } else {
     $i$0$lcssa = $20;
     break;
    }
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 $24 = (($i$0$lcssa) + -1)|0;
 HEAP32[$min>>2] = $24;
 return;
}
function _get_error_name($ast,$class_name,$separator,$name) {
 $ast = $ast|0;
 $class_name = $class_name|0;
 $separator = $separator|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$class_name>>2] = 18083;
 HEAP32[$separator>>2] = 18083;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 255;
 switch ($2<<16>>16) {
 case 27:  {
  $3 = ((($ast)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
  break;
 }
 case 14:  {
  $$0 = $ast;
  break;
 }
 default: {
  $5 = ((($ast)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
 }
 }
 $7 = ((($$0)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 255;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  HEAP32[$name>>2] = 7238;
  return;
 }
 $11 = ((($$0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 switch ($14<<16>>16) {
 case 1:  {
  $15 = ((($12)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = ((($16)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$class_name>>2] = $19;
   HEAP32[$separator>>2] = 17513;
  }
  $20 = ((($12)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$name>>2] = $21;
  break;
 }
 case 3:  {
  $22 = ((($12)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$name>>2] = $23;
  break;
 }
 case 4:  {
  $24 = ((($12)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$class_name>>2] = $27;
  HEAP32[$separator>>2] = 17513;
  $28 = ((($12)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$name>>2] = $29;
  break;
 }
 default: {
  HEAP32[$name>>2] = 7238;
 }
 }
 $30 = HEAP32[$name>>2]|0;
 $31 = (_strcmp($30,7250)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  return;
 }
 HEAP32[$separator>>2] = 18083;
 HEAP32[$name>>2] = 18083;
 return;
}
function _push_first_tree_value($emit,$cs) {
 $emit = $emit|0;
 $cs = $cs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $push_type$0 = 0, $push_type$0$in = 0, $push_value$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 255;
 $7 = ($6<<16>>16)==(18);
 if ($7) {
  $8 = ((($emit)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   _maybe_close_over_class_self($emit);
  }
  $13 = HEAP32[$8>>2]|0;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 12|0);
  $push_type$0$in = $16;$push_value$0 = $15;
 } else {
  $17 = ((($3)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $push_type$0$in = $20;$push_value$0 = $19;
 }
 $push_type$0 = HEAP32[$push_type$0$in>>2]|0;
 $21 = (_get_expected_type($cs,0)|0);
 $22 = ((($emit)) + 100|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_lily_ts_check($23,$21,$push_type$0)|0);
 $25 = ($24|0)==(1);
 if ($25) {
  _add_value($emit,$cs,$push_value$0);
  return;
 } else {
  _bad_arg_error($emit,$cs,$21,$push_type$0);
  return;
 }
}
function _get_expected_type($cs,$pos) {
 $cs = $cs|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cs)) + 16|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($pos) + 1)|0;
 $4 = ($2|0)>($3|0);
 if (!($4)) {
  $19 = ((($cs)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $result$0 = $20;
  return ($result$0|0);
 }
 $5 = ((($cs)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)==(-4);
 if (!($15)) {
  $result$0 = $10;
  return ($result$0|0);
 }
 $16 = ((($10)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $result$0 = $18;
 return ($result$0|0);
}
function _add_value($emit,$cs,$sym) {
 $emit = $emit|0;
 $cs = $cs|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($emit)) + 42|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($1<<16>>16)==($3<<16>>16);
 if ($4) {
  _grow_call_values($emit);
 }
 $5 = HEAP16[$0>>1]|0;
 $6 = $5&65535;
 $7 = ((($emit)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 HEAP32[$9>>2] = $sym;
 $10 = HEAP16[$0>>1]|0;
 $11 = (($10) + 1)<<16>>16;
 HEAP16[$0>>1] = $11;
 $12 = ((($cs)) + 18|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($13) + 1)<<16>>16;
 HEAP16[$12>>1] = $14;
 return;
}
function _grow_call_values($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 42|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = $3&65535;
 HEAP16[$0>>1] = $4;
 $5 = ((($emit)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 << 3;
 $8 = $7 & 262136;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$5>>2] = $9;
 return;
}
function _bad_arg_error($emit,$cs,$expected,$got) {
 $emit = $emit|0;
 $cs = $cs|0;
 $expected = $expected|0;
 $got = $got|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $class_name = 0, $name = 0, $separator = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $class_name = sp + 36|0;
 $separator = sp + 32|0;
 $name = sp + 28|0;
 $0 = ((($cs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _get_error_name($1,$class_name,$separator,$name);
 $2 = ((($emit)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($emit)) + 100|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_ts_resolve_as_question($11);
 $12 = HEAP32[$10>>2]|0;
 $13 = ((($expected)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 & 8192;
 $16 = ($15<<16>>16)==(0);
 if ($16) {
  $17 = ((($12)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_lily_ts_resolve_with($12,$expected,$18)|0);
  $$0 = $19;
 } else {
  $$0 = $expected;
 }
 $20 = ((($cs)) + 18|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = (($22) + 1)|0;
 $24 = HEAP32[$class_name>>2]|0;
 $25 = HEAP32[$separator>>2]|0;
 $26 = HEAP32[$name>>2]|0;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $24;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $25;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $$0;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $got;
 _lily_mb_add_fmt($5,7309,$vararg_buffer);
 $27 = HEAP32[$2>>2]|0;
 $28 = (_lily_mb_get($5)|0);
 _lily_raise($27,1,$28,$vararg_buffer6);
 // unreachable;
}
function _eval_verify_call_args($emit,$cs) {
 $emit = $emit|0;
 $cs = $cs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0 = 0, $arg$0$in = 0, $arg$0$in1 = 0, $arg$02 = 0, $arg$03 = 0, $vararg_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $arg$0$in1 = ((($3)) + 32|0);
 $arg$02 = HEAP32[$arg$0$in1>>2]|0;
 $4 = ($arg$02|0)==(0|0);
 if (!($4)) {
  $arg$03 = $arg$02;
  while(1) {
   _eval_call_arg($emit,$cs,$arg$03);
   $arg$0$in = ((($arg$03)) + 32|0);
   $arg$0 = HEAP32[$arg$0$in>>2]|0;
   $5 = ($arg$0|0)==(0|0);
   if ($5) {
    break;
   } else {
    $arg$03 = $arg$0;
   }
  }
 }
 $6 = ((($emit)) + 100|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_ts_default_incomplete_solves($7);
 $8 = ((($cs)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 512;
 $13 = ($12<<16>>16)==(0);
 if (!($13)) {
  $14 = ((($9)) + 10|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + -1)|0;
  $18 = ((($9)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 6|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 & 1024;
  $25 = ($24<<16>>16)==(0);
  if ($25) {
   $vararg_type$0 = $21;
  } else {
   $26 = HEAP32[$6>>2]|0;
   $27 = (_lily_ts_resolve($26,$21)|0);
   $vararg_type$0 = $27;
  }
  $28 = HEAP32[$8>>2]|0;
  $29 = ((($28)) + 10|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = (($31) + 65534)|0;
  $33 = $32&65535;
  _write_varargs($emit,$cs,$vararg_type$0,$33);
 }
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 & 255;
 $40 = ($39<<16>>16)==(14);
 if ($40) {
  $41 = ((($36)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  _write_build_enum($emit,$cs,$42);
  $43 = ((($cs)) + 18|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ((($emit)) + 40|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = (($48) - ($45))|0;
  $50 = $49&65535;
  HEAP16[$46>>1] = $50;
  return;
 } else {
  _write_call($emit,$cs);
  $43 = ((($cs)) + 18|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ((($emit)) + 40|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = (($48) - ($45))|0;
  $50 = $49&65535;
  HEAP16[$46>>1] = $50;
  return;
 }
}
function _eval_call_arg($emit,$cs,$arg) {
 $emit = $emit|0;
 $cs = $cs|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eval_type$0 = 0, $p = 0;
 var $result_type$0 = 0, $result_type$1 = 0, $want_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = ((($cs)) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (_get_expected_type($cs,$2)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(-4);
 if ($8) {
  $9 = ((($3)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $want_type$0 = $11;
 } else {
  $want_type$0 = $3;
 }
 $12 = ((($want_type$0)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & 1024;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  $eval_type$0 = $want_type$0;
 } else {
  $16 = ((($emit)) + 100|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_lily_ts_resolve_with($17,$want_type$0,$19)|0);
  $eval_type$0 = $20;
 }
 _eval_tree($emit,$arg,$eval_type$0);
 $21 = HEAP32[$arg>>2]|0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 & 1024;
 $27 = ($26<<16>>16)==(0);
 L7: do {
  if ($27) {
   $result_type$1 = $23;
  } else {
   $28 = ((($arg)) + 4|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 & 255;
   switch ($30<<16>>16) {
   case 6: case 19:  {
    break;
   }
   default: {
    $result_type$1 = $23;
    break L7;
   }
   }
   $31 = ((($emit)) + 100|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_lily_ts_resolve_with($32,$want_type$0,$34)|0);
   $36 = HEAP32[$31>>2]|0;
   _lily_ts_scope_save($36,$p);
   $37 = HEAP32[$31>>2]|0;
   (_lily_ts_check($37,$23,$35)|0);
   $38 = HEAP32[$31>>2]|0;
   $39 = (_lily_ts_resolve_with($38,$23,$34)|0);
   $40 = HEAP32[$31>>2]|0;
   _lily_ts_scope_restore($40,$p);
   $41 = ($39|0)==($35|0);
   if ($41) {
    label = 9;
   } else {
    $42 = HEAP32[$31>>2]|0;
    $43 = (_lily_ts_type_greater_eq($42,$39,$35)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $result_type$0 = $23;
    } else {
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $result_type$0 = $39;
   }
   $result_type$1 = $result_type$0;
  }
 } while(0);
 $45 = HEAP16[$12>>1]|0;
 $46 = $45 & 1024;
 $47 = ($46<<16>>16)==(0);
 if ($47) {
  label = 13;
 } else {
  $48 = ((($emit)) + 100|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_lily_ts_check($49,$want_type$0,$result_type$1)|0);
  $51 = ($50|0)==(0);
  if ($51) {
   label = 13;
  }
 }
 do {
  if ((label|0) == 13) {
   $52 = HEAP16[$12>>1]|0;
   $53 = $52 & 1024;
   $54 = ($53<<16>>16)==(0);
   if ($54) {
    $55 = (_type_matchup($emit,$want_type$0,$arg)|0);
    $56 = ($55|0)==(0);
    if (!($56)) {
     break;
    }
   }
   _bad_arg_error($emit,$cs,$want_type$0,$result_type$1);
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = HEAP32[$arg>>2]|0;
 _add_value($emit,$cs,$57);
 STACKTOP = sp;return;
}
function _type_matchup($emit,$want_type,$right) {
 $emit = $emit|0;
 $want_type = $want_type|0;
 $right = $right|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$right>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($want_type|0);
 if ($3) {
  return 1;
 } else {
  $4 = ((($emit)) + 100|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_lily_ts_type_greater_eq($5,$want_type,$2)|0);
  $not$ = ($6|0)!=(0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _write_varargs($emit,$cs,$type,$from) {
 $emit = $emit|0;
 $cs = $cs|0;
 $type = $type|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get_storage($emit,$type)|0);
 $1 = ((($cs)) + 18|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $from&65535;
 $5 = (($3) - ($4))|0;
 $6 = ((($emit)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($cs)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11&65535;
 $13 = $5&65535;
 _lily_u16_write_3($7,33,$12,$13);
 _write_call_values($emit,$cs,$from);
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 _lily_u16_write_1($14,$17);
 $18 = ((($emit)) + 40|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = (($20) - ($5))|0;
 $22 = $21&65535;
 HEAP16[$18>>1] = $22;
 $23 = HEAP16[$1>>1]|0;
 $24 = $23&65535;
 $25 = (($24) - ($5))|0;
 $26 = $25&65535;
 HEAP16[$1>>1] = $26;
 _add_value($emit,$cs,$0);
 return;
}
function _write_call_values($emit,$cs,$from) {
 $emit = $emit|0;
 $cs = $cs|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cs)) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1&65535)>($from&65535);
 if (!($2)) {
  return;
 }
 $3 = $1&65535;
 $4 = $from&65535;
 $5 = ((($emit)) + 40|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($emit)) + 12|0);
 $9 = (($7) + ($4))|0;
 $10 = (($9) - ($3))|0;
 $11 = ((($emit)) + 8|0);
 $12 = $1&65535;
 $13 = $from&65535;
 $14 = (($12) - ($13))|0;
 $i$01 = 0;
 while(1) {
  $15 = HEAP32[$8>>2]|0;
  $16 = (($10) + ($i$01))|0;
  $17 = HEAP32[$11>>2]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&65535;
  _lily_u16_write_1($15,$22);
  $23 = (($i$01) + 1)|0;
  $exitcond = ($23|0)==($14|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $23;
  }
 }
 return;
}
function _write_build_enum($emit,$cs,$variant_cls) {
 $emit = $emit|0;
 $cs = $cs|0;
 $variant_cls = $variant_cls|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cs)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 $7 = ((($variant_cls)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($cs)) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 _lily_u16_write_4($1,36,$6,$8,$10);
 _write_call_values($emit,$cs,0);
 return;
}
function _write_call($emit,$cs) {
 $emit = $emit|0;
 $cs = $cs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $i$03 = 0, $opcode$0 = 0, $return_type$0 = 0, $storage$2 = 0, $storage$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cs>>2]|0;
 $1 = ((($cs)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($cs)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 64;
 $12 = ($11|0)==(0);
 if ($12) {
  $opcode$0 = 30;
 } else {
  $13 = $10 & 1024;
  $14 = $13&65535;
  $15 = ($14&65535) >>> 10;
  $16 = (29 - ($15))<<16>>16;
  $opcode$0 = $16;
 }
 $17 = HEAP32[441]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($7|0)==($19|0);
 if ($20) {
  $21 = ((($emit)) + 40|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = ((($cs)) + 18|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = (($23) - ($26))|0;
  $28 = ((($emit)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($27<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$2>>2] = $31;
 } else {
  $32 = ((($7)) + 6|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 & 9216;
  $35 = ($34<<16>>16)==(0);
  if ($35) {
   $return_type$0 = $7;
  } else {
   $36 = ((($emit)) + 100|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_lily_ts_resolve($37,$7)|0);
   $return_type$0 = $38;
  }
  $39 = ((($emit)) + 40|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ((($cs)) + 18|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = (($41) - ($44))|0;
  $46 = ($43<<16>>16)==(0);
  if ($46) {
   label = 13;
  } else {
   $47 = ((($emit)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $i$03 = 0;
   while(1) {
    $49 = (($45) + ($i$03))|0;
    $50 = (($48) + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 4|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = ($53<<16>>16)==(2);
    if ($54) {
     $55 = ((($51)) + 12|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($return_type$0|0);
     if ($57) {
      $storage$2 = $51;
      break;
     }
    }
    $58 = (($i$03) + 1)|0;
    $59 = ($58|0)<($44|0);
    if ($59) {
     $i$03 = $58;
    } else {
     $storage$2 = 0;
     break;
    }
   }
   $60 = ($storage$2|0)==(0|0);
   if ($60) {
    label = 13;
   } else {
    $storage$3 = $storage$2;
   }
  }
  if ((label|0) == 13) {
   $61 = (_get_storage($emit,$return_type$0)|0);
   $62 = ((($61)) + 6|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   $65 = $64 | 2;
   $66 = $65&65535;
   HEAP16[$62>>1] = $66;
   $storage$3 = $61;
  }
  HEAP32[$2>>2] = $storage$3;
 }
 $67 = ((($emit)) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($2)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70&65535;
 $72 = ((($0)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73&65535;
 $75 = ((($cs)) + 18|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = HEAP32[$2>>2]|0;
 $78 = ((($77)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79&65535;
 _lily_u16_write_5($68,$opcode$0,$71,$74,$76,$80);
 $81 = HEAP32[$67>>2]|0;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 65535)|0;
 $85 = $84&65535;
 $86 = ((($2)) + 12|0);
 HEAP16[$86>>1] = $85;
 _write_call_values($emit,$cs,0);
 return;
}
function _eval_assign($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $pos$0 = 0, $right_sym$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 255;
 switch ($4<<16>>16) {
 case 5: case 7:  {
  break;
 }
 default: {
  $5 = ((($ast)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($emit)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  HEAP32[$9>>2] = $6;
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($ast)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12&65535) >>> 8;
  $14 = $13&65535;
  $15 = (_opname($14)|0);
  HEAP32[$vararg_buffer>>2] = $15;
  _lily_raise($10,1,7380,$vararg_buffer);
  // unreachable;
 }
 }
 $16 = ((($ast)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 _eval_tree($emit,$17,$21);
 $22 = HEAP32[$0>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = HEAP32[$16>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$24>>2] = $30;
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 6|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34&65535;
 $36 = $35 & 65534;
 $37 = $36&65535;
 HEAP16[$33>>1] = $37;
 $38 = HEAP32[$0>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$16>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($39)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = ((($41)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($43|0)==($49|0);
 if (!($50)) {
  $51 = (_type_matchup($emit,$43,$40)|0);
  $52 = ($51|0)==(0);
  if ($52) {
   $53 = ((($ast)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$42>>2]|0;
   $56 = HEAP32[$48>>2]|0;
   _bad_assign_error($emit,$54,$55,$56);
  }
 }
 $$off = (($47) + -1)<<16>>16;
 $not$ = ($$off&65535)>(1);
 $57 = ((($ast)) + 4|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = ($58&65535)>(5631);
 if ($59) {
  $60 = HEAP32[$0>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 & 255;
  $64 = ($63<<16>>16)==(7);
  if ($64) {
   _eval_tree($emit,$60,0);
  }
  _emit_op_for_compound($emit,$ast);
  $65 = HEAP32[$ast>>2]|0;
  $right_sym$0 = $65;
 } else {
  $right_sym$0 = $41;
 }
 $66 = (_assign_optimize_check($ast)|0);
 $67 = ($66|0)==(0);
 if ($67) {
  $85 = HEAP32[$0>>2]|0;
  $86 = ((($85)) + 4|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 & 255;
  $89 = ($88<<16>>16)==(7);
  $90 = ((($emit)) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $not$&1;
  $93 = $89 ? 40 : $92;
  $94 = ((($ast)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95&65535;
  $97 = ((($right_sym$0)) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98&65535;
  $100 = ((($39)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $101&65535;
  _lily_u16_write_4($91,$93,$96,$99,$102);
  HEAP32[$ast>>2] = $right_sym$0;
  STACKTOP = sp;return;
 }
 $68 = HEAP32[$16>>2]|0;
 $69 = ((($68)) + 12|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = ($70<<16>>16)==(0);
 if ($71) {
  $72 = ((($emit)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + -1)|0;
  $pos$0 = $76;
 } else {
  $77 = $70&65535;
  $pos$0 = $77;
 }
 $78 = ((($39)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79&65535;
 $81 = ((($emit)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + ($pos$0<<1)|0);
 HEAP16[$84>>1] = $80;
 HEAP32[$ast>>2] = $right_sym$0;
 STACKTOP = sp;return;
}
function _opname($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1324 + ($op<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _bad_assign_error($emit,$line_num,$left_type,$right_type) {
 $emit = $emit|0;
 $line_num = $line_num|0;
 $left_type = $left_type|0;
 $right_type = $right_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 HEAP32[$2>>2] = $line_num;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $right_type;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $left_type;
 _lily_raise($3,1,7415,$vararg_buffer);
 // unreachable;
}
function _emit_op_for_compound($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spoof_op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1&65535) >>> 8;
 switch ($2<<16>>16) {
 case 26:  {
  $spoof_op$0 = 2560;
  break;
 }
 case 25:  {
  $spoof_op$0 = 2304;
  break;
 }
 case 24:  {
  $spoof_op$0 = 2048;
  break;
 }
 case 22:  {
  $spoof_op$0 = 0;
  break;
 }
 case 23:  {
  $spoof_op$0 = 256;
  break;
 }
 case 27:  {
  $spoof_op$0 = 2816;
  break;
 }
 case 28:  {
  $spoof_op$0 = 3072;
  break;
 }
 default: {
  $3 = $2&65535;
  $4 = ((($emit)) + 92|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_opname($3)|0);
  HEAP32[$vararg_buffer>>2] = $6;
  _lily_raise($5,1,7453,$vararg_buffer);
  // unreachable;
 }
 }
 $7 = HEAP16[$0>>1]|0;
 $8 = $7 & 255;
 $9 = $8 | $spoof_op$0;
 HEAP16[$0>>1] = $9;
 _emit_binary_op($emit,$ast);
 $10 = HEAP16[$0>>1]|0;
 $11 = ($2 << 8)&65535;
 $12 = $10 & 255;
 $13 = $12 | $11;
 HEAP16[$0>>1] = $13;
 STACKTOP = sp;return;
}
function _emit_binary_op($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $$mask = 0, $$mask1 = 0, $$mask2 = 0, $$mask3 = 0, $$mask4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $opcode$014 = 0, $or$cond = 0, $or$cond9 = 0, $s$0 = 0, $storage_class$0 = 0, $storage_class$0$in = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($ast)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($7|0)==($11|0);
 L1: do {
  if ($14) {
   $15 = ((($ast)) + 4|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = ($16&65535) >>> 8;
   switch ($17<<16>>16) {
   case 0:  {
    $18 = ((($9)) + 8|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ($19<<16>>16)==(1);
    if ($20) {
     $opcode$014 = 2;
    } else {
     $21 = ($19<<16>>16)==(2);
     if ($21) {
      $opcode$014 = 12;
     } else {
      break L1;
     }
    }
    break;
   }
   case 1:  {
    $22 = ((($9)) + 8|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = ($23<<16>>16)==(1);
    if ($24) {
     $opcode$014 = 3;
    } else {
     $25 = ($23<<16>>16)==(2);
     if ($25) {
      $opcode$014 = 13;
     } else {
      break L1;
     }
    }
    break;
   }
   case 9:  {
    $26 = ((($9)) + 8|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)==(1);
    if ($28) {
     $opcode$014 = 5;
    } else {
     $29 = ($27<<16>>16)==(2);
     if ($29) {
      $opcode$014 = 14;
     } else {
      break L1;
     }
    }
    break;
   }
   case 10:  {
    $30 = ((($9)) + 8|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = ($31<<16>>16)==(1);
    if ($32) {
     $opcode$014 = 6;
    } else {
     $33 = ($31<<16>>16)==(2);
     if ($33) {
      $opcode$014 = 15;
     } else {
      break L1;
     }
    }
    break;
   }
   case 8:  {
    $34 = ((($9)) + 8|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = ($35<<16>>16)==(1);
    if ($36) {
     $opcode$014 = 4;
    } else {
     label = 12;
    }
    break;
   }
   default: {
    label = 12;
   }
   }
   L13: do {
    if ((label|0) == 12) {
     $37 = HEAP16[$15>>1]|0;
     $$mask = $37 & -256;
     $38 = ($$mask<<16>>16)==(2816);
     if ($38) {
      $39 = ((($9)) + 8|0);
      $40 = HEAP16[$39>>1]|0;
      $41 = ($40<<16>>16)==(1);
      if ($41) {
       $opcode$014 = 7;
       break;
      }
     }
     $42 = HEAP16[$15>>1]|0;
     $$mask1 = $42 & -256;
     $43 = ($$mask1<<16>>16)==(3072);
     if ($43) {
      $44 = ((($9)) + 8|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = ($45<<16>>16)==(1);
      if ($46) {
       $opcode$014 = 8;
       break;
      }
     }
     $47 = HEAP16[$15>>1]|0;
     $$mask2 = $47 & -256;
     $48 = ($$mask2<<16>>16)==(3328);
     if ($48) {
      $49 = ((($9)) + 8|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = ($50<<16>>16)==(1);
      if ($51) {
       $opcode$014 = 9;
       break;
      }
     }
     $52 = HEAP16[$15>>1]|0;
     $$mask3 = $52 & -256;
     $53 = ($$mask3<<16>>16)==(3584);
     if ($53) {
      $54 = ((($9)) + 8|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = ($55<<16>>16)==(1);
      if ($56) {
       $opcode$014 = 10;
       break;
      }
     }
     $57 = HEAP16[$15>>1]|0;
     $$mask4 = $57 & -256;
     $58 = ($$mask4<<16>>16)==(3840);
     if ($58) {
      $59 = ((($9)) + 8|0);
      $60 = HEAP16[$59>>1]|0;
      $61 = ($60<<16>>16)==(1);
      if ($61) {
       $opcode$014 = 11;
       break;
      }
     }
     $62 = HEAP16[$15>>1]|0;
     $63 = ($62&65535) >>> 8;
     switch ($63<<16>>16) {
     case 2:  {
      $opcode$014 = 16;
      break L13;
      break;
     }
     case 4:  {
      $opcode$014 = 19;
      break L13;
      break;
     }
     case 3:  {
      $opcode$014 = 18;
      break L13;
      break;
     }
     case 6:  {
      $opcode$014 = 21;
      break L13;
      break;
     }
     case 5:  {
      $opcode$014 = 20;
      break L13;
      break;
     }
     default: {
      $64 = ($63<<16>>16)==(7);
      if ($64) {
       $opcode$014 = 17;
       break L13;
      } else {
       break L1;
      }
     }
     }
    }
   } while(0);
   $84 = ((($ast)) + 4|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = ($85&65535) >>> 8;
   $87 = $86&65535;
   switch ($87|0) {
   case 10: case 9: case 1: case 0:  {
    $88 = HEAP32[$6>>2]|0;
    $89 = ((($88)) + 12|0);
    $storage_class$0$in = $89;
    break;
   }
   case 7: case 6: case 5: case 4: case 3: case 2:  {
    $90 = ((($emit)) + 112|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ((($91)) + 64|0);
    $storage_class$0$in = $92;
    break;
   }
   default: {
    $93 = ((($emit)) + 112|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + 44|0);
    $storage_class$0$in = $95;
   }
   }
   $storage_class$0 = HEAP32[$storage_class$0$in>>2]|0;
   $96 = ((($2)) + 4|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = ($97<<16>>16)==(2);
   $99 = ($9|0)==($storage_class$0|0);
   $or$cond = $99 & $98;
   do {
    if ($or$cond) {
     $s$0 = $2;
    } else {
     $100 = ((($5)) + 4|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = ($101<<16>>16)==(2);
     $103 = ($13|0)==($storage_class$0|0);
     $or$cond9 = $103 & $102;
     if ($or$cond9) {
      $s$0 = $5;
      break;
     } else {
      $104 = ((($storage_class$0)) + 12|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (_get_storage($emit,$105)|0);
      $107 = ((($106)) + 6|0);
      $108 = HEAP16[$107>>1]|0;
      $109 = $108&65535;
      $110 = $109 | 2;
      $111 = $110&65535;
      HEAP16[$107>>1] = $111;
      $s$0 = $106;
      break;
     }
    }
   } while(0);
   $112 = ((($emit)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((($ast)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115&65535;
   $117 = ((($2)) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118&65535;
   $120 = ((($5)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121&65535;
   $123 = ((($s$0)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124&65535;
   _lily_u16_write_5($113,$opcode$014,$116,$119,$122,$125);
   HEAP32[$ast>>2] = $s$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $65 = ((($ast)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($emit)) + 92|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 16|0);
 HEAP32[$69>>2] = $66;
 $70 = HEAP32[$67>>2]|0;
 $71 = HEAP32[$0>>2]|0;
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($ast)) + 4|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = ($76&65535) >>> 8;
 $78 = $77&65535;
 $79 = (_opname($78)|0);
 $80 = HEAP32[$3>>2]|0;
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$vararg_buffer>>2] = $74;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $79;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $83;
 _lily_raise($70,1,7478,$vararg_buffer);
 // unreachable;
}
function _assign_optimize_check($ast) {
 $ast = $ast|0;
 var $$ = 0, $$lcssa28 = 0, $$lcssa31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ast$pn = 0;
 var $or$cond = 0, $right_tree$0 = 0, $right_tree$0$in = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 255;
 $5 = ($4<<16>>16)==(7);
 if ($5) {
  return 0;
 } else {
  $ast$pn = $ast;
 }
 L3: while(1) {
  $right_tree$0$in = ((($ast$pn)) + 24|0);
  $right_tree$0 = HEAP32[$right_tree$0$in>>2]|0;
  $6 = ((($right_tree$0)) + 4|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 255;
  switch ($8<<16>>16) {
  case 4:  {
   $ast$pn = $right_tree$0;
   break;
  }
  case 27:  {
   $$lcssa28 = $6;$$lcssa31 = $7;
   label = 3;
   break L3;
   break;
  }
  case 5:  {
   label = 5;
   break L3;
   break;
  }
  default: {
   $11 = $6;
   break L3;
  }
  }
 }
 if ((label|0) == 5) {
  return 0;
 }
 if ((label|0) == 3) {
  $9 = $$lcssa31 & -512;
  $switch = ($9<<16>>16)==(4608);
  if ($switch) {
   return 0;
  } else {
   $11 = $$lcssa28;
  }
 }
 $10 = HEAP16[$11>>1]|0;
 $12 = $10 & 255;
 $13 = ($12<<16>>16)==(27);
 $14 = ($10&65535)>(5375);
 $or$cond = $14 & $13;
 $15 = $or$cond&1;
 $$ = $15 ^ 1;
 return ($$|0);
}
function _eval_sub_assign($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $ast$pn = 0, $rhs$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_determine_left_type($emit,$1)|0);
 $7 = ((($ast)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & 255;
 $12 = ($11<<16>>16)==(5);
 if (!($12)) {
  _eval_tree($emit,$8,$6);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($3)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 & 255;
 $18 = ($17<<16>>16)==(5);
 if (!($18)) {
  _eval_tree($emit,$3,0);
  $19 = HEAP32[$3>>2]|0;
  $20 = ((($19)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & 2;
  $23 = ($22<<16>>16)==(0);
  if (!($23)) {
   $24 = ((($ast)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($emit)) + 92|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[$26>>2]|0;
   $30 = ((($ast)) + 4|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ($31&65535) >>> 8;
   $33 = $32&65535;
   $34 = (_opname($33)|0);
   HEAP32[$vararg_buffer>>2] = $34;
   _lily_raise($29,1,7380,$vararg_buffer);
   // unreachable;
  }
 }
 $35 = ((($5)) + 4|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 & 255;
 $38 = ($37<<16>>16)==(5);
 if (!($38)) {
  _eval_tree($emit,$5,0);
 }
 _check_valid_subscript($emit,$3,$5);
 $39 = HEAP32[$3>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_get_subscript_result($emit,$41,$5)|0);
 $43 = HEAP32[$7>>2]|0;
 $44 = (_type_matchup($emit,$42,$43)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = ((($ast)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($emit)) + 92|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 16|0);
  HEAP32[$50>>2] = $47;
  $51 = HEAP32[$46>>2]|0;
  $52 = ((($14)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  _bad_assign_error($emit,$51,$42,$53);
 }
 $54 = HEAP32[$7>>2]|0;
 $55 = ((($ast)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = ($56&65535)>(5631);
 if (!($57)) {
  $ast$pn = $54;
  $rhs$0 = HEAP32[$ast$pn>>2]|0;
  $76 = ((($emit)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($ast)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79&65535;
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83&65535;
  $85 = HEAP32[$5>>2]|0;
  $86 = ((($85)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87&65535;
  $89 = ((($rhs$0)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90&65535;
  _lily_u16_write_5($77,38,$80,$84,$88,$91);
  HEAP32[$ast>>2] = $rhs$0;
  STACKTOP = sp;return;
 }
 $58 = (_get_storage($emit,$42)|0);
 $59 = ((($emit)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($ast)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62&65535;
 $64 = HEAP32[$3>>2]|0;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66&65535;
 $68 = HEAP32[$5>>2]|0;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70&65535;
 $72 = ((($58)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73&65535;
 _lily_u16_write_5($60,37,$63,$67,$71,$74);
 $75 = HEAP32[$0>>2]|0;
 HEAP32[$75>>2] = $58;
 _emit_op_for_compound($emit,$ast);
 $ast$pn = $ast;
 $rhs$0 = HEAP32[$ast$pn>>2]|0;
 $76 = ((($emit)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($ast)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79&65535;
 $81 = HEAP32[$3>>2]|0;
 $82 = ((($81)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83&65535;
 $85 = HEAP32[$5>>2]|0;
 $86 = ((($85)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87&65535;
 $89 = ((($rhs$0)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90&65535;
 _lily_u16_write_5($77,38,$80,$84,$88,$91);
 HEAP32[$ast>>2] = $rhs$0;
 STACKTOP = sp;return;
}
function _determine_left_type($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $result_type$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 255;
 L1: do {
  switch ($2<<16>>16) {
  case 5: case 7:  {
   $3 = ((($ast)) + 20|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $result_type$3 = $6;
   break;
  }
  case 1:  {
   $7 = ((($ast)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_determine_left_type($emit,$8)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $result_type$3 = 0;
   } else {
    $13 = ((($11)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 8|0);
    $16 = HEAP16[$15>>1]|0;
    switch ($16<<16>>16) {
    case 10:  {
     $17 = ((($11)) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($18)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $result_type$3 = $20;
     break L1;
     break;
    }
    case 11:  {
     $21 = ((($10)) + 4|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = $22 & 255;
     $24 = ($23<<16>>16)==(26);
     if (!($24)) {
      $result_type$3 = 0;
      break L1;
     }
     $25 = ((($10)) + 16|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = $26 << 16 >> 16;
     $28 = ($26<<16>>16)<(0);
     if ($28) {
      $result_type$3 = 0;
      break L1;
     }
     $29 = ((($11)) + 10|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30&65535;
     $32 = ($27|0)>($31|0);
     if ($32) {
      $result_type$3 = 0;
      break L1;
     }
     $33 = ((($11)) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + ($27<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $result_type$3 = $36;
     break L1;
     break;
    }
    case 9:  {
     $37 = ((($11)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[$38>>2]|0;
     $result_type$3 = $39;
     break L1;
     break;
    }
    case 5:  {
     $40 = ((($emit)) + 112|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 56|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($43)) + 12|0);
     $45 = HEAP32[$44>>2]|0;
     $result_type$3 = $45;
     break L1;
     break;
    }
    default: {
     $result_type$3 = $11;
     break L1;
    }
    }
   }
   break;
  }
  case 8:  {
   $46 = ((($ast)) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_determine_left_type($emit,$47)|0);
   $49 = ($48|0)==(0|0);
   if ($49) {
    $result_type$3 = 0;
   } else {
    $50 = ((($emit)) + 96|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($ast)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_lily_sp_get($51,$53)|0);
    $55 = ((($48)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (_lily_find_property($56,$54)|0);
    $58 = ($57|0)==(0|0);
    if ($58) {
     $result_type$3 = 0;
    } else {
     $59 = ((($57)) + 12|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($60)) + 6|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62 & 1024;
     $64 = ($63<<16>>16)==(0);
     if ($64) {
      $result_type$3 = $60;
     } else {
      $65 = ((($emit)) + 100|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (_lily_ts_resolve_by_second($66,$48,$60)|0);
      $result_type$3 = $67;
     }
    }
   }
   break;
  }
  case 13:  {
   $68 = ((($ast)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $result_type$3 = $71;
   break;
  }
  default: {
   $result_type$3 = 0;
  }
  }
 } while(0);
 return ($result_type$3|0);
}
function _check_valid_subscript($emit,$var_ast,$index_ast) {
 $emit = $emit|0;
 $var_ast = $var_ast|0;
 $index_ast = $index_ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$var_ast>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 switch ($6<<16>>16) {
 case 5: case 9:  {
  $7 = HEAP32[$index_ast>>2]|0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(1);
  if ($14) {
   STACKTOP = sp;return;
  } else {
   $15 = ((($var_ast)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($emit)) + 92|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 16|0);
   HEAP32[$19>>2] = $16;
   $20 = HEAP32[$17>>2]|0;
   $21 = HEAP32[$var_ast>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer>>2] = $27;
   _lily_raise($20,1,7507,$vararg_buffer);
   // unreachable;
  }
  break;
 }
 case 10:  {
  $28 = ((($2)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$index_ast>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)==($33|0);
  if ($34) {
   STACKTOP = sp;return;
  } else {
   $35 = ((($var_ast)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($emit)) + 92|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 16|0);
   HEAP32[$39>>2] = $36;
   $40 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $30;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $33;
   _lily_raise($40,1,7535,$vararg_buffer1);
   // unreachable;
  }
  break;
 }
 case 11:  {
  $41 = ((($index_ast)) + 4|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 & 255;
  $44 = ($43<<16>>16)==(26);
  if (!($44)) {
   $45 = ((($var_ast)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($emit)) + 92|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 16|0);
   HEAP32[$49>>2] = $46;
   $50 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer5>>2] = 18083;
   _lily_raise($50,1,7582,$vararg_buffer5);
   // unreachable;
  }
  $51 = ((($index_ast)) + 16|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = HEAP32[$var_ast>>2]|0;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($52<<16>>16)<(0);
  if ($57) {
   $62 = ((($var_ast)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($emit)) + 92|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 16|0);
   HEAP32[$66>>2] = $63;
   $67 = HEAP32[$64>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $53;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $56;
   _lily_raise($67,1,7625,$vararg_buffer8);
   // unreachable;
  }
  $58 = ((($56)) + 10|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($53|0)<($60|0);
  if ($61) {
   STACKTOP = sp;return;
  } else {
   $62 = ((($var_ast)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($emit)) + 92|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 16|0);
   HEAP32[$66>>2] = $63;
   $67 = HEAP32[$64>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $53;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $56;
   _lily_raise($67,1,7625,$vararg_buffer8);
   // unreachable;
  }
  break;
 }
 default: {
  $68 = ((($var_ast)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($emit)) + 92|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 16|0);
  HEAP32[$72>>2] = $69;
  $73 = HEAP32[$70>>2]|0;
  $74 = HEAP32[$var_ast>>2]|0;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $76;
  _lily_raise($73,1,7658,$vararg_buffer12);
  // unreachable;
 }
 }
}
function _get_subscript_result($emit,$type,$index_ast) {
 $emit = $emit|0;
 $type = $type|0;
 $index_ast = $index_ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($type)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 switch ($3<<16>>16) {
 case 9:  {
  $4 = ((($type)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $result$0 = $6;
  return ($result$0|0);
  break;
 }
 case 10:  {
  $7 = ((($type)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $result$0 = $10;
  return ($result$0|0);
  break;
 }
 case 11:  {
  $11 = ((($index_ast)) + 16|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ((($type)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $result$0 = $17;
  return ($result$0|0);
  break;
 }
 case 5:  {
  $18 = ((($emit)) + 112|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 56|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $result$0 = $23;
  return ($result$0|0);
  break;
 }
 default: {
  $result$0 = 0;
  return ($result$0|0);
 }
 }
 return (0)|0;
}
function _eval_oo_assign($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $rhs$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _eval_oo_access_for_item($emit,$1);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _ensure_valid_scope($emit,$4);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(4);
 if (!($10)) {
  $11 = ((($ast)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($emit)) + 92|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($ast)) + 4|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = ($18&65535) >>> 8;
  $20 = $19&65535;
  $21 = (_opname($20)|0);
  HEAP32[$vararg_buffer>>2] = $21;
  _lily_raise($16,1,7380,$vararg_buffer);
  // unreachable;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = (_get_solved_property_type($emit,$22)|0);
 $24 = ((($ast)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 _eval_tree($emit,$25,$23);
 $26 = HEAP32[$24>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($23|0)==($29|0);
 if (!($30)) {
  $31 = (_type_matchup($emit,$23,$26)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = ((($ast)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($emit)) + 92|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 16|0);
   HEAP32[$37>>2] = $34;
   $38 = HEAP32[$33>>2]|0;
   _bad_assign_error($emit,$38,$23,$29);
  }
 }
 $39 = ((($ast)) + 4|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = ($40&65535)>(5631);
 if ($41) {
  $42 = HEAP32[$0>>2]|0;
  _oo_property_read($emit,$42);
  _emit_op_for_compound($emit,$ast);
  $43 = HEAP32[$ast>>2]|0;
  $rhs$0 = $43;
 } else {
  $rhs$0 = $27;
 }
 $44 = ((($emit)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($ast)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47&65535;
 $49 = HEAP32[$0>>2]|0;
 $50 = ((($49)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53&65535;
 $55 = ((($49)) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59&65535;
 $61 = ((($rhs$0)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62&65535;
 _lily_u16_write_5($45,50,$48,$54,$60,$63);
 HEAP32[$ast>>2] = $rhs$0;
 STACKTOP = sp;return;
}
function _eval_property_assign($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $ast$pn = 0, $left_type$0 = 0, $rhs$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(13);
 if ($4) {
  _maybe_close_over_class_self($emit);
 }
 $5 = ((($ast)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 _ensure_valid_scope($emit,$8);
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($ast)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 _eval_tree($emit,$15,$13);
 $16 = HEAP32[$14>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($13|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 12|0);
  HEAP32[$24>>2] = $19;
  $25 = HEAP32[$5>>2]|0;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 6|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $30 & 65534;
  $32 = $31&65535;
  HEAP16[$28>>1] = $32;
  $left_type$0 = $19;
 } else {
  $left_type$0 = $13;
 }
 $33 = HEAP32[$14>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($left_type$0|0)==($36|0);
 if (!($37)) {
  $38 = (_type_matchup($emit,$left_type$0,$33)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ((($ast)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($emit)) + 92|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 16|0);
   HEAP32[$44>>2] = $41;
   $45 = HEAP32[$40>>2]|0;
   _bad_assign_error($emit,$45,$left_type$0,$19);
  }
 }
 $46 = HEAP32[$14>>2]|0;
 $47 = ((($ast)) + 4|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = ($48&65535)>(5631);
 if ($49) {
  $50 = HEAP32[$5>>2]|0;
  _eval_tree($emit,$50,0);
  _emit_op_for_compound($emit,$ast);
  $ast$pn = $ast;
 } else {
  $ast$pn = $46;
 }
 $rhs$0 = HEAP32[$ast$pn>>2]|0;
 $51 = ((($emit)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($ast)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54&65535;
 $56 = HEAP32[$5>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60&65535;
 $62 = ((($emit)) + 76|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 44|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67&65535;
 $69 = ((($rhs$0)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70&65535;
 _lily_u16_write_5($52,50,$55,$61,$68,$71);
 HEAP32[$ast>>2] = $rhs$0;
 return;
}
function _eval_upvalue_assign($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ast$pn = 0, $rhs$0 = 0, $spot$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _eval_tree($emit,$1,0);
 $2 = ((($ast)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_find_closed_sym_spot($emit,$5)|0);
 $7 = ($6|0)==(-1);
 if ($7) {
  _checked_close_over_var($emit,$5);
  $8 = ((($emit)) + 44|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = (($10) + -1)|0;
  $spot$0 = $11;
 } else {
  $spot$0 = $6;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($ast)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14&65535)>(5631);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_get_storage($emit,$20)|0);
  $22 = ((($emit)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($ast)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25&65535;
  $27 = $spot$0&65535;
  $28 = ((($21)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29&65535;
  _lily_u16_write_4($23,58,$26,$27,$30);
  $31 = HEAP32[$2>>2]|0;
  HEAP32[$31>>2] = $21;
  _emit_op_for_compound($emit,$ast);
  $ast$pn = $ast;
 } else {
  $ast$pn = $12;
 }
 $rhs$0 = HEAP32[$ast$pn>>2]|0;
 $32 = ((($emit)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($ast)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&65535;
 $37 = $spot$0&65535;
 $38 = ((($rhs$0)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39&65535;
 _lily_u16_write_4($33,59,$36,$37,$40);
 $41 = HEAP32[$0>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$ast>>2] = $42;
 return;
}
function _checked_close_over_var($emit,$var) {
 $emit = $emit|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(11);
 if (!($4)) {
  _close_over_sym($emit,$var);
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 18|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(11);
 if (!($9)) {
  _close_over_sym($emit,$var);
  STACKTOP = sp;return;
 }
 $10 = ((($var)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & 1024;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  _close_over_sym($emit,$var);
  STACKTOP = sp;return;
 } else {
  $16 = ((($emit)) + 92|0);
  $17 = HEAP32[$16>>2]|0;
  _lily_raise($17,1,7686,$vararg_buffer);
  // unreachable;
 }
}
function _assign_post_check($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & 255;
  $6 = ($5<<16>>16)!=(27);
  $7 = ($4&65535)<(5376);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $8 = ((($emit)) + 92|0);
   $9 = HEAP32[$8>>2]|0;
   _lily_raise($9,1,7747,$vararg_buffer);
   // unreachable;
  }
  $$pr = HEAP32[$0>>2]|0;
  $10 = ($$pr|0)==(0|0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$ast>>2] = 0;
 STACKTOP = sp;return;
}
function _eval_logical_op($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $$mask = 0, $$neg = 0, $$unshifted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $andor_start$0 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1&65535) >>> 8;
 $3 = ($2<<16>>16)==(19);
 $4 = $3&1;
 $5 = ((($ast)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  label = 3;
 } else {
  $8 = ((($6)) + 4|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & 255;
  $11 = ($10<<16>>16)==(27);
  $12 = ($9&65535) >>> 8;
  $13 = ($12<<16>>16)==($2<<16>>16);
  $or$cond = $11 & $13;
  if ($or$cond) {
   $andor_start$0 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = HEAP32[$emit>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $andor_start$0 = $16;
 }
 $17 = ((($ast)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 & 255;
 $22 = ($21<<16>>16)==(5);
 if (!($22)) {
  _eval_tree($emit,$18,0);
 }
 $23 = HEAP32[$17>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 & 255;
 $27 = ($26<<16>>16)==(27);
 if ($27) {
  $28 = HEAP16[$0>>1]|0;
  $$unshifted = $28 ^ $25;
  $29 = ($$unshifted&65535)<(256);
  if (!($29)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $30 = HEAP32[$17>>2]|0;
  _emit_jump_if($emit,$30,$4);
 }
 $31 = ((($ast)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 & 255;
 $36 = ($35<<16>>16)==(5);
 if (!($36)) {
  _eval_tree($emit,$32,0);
 }
 $37 = HEAP32[$31>>2]|0;
 _emit_jump_if($emit,$37,$4);
 $38 = ($andor_start$0|0)==(-1);
 if ($38) {
  return;
 }
 $39 = ((($emit)) + 112|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 64|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_get_storage($emit,$44)|0);
 $46 = HEAP16[$0>>1]|0;
 $$mask = $46 & -256;
 $47 = ($$mask<<16>>16)==(4608);
 $48 = ((($emit)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($ast)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51&65535;
 $53 = $47&1;
 $54 = ((($45)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55&65535;
 _lily_u16_write_4($49,43,$52,$53,$56);
 $57 = HEAP32[$48>>2]|0;
 _lily_u16_write_2($57,24,0);
 $58 = HEAP32[$48>>2]|0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + -1)|0;
 _write_patches_since($emit,$andor_start$0);
 $62 = HEAP32[$48>>2]|0;
 $63 = HEAP32[$50>>2]|0;
 $64 = $63&65535;
 $65 = $53 ^ 1;
 $66 = HEAP32[$54>>2]|0;
 $67 = $66&65535;
 _lily_u16_write_4($62,43,$64,$65,$67);
 $68 = HEAP32[$48>>2]|0;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $$neg = (1 - ($60))|0;
 $71 = (($$neg) + 1)|0;
 $72 = (($71) + ($70))|0;
 $73 = $72&65535;
 $74 = HEAP32[$68>>2]|0;
 $75 = (($74) + ($61<<1)|0);
 HEAP16[$75>>1] = $73;
 HEAP32[$ast>>2] = $45;
 return;
}
function _emit_jump_if($emit,$ast,$jump_on) {
 $emit = $emit|0;
 $ast = $ast|0;
 $jump_on = $jump_on|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $jump_on&65535;
 $3 = HEAP32[$ast>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 _lily_u16_write_4($1,25,$2,$6,3);
 $7 = HEAP32[$emit>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 65535)|0;
 $12 = $11&65535;
 _lily_u16_write_1($7,$12);
 return;
}
function _eval_func_pipe($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ast)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($ast)) + 14|0);
 HEAP16[$5>>1] = 2;
 _eval_call($emit,$ast,$expect);
 return;
}
function _eval_unary_op($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $opcode$03 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 255;
 $5 = ($4<<16>>16)==(5);
 if (!($5)) {
  _eval_tree($emit,$1,0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($ast)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 8;
 $15 = ((($emit)) + 112|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($11|0)==($18|0);
 if ($19) {
  $20 = ($14<<16>>16)==(16);
  if ($20) {
   $opcode$03 = 22;
   label = 9;
  } else {
   label = 8;
  }
 } else {
  $21 = ((($16)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($11|0)==($22|0);
  if ($23) {
   $24 = ($14<<16>>16)==(17);
   if ($24) {
    $opcode$03 = 23;
    label = 9;
   } else {
    $25 = ($14<<16>>16)==(16);
    if ($25) {
     $opcode$03 = 22;
     label = 9;
    } else {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $26 = ((($ast)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($emit)) + 92|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  HEAP32[$30>>2] = $27;
  $31 = HEAP32[$28>>2]|0;
  $32 = HEAP16[$12>>1]|0;
  $33 = ($32&65535) >>> 8;
  $34 = $33&65535;
  $35 = (_opname($34)|0);
  $36 = ((($11)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$vararg_buffer>>2] = $35;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $37;
  _lily_raise($31,1,7795,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $38 = ((($11)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_get_storage($emit,$39)|0);
  $41 = ((($40)) + 6|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42&65535;
  $44 = $43 | 2;
  $45 = $44&65535;
  HEAP16[$41>>1] = $45;
  $46 = ((($emit)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($ast)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49&65535;
  $51 = HEAP32[$0>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54&65535;
  $56 = ((($40)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57&65535;
  _lily_u16_write_4($47,$opcode$03,$50,$55,$58);
  HEAP32[$ast>>2] = $40;
  STACKTOP = sp;return;
 }
}
function _eval_interpolation($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0 = 0, $arg$01 = 0, $arg$02 = 0, $tree_iter$0 = 0, $tree_iter$03 = 0;
 var $tree_iter$04 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 24|0);
 $tree_iter$03 = HEAP32[$0>>2]|0;
 $1 = ($tree_iter$03|0)==(0|0);
 L1: do {
  if (!($1)) {
   $2 = ((($emit)) + 96|0);
   $3 = ((($emit)) + 108|0);
   $4 = ((($ast)) + 8|0);
   $5 = ((($emit)) + 92|0);
   $tree_iter$04 = $tree_iter$03;
   while(1) {
    $6 = ((($tree_iter$04)) + 4|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7 & 255;
    $9 = ($8<<16>>16)==(23);
    if ($9) {
     $10 = HEAP32[$2>>2]|0;
     $11 = ((($tree_iter$04)) + 16|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_lily_sp_get($10,$12)|0);
     $14 = HEAP32[$3>>2]|0;
     $15 = HEAP32[$4>>2]|0;
     $16 = (_lily_parser_interp_eval($14,$15,$13)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      break;
     }
     HEAP32[$tree_iter$04>>2] = $16;
    } else {
     _emit_literal($emit,$tree_iter$04);
    }
    $23 = ((($tree_iter$04)) + 32|0);
    $tree_iter$0 = HEAP32[$23>>2]|0;
    $24 = ($tree_iter$0|0)==(0|0);
    if ($24) {
     break L1;
    } else {
     $tree_iter$04 = $tree_iter$0;
    }
   }
   $18 = ((($tree_iter$04)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$5>>2]|0;
   $21 = ((($20)) + 16|0);
   HEAP32[$21>>2] = $19;
   $22 = HEAP32[$5>>2]|0;
   HEAP32[$vararg_buffer>>2] = 18083;
   _lily_raise($22,1,7820,$vararg_buffer);
   // unreachable;
  }
 } while(0);
 $25 = ((($emit)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($ast)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 $30 = ((($ast)) + 14|0);
 $31 = HEAP16[$30>>1]|0;
 _lily_u16_write_3($26,65,$29,$31);
 $32 = HEAP32[$25>>2]|0;
 $33 = HEAP16[$30>>1]|0;
 $34 = $33&65535;
 $35 = (($34) + 1)|0;
 _lily_u16_write_prep($32,$35);
 $arg$01 = HEAP32[$0>>2]|0;
 $36 = ($arg$01|0)==(0|0);
 if ($36) {
  $44 = ((($emit)) + 112|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 52|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_get_storage($emit,$49)|0);
  $51 = HEAP32[$25>>2]|0;
  $52 = ((($50)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53&65535;
  _lily_u16_write_1($51,$54);
  HEAP32[$ast>>2] = $50;
  STACKTOP = sp;return;
 } else {
  $arg$02 = $arg$01;
 }
 while(1) {
  $37 = HEAP32[$25>>2]|0;
  $38 = HEAP32[$arg$02>>2]|0;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40&65535;
  _lily_u16_write_1($37,$41);
  $42 = ((($arg$02)) + 32|0);
  $arg$0 = HEAP32[$42>>2]|0;
  $43 = ($arg$0|0)==(0|0);
  if ($43) {
   break;
  } else {
   $arg$02 = $arg$0;
  }
 }
 $44 = ((($emit)) + 112|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_get_storage($emit,$49)|0);
 $51 = HEAP32[$25>>2]|0;
 $52 = ((($50)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53&65535;
 _lily_u16_write_1($51,$54);
 HEAP32[$ast>>2] = $50;
 STACKTOP = sp;return;
}
function _eval_build_list($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0 = 0, $arg$01 = 0, $arg$03 = 0, $elem_type$1 = 0;
 var $elem_type$2$lcssa = 0, $elem_type$22 = 0, $elem_type$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 14|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  _make_empty_list_or_hash($emit,$ast,$expect);
  return;
 }
 $3 = ($expect|0)==(0|0);
 if ($3) {
  label = 7;
 } else {
  $4 = ((($expect)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)==(9);
  if ($8) {
   $9 = ((($expect)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 7;
   } else {
    $13 = ((($11)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 8|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(-2);
    if ($17) {
     label = 7;
    } else {
     $elem_type$1 = $11;
    }
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $18 = ((($emit)) + 100|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $elem_type$1 = $21;
 }
 $22 = ((($ast)) + 24|0);
 $arg$01 = HEAP32[$22>>2]|0;
 $23 = ($arg$01|0)==(0|0);
 if ($23) {
  $elem_type$2$lcssa = $elem_type$1;
 } else {
  $24 = ((($emit)) + 100|0);
  $arg$03 = $arg$01;$elem_type$22 = $elem_type$1;
  while(1) {
   _eval_tree($emit,$arg$03,$elem_type$22);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$arg$03>>2]|0;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_lily_ts_unify($25,$elem_type$22,$28)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    _inconsistent_type_error($emit,$arg$03,$elem_type$22,7904);
   }
   $31 = ((($arg$03)) + 32|0);
   $arg$0 = HEAP32[$31>>2]|0;
   $32 = ($arg$0|0)==(0|0);
   if ($32) {
    $elem_type$2$lcssa = $29;
    break;
   } else {
    $arg$03 = $arg$0;$elem_type$22 = $29;
   }
  }
 }
 $33 = ((($elem_type$2$lcssa)) + 6|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 & 4096;
 $36 = ($35<<16>>16)==(0);
 if ($36) {
  $elem_type$3 = $elem_type$2$lcssa;
 } else {
  $37 = ((($emit)) + 104|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_lily_tm_make_dynamicd_copy($38,$elem_type$2$lcssa)|0);
  $elem_type$3 = $39;
 }
 $40 = ((($emit)) + 104|0);
 $41 = HEAP32[$40>>2]|0;
 _lily_tm_add($41,$elem_type$3);
 $42 = HEAP32[$40>>2]|0;
 $43 = ((($emit)) + 112|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 76|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_lily_tm_make($42,0,$46,1)|0);
 $48 = (_get_storage($emit,$47)|0);
 $49 = HEAP32[$22>>2]|0;
 $50 = ((($ast)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP16[$0>>1]|0;
 $53 = $52&65535;
 $54 = ((($48)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 _write_build_op($emit,33,$49,$51,$53,$55);
 HEAP32[$ast>>2] = $48;
 return;
}
function _make_empty_list_or_hash($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cls$0 = 0, $cls$0$in = 0, $elem_type$0 = 0, $num$0 = 0, $op$0 = 0, $value_type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($expect|0)==(0|0);
 L1: do {
  if ($6) {
   label = 8;
  } else {
   $7 = ((($expect)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP16[$9>>1]|0;
   switch ($10<<16>>16) {
   case 10:  {
    break;
   }
   case 9:  {
    $27 = ((($expect)) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = ($33<<16>>16)==(-6);
    if ($34) {
     label = 8;
     break L1;
    } else {
     $elem_type$0 = $29;
     label = 9;
     break L1;
    }
    break;
   }
   default: {
    label = 8;
    break L1;
   }
   }
   $11 = ((($expect)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($12)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   _ensure_valid_key_type($emit,$ast,$13);
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 5;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(-6);
    if ($21) {
     label = 5;
    } else {
     $value_type$0 = $15;
    }
   }
   if ((label|0) == 5) {
    $value_type$0 = $5;
   }
   $22 = ((($emit)) + 104|0);
   $23 = HEAP32[$22>>2]|0;
   _lily_tm_add($23,$13);
   $24 = HEAP32[$22>>2]|0;
   _lily_tm_add($24,$value_type$0);
   $25 = HEAP32[$0>>2]|0;
   $26 = ((($25)) + 80|0);
   $cls$0$in = $26;$num$0 = 2;$op$0 = 35;
  }
 } while(0);
 if ((label|0) == 8) {
  $elem_type$0 = $5;
  label = 9;
 }
 if ((label|0) == 9) {
  $35 = ((($emit)) + 104|0);
  $36 = HEAP32[$35>>2]|0;
  _lily_tm_add($36,$elem_type$0);
  $37 = HEAP32[$0>>2]|0;
  $38 = ((($37)) + 76|0);
  $cls$0$in = $38;$num$0 = 1;$op$0 = 33;
 }
 $cls$0 = HEAP32[$cls$0$in>>2]|0;
 $39 = ((($emit)) + 104|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_lily_tm_make($40,0,$cls$0,$num$0)|0);
 $42 = (_get_storage($emit,$41)|0);
 $43 = ((($ast)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($ast)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($42)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 _write_build_op($emit,$op$0,$44,$46,0,$48);
 HEAP32[$ast>>2] = $42;
 return;
}
function _ensure_valid_key_type($emit,$ast,$key_type) {
 $emit = $emit|0;
 $ast = $ast|0;
 $key_type = $key_type|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($key_type|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = ((($key_type)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 8|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = ($4<<16>>16)==(-6);
  if ($5) {
   label = 3;
  } else {
   $$01 = $key_type;
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = ((($emit)) + 112|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 68|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$02 = 0;
  } else {
   $$01 = $11;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $13 = ((($$01)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 6|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 & 1;
  $18 = ($17<<16>>16)==(0);
  if ($18) {
   $$02 = $$01;
  } else {
   STACKTOP = sp;return;
  }
 }
 $19 = ((($ast)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($emit)) + 92|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $20;
 $24 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer>>2] = $$02;
 _lily_raise($24,1,7869,$vararg_buffer);
 // unreachable;
}
function _write_build_op($emit,$opcode,$first_arg,$line_num,$num_values,$reg_spot) {
 $emit = $emit|0;
 $opcode = $opcode|0;
 $first_arg = $first_arg|0;
 $line_num = $line_num|0;
 $num_values = $num_values|0;
 $reg_spot = $reg_spot|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arg$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($num_values) + 4)|0;
 _lily_u16_write_prep($1,$2);
 $3 = HEAP32[$0>>2]|0;
 $4 = $opcode&65535;
 $5 = $line_num&65535;
 $6 = $num_values&65535;
 _lily_u16_write_3($3,$4,$5,$6);
 $7 = ($first_arg|0)==(0|0);
 $8 = HEAP32[$0>>2]|0;
 if ($7) {
  $$lcssa = $8;
  $18 = $reg_spot&65535;
  _lily_u16_write_1($$lcssa,$18);
  return;
 } else {
  $13 = $8;$arg$01 = $first_arg;
 }
 while(1) {
  $9 = HEAP32[$arg$01>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11&65535;
  _lily_u16_write_1($13,$12);
  $14 = ((($arg$01)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = HEAP32[$0>>2]|0;
  if ($16) {
   $$lcssa = $17;
   break;
  } else {
   $13 = $17;$arg$01 = $15;
  }
 }
 $18 = $reg_spot&65535;
 _lily_u16_write_1($$lcssa,$18);
 return;
}
function _inconsistent_type_error($emit,$ast,$expect,$context) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($emit)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$ast>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $context;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $expect;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 _lily_raise($5,1,7918,$vararg_buffer);
 // unreachable;
}
function _eval_build_hash($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $key_type$1 = 0, $key_type$2$lcssa = 0, $key_type$24 = 0, $key_type$3 = 0, $tree_iter$0 = 0, $tree_iter$02 = 0, $tree_iter$05 = 0, $value_type$0 = 0, $value_type$1$lcssa = 0, $value_type$13 = 0, $value_type$2 = 0, $value_type$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($expect|0)==(0|0);
 if ($6) {
  $key_type$1 = $5;$value_type$0 = $5;
 } else {
  $7 = ((($expect)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==(10);
  if ($11) {
   $12 = ((($expect)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($13)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==(0|0);
   $$ = $17 ? $5 : $14;
   $18 = ($16|0)==(0|0);
   $$1 = $18 ? $5 : $16;
   $key_type$1 = $$;$value_type$0 = $$1;
  } else {
   $key_type$1 = $5;$value_type$0 = $5;
  }
 }
 $19 = ((($ast)) + 24|0);
 $tree_iter$02 = HEAP32[$19>>2]|0;
 $20 = ($tree_iter$02|0)==(0|0);
 if ($20) {
  $key_type$2$lcssa = $key_type$1;$value_type$1$lcssa = $value_type$0;
 } else {
  $21 = ((($emit)) + 100|0);
  $key_type$24 = $key_type$1;$tree_iter$05 = $tree_iter$02;$value_type$13 = $value_type$0;
  while(1) {
   $22 = ((($tree_iter$05)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _eval_tree($emit,$tree_iter$05,$key_type$24);
   $24 = HEAP32[$21>>2]|0;
   $25 = HEAP32[$tree_iter$05>>2]|0;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_lily_ts_unify($24,$key_type$24,$27)|0);
   $29 = ($28|0)==(0|0);
   if ($29) {
    _inconsistent_type_error($emit,$tree_iter$05,$key_type$24,7988);
    $key_type$3 = $key_type$24;
   } else {
    _ensure_valid_key_type($emit,$ast,$28);
    $key_type$3 = $28;
   }
   _eval_tree($emit,$23,$value_type$13);
   $30 = HEAP32[$21>>2]|0;
   $31 = HEAP32[$23>>2]|0;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_lily_ts_unify($30,$value_type$13,$33)|0);
   $35 = ($34|0)==(0|0);
   if ($35) {
    _inconsistent_type_error($emit,$23,$value_type$13,7998);
    $value_type$2 = $value_type$13;
   } else {
    $value_type$2 = $34;
   }
   $36 = HEAP32[$22>>2]|0;
   $37 = ((($36)) + 32|0);
   $tree_iter$0 = HEAP32[$37>>2]|0;
   $38 = ($tree_iter$0|0)==(0|0);
   if ($38) {
    $key_type$2$lcssa = $key_type$3;$value_type$1$lcssa = $value_type$2;
    break;
   } else {
    $key_type$24 = $key_type$3;$tree_iter$05 = $tree_iter$0;$value_type$13 = $value_type$2;
   }
  }
 }
 $39 = ((($value_type$1$lcssa)) + 6|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 & 4096;
 $42 = ($41<<16>>16)==(0);
 if ($42) {
  $value_type$3 = $value_type$1$lcssa;
 } else {
  $43 = ((($emit)) + 104|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_lily_tm_make_dynamicd_copy($44,$value_type$1$lcssa)|0);
  $value_type$3 = $45;
 }
 $46 = HEAP32[$0>>2]|0;
 $47 = ((($46)) + 80|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($emit)) + 104|0);
 $50 = HEAP32[$49>>2]|0;
 _lily_tm_add($50,$key_type$2$lcssa);
 $51 = HEAP32[$49>>2]|0;
 _lily_tm_add($51,$value_type$3);
 $52 = HEAP32[$49>>2]|0;
 $53 = (_lily_tm_make($52,0,$48,2)|0);
 $54 = (_get_storage($emit,$53)|0);
 $55 = HEAP32[$19>>2]|0;
 $56 = ((($ast)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($ast)) + 14|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = ((($54)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 _write_build_op($emit,35,$55,$57,$60,$62);
 HEAP32[$ast>>2] = $54;
 return;
}
function _eval_build_tuple($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0 = 0;
 var $arg$05 = 0, $arg$07 = 0, $arg$13 = 0, $arg$13$in = 0, $i$06 = 0, $i$1$lcssa = 0, $i$12 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 14|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $3 = ((($emit)) + 92|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise($4,1,8010,$vararg_buffer);
  // unreachable;
 }
 $5 = ($expect|0)==(0|0);
 do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = ((($expect)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 8|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = ($9<<16>>16)==(11);
   if ($10) {
    $11 = HEAP16[$0>>1]|0;
    $12 = ((($expect)) + 10|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($11&65535)>($13&65535);
    if (!($14)) {
     $$0 = $expect;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 $15 = ((($ast)) + 24|0);
 $arg$05 = HEAP32[$15>>2]|0;
 $16 = ($arg$05|0)==(0|0);
 if (!($16)) {
  $17 = ($$0|0)==(0|0);
  $18 = ((($$0)) + 16|0);
  $arg$07 = $arg$05;$i$06 = 0;
  while(1) {
   if ($17) {
    _eval_tree($emit,$arg$07,0);
   } else {
    $23 = HEAP32[$18>>2]|0;
    $24 = (($23) + ($i$06<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    _eval_tree($emit,$arg$07,$25);
    $26 = ($25|0)==(0|0);
    if (!($26)) {
     $27 = HEAP32[$arg$07>>2]|0;
     $28 = ((($27)) + 12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($25|0)==($29|0);
     if (!($30)) {
      (_type_matchup($emit,$25,$arg$07)|0);
     }
    }
   }
   $31 = (($i$06) + 1)|0;
   $32 = ((($arg$07)) + 32|0);
   $arg$0 = HEAP32[$32>>2]|0;
   $33 = ($arg$0|0)==(0|0);
   if ($33) {
    break;
   } else {
    $arg$07 = $arg$0;$i$06 = $31;
   }
  }
 }
 $19 = HEAP16[$0>>1]|0;
 $20 = ($19<<16>>16)==(0);
 $21 = ((($emit)) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $$lcssa = $22;$i$1$lcssa = 0;
 } else {
  $37 = $22;$arg$13$in = $15;$i$12 = 0;
  while(1) {
   $arg$13 = HEAP32[$arg$13$in>>2]|0;
   $34 = HEAP32[$arg$13>>2]|0;
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   _lily_tm_add($37,$36);
   $38 = (($i$12) + 1)|0;
   $39 = ((($arg$13)) + 32|0);
   $40 = HEAP16[$0>>1]|0;
   $41 = $40&65535;
   $42 = ($38|0)<($41|0);
   $43 = HEAP32[$21>>2]|0;
   if ($42) {
    $37 = $43;$arg$13$in = $39;$i$12 = $38;
   } else {
    $$lcssa = $43;$i$1$lcssa = $38;
    break;
   }
  }
 }
 $44 = ((($emit)) + 112|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 84|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (_lily_tm_make($$lcssa,0,$47,$i$1$lcssa)|0);
 $49 = (_get_storage($emit,$48)|0);
 $50 = HEAP32[$15>>2]|0;
 $51 = ((($ast)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP16[$0>>1]|0;
 $54 = $53&65535;
 $55 = ((($49)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 _write_build_op($emit,34,$50,$52,$54,$56);
 HEAP32[$ast>>2] = $49;
 STACKTOP = sp;return;
}
function _eval_subscript($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 255;
 $7 = ($6<<16>>16)==(5);
 if (!($7)) {
  _eval_tree($emit,$1,0);
 }
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 255;
 $11 = ($10<<16>>16)==(5);
 if (!($11)) {
  _eval_tree($emit,$3,0);
 }
 _check_valid_subscript($emit,$1,$3);
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_get_subscript_result($emit,$14,$3)|0);
 $16 = (_get_storage($emit,$15)|0);
 $17 = ((($emit)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($ast)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24&65535;
 $26 = HEAP32[$3>>2]|0;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 $30 = ((($16)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 _lily_u16_write_5($18,37,$21,$25,$29,$32);
 $33 = HEAP32[$1>>2]|0;
 $34 = ((($33)) + 6|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35 & 2;
 $37 = ($36<<16>>16)==(0);
 if ($37) {
  HEAP32[$ast>>2] = $16;
  return;
 }
 $38 = ((($16)) + 6|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $40 | 2;
 $42 = $41&65535;
 HEAP16[$38>>1] = $42;
 HEAP32[$ast>>2] = $16;
 return;
}
function _eval_typecast($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 _eval_tree($emit,$1,$8);
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(8);
 if (!($16)) {
  $40 = ((($ast)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($emit)) + 92|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 16|0);
  HEAP32[$44>>2] = $41;
  $45 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $11;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $8;
  _lily_raise($45,1,8084,$vararg_buffer1);
  // unreachable;
 }
 $17 = ((($8)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 46|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  $24 = (_get_storage($emit,$5)|0);
  $25 = ((($emit)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($ast)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&65535;
  $30 = HEAP32[$17>>2]|0;
  $31 = ((($30)) + 8|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = HEAP32[$1>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35&65535;
  $37 = ((($24)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&65535;
  _lily_u16_write_5($26,64,$29,$32,$36,$39);
  HEAP32[$ast>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $22 = ((($emit)) + 92|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_raise($23,1,8040,$vararg_buffer);
  // unreachable;
 }
}
function _eval_oo_access($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _eval_oo_access_for_item($emit,$ast);
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(4);
 if ($4) {
  _oo_property_read($emit,$ast);
  return;
 } else {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_get_storage($emit,$7)|0);
  $9 = ((($emit)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($ast)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12&65535;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16&65535;
  $18 = ((($8)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  _lily_u16_write_4($10,41,$13,$17,$20);
  HEAP32[$ast>>2] = $8;
  return;
 }
}
function _eval_property($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _ensure_valid_scope($emit,$1);
 $2 = ((($emit)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(13);
 if ($6) {
  _maybe_close_over_class_self($emit);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($ast)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($emit)) + 92|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP32[$13>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  _lily_raise($16,1,8120,$vararg_buffer);
  // unreachable;
 } else {
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_get_storage($emit,$22)|0);
  $24 = ((($emit)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($ast)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27&65535;
  $29 = HEAP32[$0>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31&65535;
  $33 = ((($emit)) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&65535;
  $40 = ((($23)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41&65535;
  _lily_u16_write_5($25,49,$28,$32,$39,$42);
  HEAP32[$ast>>2] = $23;
  STACKTOP = sp;return;
 }
}
function _eval_lambda($emit,$ast,$expect) {
 $emit = $emit|0;
 $ast = $ast|0;
 $expect = $expect|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expect$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($emit)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ast)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_sp_get($3,$5)|0);
 $7 = ($expect|0)==(0|0);
 if ($7) {
  $$0 = 0;
 } else {
  $8 = ((($expect)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==(7);
  $expect$ = $12 ? $expect : 0;
  $$0 = $expect$;
 }
 $13 = ((($emit)) + 108|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($ast)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_parser_lambda_eval($14,$16,$6,$$0)|0);
 HEAP32[$0>>2] = $1;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_get_storage($emit,$19)|0);
 $21 = ((($emit)) + 72|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if ($25) {
  $26 = ((($emit)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$15>>2]|0;
  $29 = $28&65535;
  $30 = ((($17)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31&65535;
  $33 = ((($20)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34&65535;
  _lily_u16_write_4($27,41,$29,$32,$35);
  HEAP32[$ast>>2] = $20;
  return;
 } else {
  _emit_create_function($emit,$17,$20);
  HEAP32[$ast>>2] = $20;
  return;
 }
}
function _eval_self($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$ast>>2] = $3;
 return;
}
function _eval_upvalue($emit,$ast) {
 $emit = $emit|0;
 $ast = $ast|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ast)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($emit)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 L1: do {
  if ($4) {
   $i$0$lcssa = 0;
  } else {
   $5 = ((($emit)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $i$01 = 0;
   while(1) {
    $7 = (($6) + ($i$01<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($1|0);
    if ($9) {
     $i$0$lcssa = $i$01;
     break L1;
    }
    $10 = (($i$01) + 1)|0;
    $11 = HEAP16[$2>>1]|0;
    $12 = $11&65535;
    $13 = ($10|0)<($12|0);
    if ($13) {
     $i$01 = $10;
    } else {
     $i$0$lcssa = $10;
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP16[$2>>1]|0;
 $15 = $14&65535;
 $16 = ($i$0$lcssa|0)==($15|0);
 if ($16) {
  $17 = HEAP32[$0>>2]|0;
  _checked_close_over_var($emit,$17);
 }
 $18 = ((($emit)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 16|0);
 HEAP8[$20>>0] = 1;
 $21 = ((($1)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_get_storage($emit,$22)|0);
 $24 = ((($emit)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($ast)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&65535;
 $29 = $i$0$lcssa&65535;
 $30 = ((($23)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 _lily_u16_write_4($25,58,$28,$29,$32);
 HEAP32[$ast>>2] = $23;
 return;
}
function _grow_match_cases($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 54|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = $3&65535;
 HEAP16[$0>>1] = $4;
 $5 = ((($emit)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 << 3;
 $8 = $7 & 262136;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$5>>2] = $9;
 return;
}
function _lily_emit_eval_expr($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$es>>2]|0;
 _eval_tree($emit,$0,0);
 $1 = ((($emit)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 return;
}
function _lily_emit_eval_interp_expr($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$es>>2]|0;
 _eval_tree($emit,$0,0);
 $1 = HEAP32[$es>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_emit_eval_expr_to_var($emit,$es,$var) {
 $emit = $emit|0;
 $es = $es|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$es>>2]|0;
 _eval_tree($emit,$0,0);
 $1 = ((($emit)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(1);
 if ($11) {
  $14 = ((($emit)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17&65535;
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&65535;
  $23 = ((($var)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24&65535;
  _lily_u16_write_4($15,0,$18,$22,$25);
  STACKTOP = sp;return;
 } else {
  $12 = ((($emit)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  _lily_raise($13,1,8204,$vararg_buffer);
  // unreachable;
 }
}
function _lily_emit_eval_condition($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$es>>2]|0;
 $1 = ((($emit)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 18|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 255;
 $$off = (($7) + -24)<<16>>16;
 $switch = ($$off&65535)<(3);
 if ($switch) {
  $8 = ((($0)) + 16|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if (!($10)) {
   $16 = ($4<<16>>16)==(4);
   if ($16) {
    $18 = ((($emit)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($2)) + 14|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = (($24) - ($21))|0;
    $26 = $25&65535;
    _lily_u16_write_2($19,24,$26);
    return;
   } else {
    $17 = HEAP32[$emit>>2]|0;
    _lily_u16_write_1($17,0);
    return;
   }
  }
 }
 _eval_enforce_value($emit,$0,0,8248);
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _ensure_valid_condition_type($emit,$13);
 $14 = ($4<<16>>16)==(4);
 $15 = $14&1;
 _emit_jump_if($emit,$0,$15);
 return;
}
function _ensure_valid_condition_type($emit,$type) {
 $emit = $emit|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($type)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 switch ($3<<16>>16) {
 case 1: case 2: case 3: case 6: case 9:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $4 = ((($emit)) + 92|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $type;
  _lily_raise($5,1,8285,$vararg_buffer);
  // unreachable;
 }
 }
}
function _lily_emit_eval_lambda_body($emit,$es,$full_type) {
 $emit = $emit|0;
 $es = $es|0;
 $full_type = $full_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $wanted_type$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($full_type|0)==(0|0);
 if ($0) {
  $9 = 1;$wanted_type$02 = 0;
 } else {
  $1 = ((($full_type)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  $9 = $4;$wanted_type$02 = $3;
 }
 $5 = HEAP32[$es>>2]|0;
 _eval_tree($emit,$5,$wanted_type$02);
 $6 = HEAP32[$es>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 $or$cond = $9 & $8;
 if ($or$cond) {
  $10 = ((($emit)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($6)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13&65535;
  $15 = ((($7)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16&65535;
  _lily_u16_write_3($11,31,$14,$17);
  return;
 }
 if ($9) {
  return;
 }
 HEAP32[$6>>2] = 0;
 return;
}
function _lily_emit_eval_return($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($emit)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[442]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  $37 = ((($emit)) + 72|0);
  $38 = HEAP32[$37>>2]|0;
  _write_pop_try_blocks_up_to($emit,$38);
  $39 = ((($emit)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($emit)) + 88|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = $43&65535;
  _lily_u16_write_2($40,32,$44);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$es>>2]|0;
 _eval_enforce_value($emit,$4,$1,8319);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($1|0);
 if (!($8)) {
  $9 = (_type_matchup($emit,$1,$4)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($4)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($emit)) + 92|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 16|0);
   HEAP32[$15>>2] = $12;
   $16 = HEAP32[$13>>2]|0;
   $17 = HEAP32[$4>>2]|0;
   $18 = ((($17)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer>>2] = $1;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $19;
   _lily_raise($16,1,8353,$vararg_buffer);
   // unreachable;
  }
 }
 $20 = ((($emit)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 _write_pop_try_blocks_up_to($emit,$21);
 $22 = ((($emit)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($4)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&65535;
 $27 = HEAP32[$4>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 _lily_u16_write_3($23,31,$26,$30);
 $31 = HEAP32[$22>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($emit)) + 76|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 36|0);
 HEAP32[$36>>2] = $33;
 STACKTOP = sp;return;
}
function _lily_emit_update_function_block($emit,$self_type,$ret_type) {
 $emit = $emit|0;
 $self_type = $self_type|0;
 $ret_type = $ret_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 60|0);
 HEAP32[$0>>2] = $ret_type;
 $1 = ($self_type|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (_get_storage($emit,$self_type)|0);
 $3 = ((($emit)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($emit)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($emit)) + 88|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($self_type)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($2)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 _lily_u16_write_4($7,46,$11,$15,$18);
 return;
}
function _lily_emit_raise($emit,$es) {
 $emit = $emit|0;
 $es = $es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$es>>2]|0;
 _eval_enforce_value($emit,$0,0,8398);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_class_greater_eq_id(19,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($emit)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _lily_raise($9,1,8431,$vararg_buffer);
  // unreachable;
 } else {
  $12 = ((($emit)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15&65535;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  _lily_u16_write_3($13,55,$16,$20);
  $21 = HEAP32[$12>>2]|0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($emit)) + 76|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $23;
  STACKTOP = sp;return;
 }
}
function _lily_reset_main($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _lily_prepare_main($emit) {
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($emit)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($emit)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($emit)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_u16_write_prep($9,32);
 $10 = HEAP32[$8>>2]|0;
 _lily_u16_write_1($10,67);
 $11 = HEAP32[$8>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13&65535;
 $15 = ((($3)) + 10|0);
 HEAP16[$15>>1] = $14;
 $16 = HEAP32[$8>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = $7&65535;
 $20 = ((($3)) + 14|0);
 HEAP16[$20>>1] = $19;
 return;
}
function _siphash24($src,$src_sz,$key) {
 $src = $src|0;
 $src_sz = $src_sz|0;
 $key = $key|0;
 var $$0$lcssa = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $in$0$lcssa = 0, $in$05 = 0, $scevgep = 0, $t$sroa$0$sroa$0$0 = 0, $t$sroa$0$sroa$6$0 = 0, $t$sroa$0$sroa$6$1 = 0, $t$sroa$0$sroa$7$0 = 0, $t$sroa$0$sroa$7$1 = 0, $t$sroa$0$sroa$7$2 = 0;
 var $t$sroa$0$sroa$8$sroa$0$0 = 0, $t$sroa$10$0 = 0, $t$sroa$10$1 = 0, $t$sroa$10$2 = 0, $t$sroa$10$3 = 0, $t$sroa$8$0 = 0, $t$sroa$8$1 = 0, $t$sroa$9$0 = 0, $t$sroa$9$1 = 0, $t$sroa$9$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $key;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($key)) + 8|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_bitshift64Shl(($src_sz|0),0,56)|0);
 $14 = tempRet0;
 $15 = $2 ^ 1886610805;
 $16 = $5 ^ 1936682341;
 $17 = $9 ^ 1852075885;
 $18 = $12 ^ 1685025377;
 $19 = $2 ^ 1852142177;
 $20 = $5 ^ 1819895653;
 $21 = $9 ^ 2037671283;
 $22 = $12 ^ 1952801890;
 $23 = ($src_sz>>>0)>(7);
 if ($23) {
  $24 = (($src_sz) + -8)|0;
  $25 = $24 & -8;
  $26 = (($25) + 8)|0;
  $scevgep = (($src) + ($26)|0);
  $$06 = $src_sz;$36 = $21;$38 = $22;$39 = $17;$40 = $18;$41 = $15;$42 = $16;$45 = $19;$46 = $20;$in$05 = $src;
  while(1) {
   $27 = $in$05;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($in$05)) + 8|0);
   $34 = (($$06) + -8)|0;
   $35 = $29 ^ $36;
   $37 = $32 ^ $38;
   $43 = (_i64Add(($39|0),($40|0),($41|0),($42|0))|0);
   $44 = tempRet0;
   $47 = (_i64Add(($35|0),($37|0),($45|0),($46|0))|0);
   $48 = tempRet0;
   $49 = (_bitshift64Shl(($39|0),($40|0),13)|0);
   $50 = tempRet0;
   $51 = (_bitshift64Lshr(($39|0),($40|0),51)|0);
   $52 = tempRet0;
   $53 = $49 | $51;
   $54 = $50 | $52;
   $55 = $53 ^ $43;
   $56 = $54 ^ $44;
   $57 = (_bitshift64Shl(($35|0),($37|0),16)|0);
   $58 = tempRet0;
   $59 = (_bitshift64Lshr(($35|0),($37|0),48)|0);
   $60 = tempRet0;
   $61 = $57 | $59;
   $62 = $58 | $60;
   $63 = $61 ^ $47;
   $64 = $62 ^ $48;
   $65 = (_i64Add(($47|0),($48|0),($55|0),($56|0))|0);
   $66 = tempRet0;
   $67 = (_i64Add(($63|0),($64|0),($44|0),($43|0))|0);
   $68 = tempRet0;
   $69 = (_bitshift64Shl(($55|0),($56|0),17)|0);
   $70 = tempRet0;
   $71 = (_bitshift64Lshr(($55|0),($56|0),47)|0);
   $72 = tempRet0;
   $73 = $69 | $71;
   $74 = $70 | $72;
   $75 = $65 ^ $73;
   $76 = $66 ^ $74;
   $77 = (_bitshift64Shl(($63|0),($64|0),21)|0);
   $78 = tempRet0;
   $79 = (_bitshift64Lshr(($63|0),($64|0),43)|0);
   $80 = tempRet0;
   $81 = $77 | $79;
   $82 = $78 | $80;
   $83 = $81 ^ $67;
   $84 = $82 ^ $68;
   $85 = (_i64Add(($67|0),($68|0),($75|0),($76|0))|0);
   $86 = tempRet0;
   $87 = (_i64Add(($83|0),($84|0),($66|0),($65|0))|0);
   $88 = tempRet0;
   $89 = (_bitshift64Shl(($75|0),($76|0),13)|0);
   $90 = tempRet0;
   $91 = (_bitshift64Lshr(($75|0),($76|0),51)|0);
   $92 = tempRet0;
   $93 = $89 | $91;
   $94 = $90 | $92;
   $95 = $93 ^ $85;
   $96 = $94 ^ $86;
   $97 = (_bitshift64Shl(($83|0),($84|0),16)|0);
   $98 = tempRet0;
   $99 = (_bitshift64Lshr(($83|0),($84|0),48)|0);
   $100 = tempRet0;
   $101 = $97 | $99;
   $102 = $98 | $100;
   $103 = $101 ^ $87;
   $104 = $102 ^ $88;
   $105 = (_i64Add(($87|0),($88|0),($95|0),($96|0))|0);
   $106 = tempRet0;
   $107 = (_i64Add(($103|0),($104|0),($86|0),($85|0))|0);
   $108 = tempRet0;
   $109 = (_bitshift64Shl(($95|0),($96|0),17)|0);
   $110 = tempRet0;
   $111 = (_bitshift64Lshr(($95|0),($96|0),47)|0);
   $112 = tempRet0;
   $113 = $109 | $111;
   $114 = $110 | $112;
   $115 = $113 ^ $105;
   $116 = $114 ^ $106;
   $117 = (_bitshift64Shl(($103|0),($104|0),21)|0);
   $118 = tempRet0;
   $119 = (_bitshift64Lshr(($103|0),($104|0),43)|0);
   $120 = tempRet0;
   $121 = $117 | $119;
   $122 = $118 | $120;
   $123 = $121 ^ $107;
   $124 = $122 ^ $108;
   $125 = $107 ^ $29;
   $126 = $108 ^ $32;
   $127 = ($34>>>0)>(7);
   if ($127) {
    $$06 = $34;$36 = $123;$38 = $124;$39 = $115;$40 = $116;$41 = $125;$42 = $126;$45 = $106;$46 = $105;$in$05 = $33;
   } else {
    $421 = $125;$422 = $126;$423 = $106;$424 = $105;$425 = $123;$426 = $124;$427 = $115;$428 = $116;
    break;
   }
  }
  $128 = (($24) - ($25))|0;
  $$0$lcssa = $128;$169 = $425;$171 = $426;$172 = $427;$173 = $428;$174 = $421;$175 = $422;$178 = $423;$179 = $424;$in$0$lcssa = $scevgep;
 } else {
  $$0$lcssa = $src_sz;$169 = $21;$171 = $22;$172 = $17;$173 = $18;$174 = $15;$175 = $16;$178 = $19;$179 = $20;$in$0$lcssa = $src;
 }
 switch ($$0$lcssa|0) {
 case 7:  {
  $129 = ((($in$0$lcssa)) + 6|0);
  $130 = HEAP8[$129>>0]|0;
  $t$sroa$10$0 = $130;
  label = 7;
  break;
 }
 case 6:  {
  $t$sroa$10$0 = 0;
  label = 7;
  break;
 }
 case 5:  {
  $t$sroa$10$1 = 0;$t$sroa$9$0 = 0;
  label = 8;
  break;
 }
 case 4:  {
  $t$sroa$10$2 = 0;$t$sroa$8$0 = 0;$t$sroa$9$1 = 0;
  label = 9;
  break;
 }
 case 3:  {
  $142 = ((($in$0$lcssa)) + 2|0);
  $143 = HEAP8[$142>>0]|0;
  $t$sroa$0$sroa$7$0 = $143;
  label = 11;
  break;
 }
 case 2:  {
  $t$sroa$0$sroa$7$0 = 0;
  label = 11;
  break;
 }
 case 1:  {
  $t$sroa$0$sroa$6$0 = 0;$t$sroa$0$sroa$7$1 = 0;
  label = 12;
  break;
 }
 default: {
  $t$sroa$0$sroa$0$0 = 0;$t$sroa$0$sroa$6$1 = 0;$t$sroa$0$sroa$7$2 = 0;$t$sroa$0$sroa$8$sroa$0$0 = 0;$t$sroa$10$3 = 0;$t$sroa$8$1 = 0;$t$sroa$9$2 = 0;
 }
 }
 if ((label|0) == 7) {
  $131 = ((($in$0$lcssa)) + 5|0);
  $132 = HEAP8[$131>>0]|0;
  $t$sroa$10$1 = $t$sroa$10$0;$t$sroa$9$0 = $132;
  label = 8;
 }
 else if ((label|0) == 11) {
  $144 = ((($in$0$lcssa)) + 1|0);
  $145 = HEAP8[$144>>0]|0;
  $t$sroa$0$sroa$6$0 = $145;$t$sroa$0$sroa$7$1 = $t$sroa$0$sroa$7$0;
  label = 12;
 }
 if ((label|0) == 8) {
  $133 = ((($in$0$lcssa)) + 4|0);
  $134 = HEAP8[$133>>0]|0;
  $t$sroa$10$2 = $t$sroa$10$1;$t$sroa$8$0 = $134;$t$sroa$9$1 = $t$sroa$9$0;
  label = 9;
 }
 else if ((label|0) == 12) {
  $146 = HEAP8[$in$0$lcssa>>0]|0;
  $t$sroa$0$sroa$0$0 = $146;$t$sroa$0$sroa$6$1 = $t$sroa$0$sroa$6$0;$t$sroa$0$sroa$7$2 = $t$sroa$0$sroa$7$1;$t$sroa$0$sroa$8$sroa$0$0 = 0;$t$sroa$10$3 = 0;$t$sroa$8$1 = 0;$t$sroa$9$2 = 0;
 }
 if ((label|0) == 9) {
  $135 = HEAP32[$in$0$lcssa>>2]|0;
  $136 = $135&255;
  $137 = $135 >>> 8;
  $138 = $137&255;
  $139 = $135 >>> 16;
  $140 = $139&255;
  $141 = $135 & -16777216;
  $t$sroa$0$sroa$0$0 = $136;$t$sroa$0$sroa$6$1 = $138;$t$sroa$0$sroa$7$2 = $140;$t$sroa$0$sroa$8$sroa$0$0 = $141;$t$sroa$10$3 = $t$sroa$10$2;$t$sroa$8$1 = $t$sroa$8$0;$t$sroa$9$2 = $t$sroa$9$1;
 }
 $147 = $t$sroa$0$sroa$7$2&255;
 $148 = $147 << 16;
 $149 = $t$sroa$0$sroa$8$sroa$0$0 | $148;
 $150 = $t$sroa$0$sroa$6$1&255;
 $151 = $150 << 8;
 $152 = $149 | $151;
 $153 = $t$sroa$0$sroa$0$0&255;
 $154 = $152 | $153;
 $155 = $t$sroa$10$3&255;
 $156 = (_bitshift64Shl(($155|0),0,48)|0);
 $157 = tempRet0;
 $158 = $t$sroa$9$2&255;
 $159 = (_bitshift64Shl(($158|0),0,40)|0);
 $160 = tempRet0;
 $161 = $t$sroa$8$1&255;
 $162 = $156 | $13;
 $163 = $157 | $14;
 $164 = $162 | $159;
 $165 = $163 | $160;
 $166 = $164 | $154;
 $167 = $165 | $161;
 $168 = $166 ^ $169;
 $170 = $167 ^ $171;
 $176 = (_i64Add(($172|0),($173|0),($174|0),($175|0))|0);
 $177 = tempRet0;
 $180 = (_i64Add(($168|0),($170|0),($178|0),($179|0))|0);
 $181 = tempRet0;
 $182 = (_bitshift64Shl(($172|0),($173|0),13)|0);
 $183 = tempRet0;
 $184 = (_bitshift64Lshr(($172|0),($173|0),51)|0);
 $185 = tempRet0;
 $186 = $182 | $184;
 $187 = $183 | $185;
 $188 = $186 ^ $176;
 $189 = $187 ^ $177;
 $190 = (_bitshift64Shl(($168|0),($170|0),16)|0);
 $191 = tempRet0;
 $192 = (_bitshift64Lshr(($168|0),($170|0),48)|0);
 $193 = tempRet0;
 $194 = $190 | $192;
 $195 = $191 | $193;
 $196 = $194 ^ $180;
 $197 = $195 ^ $181;
 $198 = (_i64Add(($180|0),($181|0),($188|0),($189|0))|0);
 $199 = tempRet0;
 $200 = (_i64Add(($196|0),($197|0),($177|0),($176|0))|0);
 $201 = tempRet0;
 $202 = (_bitshift64Shl(($188|0),($189|0),17)|0);
 $203 = tempRet0;
 $204 = (_bitshift64Lshr(($188|0),($189|0),47)|0);
 $205 = tempRet0;
 $206 = $202 | $204;
 $207 = $203 | $205;
 $208 = $198 ^ $206;
 $209 = $199 ^ $207;
 $210 = (_bitshift64Shl(($196|0),($197|0),21)|0);
 $211 = tempRet0;
 $212 = (_bitshift64Lshr(($196|0),($197|0),43)|0);
 $213 = tempRet0;
 $214 = $210 | $212;
 $215 = $211 | $213;
 $216 = $214 ^ $200;
 $217 = $215 ^ $201;
 $218 = (_i64Add(($200|0),($201|0),($208|0),($209|0))|0);
 $219 = tempRet0;
 $220 = (_i64Add(($216|0),($217|0),($199|0),($198|0))|0);
 $221 = tempRet0;
 $222 = (_bitshift64Shl(($208|0),($209|0),13)|0);
 $223 = tempRet0;
 $224 = (_bitshift64Lshr(($208|0),($209|0),51)|0);
 $225 = tempRet0;
 $226 = $222 | $224;
 $227 = $223 | $225;
 $228 = $226 ^ $218;
 $229 = $227 ^ $219;
 $230 = (_bitshift64Shl(($216|0),($217|0),16)|0);
 $231 = tempRet0;
 $232 = (_bitshift64Lshr(($216|0),($217|0),48)|0);
 $233 = tempRet0;
 $234 = $230 | $232;
 $235 = $231 | $233;
 $236 = $234 ^ $220;
 $237 = $235 ^ $221;
 $238 = (_i64Add(($220|0),($221|0),($228|0),($229|0))|0);
 $239 = tempRet0;
 $240 = (_i64Add(($236|0),($237|0),($219|0),($218|0))|0);
 $241 = tempRet0;
 $242 = (_bitshift64Shl(($228|0),($229|0),17)|0);
 $243 = tempRet0;
 $244 = (_bitshift64Lshr(($228|0),($229|0),47)|0);
 $245 = tempRet0;
 $246 = $242 | $244;
 $247 = $243 | $245;
 $248 = $246 ^ $238;
 $249 = $247 ^ $239;
 $250 = (_bitshift64Shl(($236|0),($237|0),21)|0);
 $251 = tempRet0;
 $252 = (_bitshift64Lshr(($236|0),($237|0),43)|0);
 $253 = tempRet0;
 $254 = $250 | $252;
 $255 = $251 | $253;
 $256 = $254 ^ $240;
 $257 = $255 ^ $241;
 $258 = $240 ^ $166;
 $259 = $241 ^ $167;
 $260 = $239 ^ 255;
 $261 = (_i64Add(($258|0),($259|0),($248|0),($249|0))|0);
 $262 = tempRet0;
 $263 = (_i64Add(($256|0),($257|0),($260|0),($238|0))|0);
 $264 = tempRet0;
 $265 = (_bitshift64Shl(($248|0),($249|0),13)|0);
 $266 = tempRet0;
 $267 = (_bitshift64Lshr(($248|0),($249|0),51)|0);
 $268 = tempRet0;
 $269 = $265 | $267;
 $270 = $266 | $268;
 $271 = $261 ^ $269;
 $272 = $262 ^ $270;
 $273 = (_bitshift64Shl(($256|0),($257|0),16)|0);
 $274 = tempRet0;
 $275 = (_bitshift64Lshr(($256|0),($257|0),48)|0);
 $276 = tempRet0;
 $277 = $273 | $275;
 $278 = $274 | $276;
 $279 = $277 ^ $263;
 $280 = $278 ^ $264;
 $281 = (_i64Add(($263|0),($264|0),($271|0),($272|0))|0);
 $282 = tempRet0;
 $283 = (_i64Add(($279|0),($280|0),($262|0),($261|0))|0);
 $284 = tempRet0;
 $285 = (_bitshift64Shl(($271|0),($272|0),17)|0);
 $286 = tempRet0;
 $287 = (_bitshift64Lshr(($271|0),($272|0),47)|0);
 $288 = tempRet0;
 $289 = $285 | $287;
 $290 = $286 | $288;
 $291 = $289 ^ $281;
 $292 = $290 ^ $282;
 $293 = (_bitshift64Shl(($279|0),($280|0),21)|0);
 $294 = tempRet0;
 $295 = (_bitshift64Lshr(($279|0),($280|0),43)|0);
 $296 = tempRet0;
 $297 = $293 | $295;
 $298 = $294 | $296;
 $299 = $297 ^ $283;
 $300 = $298 ^ $284;
 $301 = (_i64Add(($283|0),($284|0),($291|0),($292|0))|0);
 $302 = tempRet0;
 $303 = (_i64Add(($299|0),($300|0),($282|0),($281|0))|0);
 $304 = tempRet0;
 $305 = (_bitshift64Shl(($291|0),($292|0),13)|0);
 $306 = tempRet0;
 $307 = (_bitshift64Lshr(($291|0),($292|0),51)|0);
 $308 = tempRet0;
 $309 = $305 | $307;
 $310 = $306 | $308;
 $311 = $309 ^ $301;
 $312 = $310 ^ $302;
 $313 = (_bitshift64Shl(($299|0),($300|0),16)|0);
 $314 = tempRet0;
 $315 = (_bitshift64Lshr(($299|0),($300|0),48)|0);
 $316 = tempRet0;
 $317 = $313 | $315;
 $318 = $314 | $316;
 $319 = $317 ^ $303;
 $320 = $318 ^ $304;
 $321 = (_i64Add(($303|0),($304|0),($311|0),($312|0))|0);
 $322 = tempRet0;
 $323 = (_i64Add(($319|0),($320|0),($302|0),($301|0))|0);
 $324 = tempRet0;
 $325 = (_bitshift64Shl(($311|0),($312|0),17)|0);
 $326 = tempRet0;
 $327 = (_bitshift64Lshr(($311|0),($312|0),47)|0);
 $328 = tempRet0;
 $329 = $325 | $327;
 $330 = $326 | $328;
 $331 = $329 ^ $321;
 $332 = $330 ^ $322;
 $333 = (_bitshift64Shl(($319|0),($320|0),21)|0);
 $334 = tempRet0;
 $335 = (_bitshift64Lshr(($319|0),($320|0),43)|0);
 $336 = tempRet0;
 $337 = $333 | $335;
 $338 = $334 | $336;
 $339 = $337 ^ $323;
 $340 = $338 ^ $324;
 $341 = (_i64Add(($323|0),($324|0),($331|0),($332|0))|0);
 $342 = tempRet0;
 $343 = (_i64Add(($339|0),($340|0),($322|0),($321|0))|0);
 $344 = tempRet0;
 $345 = (_bitshift64Shl(($331|0),($332|0),13)|0);
 $346 = tempRet0;
 $347 = (_bitshift64Lshr(($331|0),($332|0),51)|0);
 $348 = tempRet0;
 $349 = $345 | $347;
 $350 = $346 | $348;
 $351 = $349 ^ $341;
 $352 = $350 ^ $342;
 $353 = (_bitshift64Shl(($339|0),($340|0),16)|0);
 $354 = tempRet0;
 $355 = (_bitshift64Lshr(($339|0),($340|0),48)|0);
 $356 = tempRet0;
 $357 = $353 | $355;
 $358 = $354 | $356;
 $359 = $357 ^ $343;
 $360 = $358 ^ $344;
 $361 = (_i64Add(($343|0),($344|0),($351|0),($352|0))|0);
 $362 = tempRet0;
 $363 = (_i64Add(($359|0),($360|0),($342|0),($341|0))|0);
 $364 = tempRet0;
 $365 = (_bitshift64Shl(($351|0),($352|0),17)|0);
 $366 = tempRet0;
 $367 = (_bitshift64Lshr(($351|0),($352|0),47)|0);
 $368 = tempRet0;
 $369 = $365 | $367;
 $370 = $366 | $368;
 $371 = $369 ^ $361;
 $372 = $370 ^ $362;
 $373 = (_bitshift64Shl(($359|0),($360|0),21)|0);
 $374 = tempRet0;
 $375 = (_bitshift64Lshr(($359|0),($360|0),43)|0);
 $376 = tempRet0;
 $377 = $373 | $375;
 $378 = $374 | $376;
 $379 = $377 ^ $363;
 $380 = $378 ^ $364;
 $381 = (_i64Add(($363|0),($364|0),($371|0),($372|0))|0);
 $382 = tempRet0;
 $383 = (_i64Add(($379|0),($380|0),($362|0),($361|0))|0);
 $384 = tempRet0;
 $385 = (_bitshift64Shl(($371|0),($372|0),13)|0);
 $386 = tempRet0;
 $387 = (_bitshift64Lshr(($371|0),($372|0),51)|0);
 $388 = tempRet0;
 $389 = $385 | $387;
 $390 = $386 | $388;
 $391 = $389 ^ $381;
 $392 = $390 ^ $382;
 $393 = (_bitshift64Shl(($379|0),($380|0),16)|0);
 $394 = tempRet0;
 $395 = (_bitshift64Lshr(($379|0),($380|0),48)|0);
 $396 = tempRet0;
 $397 = $393 | $395;
 $398 = $394 | $396;
 $399 = $397 ^ $383;
 $400 = $398 ^ $384;
 $401 = (_i64Add(($383|0),($384|0),($391|0),($392|0))|0);
 $402 = tempRet0;
 $403 = (_bitshift64Shl(($391|0),($392|0),17)|0);
 $404 = tempRet0;
 $405 = (_bitshift64Lshr(($391|0),($392|0),47)|0);
 $406 = tempRet0;
 $407 = $403 | $405;
 $408 = $404 | $406;
 $409 = $407 ^ $401;
 $410 = $408 ^ $402;
 $411 = (_bitshift64Shl(($399|0),($400|0),21)|0);
 $412 = tempRet0;
 $413 = (_bitshift64Lshr(($399|0),($400|0),43)|0);
 $414 = tempRet0;
 $415 = $411 | $413;
 $416 = $412 | $414;
 $417 = $409 ^ $402;
 $418 = $410 ^ $401;
 $419 = $417 ^ $415;
 $420 = $418 ^ $416;
 tempRet0 = ($420);
 return ($419|0);
}
function _lily_new_default_options() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(32)|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 100;
 $2 = ((($0)) + 1|0);
 HEAP8[$2>>0] = 4;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[582]|0;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 2|0);
 HEAP8[$8>>0] = 1;
 $9 = ((($0)) + 3|0);
 HEAP8[$9>>0] = 1;
 $10 = (_lily_malloc(16)|0);
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = $10;
 dest=$10; src=8466; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return ($0|0);
}
function _lily_free_options($o) {
 $o = $o|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($o);
 return;
}
function _lily_new_raiser() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = (_lily_malloc(164)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_new_msgbuf()|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_new_msgbuf()|0);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = $1;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 return ($0|0);
}
function _lily_free_raiser($raiser) {
 $raiser = $raiser|0;
 var $$lcssa = 0, $$lcssa5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$raiser>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ($0|0)==(0|0);
  if (!($3)) {
   $$lcssa5 = $0;
   label = 4;
  }
 } else {
  $5 = $1;
  while(1) {
   $4 = HEAP32[$5>>2]|0;
   $6 = ($4|0)==(0|0);
   if ($6) {
    $$lcssa = $5;
    break;
   } else {
    $5 = $4;
   }
  }
  HEAP32[$raiser>>2] = $$lcssa;
  $$lcssa5 = $$lcssa;
  label = 4;
 }
 if ((label|0) == 4) {
  $8 = $$lcssa5;
  while(1) {
   $7 = ((($8)) + 4|0);
   $9 = HEAP32[$7>>2]|0;
   _lily_free($8);
   HEAP32[$raiser>>2] = $9;
   $10 = $9;
   $11 = ($9|0)==(0);
   if ($11) {
    break;
   } else {
    $8 = $10;
   }
  }
 }
 $12 = ((($raiser)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_free_msgbuf($13);
 $14 = ((($raiser)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free_msgbuf($15);
 _lily_free($raiser);
 return;
}
function _lily_jump_setup($raiser) {
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$raiser>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_lily_malloc(164)|0);
  $5 = HEAP32[$raiser>>2]|0;
  HEAP32[$4>>2] = $5;
  $6 = HEAP32[$raiser>>2]|0;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = $4;
  $8 = ((($4)) + 4|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$raiser>>2] = $4;
  $9 = HEAP32[$raiser>>2]|0;
  return ($9|0);
 } else {
  HEAP32[$raiser>>2] = $2;
  $9 = HEAP32[$raiser>>2]|0;
  return ($9|0);
 }
 return (0)|0;
}
function _lily_release_jump($raiser) {
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$raiser>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$raiser>>2] = $1;
 return;
}
function _lily_jump_back($raiser) {
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$raiser>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$raiser>>2] = $1;
 $2 = ((($1)) + 8|0);
 _longjmp(($2|0),1);
 // unreachable;
}
function _lily_raise($raiser,$error_code,$fmt,$varargs) {
 $raiser = $raiser|0;
 $error_code = $error_code|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $var_args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $var_args = sp;
 $0 = ((($raiser)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_mb_flush($1);
 $2 = ((($raiser)) + 12|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$var_args>>2] = $varargs;
 $3 = HEAP32[$0>>2]|0;
 _lily_mb_add_fmt_va($3,$fmt,$var_args);
 $4 = $error_code&65535;
 $5 = ((($raiser)) + 20|0);
 HEAP16[$5>>1] = $4;
 $6 = HEAP32[$raiser>>2]|0;
 $7 = ((($6)) + 8|0);
 _longjmp(($7|0),1);
 // unreachable;
}
function _lily_raise_class($raiser,$raise_cls,$msg) {
 $raiser = $raiser|0;
 $raise_cls = $raise_cls|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($raiser)) + 12|0);
 HEAP32[$0>>2] = $raise_cls;
 $1 = ((($raiser)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_mb_flush($2);
 $3 = HEAP32[$1>>2]|0;
 _lily_mb_add($3,$msg);
 $4 = HEAP32[$raiser>>2]|0;
 $5 = ((($4)) + 8|0);
 _longjmp(($5|0),1);
 // unreachable;
}
function _lily_name_for_error($raiser) {
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result$0 = 0, $result$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($raiser)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = ((($raiser)) + 20|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = (1440 + ($6<<2)|0);
  $result$0$in = $7;
 } else {
  $3 = ((($1)) + 16|0);
  $result$0$in = $3;
 }
 $result$0 = HEAP32[$result$0$in>>2]|0;
 return ($result$0|0);
}
function _lily_new_msgbuf() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 64;
 return ($0|0);
}
function _lily_free_msgbuf($msgbuf) {
 $msgbuf = $msgbuf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$msgbuf>>2]|0;
 _lily_free($0);
 _lily_free($msgbuf);
 return;
}
function _lily_mb_get($msgbuf) {
 $msgbuf = $msgbuf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$msgbuf>>2]|0;
 return ($0|0);
}
function _lily_mb_add($msgbuf,$str) {
 $msgbuf = $msgbuf|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 $1 = ((($msgbuf)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 1)|0;
 $4 = (($3) + ($2))|0;
 $5 = ((($msgbuf)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  _resize_msgbuf($msgbuf,$4);
 }
 $8 = HEAP32[$msgbuf>>2]|0;
 (_strcat($8,$str)|0);
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + ($0))|0;
 HEAP32[$1>>2] = $10;
 return;
}
function _resize_msgbuf($msgbuf,$new_size) {
 $msgbuf = $msgbuf|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$msgbuf>>2]|0;
 $1 = (_lily_realloc($0,$new_size)|0);
 HEAP32[$msgbuf>>2] = $1;
 $2 = ((($msgbuf)) + 8|0);
 HEAP32[$2>>2] = $new_size;
 return;
}
function _lily_mb_add_bytestring($msgbuf,$str,$length) {
 $msgbuf = $msgbuf|0;
 $str = $str|0;
 $length = $length|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _add_escaped_sized($msgbuf,1,$str,$length);
 return;
}
function _add_escaped_sized($msgbuf,$is_bytestring,$str,$len) {
 $msgbuf = $msgbuf|0;
 $is_bytestring = $is_bytestring|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $escape_char$06 = 0, $escape_char$1$ph = 0, $escape_char$13 = 0, $exitcond = 0, $i$04 = 0, $or$cond = 0;
 var $or$cond8 = 0, $start$05 = 0, $start$1 = 0, $start$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)>(0);
 if ($0) {
  $1 = ($is_bytestring|0)==(0);
  $escape_char$06 = 0;$i$04 = 0;$start$05 = 0;
  while(1) {
   $2 = (($str) + ($i$04)|0);
   $3 = HEAP8[$2>>0]|0;
   switch ($3<<24>>24) {
   case 10:  {
    $escape_char$1$ph = 110;
    label = 12;
    break;
   }
   case 13:  {
    $escape_char$1$ph = 114;
    label = 12;
    break;
   }
   case 9:  {
    $escape_char$1$ph = 116;
    label = 12;
    break;
   }
   case 39:  {
    $escape_char$1$ph = $3;
    label = 12;
    break;
   }
   case 34:  {
    $escape_char$1$ph = $3;
    label = 12;
    break;
   }
   case 92:  {
    $escape_char$1$ph = $3;
    label = 12;
    break;
   }
   case 8:  {
    $escape_char$1$ph = 98;
    label = 12;
    break;
   }
   case 7:  {
    $escape_char$1$ph = 97;
    label = 12;
    break;
   }
   default: {
    $4 = $3 << 24 >> 24;
    $5 = (_isprint($4)|0);
    $6 = ($5|0)!=(0);
    $7 = ($3<<24>>24)<(0);
    $or$cond = $1 & $7;
    $or$cond8 = $6 | $or$cond;
    if ($or$cond8) {
     $escape_char$13 = 0;$start$1 = $start$05;
    } else {
     $escape_char$1$ph = $escape_char$06;
     label = 12;
    }
   }
   }
   if ((label|0) == 12) {
    label = 0;
    $8 = ($i$04|0)==($start$05|0);
    if (!($8)) {
     _lily_mb_add_range($msgbuf,$str,$start$05,$i$04);
    }
    _lily_mb_add_char($msgbuf,92);
    $9 = ($escape_char$1$ph<<24>>24)==(0);
    if ($9) {
     _add_escaped_char($msgbuf,$3);
    } else {
     _lily_mb_add_char($msgbuf,$escape_char$1$ph);
    }
    $10 = (($i$04) + 1)|0;
    $escape_char$13 = $escape_char$1$ph;$start$1 = $10;
   }
   $11 = (($i$04) + 1)|0;
   $exitcond = ($11|0)==($len|0);
   if ($exitcond) {
    $start$1$lcssa = $start$1;
    break;
   } else {
    $escape_char$06 = $escape_char$13;$i$04 = $11;$start$05 = $start$1;
   }
  }
  $12 = ($start$1$lcssa|0)==($len|0);
  if (!($12)) {
   _lily_mb_add_range($msgbuf,$str,$start$1$lcssa,$len);
  }
 }
 $13 = ($is_bytestring|0)==(0);
 if ($13) {
  return;
 }
 _lily_mb_add_char($msgbuf,0);
 return;
}
function _lily_mb_add_range($msgbuf,$text,$start,$stop) {
 $msgbuf = $msgbuf|0;
 $text = $text|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($stop) - ($start))|0;
 $1 = ((($msgbuf)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 1)|0;
 $4 = (($3) + ($2))|0;
 $5 = ((($msgbuf)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  _resize_msgbuf($msgbuf,$4);
 }
 $8 = HEAP32[$msgbuf>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($8) + ($9)|0);
 $11 = (($text) + ($start)|0);
 _memcpy(($10|0),($11|0),($0|0))|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + ($0))|0;
 HEAP32[$1>>2] = $13;
 $14 = HEAP32[$msgbuf>>2]|0;
 $15 = (($14) + ($13)|0);
 HEAP8[$15>>0] = 0;
 return;
}
function _lily_mb_add_char($msgbuf,$c) {
 $msgbuf = $msgbuf|0;
 $c = $c|0;
 var $0 = 0, $ch_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ch_buf = sp;
 HEAP8[$ch_buf>>0] = $c;
 $0 = ((($ch_buf)) + 1|0);
 HEAP8[$0>>0] = 0;
 _lily_mb_add($msgbuf,$ch_buf);
 STACKTOP = sp;return;
}
function _add_escaped_char($msgbuf,$ch) {
 $msgbuf = $msgbuf|0;
 $ch = $ch|0;
 var $0 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $buffer = sp + 8|0;
 $0 = $ch&255;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($buffer,8500,$vararg_buffer)|0);
 _lily_mb_add($msgbuf,$buffer);
 STACKTOP = sp;return;
}
function _lily_mb_escape_add_str($msgbuf,$str) {
 $msgbuf = $msgbuf|0;
 $str = $str|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 _add_escaped_sized($msgbuf,0,$str,$0);
 return;
}
function _lily_mb_add_boolean($msgbuf,$b) {
 $msgbuf = $msgbuf|0;
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0);
 if ($0) {
  _lily_mb_add($msgbuf,14077);
  return;
 } else {
  _lily_mb_add($msgbuf,14083);
  return;
 }
}
function _lily_mb_add_byte($msgbuf,$i) {
 $msgbuf = $msgbuf|0;
 $i = $i|0;
 var $0 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 $0 = $i&255;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($buf,8505,$vararg_buffer)|0);
 _lily_mb_add($msgbuf,$buf);
 STACKTOP = sp;return;
}
function _lily_mb_add_int($msgbuf,$i) {
 $msgbuf = $msgbuf|0;
 $i = $i|0;
 var $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $i;
 (_sprintf($buf,9291,$vararg_buffer)|0);
 _lily_mb_add($msgbuf,$buf);
 STACKTOP = sp;return;
}
function _lily_mb_add_double($msgbuf,$d) {
 $msgbuf = $msgbuf|0;
 $d = +$d;
 var $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 HEAPF64[$vararg_buffer>>3] = $d;
 (_sprintf($buf,8509,$vararg_buffer)|0);
 _lily_mb_add($msgbuf,$buf);
 STACKTOP = sp;return;
}
function _lily_mb_flush($msgbuf) {
 $msgbuf = $msgbuf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($msgbuf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = HEAP32[$msgbuf>>2]|0;
 HEAP8[$1>>0] = 0;
 return;
}
function _lily_mb_add_fmt_va($msgbuf,$fmt,$var_args) {
 $msgbuf = $msgbuf|0;
 $fmt = $fmt|0;
 $var_args = $var_args|0;
 var $$off = 0, $$off4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $arglist_current = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0;
 var $arglist_next = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $buffer = 0, $c$0 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0;
 var $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0;
 var $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $i$0$lcssa = 0, $i$06 = 0, $i$1 = 0, $i$3$ph = 0, $modifier_buf = 0, $text_start$0$lcssa = 0, $text_start$05 = 0, $text_start$2$ph = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer = sp;
 $modifier_buf = sp + 144|0;
 $buffer = sp + 16|0;
 HEAP8[$modifier_buf>>0] = 37;
 $0 = ((($modifier_buf)) + 1|0);
 HEAP8[$0>>0] = 0;
 $1 = (_strlen($fmt)|0);
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ((($modifier_buf)) + 2|0);
 $4 = ((($modifier_buf)) + 3|0);
 $5 = ((($modifier_buf)) + 4|0);
 $6 = ((($modifier_buf)) + 3|0);
 $i$06 = 0;$text_start$05 = 0;
 L4: while(1) {
  $7 = (($fmt) + ($i$06)|0);
  $8 = HEAP8[$7>>0]|0;
  switch ($8<<24>>24) {
  case 37:  {
   $9 = (($i$06) + 1)|0;
   $10 = ($9|0)==($1|0);
   if ($10) {
    $i$0$lcssa = $i$06;$text_start$0$lcssa = $text_start$05;
    break L4;
   }
   $11 = ($i$06|0)==($text_start$05|0);
   if (!($11)) {
    _lily_mb_add_range($msgbuf,$fmt,$text_start$05,$i$06);
   }
   $12 = (($fmt) + ($9)|0);
   $13 = HEAP8[$12>>0]|0;
   $$off = (($13) + -48)<<24>>24;
   $14 = ($$off&255)<(10);
   do {
    if ($14) {
     HEAP8[$0>>0] = $13;
     $15 = (($i$06) + 2)|0;
     $16 = (($fmt) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $$off4 = (($17) + -48)<<24>>24;
     $18 = ($$off4&255)<(10);
     if ($18) {
      HEAP8[$3>>0] = $17;
      HEAP8[$4>>0] = 100;
      HEAP8[$5>>0] = 0;
      $19 = (($i$06) + 3)|0;
      $20 = (($fmt) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $c$0 = $21;$i$1 = $19;
      break;
     } else {
      HEAP8[$3>>0] = 100;
      HEAP8[$6>>0] = 0;
      $c$0 = $17;$i$1 = $15;
      break;
     }
    } else {
     $c$0 = $13;$i$1 = $9;
    }
   } while(0);
   L18: do {
    switch ($c$0<<24>>24) {
    case 115:  {
     $arglist_current = HEAP32[$var_args>>2]|0;
     $22 = $arglist_current;
     $23 = ((0) + 4|0);
     $expanded25 = $23;
     $expanded = (($expanded25) - 1)|0;
     $24 = (($22) + ($expanded))|0;
     $25 = ((0) + 4|0);
     $expanded29 = $25;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $26 = $24 & $expanded27;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $arglist_next = ((($27)) + 4|0);
     HEAP32[$var_args>>2] = $arglist_next;
     _lily_mb_add($msgbuf,$28);
     break;
    }
    case 100:  {
     $arglist_current2 = HEAP32[$var_args>>2]|0;
     $29 = $arglist_current2;
     $30 = ((0) + 4|0);
     $expanded32 = $30;
     $expanded31 = (($expanded32) - 1)|0;
     $31 = (($29) + ($expanded31))|0;
     $32 = ((0) + 4|0);
     $expanded36 = $32;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $33 = $31 & $expanded34;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $arglist_next3 = ((($34)) + 4|0);
     HEAP32[$var_args>>2] = $arglist_next3;
     $36 = HEAP8[$0>>0]|0;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      _lily_mb_add_int($msgbuf,$35);
      break L18;
     } else {
      HEAP32[$vararg_buffer>>2] = $35;
      (_snprintf($buffer,128,$modifier_buf,$vararg_buffer)|0);
      _lily_mb_add($msgbuf,$buffer);
      HEAP8[$0>>0] = 0;
      break L18;
     }
     break;
    }
    case 99:  {
     $arglist_current5 = HEAP32[$var_args>>2]|0;
     $38 = $arglist_current5;
     $39 = ((0) + 4|0);
     $expanded39 = $39;
     $expanded38 = (($expanded39) - 1)|0;
     $40 = (($38) + ($expanded38))|0;
     $41 = ((0) + 4|0);
     $expanded43 = $41;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $42 = $40 & $expanded41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $arglist_next6 = ((($43)) + 4|0);
     HEAP32[$var_args>>2] = $arglist_next6;
     $45 = $44&255;
     _lily_mb_add_char($msgbuf,$45);
     break;
    }
    case 112:  {
     $arglist_current8 = HEAP32[$var_args>>2]|0;
     $46 = $arglist_current8;
     $47 = ((0) + 4|0);
     $expanded46 = $47;
     $expanded45 = (($expanded46) - 1)|0;
     $48 = (($46) + ($expanded45))|0;
     $49 = ((0) + 4|0);
     $expanded50 = $49;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $50 = $48 & $expanded48;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next9 = ((($51)) + 4|0);
     HEAP32[$var_args>>2] = $arglist_next9;
     HEAP32[$vararg_buffer10>>2] = $52;
     (_snprintf($buffer,128,8512,$vararg_buffer10)|0);
     _lily_mb_add($msgbuf,$buffer);
     break;
    }
    default: {
    }
    }
   } while(0);
   $53 = (($i$1) + 1)|0;
   $i$3$ph = $i$1;$text_start$2$ph = $53;
   break;
  }
  case 94:  {
   $54 = ($i$06|0)==($text_start$05|0);
   if (!($54)) {
    _lily_mb_add_range($msgbuf,$fmt,$text_start$05,$i$06);
   }
   $55 = (($i$06) + 1)|0;
   $56 = (($fmt) + ($55)|0);
   $57 = HEAP8[$56>>0]|0;
   switch ($57<<24>>24) {
   case 84:  {
    $arglist_current14 = HEAP32[$var_args>>2]|0;
    $58 = $arglist_current14;
    $59 = ((0) + 4|0);
    $expanded53 = $59;
    $expanded52 = (($expanded53) - 1)|0;
    $60 = (($58) + ($expanded52))|0;
    $61 = ((0) + 4|0);
    $expanded57 = $61;
    $expanded56 = (($expanded57) - 1)|0;
    $expanded55 = $expanded56 ^ -1;
    $62 = $60 & $expanded55;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $arglist_next15 = ((($63)) + 4|0);
    HEAP32[$var_args>>2] = $arglist_next15;
    _add_type($msgbuf,$64);
    break;
   }
   case 73:  {
    $arglist_current17 = HEAP32[$var_args>>2]|0;
    $65 = $arglist_current17;
    $66 = ((0) + 4|0);
    $expanded60 = $66;
    $expanded59 = (($expanded60) - 1)|0;
    $67 = (($65) + ($expanded59))|0;
    $68 = ((0) + 4|0);
    $expanded64 = $68;
    $expanded63 = (($expanded64) - 1)|0;
    $expanded62 = $expanded63 ^ -1;
    $69 = $67 & $expanded62;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $arglist_next18 = ((($70)) + 4|0);
    HEAP32[$var_args>>2] = $arglist_next18;
    _msgbuf_add_indent($msgbuf,$71);
    break;
   }
   case 69:  {
    $arglist_current20 = HEAP32[$var_args>>2]|0;
    $72 = $arglist_current20;
    $73 = ((0) + 4|0);
    $expanded67 = $73;
    $expanded66 = (($expanded67) - 1)|0;
    $74 = (($72) + ($expanded66))|0;
    $75 = ((0) + 4|0);
    $expanded71 = $75;
    $expanded70 = (($expanded71) - 1)|0;
    $expanded69 = $expanded70 ^ -1;
    $76 = $74 & $expanded69;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $arglist_next21 = ((($77)) + 4|0);
    HEAP32[$var_args>>2] = $arglist_next21;
    _lily_mb_escape_add_str($msgbuf,$78);
    break;
   }
   case 82:  {
    $arglist_current23 = HEAP32[$var_args>>2]|0;
    $79 = $arglist_current23;
    $80 = ((0) + 4|0);
    $expanded74 = $80;
    $expanded73 = (($expanded74) - 1)|0;
    $81 = (($79) + ($expanded73))|0;
    $82 = ((0) + 4|0);
    $expanded78 = $82;
    $expanded77 = (($expanded78) - 1)|0;
    $expanded76 = $expanded77 ^ -1;
    $83 = $81 & $expanded76;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $arglist_next24 = ((($84)) + 4|0);
    HEAP32[$var_args>>2] = $arglist_next24;
    _msgbuf_add_errno_string($msgbuf,$85);
    break;
   }
   default: {
   }
   }
   $86 = (($i$06) + 2)|0;
   $i$3$ph = $55;$text_start$2$ph = $86;
   break;
  }
  default: {
   $i$3$ph = $i$06;$text_start$2$ph = $text_start$05;
  }
  }
  $87 = (($i$3$ph) + 1)|0;
  $88 = ($87|0)<($1|0);
  if ($88) {
   $i$06 = $87;$text_start$05 = $text_start$2$ph;
  } else {
   $i$0$lcssa = $87;$text_start$0$lcssa = $text_start$2$ph;
   break;
  }
 }
 $89 = ($i$0$lcssa|0)==($text_start$0$lcssa|0);
 if ($89) {
  STACKTOP = sp;return;
 }
 _lily_mb_add_range($msgbuf,$fmt,$text_start$0$lcssa,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _add_type($msgbuf,$type) {
 $msgbuf = $msgbuf|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $ch$03 = 0, $i$04 = 0, $i1$0$lcssa = 0, $i1$02 = 0, $i2$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($type)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_mb_add($msgbuf,$3);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(7);
 if (!($7)) {
  $53 = ((($4)) + 46|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   return;
  }
  $56 = ($6<<16>>16)==(-4);
  if (!($56)) {
   _lily_mb_add($msgbuf,10526);
  }
  $57 = ((($type)) + 10|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = ($58<<16>>16)==(0);
  if (!($59)) {
   $60 = ((($type)) + 16|0);
   $i2$08 = 0;
   while(1) {
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($i2$08<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    _add_type($msgbuf,$63);
    $64 = HEAP16[$57>>1]|0;
    $65 = $64&65535;
    $66 = (($65) + -1)|0;
    $67 = ($i2$08|0)==($66|0);
    if (!($67)) {
     _lily_mb_add($msgbuf,8515);
    }
    $68 = (($i2$08) + 1)|0;
    $69 = HEAP16[$57>>1]|0;
    $70 = $69&65535;
    $71 = ($68|0)<($70|0);
    if ($71) {
     $i2$08 = $68;
    } else {
     break;
    }
   }
  }
  if ($56) {
   return;
  }
  _lily_mb_add($msgbuf,10606);
  return;
 }
 $8 = ((($type)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  _lily_mb_add($msgbuf,8521);
 } else {
  _lily_mb_add($msgbuf,10526);
  $11 = HEAP16[$8>>1]|0;
  $12 = ($11&65535)>(1);
  _lily_mb_add_char($msgbuf,65);
  if ($12) {
   $ch$03 = 65;$i$04 = 0;
   while(1) {
    _lily_mb_add($msgbuf,8515);
    $13 = (($i$04) + 1)|0;
    $14 = (($ch$03) + 1)<<24>>24;
    $15 = HEAP16[$8>>1]|0;
    $16 = $15&65535;
    $17 = (($16) + -1)|0;
    $18 = ($13|0)<($17|0);
    _lily_mb_add_char($msgbuf,$14);
    if ($18) {
     $ch$03 = $14;$i$04 = $13;
    } else {
     break;
    }
   }
  }
  _lily_mb_add($msgbuf,8518);
 }
 $19 = ((($type)) + 10|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20&65535)>(1);
 do {
  if ($21) {
   $22 = HEAP16[$19>>1]|0;
   $23 = $22&65535;
   $24 = (($23) + -1)|0;
   $25 = ($24|0)>(1);
   if ($25) {
    $26 = ((($type)) + 16|0);
    $i1$02 = 1;
    while(1) {
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + ($i1$02<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     _add_type($msgbuf,$29);
     _lily_mb_add($msgbuf,8515);
     $30 = (($i1$02) + 1)|0;
     $31 = HEAP16[$19>>1]|0;
     $32 = $31&65535;
     $33 = (($32) + -1)|0;
     $34 = ($30|0)<($33|0);
     if ($34) {
      $i1$02 = $30;
     } else {
      $i1$0$lcssa = $30;
      break;
     }
    }
   } else {
    $i1$0$lcssa = 1;
   }
   $35 = ((($type)) + 6|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36 & 512;
   $38 = ($37<<16>>16)==(0);
   $39 = ((($type)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($i1$0$lcssa<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   if ($38) {
    _add_type($msgbuf,$42);
    break;
   } else {
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    _add_type($msgbuf,$45);
    _lily_mb_add($msgbuf,10720);
    break;
   }
  }
 } while(0);
 $46 = ((($type)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[442]|0;
 $50 = ($48|0)==($49|0);
 if (!($50)) {
  _lily_mb_add($msgbuf,8524);
  $51 = HEAP32[$46>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  _add_type($msgbuf,$52);
  _lily_mb_add($msgbuf,10520);
  return;
 }
 _lily_mb_add($msgbuf,10520);
 return;
}
function _msgbuf_add_indent($msgbuf,$indent) {
 $msgbuf = $msgbuf|0;
 $indent = $indent|0;
 var $0 = 0, $1 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($indent|0)>(0);
 if ($0) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  _lily_mb_add($msgbuf,8529);
  $1 = (($i$01) + 1)|0;
  $exitcond = ($1|0)==($indent|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $1;
  }
 }
 return;
}
function _msgbuf_add_errno_string($msgbuf,$errno_val) {
 $msgbuf = $msgbuf|0;
 $errno_val = $errno_val|0;
 var $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $buffer = sp;
 (_strerror_r($errno_val,$buffer,128)|0);
 _lily_mb_add($msgbuf,$buffer);
 STACKTOP = sp;return;
}
function _lily_mb_add_fmt($msgbuf,$fmt,$varargs) {
 $msgbuf = $msgbuf|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $var_args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $var_args = sp;
 HEAP32[$var_args>>2] = $varargs;
 _lily_mb_add_fmt_va($msgbuf,$fmt,$var_args);
 STACKTOP = sp;return;
}
function _lily_mb_sprintf($msgbuf,$fmt,$varargs) {
 $msgbuf = $msgbuf|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $var_args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $var_args = sp;
 _lily_mb_flush($msgbuf);
 HEAP32[$var_args>>2] = $varargs;
 _lily_mb_add_fmt_va($msgbuf,$fmt,$var_args);
 $0 = HEAP32[$msgbuf>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _lily_mb_add_value($msgbuf,$vm,$value) {
 $msgbuf = $msgbuf|0;
 $vm = $vm|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$value>>1]|0;
 $1 = ($0<<16>>16)==(3);
 if ($1) {
  $2 = ((($value)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_mb_add($msgbuf,$5);
  return;
 } else {
  _add_value_to_msgbuf($vm,$msgbuf,0,$value);
  return;
 }
}
function _add_value_to_msgbuf($vm,$msgbuf,$t,$v) {
 $vm = $vm|0;
 $msgbuf = $msgbuf|0;
 $t = $t|0;
 $v = $v|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $class_name$0 = 0, $elem$0$pr = 0, $elem$02 = 0, $elem$03 = 0, $new_tag = 0, $separator$0 = 0, $tag_iter$04 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $new_tag = sp;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 65536;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$1 = $t;
  } else {
   $3 = ($t|0)==(0|0);
   if ($3) {
    $$1 = $new_tag;
   } else {
    $4 = ((($v)) + 8|0);
    $tag_iter$04 = $t;
    while(1) {
     $5 = ((($tag_iter$04)) + 8|0);
     $6 = (_memcmp($5,$4,8)|0);
     $7 = ($6|0)==(0);
     if ($7) {
      break;
     }
     $8 = HEAP32[$tag_iter$04>>2]|0;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $$1 = $new_tag;
      break L1;
     } else {
      $tag_iter$04 = $8;
     }
    }
    _lily_mb_add($msgbuf,8535);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $10 = HEAP16[$v>>1]|0;
 $11 = $10&65535;
 do {
  switch ($10<<16>>16) {
  case 6:  {
   $12 = ((($v)) + 8|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   _lily_mb_add_boolean($msgbuf,$15);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $19 = ((($v)) + 8|0);
   $20 = $19;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   _lily_mb_add_int($msgbuf,$22);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $26 = ((($v)) + 8|0);
   $27 = $26;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = $29&255;
   _lily_mb_add_byte($msgbuf,$33);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $34 = ((($v)) + 8|0);
   $35 = +HEAPF64[$34>>3];
   _lily_mb_add_double($msgbuf,$35);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $36 = ((($v)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer>>2] = $39;
   _lily_mb_add_fmt($msgbuf,9286,$vararg_buffer);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $40 = ((($v)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($41)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   _lily_mb_add_bytestring($msgbuf,$43,$45);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $46 = ((($v)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 36|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   $$ = $50 ? 8541 : 18083;
   $51 = ((($47)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   $separator$0 = $53 ? 18083 : 17513;
   $class_name$0 = $53 ? 18083 : $52;
   $54 = ((($47)) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $$;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $class_name$0;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $separator$0;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $55;
   _lily_mb_add_fmt($msgbuf,8551,$vararg_buffer1);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $56 = ((($v)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   _add_value_to_msgbuf($vm,$msgbuf,$$1,$59);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   _add_list_like($vm,$msgbuf,$$1,$v,10526,10606);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   _add_list_like($vm,$msgbuf,$$1,$v,10600,10603);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $60 = ((($v)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   _lily_mb_add_char($msgbuf,91);
   $62 = ((($61)) + 16|0);
   $elem$02 = HEAP32[$62>>2]|0;
   $63 = ($elem$02|0)==(0|0);
   L44: do {
    if (!($63)) {
     $elem$03 = $elem$02;
     while(1) {
      $64 = ((($elem$03)) + 8|0);
      $65 = HEAP32[$64>>2]|0;
      _add_value_to_msgbuf($vm,$msgbuf,$$1,$65);
      _lily_mb_add($msgbuf,8524);
      $66 = ((($elem$03)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      _add_value_to_msgbuf($vm,$msgbuf,$$1,$67);
      $68 = ((($elem$03)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break L44;
      }
      _lily_mb_add($msgbuf,8515);
      $elem$0$pr = HEAP32[$68>>2]|0;
      $71 = ($elem$0$pr|0)==(0|0);
      if ($71) {
       break;
      } else {
       $elem$03 = $elem$0$pr;
      }
     }
    }
   } while(0);
   _lily_mb_add_char($msgbuf,93);
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   _lily_mb_add($msgbuf,8571);
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $72 = ((($v)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)!=(0|0);
   $77 = $76 ? 8576 : 8581;
   HEAP32[$vararg_buffer7>>2] = $77;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $73;
   _lily_mb_add_fmt($msgbuf,8588,$vararg_buffer7);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $78 = HEAP32[$v>>2]|0;
   $79 = $78 & 2097152;
   $80 = ($79|0)==(0);
   if ($80) {
    $98 = ((($vm)) + 32|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($11<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($101)) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($v)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$vararg_buffer11>>2] = 18083;
    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = 18083;
    $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr15>>2] = $103;
    $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
    HEAP32[$vararg_ptr16>>2] = $105;
    _lily_mb_add_fmt($msgbuf,8604,$vararg_buffer11);
    STACKTOP = sp;return;
   }
   $81 = ((($v)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($vm)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($11<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 32|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($88)) + 6|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 & 8;
   $92 = ($91<<16>>16)==(0);
   if (!($92)) {
    $93 = ((($88)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    _lily_mb_add($msgbuf,$94);
    _lily_mb_add_char($msgbuf,46);
   }
   $95 = ((($86)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   _lily_mb_add($msgbuf,$96);
   $97 = ($82|0)==(0|0);
   if ($97) {
    STACKTOP = sp;return;
   }
   _add_list_like($vm,$msgbuf,$$1,$v,10518,10520);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _add_list_like($vm,$msgbuf,$t,$v,$prefix,$suffix) {
 $vm = $vm|0;
 $msgbuf = $msgbuf|0;
 $t = $t|0;
 $v = $v|0;
 $prefix = $prefix|0;
 $suffix = $suffix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0;
 var $count$0$in = 0, $exitcond = 0, $i$0$lcssa2 = 0, $i$01 = 0, $values$0 = 0, $values$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$v>>1]|0;
 switch ($0<<16>>16) {
 case 11: case 9:  {
  $1 = ((($v)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 16|0);
  $4 = ((($2)) + 8|0);
  $count$0$in = $4;$values$0$in = $3;
  break;
 }
 default: {
  $5 = ((($v)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = ((($6)) + 8|0);
  $count$0$in = $8;$values$0$in = $7;
 }
 }
 $values$0 = HEAP32[$values$0$in>>2]|0;
 $count$0 = HEAP32[$count$0$in>>2]|0;
 _lily_mb_add($msgbuf,$prefix);
 $9 = ($count$0|0)==(0);
 if ($9) {
  _lily_mb_add($msgbuf,$suffix);
  return;
 }
 $10 = (($count$0) + -1)|0;
 $11 = ($count$0|0)>(1);
 if ($11) {
  $12 = (($count$0) + -1)|0;
  $i$01 = 0;
  while(1) {
   $13 = (($values$0) + ($i$01<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   _add_value_to_msgbuf($vm,$msgbuf,$t,$14);
   _lily_mb_add($msgbuf,8515);
   $15 = (($i$01) + 1)|0;
   $exitcond = ($15|0)==($12|0);
   if ($exitcond) {
    $i$0$lcssa2 = $10;
    break;
   } else {
    $i$01 = $15;
   }
  }
 } else {
  $16 = ($count$0|0)==(0);
  if ($16) {
   _lily_mb_add($msgbuf,$suffix);
   return;
  } else {
   $i$0$lcssa2 = 0;
  }
 }
 $17 = (($values$0) + ($i$0$lcssa2<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 _add_value_to_msgbuf($vm,$msgbuf,$t,$18);
 _lily_mb_add($msgbuf,$suffix);
 return;
}
function _lily_sys_loader($o,$c,$id) {
 $o = $o|0;
 $c = $c|0;
 $id = $id|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($id|0) {
 case 1:  {
  $$0 = 5;
  break;
 }
 case 2:  {
  $0 = (_load_var_argv($o)|0);
  $$0 = $0;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _load_var_argv($options) {
 $options = $options|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($options)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_list_val_n($1)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $13 = (_lily_new_value_of_list($2)|0);
  return ($13|0);
 }
 $5 = ((($options)) + 20|0);
 $i$01 = 0;
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_new_raw_string($8)|0);
  _lily_list_set_string($2,$i$01,$9);
  $10 = (($i$01) + 1)|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $i$01 = $10;
  } else {
   break;
  }
 }
 $13 = (_lily_new_value_of_list($2)|0);
 return ($13|0);
}
function _lily_sys_getenv($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string_raw($s,0)|0);
 $1 = (_getenv(($0|0))|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _lily_return_empty_variant($s,15);
  return;
 } else {
  $3 = (_lily_new_enum_n(1)|0);
  $4 = (_lily_new_raw_string($1)|0);
  _lily_variant_set_string($3,0,$4);
  _lily_return_filled_variant($s,14,$3);
  return;
 }
}
function _lily_pkg_sys_init($s,$options) {
 $s = $s|0;
 $options = $options|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_register_package($s,8672,1472,6);
 return;
}
function _lily_malloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort();
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function _lily_realloc($ptr,$new_size) {
 $ptr = $ptr|0;
 $new_size = $new_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($ptr,$new_size)|0);
 return ($0|0);
}
function _lily_free($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function _lily_ci_init($iter,$buffer,$start,$stop) {
 $iter = $iter|0;
 $buffer = $buffer|0;
 $start = $start|0;
 $stop = $stop|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$iter>>2] = $buffer;
 $0 = ((($iter)) + 6|0);
 HEAP16[$0>>1] = $stop;
 $1 = ((($iter)) + 4|0);
 HEAP16[$1>>1] = $start;
 $2 = ((($iter)) + 8|0);
 HEAP16[$2>>1] = 0;
 return;
}
function _lily_ci_next($iter) {
 $iter = $iter|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($iter)) + 8|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($iter)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5) + ($2))|0;
 $7 = $6&65535;
 HEAP16[$3>>1] = $7;
 $8 = ((($iter)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==($7<<16>>16);
 if ($10) {
  $$1 = 0;
  return ($$1|0);
 }
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $11 = HEAP32[$iter>>2]|0;
 $12 = HEAP16[$3>>1]|0;
 $13 = $12&65535;
 $14 = (($11) + ($13<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($iter)) + 10|0);
 HEAP16[$16>>1] = $15;
 $17 = HEAP16[$14>>1]|0;
 $18 = $17&65535;
 do {
  switch ($18|0) {
  case 1: case 0:  {
   $19 = ((($iter)) + 12|0);
   HEAP16[$19>>1] = 1;
   $20 = ((($iter)) + 18|0);
   HEAP16[$20>>1] = 1;
   $21 = ((($iter)) + 22|0);
   HEAP16[$21>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2:  {
   $22 = ((($iter)) + 12|0);
   HEAP16[$22>>1] = 1;
   $23 = ((($iter)) + 18|0);
   HEAP16[$23>>1] = 2;
   $24 = ((($iter)) + 22|0);
   HEAP16[$24>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 24:  {
   $25 = ((($iter)) + 26|0);
   HEAP16[$25>>1] = 1;
   HEAP16[$0>>1] = 2;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 25:  {
   $26 = ((($iter)) + 14|0);
   HEAP16[$26>>1] = 1;
   $27 = ((($iter)) + 18|0);
   HEAP16[$27>>1] = 1;
   $28 = ((($iter)) + 26|0);
   HEAP16[$28>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 30: case 28: case 29:  {
   $29 = ((($iter)) + 12|0);
   HEAP16[$29>>1] = 1;
   $30 = ((($iter)) + 14|0);
   HEAP16[$30>>1] = 1;
   $31 = ((($iter)) + 16|0);
   HEAP16[$31>>1] = 1;
   $32 = ((($iter)) + 22|0);
   HEAP16[$32>>1] = 1;
   $33 = ((($14)) + 6|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ((($iter)) + 24|0);
   HEAP16[$35>>1] = $34;
   $36 = HEAP16[$33>>1]|0;
   $37 = $36&65535;
   $38 = (($37) + 5)|0;
   $39 = $38&65535;
   HEAP16[$0>>1] = $39;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 31:  {
   $40 = ((($iter)) + 12|0);
   HEAP16[$40>>1] = 1;
   $41 = ((($iter)) + 18|0);
   HEAP16[$41>>1] = 1;
   HEAP16[$0>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 32:  {
   $42 = ((($iter)) + 12|0);
   HEAP16[$42>>1] = 1;
   HEAP16[$0>>1] = 2;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 23: case 22:  {
   $43 = ((($iter)) + 12|0);
   HEAP16[$43>>1] = 1;
   $44 = ((($iter)) + 18|0);
   HEAP16[$44>>1] = 1;
   $45 = ((($iter)) + 22|0);
   HEAP16[$45>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 35: case 34: case 33:  {
   $46 = ((($iter)) + 12|0);
   HEAP16[$46>>1] = 1;
   $47 = ((($iter)) + 16|0);
   HEAP16[$47>>1] = 1;
   $48 = ((($14)) + 4|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = ((($iter)) + 18|0);
   HEAP16[$50>>1] = $49;
   $51 = ((($iter)) + 22|0);
   HEAP16[$51>>1] = 1;
   $52 = HEAP16[$48>>1]|0;
   $53 = $52&65535;
   $54 = (($53) + 4)|0;
   $55 = $54&65535;
   HEAP16[$0>>1] = $55;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 36:  {
   $56 = ((($iter)) + 12|0);
   HEAP16[$56>>1] = 1;
   $57 = ((($iter)) + 14|0);
   HEAP16[$57>>1] = 1;
   $58 = ((($iter)) + 16|0);
   HEAP16[$58>>1] = 1;
   $59 = ((($14)) + 6|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = ((($iter)) + 18|0);
   HEAP16[$61>>1] = $60;
   $62 = ((($iter)) + 22|0);
   HEAP16[$62>>1] = 1;
   $63 = HEAP16[$59>>1]|0;
   $64 = $63&65535;
   $65 = (($64) + 5)|0;
   $66 = $65&65535;
   HEAP16[$0>>1] = $66;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 64:  {
   $67 = ((($iter)) + 12|0);
   HEAP16[$67>>1] = 1;
   $68 = ((($iter)) + 14|0);
   HEAP16[$68>>1] = 1;
   $69 = ((($iter)) + 18|0);
   HEAP16[$69>>1] = 1;
   $70 = ((($iter)) + 22|0);
   HEAP16[$70>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 26:  {
   $71 = ((($iter)) + 12|0);
   HEAP16[$71>>1] = 1;
   $72 = ((($iter)) + 18|0);
   HEAP16[$72>>1] = 3;
   $73 = ((($iter)) + 22|0);
   HEAP16[$73>>1] = 1;
   $74 = ((($iter)) + 26|0);
   HEAP16[$74>>1] = 1;
   HEAP16[$0>>1] = 7;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 27:  {
   $75 = ((($iter)) + 12|0);
   HEAP16[$75>>1] = 1;
   $76 = ((($iter)) + 18|0);
   HEAP16[$76>>1] = 3;
   $77 = ((($iter)) + 22|0);
   HEAP16[$77>>1] = 1;
   HEAP16[$0>>1] = 6;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 37:  {
   $78 = ((($iter)) + 12|0);
   HEAP16[$78>>1] = 1;
   $79 = ((($iter)) + 18|0);
   HEAP16[$79>>1] = 2;
   $80 = ((($iter)) + 22|0);
   HEAP16[$80>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 38:  {
   $81 = ((($iter)) + 12|0);
   HEAP16[$81>>1] = 1;
   $82 = ((($iter)) + 18|0);
   HEAP16[$82>>1] = 3;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 40:  {
   $83 = ((($iter)) + 12|0);
   HEAP16[$83>>1] = 1;
   $84 = ((($iter)) + 14|0);
   HEAP16[$84>>1] = 1;
   $85 = ((($iter)) + 18|0);
   HEAP16[$85>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 44: case 43: case 42: case 41: case 39:  {
   $86 = ((($iter)) + 12|0);
   HEAP16[$86>>1] = 1;
   $87 = ((($iter)) + 14|0);
   HEAP16[$87>>1] = 1;
   $88 = ((($iter)) + 22|0);
   HEAP16[$88>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 45:  {
   $89 = ((($iter)) + 12|0);
   HEAP16[$89>>1] = 1;
   $90 = ((($iter)) + 14|0);
   HEAP16[$90>>1] = 1;
   $91 = ((($iter)) + 22|0);
   HEAP16[$91>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 49:  {
   $92 = ((($iter)) + 12|0);
   HEAP16[$92>>1] = 1;
   $93 = ((($iter)) + 14|0);
   HEAP16[$93>>1] = 1;
   $94 = ((($iter)) + 18|0);
   HEAP16[$94>>1] = 1;
   $95 = ((($iter)) + 22|0);
   HEAP16[$95>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 50:  {
   $96 = ((($iter)) + 12|0);
   HEAP16[$96>>1] = 1;
   $97 = ((($iter)) + 14|0);
   HEAP16[$97>>1] = 1;
   $98 = ((($iter)) + 18|0);
   HEAP16[$98>>1] = 2;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 51:  {
   $99 = ((($iter)) + 12|0);
   HEAP16[$99>>1] = 1;
   $100 = ((($iter)) + 26|0);
   HEAP16[$100>>1] = 1;
   HEAP16[$0>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 67: case 52:  {
   HEAP16[$0>>1] = 1;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 54:  {
   $101 = ((($iter)) + 12|0);
   HEAP16[$101>>1] = 1;
   $102 = ((($iter)) + 14|0);
   HEAP16[$102>>1] = 1;
   $103 = ((($iter)) + 22|0);
   HEAP16[$103>>1] = 1;
   $104 = ((($iter)) + 26|0);
   HEAP16[$104>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 53:  {
   $105 = ((($iter)) + 12|0);
   HEAP16[$105>>1] = 1;
   $106 = ((($iter)) + 14|0);
   HEAP16[$106>>1] = 1;
   $107 = ((($iter)) + 24|0);
   HEAP16[$107>>1] = 1;
   $108 = ((($iter)) + 26|0);
   HEAP16[$108>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 55:  {
   $109 = ((($iter)) + 12|0);
   HEAP16[$109>>1] = 1;
   $110 = ((($iter)) + 18|0);
   HEAP16[$110>>1] = 1;
   HEAP16[$0>>1] = 3;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 48: case 47: case 46:  {
   $111 = ((($iter)) + 12|0);
   HEAP16[$111>>1] = 1;
   $112 = ((($iter)) + 14|0);
   HEAP16[$112>>1] = 1;
   $113 = ((($iter)) + 22|0);
   HEAP16[$113>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 66:  {
   $114 = ((($iter)) + 14|0);
   HEAP16[$114>>1] = 1;
   $115 = ((($iter)) + 16|0);
   HEAP16[$115>>1] = 1;
   $116 = ((($14)) + 4|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = ((($iter)) + 26|0);
   HEAP16[$118>>1] = $117;
   $119 = HEAP16[$116>>1]|0;
   $120 = $119&65535;
   $121 = (($120) + 3)|0;
   $122 = $121&65535;
   HEAP16[$0>>1] = $122;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 56:  {
   $123 = ((($iter)) + 12|0);
   HEAP16[$123>>1] = 1;
   $124 = ((($iter)) + 14|0);
   HEAP16[$124>>1] = 2;
   $125 = ((($iter)) + 16|0);
   HEAP16[$125>>1] = 1;
   $126 = ((($14)) + 8|0);
   $127 = HEAP16[$126>>1]|0;
   $128 = ((($iter)) + 26|0);
   HEAP16[$128>>1] = $127;
   $129 = HEAP16[$126>>1]|0;
   $130 = $129&65535;
   $131 = (($130) + 5)|0;
   $132 = $131&65535;
   HEAP16[$0>>1] = $132;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 57:  {
   $133 = ((($iter)) + 12|0);
   HEAP16[$133>>1] = 1;
   $134 = ((($iter)) + 14|0);
   HEAP16[$134>>1] = 1;
   $135 = ((($iter)) + 16|0);
   HEAP16[$135>>1] = 1;
   $136 = ((($14)) + 6|0);
   $137 = HEAP16[$136>>1]|0;
   $138 = ((($iter)) + 22|0);
   HEAP16[$138>>1] = $137;
   $139 = HEAP16[$136>>1]|0;
   $140 = $139&65535;
   $141 = (($140) + 4)|0;
   $142 = $141&65535;
   HEAP16[$0>>1] = $142;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 58:  {
   $143 = ((($iter)) + 12|0);
   HEAP16[$143>>1] = 1;
   $144 = ((($iter)) + 14|0);
   HEAP16[$144>>1] = 1;
   $145 = ((($iter)) + 22|0);
   HEAP16[$145>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 59:  {
   $146 = ((($iter)) + 12|0);
   HEAP16[$146>>1] = 1;
   $147 = ((($iter)) + 14|0);
   HEAP16[$147>>1] = 1;
   $148 = ((($iter)) + 18|0);
   HEAP16[$148>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 60:  {
   $149 = ((($iter)) + 12|0);
   HEAP16[$149>>1] = 1;
   $150 = ((($iter)) + 14|0);
   HEAP16[$150>>1] = 1;
   $151 = ((($iter)) + 22|0);
   HEAP16[$151>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 61:  {
   $152 = ((($iter)) + 14|0);
   HEAP16[$152>>1] = 1;
   $153 = ((($iter)) + 20|0);
   HEAP16[$153>>1] = 1;
   $154 = ((($iter)) + 22|0);
   HEAP16[$154>>1] = 1;
   HEAP16[$0>>1] = 4;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 62:  {
   $155 = ((($iter)) + 12|0);
   HEAP16[$155>>1] = 1;
   $156 = ((($iter)) + 14|0);
   HEAP16[$156>>1] = 1;
   $157 = ((($iter)) + 18|0);
   HEAP16[$157>>1] = 1;
   $158 = ((($iter)) + 22|0);
   HEAP16[$158>>1] = 1;
   HEAP16[$0>>1] = 5;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 63:  {
   $159 = ((($iter)) + 12|0);
   HEAP16[$159>>1] = 1;
   $160 = ((($iter)) + 16|0);
   HEAP16[$160>>1] = 1;
   $161 = ((($14)) + 4|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = ((($iter)) + 20|0);
   HEAP16[$163>>1] = $162;
   $164 = ((($iter)) + 22|0);
   HEAP16[$164>>1] = 1;
   $165 = HEAP16[$161>>1]|0;
   $166 = $165&65535;
   $167 = (($166) + 4)|0;
   $168 = $167&65535;
   HEAP16[$0>>1] = $168;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  case 65:  {
   $169 = ((($iter)) + 12|0);
   HEAP16[$169>>1] = 1;
   $170 = ((($iter)) + 16|0);
   HEAP16[$170>>1] = 1;
   $171 = ((($14)) + 4|0);
   $172 = HEAP16[$171>>1]|0;
   $173 = ((($iter)) + 18|0);
   HEAP16[$173>>1] = $172;
   $174 = ((($iter)) + 22|0);
   HEAP16[$174>>1] = 1;
   $175 = HEAP16[$171>>1]|0;
   $176 = $175&65535;
   $177 = (($176) + 4)|0;
   $178 = $177&65535;
   HEAP16[$0>>1] = $178;
   $$1 = 1;
   return ($$1|0);
   break;
  }
  default: {
   $$1 = 0;
   return ($$1|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _decode($state,$codep,$byte) {
 $state = $state|0;
 $codep = $codep|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (8676 + ($byte)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = HEAP32[$state>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $9 = 255 >>> $2;
  $10 = $9 & $byte;
  $11 = $10;
 } else {
  $5 = $byte & 63;
  $6 = HEAP32[$codep>>2]|0;
  $7 = $6 << 6;
  $8 = $7 | $5;
  $11 = $8;
 }
 HEAP32[$codep>>2] = $11;
 $12 = HEAP32[$state>>2]|0;
 $13 = $12 << 4;
 $14 = $2 | 256;
 $15 = (($14) + ($13))|0;
 $16 = (8676 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 HEAP32[$state>>2] = $18;
 return ($18|0);
}
function _lily_is_valid_utf8($input) {
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codepoint = 0, $s$01 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $codepoint = sp + 4|0;
 $state = sp;
 HEAP32[$state>>2] = 0;
 $0 = HEAP8[$input>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if (!($1)) {
   $6 = $0;$s$01 = $input;
   while(1) {
    $5 = $6&255;
    $7 = (_decode($state,$codepoint,$5)|0);
    $8 = ($7|0)==(1);
    $3 = ((($s$01)) + 1|0);
    if ($8) {
     break L1;
    }
    $2 = HEAP8[$3>>0]|0;
    $4 = ($2<<24>>24)==(0);
    if ($4) {
     break;
    } else {
     $6 = $2;$s$01 = $3;
    }
   }
  }
 } while(0);
 $9 = HEAP32[$state>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $10&1;
 STACKTOP = sp;return ($11|0);
}
function _lily_is_valid_sized_utf8($input,$size) {
 $input = $input|0;
 $size = $size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codepoint = 0, $s$0$lcssa = 0, $s$01 = 0, $state = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $codepoint = sp + 4|0;
 $state = sp;
 $0 = (($input) + ($size)|0);
 HEAP32[$state>>2] = 0;
 $1 = HEAP8[$input>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $s$0$lcssa = $input;
  } else {
   $4 = $1;$s$01 = $input;
   while(1) {
    $3 = $4&255;
    $5 = (_decode($state,$codepoint,$3)|0);
    $6 = ($5|0)==(1);
    if ($6) {
     $s$0$lcssa = $s$01;
     break L1;
    }
    $7 = ((($s$01)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $s$0$lcssa = $7;
     break;
    } else {
     $4 = $8;$s$01 = $7;
    }
   }
  }
 } while(0);
 $10 = HEAP32[$state>>2]|0;
 $11 = ($10|0)==(0);
 $12 = ($s$0$lcssa|0)==($0|0);
 $$ = $12 & $11;
 $13 = $$&1;
 STACKTOP = sp;return ($13|0);
}
function _lily_new_vm_state($options,$raiser) {
 $options = $options|0;
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(104)|0);
 $1 = ((($options)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 96|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($options)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 56|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($options)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ((($0)) + 64|0);
 $10 = ($8&255)<(16);
 $11 = $10 ? $8 : 16;
 $12 = $11&255;
 HEAP32[$9>>2] = $12;
 $13 = ((($options)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 68|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 92|0);
 HEAP32[$17>>2] = $raiser;
 $18 = ((($0)) + 60|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 72|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 88|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($0)) + 24|0);
 $22 = ((($0)) + 100|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($0)) + 76|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($0)) + 20|0);
 HEAP16[$24>>1] = 0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;HEAP32[$21+16>>2]=0|0;HEAP32[$21+20>>2]=0|0;HEAP32[$21+24>>2]=0|0;HEAP32[$21+28>>2]=0|0;
 _add_call_frame($0);
 $25 = (_lily_malloc(32)|0);
 $26 = ((($25)) + 28|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($25)) + 24|0);
 HEAP32[$27>>2] = 0;
 HEAP32[$19>>2] = $25;
 return ($0|0);
}
function _add_call_frame($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(40)|0);
 $1 = ((($vm)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$1>>2] = $0;
  return;
 }
 $9 = ((($7)) + 36|0);
 HEAP32[$9>>2] = $0;
 HEAP32[$1>>2] = $0;
 return;
}
function _lily_free_vm($vm) {
 $vm = $vm|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $catch_iter$09 = 0;
 var $frame_iter$0 = 0, $frame_iter$0$lcssa = 0, $frame_iter$13 = 0, $i$0 = 0, $i$04 = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vm)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = HEAP32[$2>>2]|0;
   $6 = ((($5)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $9 = ($5|0)==(0|0);
    if ($9) {
     break;
    } else {
     $catch_iter$09 = $5;
    }
   } else {
    $11 = $7;
    while(1) {
     $10 = ((($11)) + 28|0);
     $12 = HEAP32[$10>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $$lcssa = $11;
      break;
     } else {
      $11 = $12;
     }
    }
    HEAP32[$2>>2] = $$lcssa;
    $catch_iter$09 = $$lcssa;
   }
   while(1) {
    $14 = ((($catch_iter$09)) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    _lily_free($catch_iter$09);
    $16 = ($15|0)==(0|0);
    if ($16) {
     break;
    } else {
     $catch_iter$09 = $15;
    }
   }
  }
 } while(0);
 $17 = ((($vm)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $i$04 = (($18) + -1)|0;
 $19 = ($i$04|0)>(-1);
 if ($19) {
  $i$05 = $i$04;
  while(1) {
   $20 = (($1) + ($i$05<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   _lily_deref($21);
   _lily_free($21);
   $i$0 = (($i$05) + -1)|0;
   $22 = ($i$0|0)>(-1);
   if ($22) {
    $i$05 = $i$0;
   } else {
    break;
   }
  }
 }
 $23 = ((($vm)) + 12|0);
 HEAP32[$23>>2] = 0;
 HEAP32[$17>>2] = 0;
 _lily_free($1);
 $24 = ((($vm)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $frame_iter$0 = $25;
 while(1) {
  $26 = ((($frame_iter$0)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $frame_iter$0$lcssa = $frame_iter$0;
   break;
  } else {
   $frame_iter$0 = $27;
  }
 }
 $29 = ($frame_iter$0$lcssa|0)==(0|0);
 if (!($29)) {
  $frame_iter$13 = $frame_iter$0$lcssa;
  while(1) {
   $30 = ((($frame_iter$13)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   _lily_free($frame_iter$13);
   $32 = ($31|0)==(0|0);
   if ($32) {
    break;
   } else {
    $frame_iter$13 = $31;
   }
  }
 }
 $33 = ((($vm)) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  _destroy_gc_entries($vm);
  $36 = ((($vm)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  _lily_free($37);
  _lily_free($vm);
  return;
 }
 _invoke_gc($vm);
 _destroy_gc_entries($vm);
 $36 = ((($vm)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 _lily_free($37);
 _lily_free($vm);
 return;
}
function _invoke_gc($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $gc_iter$0 = 0, $gc_iter$011 = 0, $gc_iter$012 = 0, $gc_iter$11 = 0, $i$016 = 0, $i$17 = 0, $i$2$lcssa = 0, $i$22 = 0, $i$3 = 0, $new_live_entries$0$lcssa = 0, $new_live_entries$03 = 0, $new_live_entries$1 = 0, $new_spare_entries$0$lcssa = 0, $new_spare_entries$04 = 0, $new_spare_entries$1 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($vm)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($vm)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $i$016 = 0;
  while(1) {
   $8 = (($4) + ($i$016<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 196608;
   $12 = ($11|0)==(0);
   if (!($12)) {
    _gc_mark($2,$9);
   }
   $13 = (($i$016) + 1)|0;
   $14 = HEAP32[$5>>2]|0;
   $15 = ($13>>>0)<($14>>>0);
   if ($15) {
    $i$016 = $13;
   } else {
    break;
   }
  }
 }
 $16 = ((($vm)) + 44|0);
 $gc_iter$011 = HEAP32[$16>>2]|0;
 $17 = ($gc_iter$011|0)==(0|0);
 if (!($17)) {
  $gc_iter$012 = $gc_iter$011;
  while(1) {
   $18 = ((($gc_iter$012)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==($2|0);
   if (!($20)) {
    $21 = ((($gc_iter$012)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     HEAP32[$18>>2] = -1;
     _lily_destroy_value($gc_iter$012);
    }
   }
   $24 = ((($gc_iter$012)) + 16|0);
   $gc_iter$0 = HEAP32[$24>>2]|0;
   $25 = ($gc_iter$0|0)==(0|0);
   if ($25) {
    break;
   } else {
    $gc_iter$012 = $gc_iter$0;
   }
  }
 }
 $26 = HEAP32[$5>>2]|0;
 $27 = ((($vm)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26>>>0)<($28>>>0);
 if ($29) {
  $30 = HEAP32[110]|0;
  $i$17 = $26;
  while(1) {
   $31 = (($4) + ($i$17<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 65536;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = ((($32)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 20|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==($30|0);
    if ($40) {
     HEAP32[$32>>2] = 0;
    }
   }
   $41 = (($i$17) + 1)|0;
   $42 = HEAP32[$27>>2]|0;
   $43 = ($41>>>0)<($42>>>0);
   if ($43) {
    $i$17 = $41;
   } else {
    break;
   }
  }
 }
 $44 = ((($vm)) + 48|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$16>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $i$2$lcssa = 0;$new_live_entries$0$lcssa = 0;$new_spare_entries$0$lcssa = $45;
 } else {
  $gc_iter$11 = $46;$i$22 = 0;$new_live_entries$03 = 0;$new_spare_entries$04 = $45;
  while(1) {
   $48 = ((($gc_iter$11)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($gc_iter$11)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(-1);
   if ($52) {
    $53 = ((($gc_iter$11)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    _lily_free($54);
    $i$3 = $i$22;$new_live_entries$1 = $new_live_entries$03;$new_spare_entries$1 = $gc_iter$11;$storemerge = $new_spare_entries$04;
   } else {
    $55 = (($i$22) + 1)|0;
    $i$3 = $55;$new_live_entries$1 = $gc_iter$11;$new_spare_entries$1 = $new_spare_entries$04;$storemerge = $new_live_entries$03;
   }
   HEAP32[$48>>2] = $storemerge;
   $56 = ($49|0)==(0|0);
   if ($56) {
    $i$2$lcssa = $i$3;$new_live_entries$0$lcssa = $new_live_entries$1;$new_spare_entries$0$lcssa = $new_spare_entries$1;
    break;
   } else {
    $gc_iter$11 = $49;$i$22 = $i$3;$new_live_entries$03 = $new_live_entries$1;$new_spare_entries$04 = $new_spare_entries$1;
   }
  }
 }
 $57 = ((($vm)) + 56|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58>>>0)>($i$2$lcssa>>>0);
 if ($59) {
  $63 = ((($vm)) + 52|0);
  HEAP32[$63>>2] = $i$2$lcssa;
  HEAP32[$16>>2] = $new_live_entries$0$lcssa;
  HEAP32[$44>>2] = $new_spare_entries$0$lcssa;
  return;
 }
 $60 = ((($vm)) + 64|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = Math_imul($61, $58)|0;
 HEAP32[$57>>2] = $62;
 $63 = ((($vm)) + 52|0);
 HEAP32[$63>>2] = $i$2$lcssa;
 HEAP32[$16>>2] = $new_live_entries$0$lcssa;
 HEAP32[$44>>2] = $new_spare_entries$0$lcssa;
 return;
}
function _gc_mark($pass,$v) {
 $pass = $pass|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 196608;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = HEAP16[$v>>1]|0;
 $4 = $3 | 2;
 $5 = ($4<<16>>16)!=(11);
 $6 = $0 & 2359296;
 $7 = ($6|0)==(0);
 $or$cond = $7 & $5;
 if (!($or$cond)) {
  _list_marker($pass,$v);
  return;
 }
 switch ($3<<16>>16) {
 case 10:  {
  _hash_marker($pass,$v);
  return;
  break;
 }
 case 8:  {
  _dynamic_marker($pass,$v);
  return;
  break;
 }
 case 7:  {
  _function_marker($pass,$v);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _list_marker($pass,$v) {
 $pass = $pass|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 65536;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = ((($v)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($pass|0);
   if ($9) {
    return;
   } else {
    HEAP32[$7>>2] = $pass;
    break;
   }
  }
 } while(0);
 $10 = ((($v)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  return;
 }
 $15 = ((($11)) + 16|0);
 $i$01 = 0;
 while(1) {
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($i$01<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 196608;
  $21 = ($20|0)==(0);
  if (!($21)) {
   _gc_mark($pass,$18);
  }
  $22 = (($i$01) + 1)|0;
  $23 = HEAP32[$12>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $i$01 = $22;
  } else {
   break;
  }
 }
 return;
}
function _hash_marker($pass,$v) {
 $pass = $pass|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $elem_iter$0 = 0, $elem_iter$01 = 0, $elem_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $elem_iter$01 = HEAP32[$2>>2]|0;
 $3 = ($elem_iter$01|0)==(0|0);
 if ($3) {
  return;
 } else {
  $elem_iter$02 = $elem_iter$01;
 }
 while(1) {
  $4 = ((($elem_iter$02)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  _gc_mark($pass,$5);
  $6 = ((($elem_iter$02)) + 16|0);
  $elem_iter$0 = HEAP32[$6>>2]|0;
  $7 = ($elem_iter$0|0)==(0|0);
  if ($7) {
   break;
  } else {
   $elem_iter$02 = $elem_iter$0;
  }
 }
 return;
}
function _dynamic_marker($pass,$v) {
 $pass = $pass|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 65536;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = ((($v)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($pass|0);
   if ($9) {
    return;
   } else {
    HEAP32[$7>>2] = $pass;
    break;
   }
  }
 } while(0);
 $10 = ((($v)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 196608;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 _gc_mark($pass,$13);
 return;
}
function _function_marker($pass,$v) {
 $pass = $pass|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = $0 & 65536;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = ((($v)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($pass|0);
   if ($9) {
    return;
   } else {
    HEAP32[$7>>2] = $pass;
    break;
   }
  }
 } while(0);
 $10 = ((($v)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($11)) + 12|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(0);
 if ($16) {
  return;
 }
 $17 = $15&65535;
 $i$01 = 0;
 while(1) {
  $18 = (($13) + ($i$01<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = HEAP32[$19>>2]|0;
   $22 = $21 & 196608;
   $23 = ($22|0)==(0);
   if (!($23)) {
    _gc_mark($pass,$19);
   }
  }
  $24 = (($i$01) + 1)|0;
  $exitcond = ($24|0)==($17|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $24;
  }
 }
 return;
}
function _destroy_gc_entries($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gc_iter$02 = 0, $gc_iter$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $gc_iter$02 = $1;
  while(1) {
   $3 = ((($gc_iter$02)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   _lily_free($gc_iter$02);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $gc_iter$02 = $4;
   }
  }
 }
 $6 = ((($vm)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 } else {
  $gc_iter$11 = $7;
 }
 while(1) {
  $9 = ((($gc_iter$11)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_free($gc_iter$11);
  $11 = ($10|0)==(0|0);
  if ($11) {
   break;
  } else {
   $gc_iter$11 = $10;
  }
 }
 return;
}
function _lily_tag_value($vm,$v) {
 $vm = $vm|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_entry$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vm)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  _invoke_gc($vm);
 }
 $5 = ((($vm)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $10 = (_lily_malloc(24)|0);
  $new_entry$0 = $10;
 } else {
  $8 = ((($6)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$5>>2] = $9;
  $new_entry$0 = $6;
 }
 $11 = ((($v)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($new_entry$0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($new_entry$0)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$v>>2]|0;
 HEAP32[$new_entry$0>>2] = $15;
 $16 = ((($vm)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($new_entry$0)) + 16|0);
 HEAP32[$18>>2] = $17;
 HEAP32[$16>>2] = $new_entry$0;
 $19 = HEAP32[$11>>2]|0;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = $new_entry$0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$0>>2] = $22;
 $23 = HEAP32[$v>>2]|0;
 $24 = $23 | 65536;
 HEAP32[$v>>2] = $24;
 return;
}
function _lily_push_bytestring($vm,$sv) {
 $vm = $vm|0;
 $sv = $sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vm)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = (($1) + 1)|0;
  _grow_vm_registers($vm,$5);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($vm)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_move_bytestring($10,$sv);
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$0>>2] = $12;
 return;
}
function _grow_vm_registers($vm,$register_need) {
 $vm = $vm|0;
 $register_need = $register_need|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$01 = 0, $size$0 = 0, $size$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$vm>>2]|0;
 $3 = ((($vm)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ($1|0)==(0);
 $$ = $6 ? 1 : $1;
 $size$0 = $$;
 while(1) {
  $7 = $size$0 << 1;
  $8 = ($7|0)<($register_need|0);
  if ($8) {
   $size$0 = $7;
  } else {
   $$lcssa = $7;$size$0$lcssa = $size$0;
   break;
  }
 }
 $9 = $5 >> 2;
 $10 = HEAP32[$3>>2]|0;
 $11 = $size$0$lcssa << 3;
 $12 = (_lily_realloc($10,$11)|0);
 HEAP32[$3>>2] = $12;
 $13 = (($12) + ($9<<2)|0);
 HEAP32[$vm>>2] = $13;
 $14 = ($1|0)<($$lcssa|0);
 if ($14) {
  $i$01 = $1;
 } else {
  HEAP32[$0>>2] = $$lcssa;
  return;
 }
 while(1) {
  $15 = (_lily_malloc(16)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($12) + ($i$01<<2)|0);
  HEAP32[$16>>2] = $15;
  $17 = (($i$01) + 1)|0;
  $exitcond = ($17|0)==($$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $17;
  }
 }
 HEAP32[$0>>2] = $$lcssa;
 return;
}
function _lily_push_integer($vm,$0,$1) {
 $vm = $vm|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($vm)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($vm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = (($3) + 1)|0;
  _grow_vm_registers($vm,$7);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($vm)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_move_integer($12,$0,$1);
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _lily_push_value($vm,$v) {
 $vm = $vm|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vm)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = (($1) + 1)|0;
  _grow_vm_registers($vm,$5);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($vm)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_assign_value($10,$v);
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$0>>2] = $12;
 return;
}
function _lily_error($vm,$id,$message) {
 $vm = $vm|0;
 $id = $id|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $id&255;
 $1 = ((($vm)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($vm)) + 84|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($0) + -19)|0;
  $9 = (1488 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_lily_dynaload_exception($7,$10)|0);
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + ($0<<2)|0);
  HEAP32[$13>>2] = $11;
  $c$0 = $11;
 } else {
  $c$0 = $4;
 }
 $14 = ((($vm)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_raise_class($15,$c$0,$message);
 // unreachable;
}
function _lily_error_fmt($vm,$id,$fmt,$varargs) {
 $vm = $vm|0;
 $id = $id|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $var_args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $var_args = sp;
 $0 = ((($vm)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_mb_flush($3);
 HEAP32[$var_args>>2] = $varargs;
 _lily_mb_add_fmt_va($3,$fmt,$var_args);
 $4 = (_lily_mb_get($3)|0);
 _lily_error($vm,$id,$4);
 STACKTOP = sp;return;
}
function _lily_builtin_calltrace($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($vm)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = (_build_traceback_raw($vm)|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$0>>2] = $10;
 $11 = HEAP32[$4>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$4>>2] = $12;
 _lily_return_list($vm,$7);
 return;
}
function _build_traceback_raw($vm) {
 $vm = $vm|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $frame_iter$04 = 0, $frame_iter$04$in = 0, $i$03 = 0, $line = 0, $path$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $line = sp + 32|0;
 $0 = ((($vm)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_list_val_n($1)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = ((($vm)) + 24|0);
 $6 = ((($2)) + 16|0);
 $frame_iter$04$in = $5;$i$03 = $3;
 while(1) {
  $frame_iter$04 = HEAP32[$frame_iter$04$in>>2]|0;
  $7 = HEAP32[$frame_iter$04>>2]|0;
  dest=$line; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($7)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $path$0 = 9162;
  } else {
   $13 = ((($7)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($frame_iter$04)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$vararg_buffer>>2] = $18;
   (_sprintf($line,9158,$vararg_buffer)|0);
   $path$0 = $16;
  }
  $19 = ((($7)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  $$ = $21 ? 18083 : $20;
  $$1 = $21 ? 18083 : 17513;
  $22 = (_strlen($path$0)|0);
  $23 = (_strlen($line)|0);
  $24 = (_strlen($$)|0);
  $25 = (_strlen($9)|0);
  $26 = $21&1;
  $27 = $26 ^ 1;
  $28 = (($22) + 9)|0;
  $29 = (($28) + ($23))|0;
  $30 = (($29) + ($24))|0;
  $31 = (($30) + ($27))|0;
  $32 = (($31) + ($25))|0;
  $33 = (_lily_malloc($32)|0);
  HEAP32[$vararg_buffer1>>2] = $path$0;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $line;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $$;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $$1;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $9;
  (_sprintf($33,9166,$vararg_buffer1)|0);
  $34 = (($i$03) + -1)|0;
  $35 = HEAP32[$6>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_lily_new_raw_string_take($33)|0);
  _lily_move_string($37,$38);
  $39 = ((($frame_iter$04)) + 32|0);
  $40 = ($i$03|0)>(1);
  if ($40) {
   $frame_iter$04$in = $39;$i$03 = $34;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _lily_builtin_print($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[582]|0;
 $1 = (_lily_arg_value($vm,0)|0);
 _do_print($vm,$0,$1);
 return;
}
function _do_print($vm,$target,$source) {
 $vm = $vm|0;
 $target = $target|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$source>>1]|0;
 $1 = ($0<<16>>16)==(3);
 if ($1) {
  $2 = ((($source)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  (_fputs($5,$target)|0);
  (_fputc(10,$target)|0);
  _lily_return_unit($vm);
  return;
 } else {
  $6 = ((($vm)) + 80|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_mb_flush($7);
  _lily_mb_add_value($7,$vm,$source);
  $8 = (_lily_mb_get($7)|0);
  (_fputs($8,$target)|0);
  (_fputc(10,$target)|0);
  _lily_return_unit($vm);
  return;
 }
}
function _lily_builtin_Dynamic_new($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($vm,0)|0);
 $1 = (_lily_new_dynamic_val()|0);
 _lily_dynamic_set_value($1,$0);
 $2 = ((($vm)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_dynamic($7,$1);
 _lily_tag_value($vm,$7);
 return;
}
function _lily_get_msgbuf($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_mb_flush($1);
 return ($1|0);
}
function _lily_prepare_call($vm,$func) {
 $vm = $vm|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 2708;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$vm>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _add_call_frame($vm);
  HEAP32[$0>>2] = $1;
 }
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($func)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($12)) + 12|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$12>>2] = $func;
 $16 = ((($12)) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($func)) + 14|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = ((($12)) + 8|0);
 HEAP32[$20>>2] = $19;
 return;
}
function _lily_exec_prepared($vm,$count) {
 $vm = $vm|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($vm)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($4)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($3)) + 8|0);
  HEAP32[$11>>2] = $count;
  $12 = ((($vm)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($vm)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + ($15<<2)|0);
  $17 = (0 - ($count))|0;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$vm>>2] = $18;
  HEAP32[$0>>2] = $3;
  $19 = ((($4)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vi[$20 & 127]($vm);
  $21 = ((($3)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$0>>2] = $22;
  $23 = HEAP32[$14>>2]|0;
  $24 = (($23) - ($count))|0;
  HEAP32[$14>>2] = $24;
  $25 = HEAP32[$5>>2]|0;
  $26 = (($25) + -1)|0;
  HEAP32[$5>>2] = $26;
  return;
 }
 $27 = ((($vm)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($4)) + 14|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($31) + ($28))|0;
 $33 = (($31) - ($count))|0;
 $34 = ((($vm)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32>>>0)>($35>>>0);
 if ($36) {
  _grow_vm_registers($vm,$32);
 }
 $37 = ((($vm)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$27>>2]|0;
 $40 = (($38) + ($39<<2)|0);
 $41 = (0 - ($count))|0;
 $42 = (($40) + ($41<<2)|0);
 HEAP32[$vm>>2] = $42;
 HEAP32[$0>>2] = $3;
 $43 = ($33|0)>(0);
 if ($43) {
  $44 = HEAP32[$27>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[$27>>2] = $45;
  _scrub_registers($vm,$4,$count);
  $46 = HEAP32[$27>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$27>>2] = $47;
 }
 $48 = HEAP32[$27>>2]|0;
 $49 = (($48) + ($33))|0;
 HEAP32[$27>>2] = $49;
 _lily_vm_execute($vm);
 $50 = (($28) - ($count))|0;
 HEAP32[$27>>2] = $50;
 $51 = HEAP32[$37>>2]|0;
 $52 = ((($3)) + 32|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($51) + ($55<<2)|0);
 HEAP32[$vm>>2] = $56;
 return;
}
function _scrub_registers($vm,$fval,$args_collected) {
 $vm = $vm|0;
 $fval = $fval|0;
 $args_collected = $args_collected|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vm)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<2)|0);
 $5 = ((($fval)) + 14|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($7|0)>($args_collected|0);
 if ($8) {
  $$01 = $args_collected;
 } else {
  return;
 }
 while(1) {
  $9 = (($4) + ($$01<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_deref($10);
  HEAP32[$10>>2] = 0;
  $11 = (($$01) + 1)|0;
  $12 = HEAP16[$5>>1]|0;
  $13 = $12&65535;
  $14 = ($11|0)<($13|0);
  if ($14) {
   $$01 = $11;
  } else {
   break;
  }
 }
 return;
}
function _lily_vm_execute($vm) {
 $vm = $vm|0;
 var $$0$reg2mem$0 = 0, $$lobit = 0, $$lobit$not = 0, $$mask = 0, $$reg2mem1519$0 = 0, $$reg2mem1581$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0.0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0.0, $1288 = 0, $1289 = 0.0, $129 = 0, $1290 = 0.0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0;
 var $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0;
 var $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0;
 var $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0;
 var $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0;
 var $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0;
 var $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0;
 var $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0;
 var $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0;
 var $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0;
 var $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0;
 var $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0;
 var $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0;
 var $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0;
 var $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0;
 var $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0;
 var $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0;
 var $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0;
 var $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0;
 var $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0;
 var $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0;
 var $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0;
 var $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0;
 var $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0;
 var $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0;
 var $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0;
 var $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0;
 var $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0;
 var $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0;
 var $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0;
 var $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0;
 var $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0;
 var $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0;
 var $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0;
 var $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0;
 var $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0;
 var $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0;
 var $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0.0, $931 = 0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $code$0$reg2mem1571$0 = 0, $code$1$reg2mem1555$0 = 0, $code$3$reg2mem1539$0 = 0, $code$5$reg2mem1501$0 = 0, $cond = 0, $cond1583 = 0, $cond1584 = 0, $cond1585 = 0, $cond1586 = 0, $cond1587 = 0, $cond1588 = 0, $cond1589 = 0;
 var $cond1590 = 0, $cond1591 = 0, $cond1592 = 0, $cond1593 = 0, $cond1594 = 0, $cond1595 = 0, $cond1596 = 0, $cond1597 = 0, $cond1598 = 0, $cond1599 = 0, $cond1600 = 0, $cond1601 = 0, $cond1602 = 0, $cond1603 = 0, $cond1604 = 0, $cond1605 = 0, $cond1606 = 0, $cond1607 = 0, $cond1608 = 0, $cond1609 = 0;
 var $cond1610 = 0, $cond1611 = 0, $cond1612 = 0, $cond1613 = 0, $cond1614 = 0, $cond1615 = 0, $cond1616 = 0, $cond1617 = 0, $cond1618 = 0, $cond1619 = 0, $cond1620 = 0, $cond1621 = 0, $cond1622 = 0, $cond1623 = 0, $cond1624 = 0, $cond1625 = 0, $cond1626 = 0, $cond1627 = 0, $cond1628 = 0, $cond1629 = 0;
 var $cond1630 = 0, $cond1631 = 0, $cond1632 = 0, $cond1633 = 0, $cond1634 = 0, $current_frame$0$reg2mem1577$0 = 0, $current_frame$1$reg2mem1565$0 = 0, $current_frame$1$reg2mem1565$0$phi = 0, $current_frame$2$reg2mem1549$0 = 0, $current_frame$3$reg2mem1511$0 = 0, $fval$0$reg2mem1569$0 = 0, $fval$0$reg2mem1569$0$phi = 0, $fval$1$reg2mem1553$0 = 0, $fval$2$reg2mem1527$0 = 0, $fval$3$reg2mem1515$0 = 0, $i$02$reg2mem1517$0 = 0, $max_registers$0$reg2mem1563$0 = 0, $max_registers$0$reg2mem1563$0$phi = 0, $max_registers$1$reg2mem1547$0 = 0, $max_registers$2$reg2mem1537$0 = 0;
 var $max_registers$3$reg2mem1531$0 = 0, $max_registers$4$reg2mem1525$0 = 0, $max_registers$5$reg2mem1509$0 = 0, $num_registers$0$reg2mem1561$0 = 0, $num_registers$0$reg2mem1561$0$phi = 0, $num_registers$1$reg2mem1545$0 = 0, $num_registers$2$reg2mem1507$0 = 0, $regs_from_main$0$reg2mem1573$0 = 0, $regs_from_main$1$reg2mem1557$0 = 0, $regs_from_main$1$reg2mem1557$0$phi = 0, $regs_from_main$2$reg2mem1541$0 = 0, $regs_from_main$3$reg2mem1533$0 = 0, $regs_from_main$4$reg2mem1529$0 = 0, $regs_from_main$5$reg2mem1521$0 = 0, $regs_from_main$6$reg2mem1503$0 = 0, $result$0 = 0, $result$0$shrunk$reg2mem$0 = 0, $upvalues$0$reg2mem1579$0 = 0, $upvalues$1$reg2mem1567$0 = 0, $upvalues$1$reg2mem1567$0$phi = 0;
 var $upvalues$2$reg2mem1551$0 = 0, $upvalues$3$reg2mem1513$0 = 0, $vm_regs$0$reg2mem1575$0 = 0, $vm_regs$1$reg2mem1559$0 = 0, $vm_regs$1$reg2mem1559$0$phi = 0, $vm_regs$2$reg2mem1543$0 = 0, $vm_regs$3$reg2mem1535$0 = 0, $vm_regs$4$reg2mem1523$0 = 0, $vm_regs$5$reg2mem1505$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = ((($vm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$vm>>2]|0;
 $6 = ((($vm)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vm)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vm)) + 92|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 $12 = (invoke_ii(2,($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
 $15 = tempRet0;
 $cond = ($14|0)==(1);
 if ($cond) {
  $$reg2mem1581$0 = $15;
 } else {
  $16 = ((($12)) + 8|0);
  _setjmpTable = _saveSetjmp($16,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $17 = __THREW__; __THREW__ = 0;
  if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
  $19 = tempRet0;
  $cond1583 = ($18|0)==(1);
  if ($cond1583) {
   $$reg2mem1581$0 = $19;
  } else {
   $$reg2mem1581$0 = 0;
  }
 }
 L4: while(1) {
  $20 = ($$reg2mem1581$0|0)==(0);
  do {
   if ($20) {
    $code$0$reg2mem1571$0 = $4;$current_frame$0$reg2mem1577$0 = $1;$regs_from_main$0$reg2mem1573$0 = $7;$upvalues$0$reg2mem1579$0 = 0;$vm_regs$0$reg2mem1575$0 = $5;
   } else {
    $21 = HEAP32[$0>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    do {
     if (!($25)) {
      $26 = ((($vm)) + 20|0);
      $27 = HEAP16[$26>>1]|0;
      $28 = ($27<<16>>16)==(0);
      if ($28) {
       $31 = ((($21)) + 12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + 2|0);
       $34 = HEAP16[$33>>1]|0;
       $35 = $34&65535;
       $36 = ((($21)) + 16|0);
       HEAP32[$36>>2] = $35;
       break;
      } else {
       $29 = $27&65535;
       $30 = ((($1)) + 16|0);
       HEAP32[$30>>2] = $29;
       HEAP16[$26>>1] = 0;
       break;
      }
     }
    } while(0);
    __THREW__ = 0;
    $37 = (invoke_ii(3,($vm|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
    $40 = tempRet0;
    $cond1584 = ($39|0)==(1);
    if ($cond1584) {
     $$reg2mem1581$0 = $40;
     continue L4;
    }
    $41 = ($37|0)==(0);
    if ($41) {
     $42 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     invoke_vi(6,($42|0));
     $43 = __THREW__; __THREW__ = 0;
     if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = (threwValue); } else { $44 = -1; };
     $45 = tempRet0;
     $$reg2mem1581$0 = $45;
     continue L4;
    } else {
     $46 = HEAP32[$0>>2]|0;
     $47 = ((($46)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($46)) + 24|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = HEAP32[$6>>2]|0;
     $52 = HEAP32[$vm>>2]|0;
     $53 = $52;
     $54 = $51;
     $55 = (($53) - ($54))|0;
     $56 = $55 >> 2;
     $57 = ((($46)) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($56) + ($58))|0;
     $60 = ((($vm)) + 12|0);
     HEAP32[$60>>2] = $59;
     $code$0$reg2mem1571$0 = $48;$current_frame$0$reg2mem1577$0 = $46;$regs_from_main$0$reg2mem1573$0 = $51;$upvalues$0$reg2mem1579$0 = $50;$vm_regs$0$reg2mem1575$0 = $52;
     break;
    }
   }
  } while(0);
  $61 = ((($vm)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($vm)) + 16|0);
  $64 = ((($vm)) + 16|0);
  $65 = ((($vm)) + 28|0);
  $66 = ((($vm)) + 20|0);
  $67 = ((($vm)) + 20|0);
  $68 = ((($vm)) + 28|0);
  $69 = ((($vm)) + 28|0);
  $70 = ((($vm)) + 16|0);
  $71 = ((($vm)) + 16|0);
  $72 = ((($vm)) + 16|0);
  $73 = ((($vm)) + 72|0);
  $74 = ((($vm)) + 16|0);
  $75 = ((($vm)) + 72|0);
  $code$1$reg2mem1555$0 = $code$0$reg2mem1571$0;$current_frame$1$reg2mem1565$0 = $current_frame$0$reg2mem1577$0;$fval$0$reg2mem1569$0 = 0;$max_registers$0$reg2mem1563$0 = $9;$num_registers$0$reg2mem1561$0 = $62;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$0$reg2mem1573$0;$upvalues$1$reg2mem1567$0 = $upvalues$0$reg2mem1579$0;$vm_regs$1$reg2mem1559$0 = $vm_regs$0$reg2mem1575$0;
  L19: while(1) {
   $76 = HEAP16[$code$1$reg2mem1555$0>>1]|0;
   $77 = $76&65535;
   L21: do {
    switch ($77|0) {
    case 0:  {
     $78 = ((($code$1$reg2mem1555$0)) + 4|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79&65535;
     $81 = (($vm_regs$1$reg2mem1559$0) + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($code$1$reg2mem1555$0)) + 6|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84&65535;
     $86 = (($vm_regs$1$reg2mem1559$0) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = HEAP32[$82>>2]|0;
     HEAP32[$87>>2] = $88;
     $89 = ((($82)) + 8|0);
     $90 = ((($87)) + 8|0);
     $91 = $89;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = $90;
     $98 = $97;
     HEAP32[$98>>2] = $93;
     $99 = (($97) + 4)|0;
     $100 = $99;
     HEAP32[$100>>2] = $96;
     $101 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $101;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 41:  {
     $102 = ((($code$1$reg2mem1555$0)) + 4|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&65535;
     $105 = HEAP32[$65>>2]|0;
     $106 = (($105) + ($104<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($code$1$reg2mem1555$0)) + 6|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $109&65535;
     $111 = (($vm_regs$1$reg2mem1559$0) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     invoke_vi(7,($112|0));
     $113 = __THREW__; __THREW__ = 0;
     if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = (threwValue); } else { $114 = -1; };
     $115 = tempRet0;
     $cond1634 = ($114|0)==(1);
     if ($cond1634) {
      $$reg2mem1581$0 = $115;
      continue L4;
     }
     $116 = ((($107)) + 8|0);
     $117 = ((($112)) + 8|0);
     $118 = $116;
     $119 = $118;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($118) + 4)|0;
     $122 = $121;
     $123 = HEAP32[$122>>2]|0;
     $124 = $117;
     $125 = $124;
     HEAP32[$125>>2] = $120;
     $126 = (($124) + 4)|0;
     $127 = $126;
     HEAP32[$127>>2] = $123;
     $128 = HEAP32[$107>>2]|0;
     HEAP32[$112>>2] = $128;
     $129 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $129;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 45:  {
     $130 = ((($code$1$reg2mem1555$0)) + 6|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (($vm_regs$1$reg2mem1559$0) + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     __THREW__ = 0;
     invoke_vi(7,($134|0));
     $135 = __THREW__; __THREW__ = 0;
     if ((($135|0) != 0) & ((threwValue|0) != 0)) { $136 = _testSetjmp(HEAP32[$135>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($136|0) == 0) { _longjmp($135|0, threwValue|0); } tempRet0 = (threwValue); } else { $136 = -1; };
     $137 = tempRet0;
     $cond1633 = ($136|0)==(1);
     if ($cond1633) {
      $$reg2mem1581$0 = $137;
      continue L4;
     }
     $138 = ((($134)) + 8|0);
     HEAP32[$138>>2] = 0;
     $139 = ((($code$1$reg2mem1555$0)) + 4|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = $141 | 2097152;
     HEAP32[$134>>2] = $142;
     $143 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $143;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 42:  {
     $144 = ((($code$1$reg2mem1555$0)) + 6|0);
     $145 = HEAP16[$144>>1]|0;
     $146 = $145&65535;
     $147 = (($vm_regs$1$reg2mem1559$0) + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($code$1$reg2mem1555$0)) + 4|0);
     $150 = HEAP16[$149>>1]|0;
     $151 = $150 << 16 >> 16;
     $152 = ($151|0)<(0);
     $153 = $152 << 31 >> 31;
     $154 = ((($148)) + 8|0);
     $155 = $154;
     $156 = $155;
     HEAP32[$156>>2] = $151;
     $157 = (($155) + 4)|0;
     $158 = $157;
     HEAP32[$158>>2] = $153;
     HEAP32[$148>>2] = 1;
     $159 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $159;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 43:  {
     $160 = ((($code$1$reg2mem1555$0)) + 6|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = $161&65535;
     $163 = (($vm_regs$1$reg2mem1559$0) + ($162<<2)|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($code$1$reg2mem1555$0)) + 4|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = ((($164)) + 8|0);
     $169 = $168;
     $170 = $169;
     HEAP32[$170>>2] = $167;
     $171 = (($169) + 4)|0;
     $172 = $171;
     HEAP32[$172>>2] = 0;
     HEAP32[$164>>2] = 6;
     $173 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $173;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 44:  {
     $174 = ((($code$1$reg2mem1555$0)) + 6|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = $175&65535;
     $177 = (($vm_regs$1$reg2mem1559$0) + ($176<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($code$1$reg2mem1555$0)) + 4|0);
     $180 = HEAP16[$179>>1]|0;
     $$mask = $180 & 255;
     $181 = $$mask&65535;
     $182 = ((($178)) + 8|0);
     $183 = $182;
     $184 = $183;
     HEAP32[$184>>2] = $181;
     $185 = (($183) + 4)|0;
     $186 = $185;
     HEAP32[$186>>2] = 0;
     HEAP32[$178>>2] = 4;
     $187 = ((($code$1$reg2mem1555$0)) + 8|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $187;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 2:  {
     $188 = ((($code$1$reg2mem1555$0)) + 4|0);
     $189 = HEAP16[$188>>1]|0;
     $190 = $189&65535;
     $191 = (($vm_regs$1$reg2mem1559$0) + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ((($code$1$reg2mem1555$0)) + 6|0);
     $194 = HEAP16[$193>>1]|0;
     $195 = $194&65535;
     $196 = (($vm_regs$1$reg2mem1559$0) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ((($192)) + 8|0);
     $199 = $198;
     $200 = $199;
     $201 = HEAP32[$200>>2]|0;
     $202 = (($199) + 4)|0;
     $203 = $202;
     $204 = HEAP32[$203>>2]|0;
     $205 = ((($197)) + 8|0);
     $206 = $205;
     $207 = $206;
     $208 = HEAP32[$207>>2]|0;
     $209 = (($206) + 4)|0;
     $210 = $209;
     $211 = HEAP32[$210>>2]|0;
     $212 = (_i64Add(($208|0),($211|0),($201|0),($204|0))|0);
     $213 = tempRet0;
     $214 = ((($code$1$reg2mem1555$0)) + 8|0);
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = (($vm_regs$1$reg2mem1559$0) + ($216<<2)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ((($218)) + 8|0);
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $212;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $213;
     $224 = HEAP16[$214>>1]|0;
     $225 = $224&65535;
     $226 = (($vm_regs$1$reg2mem1559$0) + ($225<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     HEAP32[$227>>2] = 1;
     $228 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $228;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 3:  {
     $229 = ((($code$1$reg2mem1555$0)) + 4|0);
     $230 = HEAP16[$229>>1]|0;
     $231 = $230&65535;
     $232 = (($vm_regs$1$reg2mem1559$0) + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ((($code$1$reg2mem1555$0)) + 6|0);
     $235 = HEAP16[$234>>1]|0;
     $236 = $235&65535;
     $237 = (($vm_regs$1$reg2mem1559$0) + ($236<<2)|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ((($233)) + 8|0);
     $240 = $239;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = (($240) + 4)|0;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = ((($238)) + 8|0);
     $247 = $246;
     $248 = $247;
     $249 = HEAP32[$248>>2]|0;
     $250 = (($247) + 4)|0;
     $251 = $250;
     $252 = HEAP32[$251>>2]|0;
     $253 = (_i64Subtract(($242|0),($245|0),($249|0),($252|0))|0);
     $254 = tempRet0;
     $255 = ((($code$1$reg2mem1555$0)) + 8|0);
     $256 = HEAP16[$255>>1]|0;
     $257 = $256&65535;
     $258 = (($vm_regs$1$reg2mem1559$0) + ($257<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ((($259)) + 8|0);
     $261 = $260;
     $262 = $261;
     HEAP32[$262>>2] = $253;
     $263 = (($261) + 4)|0;
     $264 = $263;
     HEAP32[$264>>2] = $254;
     $265 = HEAP16[$255>>1]|0;
     $266 = $265&65535;
     $267 = (($vm_regs$1$reg2mem1559$0) + ($266<<2)|0);
     $268 = HEAP32[$267>>2]|0;
     HEAP32[$268>>2] = 1;
     $269 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $269;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 12:  {
     $270 = ((($code$1$reg2mem1555$0)) + 4|0);
     $271 = HEAP16[$270>>1]|0;
     $272 = $271&65535;
     $273 = (($vm_regs$1$reg2mem1559$0) + ($272<<2)|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ((($code$1$reg2mem1555$0)) + 6|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276&65535;
     $278 = (($vm_regs$1$reg2mem1559$0) + ($277<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($274)) + 8|0);
     $281 = +HEAPF64[$280>>3];
     $282 = ((($279)) + 8|0);
     $283 = +HEAPF64[$282>>3];
     $284 = $281 + $283;
     $285 = ((($code$1$reg2mem1555$0)) + 8|0);
     $286 = HEAP16[$285>>1]|0;
     $287 = $286&65535;
     $288 = (($vm_regs$1$reg2mem1559$0) + ($287<<2)|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = ((($289)) + 8|0);
     HEAPF64[$290>>3] = $284;
     $291 = HEAP16[$285>>1]|0;
     $292 = $291&65535;
     $293 = (($vm_regs$1$reg2mem1559$0) + ($292<<2)|0);
     $294 = HEAP32[$293>>2]|0;
     HEAP32[$294>>2] = 2;
     $295 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $295;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 13:  {
     $296 = ((($code$1$reg2mem1555$0)) + 4|0);
     $297 = HEAP16[$296>>1]|0;
     $298 = $297&65535;
     $299 = (($vm_regs$1$reg2mem1559$0) + ($298<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ((($code$1$reg2mem1555$0)) + 6|0);
     $302 = HEAP16[$301>>1]|0;
     $303 = $302&65535;
     $304 = (($vm_regs$1$reg2mem1559$0) + ($303<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = ((($300)) + 8|0);
     $307 = +HEAPF64[$306>>3];
     $308 = ((($305)) + 8|0);
     $309 = +HEAPF64[$308>>3];
     $310 = $307 - $309;
     $311 = ((($code$1$reg2mem1555$0)) + 8|0);
     $312 = HEAP16[$311>>1]|0;
     $313 = $312&65535;
     $314 = (($vm_regs$1$reg2mem1559$0) + ($313<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ((($315)) + 8|0);
     HEAPF64[$316>>3] = $310;
     $317 = HEAP16[$311>>1]|0;
     $318 = $317&65535;
     $319 = (($vm_regs$1$reg2mem1559$0) + ($318<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     HEAP32[$320>>2] = 2;
     $321 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $321;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 18:  {
     $322 = ((($code$1$reg2mem1555$0)) + 4|0);
     $323 = HEAP16[$322>>1]|0;
     $324 = $323&65535;
     $325 = (($vm_regs$1$reg2mem1559$0) + ($324<<2)|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ((($code$1$reg2mem1555$0)) + 6|0);
     $328 = HEAP16[$327>>1]|0;
     $329 = $328&65535;
     $330 = (($vm_regs$1$reg2mem1559$0) + ($329<<2)|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = HEAP16[$326>>1]|0;
     switch ($332<<16>>16) {
     case 2:  {
      $333 = ((($326)) + 8|0);
      $334 = +HEAPF64[$333>>3];
      $335 = ((($331)) + 8|0);
      $336 = +HEAPF64[$335>>3];
      $337 = $334 < $336;
      $338 = $337&1;
      $339 = ((($code$1$reg2mem1555$0)) + 8|0);
      $340 = HEAP16[$339>>1]|0;
      $341 = $340&65535;
      $342 = (($vm_regs$1$reg2mem1559$0) + ($341<<2)|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ((($343)) + 8|0);
      $345 = $344;
      $346 = $345;
      HEAP32[$346>>2] = $338;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = 0;
      break;
     }
     case 1:  {
      $349 = ((($326)) + 8|0);
      $350 = $349;
      $351 = $350;
      $352 = HEAP32[$351>>2]|0;
      $353 = (($350) + 4)|0;
      $354 = $353;
      $355 = HEAP32[$354>>2]|0;
      $356 = ((($331)) + 8|0);
      $357 = $356;
      $358 = $357;
      $359 = HEAP32[$358>>2]|0;
      $360 = (($357) + 4)|0;
      $361 = $360;
      $362 = HEAP32[$361>>2]|0;
      $363 = ($355|0)<($362|0);
      $364 = ($352>>>0)<($359>>>0);
      $365 = ($355|0)==($362|0);
      $366 = $365 & $364;
      $367 = $363 | $366;
      $368 = $367&1;
      $369 = ((($code$1$reg2mem1555$0)) + 8|0);
      $370 = HEAP16[$369>>1]|0;
      $371 = $370&65535;
      $372 = (($vm_regs$1$reg2mem1559$0) + ($371<<2)|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = ((($373)) + 8|0);
      $375 = $374;
      $376 = $375;
      HEAP32[$376>>2] = $368;
      $377 = (($375) + 4)|0;
      $378 = $377;
      HEAP32[$378>>2] = 0;
      break;
     }
     case 3:  {
      $379 = ((($326)) + 8|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ((($380)) + 8|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ((($331)) + 8|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ((($384)) + 8|0);
      $386 = HEAP32[$385>>2]|0;
      __THREW__ = 0;
      $387 = (invoke_iii(2,($382|0),($386|0))|0);
      $388 = __THREW__; __THREW__ = 0;
      if ((($388|0) != 0) & ((threwValue|0) != 0)) { $389 = _testSetjmp(HEAP32[$388>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($389|0) == 0) { _longjmp($388|0, threwValue|0); } tempRet0 = (threwValue); } else { $389 = -1; };
      $390 = tempRet0;
      $cond1632 = ($389|0)==(1);
      if ($cond1632) {
       $$reg2mem1581$0 = $390;
       continue L4;
      }
      $391 = ($387|0)==(-1);
      $392 = $391&1;
      $393 = ((($code$1$reg2mem1555$0)) + 8|0);
      $394 = HEAP16[$393>>1]|0;
      $395 = $394&65535;
      $396 = (($vm_regs$1$reg2mem1559$0) + ($395<<2)|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = ((($397)) + 8|0);
      $399 = $398;
      $400 = $399;
      HEAP32[$400>>2] = $392;
      $401 = (($399) + 4)|0;
      $402 = $401;
      HEAP32[$402>>2] = 0;
      break;
     }
     default: {
     }
     }
     $403 = ((($code$1$reg2mem1555$0)) + 8|0);
     $404 = HEAP16[$403>>1]|0;
     $405 = $404&65535;
     $406 = (($vm_regs$1$reg2mem1559$0) + ($405<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     HEAP32[$407>>2] = 6;
     $408 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $408;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 19:  {
     $409 = ((($code$1$reg2mem1555$0)) + 4|0);
     $410 = HEAP16[$409>>1]|0;
     $411 = $410&65535;
     $412 = (($vm_regs$1$reg2mem1559$0) + ($411<<2)|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = ((($code$1$reg2mem1555$0)) + 6|0);
     $415 = HEAP16[$414>>1]|0;
     $416 = $415&65535;
     $417 = (($vm_regs$1$reg2mem1559$0) + ($416<<2)|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = HEAP16[$413>>1]|0;
     switch ($419<<16>>16) {
     case 2:  {
      $420 = ((($413)) + 8|0);
      $421 = +HEAPF64[$420>>3];
      $422 = ((($418)) + 8|0);
      $423 = +HEAPF64[$422>>3];
      $424 = $421 <= $423;
      $425 = $424&1;
      $426 = ((($code$1$reg2mem1555$0)) + 8|0);
      $427 = HEAP16[$426>>1]|0;
      $428 = $427&65535;
      $429 = (($vm_regs$1$reg2mem1559$0) + ($428<<2)|0);
      $430 = HEAP32[$429>>2]|0;
      $431 = ((($430)) + 8|0);
      $432 = $431;
      $433 = $432;
      HEAP32[$433>>2] = $425;
      $434 = (($432) + 4)|0;
      $435 = $434;
      HEAP32[$435>>2] = 0;
      break;
     }
     case 1:  {
      $436 = ((($413)) + 8|0);
      $437 = $436;
      $438 = $437;
      $439 = HEAP32[$438>>2]|0;
      $440 = (($437) + 4)|0;
      $441 = $440;
      $442 = HEAP32[$441>>2]|0;
      $443 = ((($418)) + 8|0);
      $444 = $443;
      $445 = $444;
      $446 = HEAP32[$445>>2]|0;
      $447 = (($444) + 4)|0;
      $448 = $447;
      $449 = HEAP32[$448>>2]|0;
      $450 = ($442|0)<($449|0);
      $451 = ($439>>>0)<=($446>>>0);
      $452 = ($442|0)==($449|0);
      $453 = $452 & $451;
      $454 = $450 | $453;
      $455 = $454&1;
      $456 = ((($code$1$reg2mem1555$0)) + 8|0);
      $457 = HEAP16[$456>>1]|0;
      $458 = $457&65535;
      $459 = (($vm_regs$1$reg2mem1559$0) + ($458<<2)|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ((($460)) + 8|0);
      $462 = $461;
      $463 = $462;
      HEAP32[$463>>2] = $455;
      $464 = (($462) + 4)|0;
      $465 = $464;
      HEAP32[$465>>2] = 0;
      break;
     }
     case 3:  {
      $466 = ((($413)) + 8|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ((($467)) + 8|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ((($418)) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ((($471)) + 8|0);
      $473 = HEAP32[$472>>2]|0;
      __THREW__ = 0;
      $474 = (invoke_iii(2,($469|0),($473|0))|0);
      $475 = __THREW__; __THREW__ = 0;
      if ((($475|0) != 0) & ((threwValue|0) != 0)) { $476 = _testSetjmp(HEAP32[$475>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($476|0) == 0) { _longjmp($475|0, threwValue|0); } tempRet0 = (threwValue); } else { $476 = -1; };
      $477 = tempRet0;
      $cond1631 = ($476|0)==(1);
      if ($cond1631) {
       $$reg2mem1581$0 = $477;
       continue L4;
      }
      $478 = ($474|0)<(1);
      $479 = $478&1;
      $480 = ((($code$1$reg2mem1555$0)) + 8|0);
      $481 = HEAP16[$480>>1]|0;
      $482 = $481&65535;
      $483 = (($vm_regs$1$reg2mem1559$0) + ($482<<2)|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ((($484)) + 8|0);
      $486 = $485;
      $487 = $486;
      HEAP32[$487>>2] = $479;
      $488 = (($486) + 4)|0;
      $489 = $488;
      HEAP32[$489>>2] = 0;
      break;
     }
     default: {
     }
     }
     $490 = ((($code$1$reg2mem1555$0)) + 8|0);
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = (($vm_regs$1$reg2mem1559$0) + ($492<<2)|0);
     $494 = HEAP32[$493>>2]|0;
     HEAP32[$494>>2] = 6;
     $495 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $495;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 16:  {
     $496 = ((($code$1$reg2mem1555$0)) + 4|0);
     $497 = HEAP16[$496>>1]|0;
     $498 = $497&65535;
     $499 = (($vm_regs$1$reg2mem1559$0) + ($498<<2)|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = ((($code$1$reg2mem1555$0)) + 6|0);
     $502 = HEAP16[$501>>1]|0;
     $503 = $502&65535;
     $504 = (($vm_regs$1$reg2mem1559$0) + ($503<<2)|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = HEAP16[$500>>1]|0;
     switch ($506<<16>>16) {
     case 2:  {
      $507 = ((($500)) + 8|0);
      $508 = +HEAPF64[$507>>3];
      $509 = ((($505)) + 8|0);
      $510 = +HEAPF64[$509>>3];
      $511 = $508 == $510;
      $512 = $511&1;
      $513 = ((($code$1$reg2mem1555$0)) + 8|0);
      $514 = HEAP16[$513>>1]|0;
      $515 = $514&65535;
      $516 = (($vm_regs$1$reg2mem1559$0) + ($515<<2)|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ((($517)) + 8|0);
      $519 = $518;
      $520 = $519;
      HEAP32[$520>>2] = $512;
      $521 = (($519) + 4)|0;
      $522 = $521;
      HEAP32[$522>>2] = 0;
      break;
     }
     case 1:  {
      $523 = ((($500)) + 8|0);
      $524 = $523;
      $525 = $524;
      $526 = HEAP32[$525>>2]|0;
      $527 = (($524) + 4)|0;
      $528 = $527;
      $529 = HEAP32[$528>>2]|0;
      $530 = ((($505)) + 8|0);
      $531 = $530;
      $532 = $531;
      $533 = HEAP32[$532>>2]|0;
      $534 = (($531) + 4)|0;
      $535 = $534;
      $536 = HEAP32[$535>>2]|0;
      $537 = ($526|0)==($533|0);
      $538 = ($529|0)==($536|0);
      $539 = $537 & $538;
      $540 = $539&1;
      $541 = ((($code$1$reg2mem1555$0)) + 8|0);
      $542 = HEAP16[$541>>1]|0;
      $543 = $542&65535;
      $544 = (($vm_regs$1$reg2mem1559$0) + ($543<<2)|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ((($545)) + 8|0);
      $547 = $546;
      $548 = $547;
      HEAP32[$548>>2] = $540;
      $549 = (($547) + 4)|0;
      $550 = $549;
      HEAP32[$550>>2] = 0;
      break;
     }
     case 3:  {
      $551 = ((($500)) + 8|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = ((($552)) + 8|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = ((($505)) + 8|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = ((($556)) + 8|0);
      $558 = HEAP32[$557>>2]|0;
      __THREW__ = 0;
      $559 = (invoke_iii(2,($554|0),($558|0))|0);
      $560 = __THREW__; __THREW__ = 0;
      if ((($560|0) != 0) & ((threwValue|0) != 0)) { $561 = _testSetjmp(HEAP32[$560>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($561|0) == 0) { _longjmp($560|0, threwValue|0); } tempRet0 = (threwValue); } else { $561 = -1; };
      $562 = tempRet0;
      $cond1629 = ($561|0)==(1);
      if ($cond1629) {
       $$reg2mem1581$0 = $562;
       continue L4;
      }
      $563 = ($559|0)==(0);
      $564 = $563&1;
      $565 = ((($code$1$reg2mem1555$0)) + 8|0);
      $566 = HEAP16[$565>>1]|0;
      $567 = $566&65535;
      $568 = (($vm_regs$1$reg2mem1559$0) + ($567<<2)|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ((($569)) + 8|0);
      $571 = $570;
      $572 = $571;
      HEAP32[$572>>2] = $564;
      $573 = (($571) + 4)|0;
      $574 = $573;
      HEAP32[$574>>2] = 0;
      break;
     }
     default: {
      $575 = ((($code$1$reg2mem1555$0)) + 2|0);
      $576 = HEAP16[$575>>1]|0;
      HEAP16[$66>>1] = $576;
      __THREW__ = 0;
      $577 = (invoke_iiii(7,($vm|0),($500|0),($505|0))|0);
      $578 = __THREW__; __THREW__ = 0;
      if ((($578|0) != 0) & ((threwValue|0) != 0)) { $579 = _testSetjmp(HEAP32[$578>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($579|0) == 0) { _longjmp($578|0, threwValue|0); } tempRet0 = (threwValue); } else { $579 = -1; };
      $580 = tempRet0;
      $cond1630 = ($579|0)==(1);
      if ($cond1630) {
       $$reg2mem1581$0 = $580;
       continue L4;
      }
      $581 = ($577|0)==(1);
      $582 = $581&1;
      $583 = ((($code$1$reg2mem1555$0)) + 8|0);
      $584 = HEAP16[$583>>1]|0;
      $585 = $584&65535;
      $586 = (($vm_regs$1$reg2mem1559$0) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = ((($587)) + 8|0);
      $589 = $588;
      $590 = $589;
      HEAP32[$590>>2] = $582;
      $591 = (($589) + 4)|0;
      $592 = $591;
      HEAP32[$592>>2] = 0;
     }
     }
     $593 = ((($code$1$reg2mem1555$0)) + 8|0);
     $594 = HEAP16[$593>>1]|0;
     $595 = $594&65535;
     $596 = (($vm_regs$1$reg2mem1559$0) + ($595<<2)|0);
     $597 = HEAP32[$596>>2]|0;
     HEAP32[$597>>2] = 6;
     $598 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $598;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 20:  {
     $599 = ((($code$1$reg2mem1555$0)) + 4|0);
     $600 = HEAP16[$599>>1]|0;
     $601 = $600&65535;
     $602 = (($vm_regs$1$reg2mem1559$0) + ($601<<2)|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = ((($code$1$reg2mem1555$0)) + 6|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605&65535;
     $607 = (($vm_regs$1$reg2mem1559$0) + ($606<<2)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = HEAP16[$603>>1]|0;
     switch ($609<<16>>16) {
     case 2:  {
      $610 = ((($603)) + 8|0);
      $611 = +HEAPF64[$610>>3];
      $612 = ((($608)) + 8|0);
      $613 = +HEAPF64[$612>>3];
      $614 = $611 > $613;
      $615 = $614&1;
      $616 = ((($code$1$reg2mem1555$0)) + 8|0);
      $617 = HEAP16[$616>>1]|0;
      $618 = $617&65535;
      $619 = (($vm_regs$1$reg2mem1559$0) + ($618<<2)|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = ((($620)) + 8|0);
      $622 = $621;
      $623 = $622;
      HEAP32[$623>>2] = $615;
      $624 = (($622) + 4)|0;
      $625 = $624;
      HEAP32[$625>>2] = 0;
      break;
     }
     case 1:  {
      $626 = ((($603)) + 8|0);
      $627 = $626;
      $628 = $627;
      $629 = HEAP32[$628>>2]|0;
      $630 = (($627) + 4)|0;
      $631 = $630;
      $632 = HEAP32[$631>>2]|0;
      $633 = ((($608)) + 8|0);
      $634 = $633;
      $635 = $634;
      $636 = HEAP32[$635>>2]|0;
      $637 = (($634) + 4)|0;
      $638 = $637;
      $639 = HEAP32[$638>>2]|0;
      $640 = ($632|0)>($639|0);
      $641 = ($629>>>0)>($636>>>0);
      $642 = ($632|0)==($639|0);
      $643 = $642 & $641;
      $644 = $640 | $643;
      $645 = $644&1;
      $646 = ((($code$1$reg2mem1555$0)) + 8|0);
      $647 = HEAP16[$646>>1]|0;
      $648 = $647&65535;
      $649 = (($vm_regs$1$reg2mem1559$0) + ($648<<2)|0);
      $650 = HEAP32[$649>>2]|0;
      $651 = ((($650)) + 8|0);
      $652 = $651;
      $653 = $652;
      HEAP32[$653>>2] = $645;
      $654 = (($652) + 4)|0;
      $655 = $654;
      HEAP32[$655>>2] = 0;
      break;
     }
     case 3:  {
      $656 = ((($603)) + 8|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = ((($657)) + 8|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = ((($608)) + 8|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ((($661)) + 8|0);
      $663 = HEAP32[$662>>2]|0;
      __THREW__ = 0;
      $664 = (invoke_iii(2,($659|0),($663|0))|0);
      $665 = __THREW__; __THREW__ = 0;
      if ((($665|0) != 0) & ((threwValue|0) != 0)) { $666 = _testSetjmp(HEAP32[$665>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($666|0) == 0) { _longjmp($665|0, threwValue|0); } tempRet0 = (threwValue); } else { $666 = -1; };
      $667 = tempRet0;
      $cond1628 = ($666|0)==(1);
      if ($cond1628) {
       $$reg2mem1581$0 = $667;
       continue L4;
      }
      $668 = ($664|0)==(1);
      $669 = $668&1;
      $670 = ((($code$1$reg2mem1555$0)) + 8|0);
      $671 = HEAP16[$670>>1]|0;
      $672 = $671&65535;
      $673 = (($vm_regs$1$reg2mem1559$0) + ($672<<2)|0);
      $674 = HEAP32[$673>>2]|0;
      $675 = ((($674)) + 8|0);
      $676 = $675;
      $677 = $676;
      HEAP32[$677>>2] = $669;
      $678 = (($676) + 4)|0;
      $679 = $678;
      HEAP32[$679>>2] = 0;
      break;
     }
     default: {
     }
     }
     $680 = ((($code$1$reg2mem1555$0)) + 8|0);
     $681 = HEAP16[$680>>1]|0;
     $682 = $681&65535;
     $683 = (($vm_regs$1$reg2mem1559$0) + ($682<<2)|0);
     $684 = HEAP32[$683>>2]|0;
     HEAP32[$684>>2] = 6;
     $685 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $685;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 21:  {
     $686 = ((($code$1$reg2mem1555$0)) + 4|0);
     $687 = HEAP16[$686>>1]|0;
     $688 = $687&65535;
     $689 = (($vm_regs$1$reg2mem1559$0) + ($688<<2)|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ((($code$1$reg2mem1555$0)) + 6|0);
     $692 = HEAP16[$691>>1]|0;
     $693 = $692&65535;
     $694 = (($vm_regs$1$reg2mem1559$0) + ($693<<2)|0);
     $695 = HEAP32[$694>>2]|0;
     $696 = HEAP16[$690>>1]|0;
     switch ($696<<16>>16) {
     case 2:  {
      $697 = ((($690)) + 8|0);
      $698 = +HEAPF64[$697>>3];
      $699 = ((($695)) + 8|0);
      $700 = +HEAPF64[$699>>3];
      $701 = $698 > $700;
      $702 = $701&1;
      $703 = ((($code$1$reg2mem1555$0)) + 8|0);
      $704 = HEAP16[$703>>1]|0;
      $705 = $704&65535;
      $706 = (($vm_regs$1$reg2mem1559$0) + ($705<<2)|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = ((($707)) + 8|0);
      $709 = $708;
      $710 = $709;
      HEAP32[$710>>2] = $702;
      $711 = (($709) + 4)|0;
      $712 = $711;
      HEAP32[$712>>2] = 0;
      break;
     }
     case 1:  {
      $713 = ((($690)) + 8|0);
      $714 = $713;
      $715 = $714;
      $716 = HEAP32[$715>>2]|0;
      $717 = (($714) + 4)|0;
      $718 = $717;
      $719 = HEAP32[$718>>2]|0;
      $720 = ((($695)) + 8|0);
      $721 = $720;
      $722 = $721;
      $723 = HEAP32[$722>>2]|0;
      $724 = (($721) + 4)|0;
      $725 = $724;
      $726 = HEAP32[$725>>2]|0;
      $727 = ($719|0)>($726|0);
      $728 = ($716>>>0)>($723>>>0);
      $729 = ($719|0)==($726|0);
      $730 = $729 & $728;
      $731 = $727 | $730;
      $732 = $731&1;
      $733 = ((($code$1$reg2mem1555$0)) + 8|0);
      $734 = HEAP16[$733>>1]|0;
      $735 = $734&65535;
      $736 = (($vm_regs$1$reg2mem1559$0) + ($735<<2)|0);
      $737 = HEAP32[$736>>2]|0;
      $738 = ((($737)) + 8|0);
      $739 = $738;
      $740 = $739;
      HEAP32[$740>>2] = $732;
      $741 = (($739) + 4)|0;
      $742 = $741;
      HEAP32[$742>>2] = 0;
      break;
     }
     case 3:  {
      $743 = ((($690)) + 8|0);
      $744 = HEAP32[$743>>2]|0;
      $745 = ((($744)) + 8|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ((($695)) + 8|0);
      $748 = HEAP32[$747>>2]|0;
      $749 = ((($748)) + 8|0);
      $750 = HEAP32[$749>>2]|0;
      __THREW__ = 0;
      $751 = (invoke_iii(2,($746|0),($750|0))|0);
      $752 = __THREW__; __THREW__ = 0;
      if ((($752|0) != 0) & ((threwValue|0) != 0)) { $753 = _testSetjmp(HEAP32[$752>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($753|0) == 0) { _longjmp($752|0, threwValue|0); } tempRet0 = (threwValue); } else { $753 = -1; };
      $754 = tempRet0;
      $cond1627 = ($753|0)==(1);
      if ($cond1627) {
       $$reg2mem1581$0 = $754;
       continue L4;
      }
      $$lobit = $751 >>> 31;
      $$lobit$not = $$lobit ^ 1;
      $755 = ((($code$1$reg2mem1555$0)) + 8|0);
      $756 = HEAP16[$755>>1]|0;
      $757 = $756&65535;
      $758 = (($vm_regs$1$reg2mem1559$0) + ($757<<2)|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ((($759)) + 8|0);
      $761 = $760;
      $762 = $761;
      HEAP32[$762>>2] = $$lobit$not;
      $763 = (($761) + 4)|0;
      $764 = $763;
      HEAP32[$764>>2] = 0;
      break;
     }
     default: {
     }
     }
     $765 = ((($code$1$reg2mem1555$0)) + 8|0);
     $766 = HEAP16[$765>>1]|0;
     $767 = $766&65535;
     $768 = (($vm_regs$1$reg2mem1559$0) + ($767<<2)|0);
     $769 = HEAP32[$768>>2]|0;
     HEAP32[$769>>2] = 6;
     $770 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $770;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 17:  {
     $771 = ((($code$1$reg2mem1555$0)) + 4|0);
     $772 = HEAP16[$771>>1]|0;
     $773 = $772&65535;
     $774 = (($vm_regs$1$reg2mem1559$0) + ($773<<2)|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = ((($code$1$reg2mem1555$0)) + 6|0);
     $777 = HEAP16[$776>>1]|0;
     $778 = $777&65535;
     $779 = (($vm_regs$1$reg2mem1559$0) + ($778<<2)|0);
     $780 = HEAP32[$779>>2]|0;
     $781 = HEAP16[$775>>1]|0;
     switch ($781<<16>>16) {
     case 2:  {
      $782 = ((($775)) + 8|0);
      $783 = +HEAPF64[$782>>3];
      $784 = ((($780)) + 8|0);
      $785 = +HEAPF64[$784>>3];
      $786 = $783 != $785;
      $787 = $786&1;
      $788 = ((($code$1$reg2mem1555$0)) + 8|0);
      $789 = HEAP16[$788>>1]|0;
      $790 = $789&65535;
      $791 = (($vm_regs$1$reg2mem1559$0) + ($790<<2)|0);
      $792 = HEAP32[$791>>2]|0;
      $793 = ((($792)) + 8|0);
      $794 = $793;
      $795 = $794;
      HEAP32[$795>>2] = $787;
      $796 = (($794) + 4)|0;
      $797 = $796;
      HEAP32[$797>>2] = 0;
      break;
     }
     case 1:  {
      $798 = ((($775)) + 8|0);
      $799 = $798;
      $800 = $799;
      $801 = HEAP32[$800>>2]|0;
      $802 = (($799) + 4)|0;
      $803 = $802;
      $804 = HEAP32[$803>>2]|0;
      $805 = ((($780)) + 8|0);
      $806 = $805;
      $807 = $806;
      $808 = HEAP32[$807>>2]|0;
      $809 = (($806) + 4)|0;
      $810 = $809;
      $811 = HEAP32[$810>>2]|0;
      $812 = ($801|0)!=($808|0);
      $813 = ($804|0)!=($811|0);
      $814 = $812 | $813;
      $815 = $814&1;
      $816 = ((($code$1$reg2mem1555$0)) + 8|0);
      $817 = HEAP16[$816>>1]|0;
      $818 = $817&65535;
      $819 = (($vm_regs$1$reg2mem1559$0) + ($818<<2)|0);
      $820 = HEAP32[$819>>2]|0;
      $821 = ((($820)) + 8|0);
      $822 = $821;
      $823 = $822;
      HEAP32[$823>>2] = $815;
      $824 = (($822) + 4)|0;
      $825 = $824;
      HEAP32[$825>>2] = 0;
      break;
     }
     case 3:  {
      $826 = ((($775)) + 8|0);
      $827 = HEAP32[$826>>2]|0;
      $828 = ((($827)) + 8|0);
      $829 = HEAP32[$828>>2]|0;
      $830 = ((($780)) + 8|0);
      $831 = HEAP32[$830>>2]|0;
      $832 = ((($831)) + 8|0);
      $833 = HEAP32[$832>>2]|0;
      __THREW__ = 0;
      $834 = (invoke_iii(2,($829|0),($833|0))|0);
      $835 = __THREW__; __THREW__ = 0;
      if ((($835|0) != 0) & ((threwValue|0) != 0)) { $836 = _testSetjmp(HEAP32[$835>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($836|0) == 0) { _longjmp($835|0, threwValue|0); } tempRet0 = (threwValue); } else { $836 = -1; };
      $837 = tempRet0;
      $cond1625 = ($836|0)==(1);
      if ($cond1625) {
       $$reg2mem1581$0 = $837;
       continue L4;
      }
      $838 = ($834|0)!=(0);
      $839 = $838&1;
      $840 = ((($code$1$reg2mem1555$0)) + 8|0);
      $841 = HEAP16[$840>>1]|0;
      $842 = $841&65535;
      $843 = (($vm_regs$1$reg2mem1559$0) + ($842<<2)|0);
      $844 = HEAP32[$843>>2]|0;
      $845 = ((($844)) + 8|0);
      $846 = $845;
      $847 = $846;
      HEAP32[$847>>2] = $839;
      $848 = (($846) + 4)|0;
      $849 = $848;
      HEAP32[$849>>2] = 0;
      break;
     }
     default: {
      $850 = ((($code$1$reg2mem1555$0)) + 2|0);
      $851 = HEAP16[$850>>1]|0;
      HEAP16[$67>>1] = $851;
      __THREW__ = 0;
      $852 = (invoke_iiii(7,($vm|0),($775|0),($780|0))|0);
      $853 = __THREW__; __THREW__ = 0;
      if ((($853|0) != 0) & ((threwValue|0) != 0)) { $854 = _testSetjmp(HEAP32[$853>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($854|0) == 0) { _longjmp($853|0, threwValue|0); } tempRet0 = (threwValue); } else { $854 = -1; };
      $855 = tempRet0;
      $cond1626 = ($854|0)==(1);
      if ($cond1626) {
       $$reg2mem1581$0 = $855;
       continue L4;
      }
      $856 = ($852|0)!=(1);
      $857 = $856&1;
      $858 = ((($code$1$reg2mem1555$0)) + 8|0);
      $859 = HEAP16[$858>>1]|0;
      $860 = $859&65535;
      $861 = (($vm_regs$1$reg2mem1559$0) + ($860<<2)|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = ((($862)) + 8|0);
      $864 = $863;
      $865 = $864;
      HEAP32[$865>>2] = $857;
      $866 = (($864) + 4)|0;
      $867 = $866;
      HEAP32[$867>>2] = 0;
     }
     }
     $868 = ((($code$1$reg2mem1555$0)) + 8|0);
     $869 = HEAP16[$868>>1]|0;
     $870 = $869&65535;
     $871 = (($vm_regs$1$reg2mem1559$0) + ($870<<2)|0);
     $872 = HEAP32[$871>>2]|0;
     HEAP32[$872>>2] = 6;
     $873 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $873;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 24:  {
     $874 = ((($code$1$reg2mem1555$0)) + 2|0);
     $875 = HEAP16[$874>>1]|0;
     $876 = $875 << 16 >> 16;
     $877 = (($code$1$reg2mem1555$0) + ($876<<1)|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $877;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 5:  {
     $878 = ((($code$1$reg2mem1555$0)) + 4|0);
     $879 = HEAP16[$878>>1]|0;
     $880 = $879&65535;
     $881 = (($vm_regs$1$reg2mem1559$0) + ($880<<2)|0);
     $882 = HEAP32[$881>>2]|0;
     $883 = ((($code$1$reg2mem1555$0)) + 6|0);
     $884 = HEAP16[$883>>1]|0;
     $885 = $884&65535;
     $886 = (($vm_regs$1$reg2mem1559$0) + ($885<<2)|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = ((($882)) + 8|0);
     $889 = $888;
     $890 = $889;
     $891 = HEAP32[$890>>2]|0;
     $892 = (($889) + 4)|0;
     $893 = $892;
     $894 = HEAP32[$893>>2]|0;
     $895 = ((($887)) + 8|0);
     $896 = $895;
     $897 = $896;
     $898 = HEAP32[$897>>2]|0;
     $899 = (($896) + 4)|0;
     $900 = $899;
     $901 = HEAP32[$900>>2]|0;
     $902 = (___muldi3(($898|0),($901|0),($891|0),($894|0))|0);
     $903 = tempRet0;
     $904 = ((($code$1$reg2mem1555$0)) + 8|0);
     $905 = HEAP16[$904>>1]|0;
     $906 = $905&65535;
     $907 = (($vm_regs$1$reg2mem1559$0) + ($906<<2)|0);
     $908 = HEAP32[$907>>2]|0;
     $909 = ((($908)) + 8|0);
     $910 = $909;
     $911 = $910;
     HEAP32[$911>>2] = $902;
     $912 = (($910) + 4)|0;
     $913 = $912;
     HEAP32[$913>>2] = $903;
     $914 = HEAP16[$904>>1]|0;
     $915 = $914&65535;
     $916 = (($vm_regs$1$reg2mem1559$0) + ($915<<2)|0);
     $917 = HEAP32[$916>>2]|0;
     HEAP32[$917>>2] = 1;
     $918 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $918;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 14:  {
     $919 = ((($code$1$reg2mem1555$0)) + 4|0);
     $920 = HEAP16[$919>>1]|0;
     $921 = $920&65535;
     $922 = (($vm_regs$1$reg2mem1559$0) + ($921<<2)|0);
     $923 = HEAP32[$922>>2]|0;
     $924 = ((($code$1$reg2mem1555$0)) + 6|0);
     $925 = HEAP16[$924>>1]|0;
     $926 = $925&65535;
     $927 = (($vm_regs$1$reg2mem1559$0) + ($926<<2)|0);
     $928 = HEAP32[$927>>2]|0;
     $929 = ((($923)) + 8|0);
     $930 = +HEAPF64[$929>>3];
     $931 = ((($928)) + 8|0);
     $932 = +HEAPF64[$931>>3];
     $933 = $930 * $932;
     $934 = ((($code$1$reg2mem1555$0)) + 8|0);
     $935 = HEAP16[$934>>1]|0;
     $936 = $935&65535;
     $937 = (($vm_regs$1$reg2mem1559$0) + ($936<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = ((($938)) + 8|0);
     HEAPF64[$939>>3] = $933;
     $940 = HEAP16[$934>>1]|0;
     $941 = $940&65535;
     $942 = (($vm_regs$1$reg2mem1559$0) + ($941<<2)|0);
     $943 = HEAP32[$942>>2]|0;
     HEAP32[$943>>2] = 2;
     $944 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $944;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 6:  {
     $945 = ((($code$1$reg2mem1555$0)) + 6|0);
     $946 = HEAP16[$945>>1]|0;
     $947 = $946&65535;
     $948 = (($vm_regs$1$reg2mem1559$0) + ($947<<2)|0);
     $949 = HEAP32[$948>>2]|0;
     $950 = ((($949)) + 8|0);
     $951 = $950;
     $952 = $951;
     $953 = HEAP32[$952>>2]|0;
     $954 = (($951) + 4)|0;
     $955 = $954;
     $956 = HEAP32[$955>>2]|0;
     $957 = ($953|0)==(0);
     $958 = ($956|0)==(0);
     $959 = $957 & $958;
     if ($959) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),25,(9184|0));
      $960 = __THREW__; __THREW__ = 0;
      if ((($960|0) != 0) & ((threwValue|0) != 0)) { $961 = _testSetjmp(HEAP32[$960>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($961|0) == 0) { _longjmp($960|0, threwValue|0); } tempRet0 = (threwValue); } else { $961 = -1; };
      $962 = tempRet0;
      $cond1624 = ($961|0)==(1);
      if ($cond1624) {
       $$reg2mem1581$0 = $962;
       continue L4;
      }
     }
     $963 = ((($code$1$reg2mem1555$0)) + 4|0);
     $964 = HEAP16[$963>>1]|0;
     $965 = $964&65535;
     $966 = (($vm_regs$1$reg2mem1559$0) + ($965<<2)|0);
     $967 = HEAP32[$966>>2]|0;
     $968 = HEAP16[$945>>1]|0;
     $969 = $968&65535;
     $970 = (($vm_regs$1$reg2mem1559$0) + ($969<<2)|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = ((($967)) + 8|0);
     $973 = $972;
     $974 = $973;
     $975 = HEAP32[$974>>2]|0;
     $976 = (($973) + 4)|0;
     $977 = $976;
     $978 = HEAP32[$977>>2]|0;
     $979 = ((($971)) + 8|0);
     $980 = $979;
     $981 = $980;
     $982 = HEAP32[$981>>2]|0;
     $983 = (($980) + 4)|0;
     $984 = $983;
     $985 = HEAP32[$984>>2]|0;
     $986 = (___divdi3(($975|0),($978|0),($982|0),($985|0))|0);
     $987 = tempRet0;
     $988 = ((($code$1$reg2mem1555$0)) + 8|0);
     $989 = HEAP16[$988>>1]|0;
     $990 = $989&65535;
     $991 = (($vm_regs$1$reg2mem1559$0) + ($990<<2)|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = ((($992)) + 8|0);
     $994 = $993;
     $995 = $994;
     HEAP32[$995>>2] = $986;
     $996 = (($994) + 4)|0;
     $997 = $996;
     HEAP32[$997>>2] = $987;
     $998 = HEAP16[$988>>1]|0;
     $999 = $998&65535;
     $1000 = (($vm_regs$1$reg2mem1559$0) + ($999<<2)|0);
     $1001 = HEAP32[$1000>>2]|0;
     HEAP32[$1001>>2] = 1;
     $1002 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1002;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 4:  {
     $1003 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1004 = HEAP16[$1003>>1]|0;
     $1005 = $1004&65535;
     $1006 = (($vm_regs$1$reg2mem1559$0) + ($1005<<2)|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = ((($1007)) + 8|0);
     $1009 = $1008;
     $1010 = $1009;
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = (($1009) + 4)|0;
     $1013 = $1012;
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = ($1011|0)==(0);
     $1016 = ($1014|0)==(0);
     $1017 = $1015 & $1016;
     if ($1017) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),25,(9184|0));
      $1018 = __THREW__; __THREW__ = 0;
      if ((($1018|0) != 0) & ((threwValue|0) != 0)) { $1019 = _testSetjmp(HEAP32[$1018>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1019|0) == 0) { _longjmp($1018|0, threwValue|0); } tempRet0 = (threwValue); } else { $1019 = -1; };
      $1020 = tempRet0;
      $cond1623 = ($1019|0)==(1);
      if ($cond1623) {
       $$reg2mem1581$0 = $1020;
       continue L4;
      }
     }
     $1021 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1022 = HEAP16[$1021>>1]|0;
     $1023 = $1022&65535;
     $1024 = (($vm_regs$1$reg2mem1559$0) + ($1023<<2)|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = HEAP16[$1003>>1]|0;
     $1027 = $1026&65535;
     $1028 = (($vm_regs$1$reg2mem1559$0) + ($1027<<2)|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = ((($1025)) + 8|0);
     $1031 = $1030;
     $1032 = $1031;
     $1033 = HEAP32[$1032>>2]|0;
     $1034 = (($1031) + 4)|0;
     $1035 = $1034;
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = ((($1029)) + 8|0);
     $1038 = $1037;
     $1039 = $1038;
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = (($1038) + 4)|0;
     $1042 = $1041;
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = (___remdi3(($1033|0),($1036|0),($1040|0),($1043|0))|0);
     $1045 = tempRet0;
     $1046 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1047 = HEAP16[$1046>>1]|0;
     $1048 = $1047&65535;
     $1049 = (($vm_regs$1$reg2mem1559$0) + ($1048<<2)|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = ((($1050)) + 8|0);
     $1052 = $1051;
     $1053 = $1052;
     HEAP32[$1053>>2] = $1044;
     $1054 = (($1052) + 4)|0;
     $1055 = $1054;
     HEAP32[$1055>>2] = $1045;
     $1056 = HEAP16[$1046>>1]|0;
     $1057 = $1056&65535;
     $1058 = (($vm_regs$1$reg2mem1559$0) + ($1057<<2)|0);
     $1059 = HEAP32[$1058>>2]|0;
     HEAP32[$1059>>2] = 1;
     $1060 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1060;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 7:  {
     $1061 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1062 = HEAP16[$1061>>1]|0;
     $1063 = $1062&65535;
     $1064 = (($vm_regs$1$reg2mem1559$0) + ($1063<<2)|0);
     $1065 = HEAP32[$1064>>2]|0;
     $1066 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1067 = HEAP16[$1066>>1]|0;
     $1068 = $1067&65535;
     $1069 = (($vm_regs$1$reg2mem1559$0) + ($1068<<2)|0);
     $1070 = HEAP32[$1069>>2]|0;
     $1071 = ((($1065)) + 8|0);
     $1072 = $1071;
     $1073 = $1072;
     $1074 = HEAP32[$1073>>2]|0;
     $1075 = (($1072) + 4)|0;
     $1076 = $1075;
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = ((($1070)) + 8|0);
     $1079 = $1078;
     $1080 = $1079;
     $1081 = HEAP32[$1080>>2]|0;
     $1082 = (($1079) + 4)|0;
     $1083 = $1082;
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = (_bitshift64Shl(($1074|0),($1077|0),($1081|0))|0);
     $1086 = tempRet0;
     $1087 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1088 = HEAP16[$1087>>1]|0;
     $1089 = $1088&65535;
     $1090 = (($vm_regs$1$reg2mem1559$0) + ($1089<<2)|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = ((($1091)) + 8|0);
     $1093 = $1092;
     $1094 = $1093;
     HEAP32[$1094>>2] = $1085;
     $1095 = (($1093) + 4)|0;
     $1096 = $1095;
     HEAP32[$1096>>2] = $1086;
     $1097 = HEAP16[$1087>>1]|0;
     $1098 = $1097&65535;
     $1099 = (($vm_regs$1$reg2mem1559$0) + ($1098<<2)|0);
     $1100 = HEAP32[$1099>>2]|0;
     HEAP32[$1100>>2] = 1;
     $1101 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1101;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 8:  {
     $1102 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1103 = HEAP16[$1102>>1]|0;
     $1104 = $1103&65535;
     $1105 = (($vm_regs$1$reg2mem1559$0) + ($1104<<2)|0);
     $1106 = HEAP32[$1105>>2]|0;
     $1107 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1108 = HEAP16[$1107>>1]|0;
     $1109 = $1108&65535;
     $1110 = (($vm_regs$1$reg2mem1559$0) + ($1109<<2)|0);
     $1111 = HEAP32[$1110>>2]|0;
     $1112 = ((($1106)) + 8|0);
     $1113 = $1112;
     $1114 = $1113;
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (($1113) + 4)|0;
     $1117 = $1116;
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = ((($1111)) + 8|0);
     $1120 = $1119;
     $1121 = $1120;
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = (($1120) + 4)|0;
     $1124 = $1123;
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = (_bitshift64Ashr(($1115|0),($1118|0),($1122|0))|0);
     $1127 = tempRet0;
     $1128 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1129 = HEAP16[$1128>>1]|0;
     $1130 = $1129&65535;
     $1131 = (($vm_regs$1$reg2mem1559$0) + ($1130<<2)|0);
     $1132 = HEAP32[$1131>>2]|0;
     $1133 = ((($1132)) + 8|0);
     $1134 = $1133;
     $1135 = $1134;
     HEAP32[$1135>>2] = $1126;
     $1136 = (($1134) + 4)|0;
     $1137 = $1136;
     HEAP32[$1137>>2] = $1127;
     $1138 = HEAP16[$1128>>1]|0;
     $1139 = $1138&65535;
     $1140 = (($vm_regs$1$reg2mem1559$0) + ($1139<<2)|0);
     $1141 = HEAP32[$1140>>2]|0;
     HEAP32[$1141>>2] = 1;
     $1142 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1142;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 9:  {
     $1143 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1144 = HEAP16[$1143>>1]|0;
     $1145 = $1144&65535;
     $1146 = (($vm_regs$1$reg2mem1559$0) + ($1145<<2)|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1149 = HEAP16[$1148>>1]|0;
     $1150 = $1149&65535;
     $1151 = (($vm_regs$1$reg2mem1559$0) + ($1150<<2)|0);
     $1152 = HEAP32[$1151>>2]|0;
     $1153 = ((($1147)) + 8|0);
     $1154 = $1153;
     $1155 = $1154;
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = (($1154) + 4)|0;
     $1158 = $1157;
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = ((($1152)) + 8|0);
     $1161 = $1160;
     $1162 = $1161;
     $1163 = HEAP32[$1162>>2]|0;
     $1164 = (($1161) + 4)|0;
     $1165 = $1164;
     $1166 = HEAP32[$1165>>2]|0;
     $1167 = $1163 & $1156;
     $1168 = $1166 & $1159;
     $1169 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1170 = HEAP16[$1169>>1]|0;
     $1171 = $1170&65535;
     $1172 = (($vm_regs$1$reg2mem1559$0) + ($1171<<2)|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = ((($1173)) + 8|0);
     $1175 = $1174;
     $1176 = $1175;
     HEAP32[$1176>>2] = $1167;
     $1177 = (($1175) + 4)|0;
     $1178 = $1177;
     HEAP32[$1178>>2] = $1168;
     $1179 = HEAP16[$1169>>1]|0;
     $1180 = $1179&65535;
     $1181 = (($vm_regs$1$reg2mem1559$0) + ($1180<<2)|0);
     $1182 = HEAP32[$1181>>2]|0;
     HEAP32[$1182>>2] = 1;
     $1183 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1183;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 10:  {
     $1184 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1185 = HEAP16[$1184>>1]|0;
     $1186 = $1185&65535;
     $1187 = (($vm_regs$1$reg2mem1559$0) + ($1186<<2)|0);
     $1188 = HEAP32[$1187>>2]|0;
     $1189 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1190 = HEAP16[$1189>>1]|0;
     $1191 = $1190&65535;
     $1192 = (($vm_regs$1$reg2mem1559$0) + ($1191<<2)|0);
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = ((($1188)) + 8|0);
     $1195 = $1194;
     $1196 = $1195;
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = (($1195) + 4)|0;
     $1199 = $1198;
     $1200 = HEAP32[$1199>>2]|0;
     $1201 = ((($1193)) + 8|0);
     $1202 = $1201;
     $1203 = $1202;
     $1204 = HEAP32[$1203>>2]|0;
     $1205 = (($1202) + 4)|0;
     $1206 = $1205;
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = $1204 | $1197;
     $1209 = $1207 | $1200;
     $1210 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1211 = HEAP16[$1210>>1]|0;
     $1212 = $1211&65535;
     $1213 = (($vm_regs$1$reg2mem1559$0) + ($1212<<2)|0);
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = ((($1214)) + 8|0);
     $1216 = $1215;
     $1217 = $1216;
     HEAP32[$1217>>2] = $1208;
     $1218 = (($1216) + 4)|0;
     $1219 = $1218;
     HEAP32[$1219>>2] = $1209;
     $1220 = HEAP16[$1210>>1]|0;
     $1221 = $1220&65535;
     $1222 = (($vm_regs$1$reg2mem1559$0) + ($1221<<2)|0);
     $1223 = HEAP32[$1222>>2]|0;
     HEAP32[$1223>>2] = 1;
     $1224 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1224;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 11:  {
     $1225 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1226 = HEAP16[$1225>>1]|0;
     $1227 = $1226&65535;
     $1228 = (($vm_regs$1$reg2mem1559$0) + ($1227<<2)|0);
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1231 = HEAP16[$1230>>1]|0;
     $1232 = $1231&65535;
     $1233 = (($vm_regs$1$reg2mem1559$0) + ($1232<<2)|0);
     $1234 = HEAP32[$1233>>2]|0;
     $1235 = ((($1229)) + 8|0);
     $1236 = $1235;
     $1237 = $1236;
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = (($1236) + 4)|0;
     $1240 = $1239;
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = ((($1234)) + 8|0);
     $1243 = $1242;
     $1244 = $1243;
     $1245 = HEAP32[$1244>>2]|0;
     $1246 = (($1243) + 4)|0;
     $1247 = $1246;
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = $1245 ^ $1238;
     $1250 = $1248 ^ $1241;
     $1251 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1252 = HEAP16[$1251>>1]|0;
     $1253 = $1252&65535;
     $1254 = (($vm_regs$1$reg2mem1559$0) + ($1253<<2)|0);
     $1255 = HEAP32[$1254>>2]|0;
     $1256 = ((($1255)) + 8|0);
     $1257 = $1256;
     $1258 = $1257;
     HEAP32[$1258>>2] = $1249;
     $1259 = (($1257) + 4)|0;
     $1260 = $1259;
     HEAP32[$1260>>2] = $1250;
     $1261 = HEAP16[$1251>>1]|0;
     $1262 = $1261&65535;
     $1263 = (($vm_regs$1$reg2mem1559$0) + ($1262<<2)|0);
     $1264 = HEAP32[$1263>>2]|0;
     HEAP32[$1264>>2] = 1;
     $1265 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1265;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 15:  {
     $1266 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1267 = HEAP16[$1266>>1]|0;
     $1268 = $1267&65535;
     $1269 = (($vm_regs$1$reg2mem1559$0) + ($1268<<2)|0);
     $1270 = HEAP32[$1269>>2]|0;
     $1271 = ((($1270)) + 8|0);
     $1272 = +HEAPF64[$1271>>3];
     $1273 = $1272 == 0.0;
     if ($1273) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),25,(9184|0));
      $1274 = __THREW__; __THREW__ = 0;
      if ((($1274|0) != 0) & ((threwValue|0) != 0)) { $1275 = _testSetjmp(HEAP32[$1274>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1275|0) == 0) { _longjmp($1274|0, threwValue|0); } tempRet0 = (threwValue); } else { $1275 = -1; };
      $1276 = tempRet0;
      $cond1622 = ($1275|0)==(1);
      if ($cond1622) {
       $$reg2mem1581$0 = $1276;
       continue L4;
      }
     }
     $1277 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1278 = HEAP16[$1277>>1]|0;
     $1279 = $1278&65535;
     $1280 = (($vm_regs$1$reg2mem1559$0) + ($1279<<2)|0);
     $1281 = HEAP32[$1280>>2]|0;
     $1282 = HEAP16[$1266>>1]|0;
     $1283 = $1282&65535;
     $1284 = (($vm_regs$1$reg2mem1559$0) + ($1283<<2)|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = ((($1281)) + 8|0);
     $1287 = +HEAPF64[$1286>>3];
     $1288 = ((($1285)) + 8|0);
     $1289 = +HEAPF64[$1288>>3];
     $1290 = $1287 / $1289;
     $1291 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1292 = HEAP16[$1291>>1]|0;
     $1293 = $1292&65535;
     $1294 = (($vm_regs$1$reg2mem1559$0) + ($1293<<2)|0);
     $1295 = HEAP32[$1294>>2]|0;
     $1296 = ((($1295)) + 8|0);
     HEAPF64[$1296>>3] = $1290;
     $1297 = HEAP16[$1291>>1]|0;
     $1298 = $1297&65535;
     $1299 = (($vm_regs$1$reg2mem1559$0) + ($1298<<2)|0);
     $1300 = HEAP32[$1299>>2]|0;
     HEAP32[$1300>>2] = 2;
     $1301 = ((($code$1$reg2mem1555$0)) + 10|0);
     $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1301;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
     continue L19;
     break;
    }
    case 25:  {
     $1302 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1303 = HEAP16[$1302>>1]|0;
     $1304 = $1303&65535;
     $1305 = (($vm_regs$1$reg2mem1559$0) + ($1304<<2)|0);
     $1306 = HEAP32[$1305>>2]|0;
     $1307 = HEAP16[$1306>>1]|0;
     switch ($1307<<16>>16) {
     case 1: case 6:  {
      $1308 = ((($1306)) + 8|0);
      $1309 = $1308;
      $1310 = $1309;
      $1311 = HEAP32[$1310>>2]|0;
      $1312 = (($1309) + 4)|0;
      $1313 = $1312;
      $1314 = HEAP32[$1313>>2]|0;
      $1315 = ($1311|0)==(0);
      $1316 = ($1314|0)==(0);
      $1317 = $1315 & $1316;
      $result$0$shrunk$reg2mem$0 = $1317;
      break;
     }
     case 3:  {
      $1318 = ((($1306)) + 8|0);
      $1319 = HEAP32[$1318>>2]|0;
      $1320 = ((($1319)) + 4|0);
      $1321 = HEAP32[$1320>>2]|0;
      $1322 = ($1321|0)==(0);
      $result$0$shrunk$reg2mem$0 = $1322;
      break;
     }
     case 9:  {
      $1323 = ((($1306)) + 8|0);
      $1324 = HEAP32[$1323>>2]|0;
      $1325 = ((($1324)) + 8|0);
      $1326 = HEAP32[$1325>>2]|0;
      $1327 = ($1326|0)==(0);
      $result$0$shrunk$reg2mem$0 = $1327;
      break;
     }
     default: {
      $result$0$shrunk$reg2mem$0 = 1;
     }
     }
     $result$0 = $result$0$shrunk$reg2mem$0&1;
     $1328 = ((($code$1$reg2mem1555$0)) + 2|0);
     $1329 = HEAP16[$1328>>1]|0;
     $1330 = $1329&65535;
     $1331 = ($result$0|0)==($1330|0);
     if ($1331) {
      $1336 = ((($code$1$reg2mem1555$0)) + 8|0);
      $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1336;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
      continue L19;
     } else {
      $1332 = ((($code$1$reg2mem1555$0)) + 6|0);
      $1333 = HEAP16[$1332>>1]|0;
      $1334 = $1333 << 16 >> 16;
      $1335 = (($code$1$reg2mem1555$0) + ($1334<<1)|0);
      $vm_regs$1$reg2mem1559$0$phi = $vm_regs$1$reg2mem1559$0;$upvalues$1$reg2mem1567$0$phi = $upvalues$1$reg2mem1567$0;$regs_from_main$1$reg2mem1557$0$phi = $regs_from_main$1$reg2mem1557$0;$num_registers$0$reg2mem1561$0$phi = $num_registers$0$reg2mem1561$0;$max_registers$0$reg2mem1563$0$phi = $max_registers$0$reg2mem1563$0;$fval$0$reg2mem1569$0$phi = $fval$0$reg2mem1569$0;$current_frame$1$reg2mem1565$0$phi = $current_frame$1$reg2mem1565$0;$code$1$reg2mem1555$0 = $1335;$vm_regs$1$reg2mem1559$0 = $vm_regs$1$reg2mem1559$0$phi;$upvalues$1$reg2mem1567$0 = $upvalues$1$reg2mem1567$0$phi;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$1$reg2mem1557$0$phi;$num_registers$0$reg2mem1561$0 = $num_registers$0$reg2mem1561$0$phi;$max_registers$0$reg2mem1563$0 = $max_registers$0$reg2mem1563$0$phi;$fval$0$reg2mem1569$0 = $fval$0$reg2mem1569$0$phi;$current_frame$1$reg2mem1565$0 = $current_frame$1$reg2mem1565$0$phi;
      continue L19;
     }
     break;
    }
    case 28:  {
     $1337 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1338 = HEAP16[$1337>>1]|0;
     $1339 = $1338&65535;
     $1340 = HEAP32[$68>>2]|0;
     $1341 = (($1340) + ($1339<<2)|0);
     $1342 = HEAP32[$1341>>2]|0;
     $1343 = ((($1342)) + 8|0);
     $1344 = HEAP32[$1343>>2]|0;
     $code$3$reg2mem1539$0 = $code$1$reg2mem1555$0;$current_frame$2$reg2mem1549$0 = $current_frame$1$reg2mem1565$0;$fval$1$reg2mem1553$0 = $1344;$max_registers$1$reg2mem1547$0 = $max_registers$0$reg2mem1563$0;$num_registers$1$reg2mem1545$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$2$reg2mem1541$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$2$reg2mem1551$0 = $upvalues$1$reg2mem1567$0;$vm_regs$2$reg2mem1543$0 = $vm_regs$1$reg2mem1559$0;
     break;
    }
    case 29:  {
     $1419 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1420 = HEAP16[$1419>>1]|0;
     $1421 = $1420&65535;
     $1422 = HEAP32[$69>>2]|0;
     $1423 = (($1422) + ($1421<<2)|0);
     $1424 = HEAP32[$1423>>2]|0;
     $1425 = ((($1424)) + 8|0);
     $1426 = HEAP32[$1425>>2]|0;
     $fval$2$reg2mem1527$0 = $1426;
     label = 110;
     break;
    }
    case 30:  {
     $1484 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1485 = HEAP16[$1484>>1]|0;
     $1486 = $1485&65535;
     $1487 = (($vm_regs$1$reg2mem1559$0) + ($1486<<2)|0);
     $1488 = HEAP32[$1487>>2]|0;
     $1489 = ((($1488)) + 8|0);
     $1490 = HEAP32[$1489>>2]|0;
     $1491 = ((($1490)) + 36|0);
     $1492 = HEAP32[$1491>>2]|0;
     $1493 = ($1492|0)==(0|0);
     if ($1493) {
      $$0$reg2mem$0 = 5;$code$5$reg2mem1501$0 = $code$1$reg2mem1555$0;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $1490;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
      label = 195;
     } else {
      $fval$2$reg2mem1527$0 = $1490;
      label = 110;
     }
     break;
    }
    case 65:  {
     __THREW__ = 0;
     invoke_vii(24,($vm|0),($code$1$reg2mem1555$0|0));
     $1494 = __THREW__; __THREW__ = 0;
     if ((($1494|0) != 0) & ((threwValue|0) != 0)) { $1495 = _testSetjmp(HEAP32[$1494>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1495|0) == 0) { _longjmp($1494|0, threwValue|0); } tempRet0 = (threwValue); } else { $1495 = -1; };
     $1496 = tempRet0;
     $cond1612 = ($1495|0)==(1);
     if ($cond1612) {
      $$reg2mem1581$0 = $1496;
      continue L4;
     }
     $1497 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1498 = HEAP16[$1497>>1]|0;
     $1499 = $1498&65535;
     $1500 = (($1499) + 4)|0;
     $1501 = (($code$1$reg2mem1555$0) + ($1500<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1501;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 22:  {
     $1502 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1503 = HEAP16[$1502>>1]|0;
     $1504 = $1503&65535;
     $1505 = (($vm_regs$1$reg2mem1559$0) + ($1504<<2)|0);
     $1506 = HEAP32[$1505>>2]|0;
     $1507 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1508 = HEAP16[$1507>>1]|0;
     $1509 = $1508&65535;
     $1510 = (($vm_regs$1$reg2mem1559$0) + ($1509<<2)|0);
     $1511 = HEAP32[$1510>>2]|0;
     $1512 = HEAP32[$1506>>2]|0;
     HEAP32[$1511>>2] = $1512;
     $1513 = ((($1506)) + 8|0);
     $1514 = $1513;
     $1515 = $1514;
     $1516 = HEAP32[$1515>>2]|0;
     $1517 = (($1514) + 4)|0;
     $1518 = $1517;
     $1519 = HEAP32[$1518>>2]|0;
     $1520 = ($1516|0)==(0);
     $1521 = ($1519|0)==(0);
     $1522 = $1520 & $1521;
     $1523 = $1522&1;
     $1524 = ((($1511)) + 8|0);
     $1525 = $1524;
     $1526 = $1525;
     HEAP32[$1526>>2] = $1523;
     $1527 = (($1525) + 4)|0;
     $1528 = $1527;
     HEAP32[$1528>>2] = 0;
     $1529 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1529;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 23:  {
     $1530 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1531 = HEAP16[$1530>>1]|0;
     $1532 = $1531&65535;
     $1533 = (($vm_regs$1$reg2mem1559$0) + ($1532<<2)|0);
     $1534 = HEAP32[$1533>>2]|0;
     $1535 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1536 = HEAP16[$1535>>1]|0;
     $1537 = $1536&65535;
     $1538 = (($vm_regs$1$reg2mem1559$0) + ($1537<<2)|0);
     $1539 = HEAP32[$1538>>2]|0;
     HEAP32[$1539>>2] = 1;
     $1540 = ((($1534)) + 8|0);
     $1541 = $1540;
     $1542 = $1541;
     $1543 = HEAP32[$1542>>2]|0;
     $1544 = (($1541) + 4)|0;
     $1545 = $1544;
     $1546 = HEAP32[$1545>>2]|0;
     $1547 = (_i64Subtract(0,0,($1543|0),($1546|0))|0);
     $1548 = tempRet0;
     $1549 = ((($1539)) + 8|0);
     $1550 = $1549;
     $1551 = $1550;
     HEAP32[$1551>>2] = $1547;
     $1552 = (($1550) + 4)|0;
     $1553 = $1552;
     HEAP32[$1553>>2] = $1548;
     $1554 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1554;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 32:  {
     $1555 = ((($current_frame$1$reg2mem1565$0)) + 32|0);
     $1556 = HEAP32[$1555>>2]|0;
     $1557 = ((($1556)) + 4|0);
     $1558 = HEAP32[$1557>>2]|0;
     __THREW__ = 0;
     invoke_viii(4,($1558|0));
     $1559 = __THREW__; __THREW__ = 0;
     if ((($1559|0) != 0) & ((threwValue|0) != 0)) { $1560 = _testSetjmp(HEAP32[$1559>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1560|0) == 0) { _longjmp($1559|0, threwValue|0); } tempRet0 = (threwValue); } else { $1560 = -1; };
     $1561 = tempRet0;
     $cond1611 = ($1560|0)==(1);
     if ($cond1611) {
      $$reg2mem1581$0 = $1561;
      continue L4;
     }
     label = 130;
     break;
    }
    case 31:  {
     $1562 = ((($current_frame$1$reg2mem1565$0)) + 32|0);
     $1563 = HEAP32[$1562>>2]|0;
     $1564 = ((($1563)) + 4|0);
     $1565 = HEAP32[$1564>>2]|0;
     $1566 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1567 = HEAP16[$1566>>1]|0;
     $1568 = $1567&65535;
     $1569 = (($vm_regs$1$reg2mem1559$0) + ($1568<<2)|0);
     $1570 = HEAP32[$1569>>2]|0;
     __THREW__ = 0;
     invoke_vii(25,($1565|0),($1570|0));
     $1571 = __THREW__; __THREW__ = 0;
     if ((($1571|0) != 0) & ((threwValue|0) != 0)) { $1572 = _testSetjmp(HEAP32[$1571>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1572|0) == 0) { _longjmp($1571|0, threwValue|0); } tempRet0 = (threwValue); } else { $1572 = -1; };
     $1573 = tempRet0;
     $cond1610 = ($1572|0)==(1);
     if ($cond1610) {
      $$reg2mem1581$0 = $1573;
      continue L4;
     }
     label = 130;
     break;
    }
    case 39:  {
     $1592 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1593 = HEAP16[$1592>>1]|0;
     $1594 = $1593&65535;
     $1595 = (($regs_from_main$1$reg2mem1557$0) + ($1594<<2)|0);
     $1596 = HEAP32[$1595>>2]|0;
     $1597 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1598 = HEAP16[$1597>>1]|0;
     $1599 = $1598&65535;
     $1600 = (($vm_regs$1$reg2mem1559$0) + ($1599<<2)|0);
     $1601 = HEAP32[$1600>>2]|0;
     __THREW__ = 0;
     invoke_vii(25,($1601|0),($1596|0));
     $1602 = __THREW__; __THREW__ = 0;
     if ((($1602|0) != 0) & ((threwValue|0) != 0)) { $1603 = _testSetjmp(HEAP32[$1602>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1603|0) == 0) { _longjmp($1602|0, threwValue|0); } tempRet0 = (threwValue); } else { $1603 = -1; };
     $1604 = tempRet0;
     $cond1609 = ($1603|0)==(1);
     if ($cond1609) {
      $$reg2mem1581$0 = $1604;
      continue L4;
     }
     $1605 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1605;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 40:  {
     $1606 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1607 = HEAP16[$1606>>1]|0;
     $1608 = $1607&65535;
     $1609 = (($vm_regs$1$reg2mem1559$0) + ($1608<<2)|0);
     $1610 = HEAP32[$1609>>2]|0;
     $1611 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1612 = HEAP16[$1611>>1]|0;
     $1613 = $1612&65535;
     $1614 = (($regs_from_main$1$reg2mem1557$0) + ($1613<<2)|0);
     $1615 = HEAP32[$1614>>2]|0;
     __THREW__ = 0;
     invoke_vii(25,($1615|0),($1610|0));
     $1616 = __THREW__; __THREW__ = 0;
     if ((($1616|0) != 0) & ((threwValue|0) != 0)) { $1617 = _testSetjmp(HEAP32[$1616>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1617|0) == 0) { _longjmp($1616|0, threwValue|0); } tempRet0 = (threwValue); } else { $1617 = -1; };
     $1618 = tempRet0;
     $cond1608 = ($1617|0)==(1);
     if ($cond1608) {
      $$reg2mem1581$0 = $1618;
      continue L4;
     }
     $1619 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1619;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 1:  {
     $1620 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1621 = HEAP16[$1620>>1]|0;
     $1622 = $1621&65535;
     $1623 = (($vm_regs$1$reg2mem1559$0) + ($1622<<2)|0);
     $1624 = HEAP32[$1623>>2]|0;
     $1625 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1626 = HEAP16[$1625>>1]|0;
     $1627 = $1626&65535;
     $1628 = (($vm_regs$1$reg2mem1559$0) + ($1627<<2)|0);
     $1629 = HEAP32[$1628>>2]|0;
     __THREW__ = 0;
     invoke_vii(25,($1629|0),($1624|0));
     $1630 = __THREW__; __THREW__ = 0;
     if ((($1630|0) != 0) & ((threwValue|0) != 0)) { $1631 = _testSetjmp(HEAP32[$1630>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1631|0) == 0) { _longjmp($1630|0, threwValue|0); } tempRet0 = (threwValue); } else { $1631 = -1; };
     $1632 = tempRet0;
     $cond1607 = ($1631|0)==(1);
     if ($cond1607) {
      $$reg2mem1581$0 = $1632;
      continue L4;
     }
     $1633 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1633;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 37:  {
     __THREW__ = 0;
     invoke_vii(26,($vm|0),($code$1$reg2mem1555$0|0));
     $1634 = __THREW__; __THREW__ = 0;
     if ((($1634|0) != 0) & ((threwValue|0) != 0)) { $1635 = _testSetjmp(HEAP32[$1634>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1635|0) == 0) { _longjmp($1634|0, threwValue|0); } tempRet0 = (threwValue); } else { $1635 = -1; };
     $1636 = tempRet0;
     $cond1606 = ($1635|0)==(1);
     if ($cond1606) {
      $$reg2mem1581$0 = $1636;
      continue L4;
     }
     $1637 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1637;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 49:  {
     __THREW__ = 0;
     invoke_vii(27,($vm|0),($code$1$reg2mem1555$0|0));
     $1638 = __THREW__; __THREW__ = 0;
     if ((($1638|0) != 0) & ((threwValue|0) != 0)) { $1639 = _testSetjmp(HEAP32[$1638>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1639|0) == 0) { _longjmp($1638|0, threwValue|0); } tempRet0 = (threwValue); } else { $1639 = -1; };
     $1640 = tempRet0;
     $cond1605 = ($1639|0)==(1);
     if ($cond1605) {
      $$reg2mem1581$0 = $1640;
      continue L4;
     }
     $1641 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1641;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 38:  {
     __THREW__ = 0;
     invoke_vii(28,($vm|0),($code$1$reg2mem1555$0|0));
     $1642 = __THREW__; __THREW__ = 0;
     if ((($1642|0) != 0) & ((threwValue|0) != 0)) { $1643 = _testSetjmp(HEAP32[$1642>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1643|0) == 0) { _longjmp($1642|0, threwValue|0); } tempRet0 = (threwValue); } else { $1643 = -1; };
     $1644 = tempRet0;
     $cond1604 = ($1643|0)==(1);
     if ($cond1604) {
      $$reg2mem1581$0 = $1644;
      continue L4;
     }
     $1645 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1645;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 50:  {
     __THREW__ = 0;
     invoke_vii(29,($vm|0),($code$1$reg2mem1555$0|0));
     $1646 = __THREW__; __THREW__ = 0;
     if ((($1646|0) != 0) & ((threwValue|0) != 0)) { $1647 = _testSetjmp(HEAP32[$1646>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1647|0) == 0) { _longjmp($1646|0, threwValue|0); } tempRet0 = (threwValue); } else { $1647 = -1; };
     $1648 = tempRet0;
     $cond1603 = ($1647|0)==(1);
     if ($cond1603) {
      $$reg2mem1581$0 = $1648;
      continue L4;
     }
     $1649 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1649;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 35:  {
     __THREW__ = 0;
     invoke_vii(30,($vm|0),($code$1$reg2mem1555$0|0));
     $1650 = __THREW__; __THREW__ = 0;
     if ((($1650|0) != 0) & ((threwValue|0) != 0)) { $1651 = _testSetjmp(HEAP32[$1650>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1651|0) == 0) { _longjmp($1650|0, threwValue|0); } tempRet0 = (threwValue); } else { $1651 = -1; };
     $1652 = tempRet0;
     $cond1602 = ($1651|0)==(1);
     if ($cond1602) {
      $$reg2mem1581$0 = $1652;
      continue L4;
     }
     $1653 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1654 = HEAP16[$1653>>1]|0;
     $1655 = $1654&65535;
     $1656 = (($1655) + 4)|0;
     $1657 = (($code$1$reg2mem1555$0) + ($1656<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1657;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 34: case 33:  {
     __THREW__ = 0;
     invoke_vii(31,($vm|0),($code$1$reg2mem1555$0|0));
     $1658 = __THREW__; __THREW__ = 0;
     if ((($1658|0) != 0) & ((threwValue|0) != 0)) { $1659 = _testSetjmp(HEAP32[$1658>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1659|0) == 0) { _longjmp($1658|0, threwValue|0); } tempRet0 = (threwValue); } else { $1659 = -1; };
     $1660 = tempRet0;
     $cond1601 = ($1659|0)==(1);
     if ($cond1601) {
      $$reg2mem1581$0 = $1660;
      continue L4;
     }
     $1661 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1662 = HEAP16[$1661>>1]|0;
     $1663 = $1662&65535;
     $1664 = (($1663) + 4)|0;
     $1665 = (($code$1$reg2mem1555$0) + ($1664<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1665;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 36:  {
     __THREW__ = 0;
     invoke_vii(32,($vm|0),($code$1$reg2mem1555$0|0));
     $1666 = __THREW__; __THREW__ = 0;
     if ((($1666|0) != 0) & ((threwValue|0) != 0)) { $1667 = _testSetjmp(HEAP32[$1666>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1667|0) == 0) { _longjmp($1666|0, threwValue|0); } tempRet0 = (threwValue); } else { $1667 = -1; };
     $1668 = tempRet0;
     $cond1600 = ($1667|0)==(1);
     if ($cond1600) {
      $$reg2mem1581$0 = $1668;
      continue L4;
     }
     $1669 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1670 = HEAP16[$1669>>1]|0;
     $1671 = $1670&65535;
     $1672 = (($1671) + 5)|0;
     $1673 = (($code$1$reg2mem1555$0) + ($1672<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1673;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 64:  {
     __THREW__ = 0;
     invoke_vii(33,($vm|0),($code$1$reg2mem1555$0|0));
     $1674 = __THREW__; __THREW__ = 0;
     if ((($1674|0) != 0) & ((threwValue|0) != 0)) { $1675 = _testSetjmp(HEAP32[$1674>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1675|0) == 0) { _longjmp($1674|0, threwValue|0); } tempRet0 = (threwValue); } else { $1675 = -1; };
     $1676 = tempRet0;
     $cond1599 = ($1675|0)==(1);
     if ($cond1599) {
      $$reg2mem1581$0 = $1676;
      continue L4;
     }
     $1677 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1677;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 61:  {
     __THREW__ = 0;
     invoke_vii(34,($vm|0),($code$1$reg2mem1555$0|0));
     $1678 = __THREW__; __THREW__ = 0;
     if ((($1678|0) != 0) & ((threwValue|0) != 0)) { $1679 = _testSetjmp(HEAP32[$1678>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1679|0) == 0) { _longjmp($1678|0, threwValue|0); } tempRet0 = (threwValue); } else { $1679 = -1; };
     $1680 = tempRet0;
     $cond1598 = ($1679|0)==(1);
     if ($cond1598) {
      $$reg2mem1581$0 = $1680;
      continue L4;
     }
     $1681 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1681;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 59:  {
     $1682 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1683 = HEAP16[$1682>>1]|0;
     $1684 = $1683&65535;
     $1685 = (($upvalues$1$reg2mem1567$0) + ($1684<<2)|0);
     $1686 = HEAP32[$1685>>2]|0;
     $1687 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1688 = HEAP16[$1687>>1]|0;
     $1689 = $1688&65535;
     $1690 = (($vm_regs$1$reg2mem1559$0) + ($1689<<2)|0);
     $1691 = HEAP32[$1690>>2]|0;
     $1692 = ($1686|0)==(0|0);
     if ($1692) {
      __THREW__ = 0;
      $1693 = (invoke_ii(4,($1691|0))|0);
      $1694 = __THREW__; __THREW__ = 0;
      if ((($1694|0) != 0) & ((threwValue|0) != 0)) { $1695 = _testSetjmp(HEAP32[$1694>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1695|0) == 0) { _longjmp($1694|0, threwValue|0); } tempRet0 = (threwValue); } else { $1695 = -1; };
      $1696 = tempRet0;
      $cond1597 = ($1695|0)==(1);
      if ($cond1597) {
       $$reg2mem1581$0 = $1696;
       continue L4;
      }
      $1697 = HEAP16[$1682>>1]|0;
      $1698 = $1697&65535;
      $1699 = (($upvalues$1$reg2mem1567$0) + ($1698<<2)|0);
      HEAP32[$1699>>2] = $1693;
     } else {
      __THREW__ = 0;
      invoke_vii(25,($1686|0),($1691|0));
      $1700 = __THREW__; __THREW__ = 0;
      if ((($1700|0) != 0) & ((threwValue|0) != 0)) { $1701 = _testSetjmp(HEAP32[$1700>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1701|0) == 0) { _longjmp($1700|0, threwValue|0); } tempRet0 = (threwValue); } else { $1701 = -1; };
      $1702 = tempRet0;
      $cond1596 = ($1701|0)==(1);
      if ($cond1596) {
       $$reg2mem1581$0 = $1702;
       continue L4;
      }
     }
     $1703 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1703;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 58:  {
     $1704 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1705 = HEAP16[$1704>>1]|0;
     $1706 = $1705&65535;
     $1707 = (($vm_regs$1$reg2mem1559$0) + ($1706<<2)|0);
     $1708 = HEAP32[$1707>>2]|0;
     $1709 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1710 = HEAP16[$1709>>1]|0;
     $1711 = $1710&65535;
     $1712 = (($upvalues$1$reg2mem1567$0) + ($1711<<2)|0);
     $1713 = HEAP32[$1712>>2]|0;
     __THREW__ = 0;
     invoke_vii(25,($1708|0),($1713|0));
     $1714 = __THREW__; __THREW__ = 0;
     if ((($1714|0) != 0) & ((threwValue|0) != 0)) { $1715 = _testSetjmp(HEAP32[$1714>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1715|0) == 0) { _longjmp($1714|0, threwValue|0); } tempRet0 = (threwValue); } else { $1715 = -1; };
     $1716 = tempRet0;
     $cond1595 = ($1715|0)==(1);
     if ($cond1595) {
      $$reg2mem1581$0 = $1716;
      continue L4;
     }
     $1717 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1717;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 66:  {
     __THREW__ = 0;
     $1718 = (invoke_iii(3,($vm|0),($code$1$reg2mem1555$0|0))|0);
     $1719 = __THREW__; __THREW__ = 0;
     if ((($1719|0) != 0) & ((threwValue|0) != 0)) { $1720 = _testSetjmp(HEAP32[$1719>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1720|0) == 0) { _longjmp($1719|0, threwValue|0); } tempRet0 = (threwValue); } else { $1720 = -1; };
     $1721 = tempRet0;
     $cond1594 = ($1720|0)==(1);
     if ($cond1594) {
      $$reg2mem1581$0 = $1721;
      continue L4;
     }
     $1722 = (($code$1$reg2mem1555$0) + ($1718<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1722;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 26:  {
     $1723 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1724 = HEAP16[$1723>>1]|0;
     $1725 = $1724&65535;
     $1726 = (($vm_regs$1$reg2mem1559$0) + ($1725<<2)|0);
     $1727 = HEAP32[$1726>>2]|0;
     $1728 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1729 = HEAP16[$1728>>1]|0;
     $1730 = $1729&65535;
     $1731 = (($vm_regs$1$reg2mem1559$0) + ($1730<<2)|0);
     $1732 = HEAP32[$1731>>2]|0;
     $1733 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1734 = HEAP16[$1733>>1]|0;
     $1735 = $1734&65535;
     $1736 = (($vm_regs$1$reg2mem1559$0) + ($1735<<2)|0);
     $1737 = HEAP32[$1736>>2]|0;
     $1738 = ((($1727)) + 8|0);
     $1739 = $1738;
     $1740 = $1739;
     $1741 = HEAP32[$1740>>2]|0;
     $1742 = (($1739) + 4)|0;
     $1743 = $1742;
     $1744 = HEAP32[$1743>>2]|0;
     $1745 = ((($1737)) + 8|0);
     $1746 = $1745;
     $1747 = $1746;
     $1748 = HEAP32[$1747>>2]|0;
     $1749 = (($1746) + 4)|0;
     $1750 = $1749;
     $1751 = HEAP32[$1750>>2]|0;
     $1752 = (_i64Add(($1748|0),($1751|0),($1741|0),($1744|0))|0);
     $1753 = tempRet0;
     $1754 = ($1751|0)>(0);
     $1755 = ($1748>>>0)>(0);
     $1756 = ($1751|0)==(0);
     $1757 = $1756 & $1755;
     $1758 = $1754 | $1757;
     $1759 = ((($1732)) + 8|0);
     $1760 = $1759;
     $1761 = $1760;
     $1762 = HEAP32[$1761>>2]|0;
     $1763 = (($1760) + 4)|0;
     $1764 = $1763;
     $1765 = HEAP32[$1764>>2]|0;
     if ($1758) {
      $1766 = ($1753|0)>($1765|0);
      $1767 = ($1752>>>0)>($1762>>>0);
      $1768 = ($1753|0)==($1765|0);
      $1769 = $1768 & $1767;
      $1770 = $1766 | $1769;
      if ($1770) {
       label = 169;
      } else {
       label = 168;
      }
     } else {
      $1771 = ($1753|0)<($1765|0);
      $1772 = ($1752>>>0)<($1762>>>0);
      $1773 = ($1753|0)==($1765|0);
      $1774 = $1773 & $1772;
      $1775 = $1771 | $1774;
      if ($1775) {
       label = 169;
      } else {
       label = 168;
      }
     }
     if ((label|0) == 168) {
      label = 0;
      $1776 = ((($code$1$reg2mem1555$0)) + 10|0);
      $1777 = HEAP16[$1776>>1]|0;
      $1778 = $1777&65535;
      $1779 = (($vm_regs$1$reg2mem1559$0) + ($1778<<2)|0);
      $1780 = HEAP32[$1779>>2]|0;
      $1781 = ((($1780)) + 8|0);
      $1782 = $1781;
      $1783 = $1782;
      HEAP32[$1783>>2] = $1752;
      $1784 = (($1782) + 4)|0;
      $1785 = $1784;
      HEAP32[$1785>>2] = $1753;
      $1786 = $1738;
      $1787 = $1786;
      HEAP32[$1787>>2] = $1752;
      $1788 = (($1786) + 4)|0;
      $1789 = $1788;
      HEAP32[$1789>>2] = $1753;
      $1790 = ((($code$1$reg2mem1555$0)) + 14|0);
      $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1790;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
      label = 195;
      break L21;
     }
     else if ((label|0) == 169) {
      label = 0;
      $1791 = ((($code$1$reg2mem1555$0)) + 12|0);
      $1792 = HEAP16[$1791>>1]|0;
      $1793 = $1792&65535;
      $1794 = (($code$1$reg2mem1555$0) + ($1793<<1)|0);
      $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1794;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
      label = 195;
      break L21;
     }
     break;
    }
    case 51:  {
     $1795 = HEAP32[$73>>2]|0;
     $1796 = ((($1795)) + 24|0);
     $1797 = HEAP32[$1796>>2]|0;
     $1798 = ($1797|0)==(0|0);
     if ($1798) {
      __THREW__ = 0;
      invoke_vi(9,($vm|0));
      $1799 = __THREW__; __THREW__ = 0;
      if ((($1799|0) != 0) & ((threwValue|0) != 0)) { $1800 = _testSetjmp(HEAP32[$1799>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1800|0) == 0) { _longjmp($1799|0, threwValue|0); } tempRet0 = (threwValue); } else { $1800 = -1; };
      $1801 = tempRet0;
      $cond1593 = ($1800|0)==(1);
      if ($cond1593) {
       $$reg2mem1581$0 = $1801;
       continue L4;
      }
     }
     $1802 = HEAP32[$73>>2]|0;
     HEAP32[$1802>>2] = $current_frame$1$reg2mem1565$0;
     $1803 = HEAP32[$74>>2]|0;
     $1804 = ((($1802)) + 12|0);
     HEAP32[$1804>>2] = $1803;
     $1805 = HEAP32[$current_frame$1$reg2mem1565$0>>2]|0;
     $1806 = ((($1805)) + 36|0);
     $1807 = HEAP32[$1806>>2]|0;
     $1808 = $code$1$reg2mem1555$0;
     $1809 = (($1808) - ($1807))|0;
     $1810 = $1809 >> 1;
     $1811 = (($1810) + 2)|0;
     $1812 = ((($1802)) + 8|0);
     HEAP32[$1812>>2] = $1811;
     $1813 = HEAP32[$10>>2]|0;
     $1814 = HEAP32[$1813>>2]|0;
     $1815 = ((($1802)) + 20|0);
     HEAP32[$1815>>2] = $1814;
     $1816 = $vm_regs$1$reg2mem1559$0;
     $1817 = $regs_from_main$1$reg2mem1557$0;
     $1818 = (($1816) - ($1817))|0;
     $1819 = $1818 >> 2;
     $1820 = ((($1802)) + 4|0);
     HEAP32[$1820>>2] = $1819;
     $1821 = HEAP32[$73>>2]|0;
     $1822 = ((($1821)) + 24|0);
     $1823 = HEAP32[$1822>>2]|0;
     HEAP32[$73>>2] = $1823;
     $1824 = ((($code$1$reg2mem1555$0)) + 6|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1824;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 52:  {
     $1825 = HEAP32[$75>>2]|0;
     $1826 = ((($1825)) + 28|0);
     $1827 = HEAP32[$1826>>2]|0;
     HEAP32[$75>>2] = $1827;
     $1828 = ((($code$1$reg2mem1555$0)) + 2|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1828;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 55:  {
     $1829 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1830 = HEAP16[$1829>>1]|0;
     $1831 = $1830&65535;
     $1832 = (($vm_regs$1$reg2mem1559$0) + ($1831<<2)|0);
     $1833 = HEAP32[$1832>>2]|0;
     __THREW__ = 0;
     invoke_vii(35,($vm|0),($1833|0));
     $1834 = __THREW__; __THREW__ = 0;
     if ((($1834|0) != 0) & ((threwValue|0) != 0)) { $1835 = _testSetjmp(HEAP32[$1834>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1835|0) == 0) { _longjmp($1834|0, threwValue|0); } tempRet0 = (threwValue); } else { $1835 = -1; };
     $1836 = tempRet0;
     $cond1592 = ($1835|0)==(1);
     if ($cond1592) {
      $$reg2mem1581$0 = $1836;
      continue L4;
     }
     $1837 = ((($code$1$reg2mem1555$0)) + 6|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1837;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 48: case 47: case 46:  {
     __THREW__ = 0;
     invoke_vii(36,($vm|0),($code$1$reg2mem1555$0|0));
     $1838 = __THREW__; __THREW__ = 0;
     if ((($1838|0) != 0) & ((threwValue|0) != 0)) { $1839 = _testSetjmp(HEAP32[$1838>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1839|0) == 0) { _longjmp($1838|0, threwValue|0); } tempRet0 = (threwValue); } else { $1839 = -1; };
     $1840 = tempRet0;
     $cond1591 = ($1839|0)==(1);
     if ($cond1591) {
      $$reg2mem1581$0 = $1840;
      continue L4;
     }
     $1841 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1841;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 56:  {
     $1842 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1843 = HEAP16[$1842>>1]|0;
     $1844 = $1843&65535;
     $1845 = (($vm_regs$1$reg2mem1559$0) + ($1844<<2)|0);
     $1846 = HEAP32[$1845>>2]|0;
     $1847 = HEAP16[$1846>>1]|0;
     $1848 = $1847&65535;
     $1849 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1850 = HEAP16[$1849>>1]|0;
     $1851 = $1850&65535;
     $1852 = (($1848) + 5)|0;
     $1853 = (($1852) - ($1851))|0;
     $1854 = (($code$1$reg2mem1555$0) + ($1853<<1)|0);
     $1855 = HEAP16[$1854>>1]|0;
     $1856 = $1855&65535;
     $1857 = (($code$1$reg2mem1555$0) + ($1856<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1857;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 57:  {
     $1858 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1859 = HEAP16[$1858>>1]|0;
     $1860 = $1859&65535;
     $1861 = (($vm_regs$1$reg2mem1559$0) + ($1860<<2)|0);
     $1862 = HEAP32[$1861>>2]|0;
     $1863 = ((($1862)) + 8|0);
     $1864 = HEAP32[$1863>>2]|0;
     $1865 = ((($1864)) + 16|0);
     $1866 = HEAP32[$1865>>2]|0;
     $1867 = ((($code$1$reg2mem1555$0)) + 6|0);
     $1868 = HEAP16[$1867>>1]|0;
     $1869 = ($1868<<16>>16)==(0);
     $1870 = ((($code$1$reg2mem1555$0)) + 8|0);
     if ($1869) {
      $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1870;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
      label = 195;
     } else {
      $$reg2mem1519$0 = $1870;$i$02$reg2mem1517$0 = 0;
      while(1) {
       $1871 = HEAP16[$$reg2mem1519$0>>1]|0;
       $1872 = $1871&65535;
       $1873 = (($vm_regs$1$reg2mem1559$0) + ($1872<<2)|0);
       $1874 = HEAP32[$1873>>2]|0;
       $1875 = (($1866) + ($i$02$reg2mem1517$0<<2)|0);
       $1876 = HEAP32[$1875>>2]|0;
       __THREW__ = 0;
       invoke_vii(25,($1874|0),($1876|0));
       $1877 = __THREW__; __THREW__ = 0;
       if ((($1877|0) != 0) & ((threwValue|0) != 0)) { $1878 = _testSetjmp(HEAP32[$1877>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1878|0) == 0) { _longjmp($1877|0, threwValue|0); } tempRet0 = (threwValue); } else { $1878 = -1; };
       $1879 = tempRet0;
       $cond1590 = ($1878|0)==(1);
       if ($cond1590) {
        $$reg2mem1581$0 = $1879;
        continue L4;
       }
       $1880 = (($i$02$reg2mem1517$0) + 1)|0;
       $1881 = HEAP16[$1867>>1]|0;
       $1882 = $1881&65535;
       $1883 = ($1880|0)<($1882|0);
       $1884 = (($i$02$reg2mem1517$0) + 5)|0;
       $1885 = (($code$1$reg2mem1555$0) + ($1884<<1)|0);
       if ($1883) {
        $$reg2mem1519$0 = $1885;$i$02$reg2mem1517$0 = $1880;
       } else {
        $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1885;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
        label = 195;
        break;
       }
      }
     }
     break;
    }
    case 60:  {
     __THREW__ = 0;
     $1886 = (invoke_iii(4,($vm|0),($code$1$reg2mem1555$0|0))|0);
     $1887 = __THREW__; __THREW__ = 0;
     if ((($1887|0) != 0) & ((threwValue|0) != 0)) { $1888 = _testSetjmp(HEAP32[$1887>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1888|0) == 0) { _longjmp($1887|0, threwValue|0); } tempRet0 = (threwValue); } else { $1888 = -1; };
     $1889 = tempRet0;
     $cond1589 = ($1888|0)==(1);
     if ($cond1589) {
      $$reg2mem1581$0 = $1889;
      continue L4;
     }
     $1890 = ((($code$1$reg2mem1555$0)) + 8|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1890;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $1886;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 62:  {
     __THREW__ = 0;
     $1891 = (invoke_iii(5,($vm|0),($code$1$reg2mem1555$0|0))|0);
     $1892 = __THREW__; __THREW__ = 0;
     if ((($1892|0) != 0) & ((threwValue|0) != 0)) { $1893 = _testSetjmp(HEAP32[$1892>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1893|0) == 0) { _longjmp($1892|0, threwValue|0); } tempRet0 = (threwValue); } else { $1893 = -1; };
     $1894 = tempRet0;
     $cond1588 = ($1893|0)==(1);
     if ($cond1588) {
      $$reg2mem1581$0 = $1894;
      continue L4;
     }
     $1895 = ((($code$1$reg2mem1555$0)) + 10|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1895;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $1891;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 63:  {
     __THREW__ = 0;
     $1896 = (invoke_iii(6,($vm|0),($code$1$reg2mem1555$0|0))|0);
     $1897 = __THREW__; __THREW__ = 0;
     if ((($1897|0) != 0) & ((threwValue|0) != 0)) { $1898 = _testSetjmp(HEAP32[$1897>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1898|0) == 0) { _longjmp($1897|0, threwValue|0); } tempRet0 = (threwValue); } else { $1898 = -1; };
     $1899 = tempRet0;
     $cond1587 = ($1898|0)==(1);
     if ($cond1587) {
      $$reg2mem1581$0 = $1899;
      continue L4;
     }
     $1900 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1901 = HEAP16[$1900>>1]|0;
     $1902 = $1901&65535;
     $1903 = (($1902) + 4)|0;
     $1904 = (($code$1$reg2mem1555$0) + ($1903<<1)|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1904;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $1896;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 27:  {
     $1905 = ((($code$1$reg2mem1555$0)) + 4|0);
     $1906 = HEAP16[$1905>>1]|0;
     $1907 = $1906&65535;
     $1908 = (($vm_regs$1$reg2mem1559$0) + ($1907<<2)|0);
     $1909 = HEAP32[$1908>>2]|0;
     $1910 = ((($code$1$reg2mem1555$0)) + 8|0);
     $1911 = HEAP16[$1910>>1]|0;
     $1912 = $1911&65535;
     $1913 = (($vm_regs$1$reg2mem1559$0) + ($1912<<2)|0);
     $1914 = HEAP32[$1913>>2]|0;
     $1915 = ((($code$1$reg2mem1555$0)) + 10|0);
     $1916 = HEAP16[$1915>>1]|0;
     $1917 = $1916&65535;
     $1918 = (($vm_regs$1$reg2mem1559$0) + ($1917<<2)|0);
     $1919 = HEAP32[$1918>>2]|0;
     $1920 = ((($1914)) + 8|0);
     $1921 = $1920;
     $1922 = $1921;
     $1923 = HEAP32[$1922>>2]|0;
     $1924 = (($1921) + 4)|0;
     $1925 = $1924;
     $1926 = HEAP32[$1925>>2]|0;
     $1927 = ($1923|0)==(0);
     $1928 = ($1926|0)==(0);
     $1929 = $1927 & $1928;
     if ($1929) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),23,(9294|0));
      $1930 = __THREW__; __THREW__ = 0;
      if ((($1930|0) != 0) & ((threwValue|0) != 0)) { $1931 = _testSetjmp(HEAP32[$1930>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1931|0) == 0) { _longjmp($1930|0, threwValue|0); } tempRet0 = (threwValue); } else { $1931 = -1; };
      $1932 = tempRet0;
      $cond1586 = ($1931|0)==(1);
      if ($cond1586) {
       $$reg2mem1581$0 = $1932;
       continue L4;
      }
     }
     $1933 = ((($1909)) + 8|0);
     $1934 = $1933;
     $1935 = $1934;
     $1936 = HEAP32[$1935>>2]|0;
     $1937 = (($1934) + 4)|0;
     $1938 = $1937;
     $1939 = HEAP32[$1938>>2]|0;
     $1940 = $1920;
     $1941 = $1940;
     $1942 = HEAP32[$1941>>2]|0;
     $1943 = (($1940) + 4)|0;
     $1944 = $1943;
     $1945 = HEAP32[$1944>>2]|0;
     $1946 = (_i64Subtract(($1936|0),($1939|0),($1942|0),($1945|0))|0);
     $1947 = tempRet0;
     $1948 = ((($1919)) + 8|0);
     $1949 = $1948;
     $1950 = $1949;
     HEAP32[$1950>>2] = $1946;
     $1951 = (($1949) + 4)|0;
     $1952 = $1951;
     HEAP32[$1952>>2] = $1947;
     $1953 = $1933;
     $1954 = $1953;
     HEAP32[$1954>>2] = $1946;
     $1955 = (($1953) + 4)|0;
     $1956 = $1955;
     HEAP32[$1956>>2] = $1947;
     HEAP32[$1919>>2] = 1;
     $1957 = ((($code$1$reg2mem1555$0)) + 12|0);
     $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1957;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    case 67:  {
     $1958 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     invoke_vi(10,($1958|0));
     $1959 = __THREW__; __THREW__ = 0;
     if ((($1959|0) != 0) & ((threwValue|0) != 0)) { $1960 = _testSetjmp(HEAP32[$1959>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1960|0) == 0) { _longjmp($1959|0, threwValue|0); } tempRet0 = (threwValue); } else { $1960 = -1; };
     $1961 = tempRet0;
     $cond1585 = ($1960|0)==(1);
     if ($cond1585) {
      $$reg2mem1581$0 = $1961;
      continue L4;
     }
     $$0$reg2mem$0 = 1;$code$5$reg2mem1501$0 = $code$1$reg2mem1555$0;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
     break;
    }
    default: {
     $$0$reg2mem$0 = 1;$code$5$reg2mem1501$0 = $code$1$reg2mem1555$0;$current_frame$3$reg2mem1511$0 = $current_frame$1$reg2mem1565$0;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $num_registers$0$reg2mem1561$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $upvalues$1$reg2mem1567$0;$vm_regs$5$reg2mem1505$0 = $vm_regs$1$reg2mem1559$0;
     label = 195;
    }
    }
   } while(0);
   if ((label|0) == 110) {
    label = 0;
    $1427 = ((($current_frame$1$reg2mem1565$0)) + 36|0);
    $1428 = HEAP32[$1427>>2]|0;
    $1429 = ($1428|0)==(0|0);
    if ($1429) {
     $1430 = HEAP32[$70>>2]|0;
     $1431 = ($1430>>>0)>(100);
     if ($1431) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),22,(9211|0));
      $1432 = __THREW__; __THREW__ = 0;
      if ((($1432|0) != 0) & ((threwValue|0) != 0)) { $1433 = _testSetjmp(HEAP32[$1432>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1433|0) == 0) { _longjmp($1432|0, threwValue|0); } tempRet0 = (threwValue); } else { $1433 = -1; };
      $1434 = tempRet0;
      $cond1616 = ($1433|0)==(1);
      if ($cond1616) {
       $$reg2mem1581$0 = $1434;
       continue L4;
      }
     }
     __THREW__ = 0;
     invoke_vi(8,($vm|0));
     $1435 = __THREW__; __THREW__ = 0;
     if ((($1435|0) != 0) & ((threwValue|0) != 0)) { $1436 = _testSetjmp(HEAP32[$1435>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1436|0) == 0) { _longjmp($1435|0, threwValue|0); } tempRet0 = (threwValue); } else { $1436 = -1; };
     $1437 = tempRet0;
     $cond1615 = ($1436|0)==(1);
     if ($cond1615) {
      $$reg2mem1581$0 = $1437;
      continue L4;
     }
    }
    $1438 = ((($code$1$reg2mem1555$0)) + 6|0);
    $1439 = HEAP16[$1438>>1]|0;
    $1440 = $1439&65535;
    $1441 = ((($code$1$reg2mem1555$0)) + 2|0);
    $1442 = HEAP16[$1441>>1]|0;
    $1443 = $1442&65535;
    $1444 = ((($current_frame$1$reg2mem1565$0)) + 16|0);
    HEAP32[$1444>>2] = $1443;
    $1445 = (($code$1$reg2mem1555$0) + ($1440<<1)|0);
    $1446 = ((($1445)) + 10|0);
    $1447 = ((($current_frame$1$reg2mem1565$0)) + 12|0);
    HEAP32[$1447>>2] = $1446;
    $1448 = ((($current_frame$1$reg2mem1565$0)) + 24|0);
    HEAP32[$1448>>2] = $upvalues$1$reg2mem1567$0;
    $1449 = ((($fval$2$reg2mem1527$0)) + 14|0);
    $1450 = HEAP16[$1449>>1]|0;
    $1451 = $1450&65535;
    $1452 = (($1451) + ($num_registers$0$reg2mem1561$0))|0;
    $1453 = ($1452|0)>($max_registers$0$reg2mem1563$0|0);
    if ($1453) {
     __THREW__ = 0;
     invoke_vii(23,($vm|0),($1452|0));
     $1454 = __THREW__; __THREW__ = 0;
     if ((($1454|0) != 0) & ((threwValue|0) != 0)) { $1455 = _testSetjmp(HEAP32[$1454>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1455|0) == 0) { _longjmp($1454|0, threwValue|0); } tempRet0 = (threwValue); } else { $1455 = -1; };
     $1456 = tempRet0;
     $cond1614 = ($1455|0)==(1);
     if ($cond1614) {
      $$reg2mem1581$0 = $1456;
      continue L4;
     }
     $1457 = HEAP32[$6>>2]|0;
     $1458 = HEAP32[$vm>>2]|0;
     $1459 = HEAP32[$8>>2]|0;
     $max_registers$4$reg2mem1525$0 = $1459;$regs_from_main$5$reg2mem1521$0 = $1457;$vm_regs$4$reg2mem1523$0 = $1458;
    } else {
     $max_registers$4$reg2mem1525$0 = $max_registers$0$reg2mem1563$0;$regs_from_main$5$reg2mem1521$0 = $regs_from_main$1$reg2mem1557$0;$vm_regs$4$reg2mem1523$0 = $vm_regs$1$reg2mem1559$0;
    }
    __THREW__ = 0;
    invoke_viii(3,($vm|0),($fval$2$reg2mem1527$0|0),($code$1$reg2mem1555$0|0));
    $1460 = __THREW__; __THREW__ = 0;
    if ((($1460|0) != 0) & ((threwValue|0) != 0)) { $1461 = _testSetjmp(HEAP32[$1460>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1461|0) == 0) { _longjmp($1460|0, threwValue|0); } tempRet0 = (threwValue); } else { $1461 = -1; };
    $1462 = tempRet0;
    $cond1613 = ($1461|0)==(1);
    if ($cond1613) {
     $$reg2mem1581$0 = $1462;
     continue L4;
    }
    $1463 = HEAP32[$61>>2]|0;
    $1464 = ((($code$1$reg2mem1555$0)) + 8|0);
    $1465 = HEAP16[$1464>>1]|0;
    $1466 = $1465&65535;
    $1467 = (($vm_regs$4$reg2mem1523$0) + ($1466<<2)|0);
    $1468 = HEAP32[$1467>>2]|0;
    $1469 = ((($current_frame$1$reg2mem1565$0)) + 4|0);
    HEAP32[$1469>>2] = $1468;
    $1470 = ((($current_frame$1$reg2mem1565$0)) + 8|0);
    $1471 = HEAP32[$1470>>2]|0;
    $1472 = (($vm_regs$4$reg2mem1523$0) + ($1471<<2)|0);
    HEAP32[$vm>>2] = $1472;
    $1473 = HEAP32[$1427>>2]|0;
    HEAP32[$0>>2] = $1473;
    HEAP32[$1473>>2] = $fval$2$reg2mem1527$0;
    $1474 = HEAP16[$1449>>1]|0;
    $1475 = $1474&65535;
    $1476 = ((($1473)) + 8|0);
    HEAP32[$1476>>2] = $1475;
    $1477 = ((($fval$2$reg2mem1527$0)) + 36|0);
    $1478 = HEAP32[$1477>>2]|0;
    $1479 = ((($1473)) + 12|0);
    HEAP32[$1479>>2] = $1478;
    $1480 = ((($1473)) + 24|0);
    HEAP32[$1480>>2] = 0;
    $1481 = HEAP32[$71>>2]|0;
    $1482 = (($1481) + 1)|0;
    HEAP32[$71>>2] = $1482;
    $1483 = HEAP32[$1477>>2]|0;
    $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1483;$current_frame$3$reg2mem1511$0 = $1473;$fval$3$reg2mem1515$0 = $fval$2$reg2mem1527$0;$max_registers$5$reg2mem1509$0 = $max_registers$4$reg2mem1525$0;$num_registers$2$reg2mem1507$0 = $1463;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$5$reg2mem1521$0;$upvalues$3$reg2mem1513$0 = 0;$vm_regs$5$reg2mem1505$0 = $1472;
    label = 195;
   }
   else if ((label|0) == 130) {
    label = 0;
    $1574 = ((($current_frame$1$reg2mem1565$0)) + 28|0);
    HEAP32[$1574>>2] = 0;
    $1575 = ((($current_frame$1$reg2mem1565$0)) + 32|0);
    $1576 = HEAP32[$1575>>2]|0;
    HEAP32[$0>>2] = $1576;
    $1577 = HEAP32[$72>>2]|0;
    $1578 = (($1577) + -1)|0;
    HEAP32[$72>>2] = $1578;
    $1579 = ((($1576)) + 36|0);
    $1580 = HEAP32[$1579>>2]|0;
    $1581 = ((($1580)) + 8|0);
    $1582 = HEAP32[$1581>>2]|0;
    $1583 = (($num_registers$0$reg2mem1561$0) - ($1582))|0;
    HEAP32[$61>>2] = $1583;
    $1584 = ((($1576)) + 8|0);
    $1585 = HEAP32[$1584>>2]|0;
    $1586 = (0 - ($1585))|0;
    $1587 = (($vm_regs$1$reg2mem1559$0) + ($1586<<2)|0);
    HEAP32[$vm>>2] = $1587;
    $1588 = ((($1576)) + 24|0);
    $1589 = HEAP32[$1588>>2]|0;
    $1590 = ((($1576)) + 12|0);
    $1591 = HEAP32[$1590>>2]|0;
    $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1591;$current_frame$3$reg2mem1511$0 = $1576;$fval$3$reg2mem1515$0 = $fval$0$reg2mem1569$0;$max_registers$5$reg2mem1509$0 = $max_registers$0$reg2mem1563$0;$num_registers$2$reg2mem1507$0 = $1583;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$1$reg2mem1557$0;$upvalues$3$reg2mem1513$0 = $1589;$vm_regs$5$reg2mem1505$0 = $1587;
    label = 195;
   }
   while(1) {
    if ((label|0) == 195) {
     label = 0;
     switch ($$0$reg2mem$0|0) {
     case 4:  {
      $code$1$reg2mem1555$0 = $code$5$reg2mem1501$0;$current_frame$1$reg2mem1565$0 = $current_frame$3$reg2mem1511$0;$fval$0$reg2mem1569$0 = $fval$3$reg2mem1515$0;$max_registers$0$reg2mem1563$0 = $max_registers$5$reg2mem1509$0;$num_registers$0$reg2mem1561$0 = $num_registers$2$reg2mem1507$0;$regs_from_main$1$reg2mem1557$0 = $regs_from_main$6$reg2mem1503$0;$upvalues$1$reg2mem1567$0 = $upvalues$3$reg2mem1513$0;$vm_regs$1$reg2mem1559$0 = $vm_regs$5$reg2mem1505$0;
      continue L19;
      break;
     }
     case 5:  {
      $code$3$reg2mem1539$0 = $code$5$reg2mem1501$0;$current_frame$2$reg2mem1549$0 = $current_frame$3$reg2mem1511$0;$fval$1$reg2mem1553$0 = $fval$3$reg2mem1515$0;$max_registers$1$reg2mem1547$0 = $max_registers$5$reg2mem1509$0;$num_registers$1$reg2mem1545$0 = $num_registers$2$reg2mem1507$0;$regs_from_main$2$reg2mem1541$0 = $regs_from_main$6$reg2mem1503$0;$upvalues$2$reg2mem1551$0 = $upvalues$3$reg2mem1513$0;$vm_regs$2$reg2mem1543$0 = $vm_regs$5$reg2mem1505$0;
      break;
     }
     default: {
      break L4;
     }
     }
    }
    $1345 = ((($current_frame$2$reg2mem1549$0)) + 36|0);
    $1346 = HEAP32[$1345>>2]|0;
    $1347 = ($1346|0)==(0|0);
    if ($1347) {
     $1348 = HEAP32[$63>>2]|0;
     $1349 = ($1348>>>0)>(100);
     if ($1349) {
      __THREW__ = 0;
      invoke_viii(2,($vm|0),22,(9211|0));
      $1350 = __THREW__; __THREW__ = 0;
      if ((($1350|0) != 0) & ((threwValue|0) != 0)) { $1351 = _testSetjmp(HEAP32[$1350>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1351|0) == 0) { _longjmp($1350|0, threwValue|0); } tempRet0 = (threwValue); } else { $1351 = -1; };
      $1352 = tempRet0;
      $cond1621 = ($1351|0)==(1);
      if ($cond1621) {
       $$reg2mem1581$0 = $1352;
       continue L4;
      }
     }
     __THREW__ = 0;
     invoke_vi(8,($vm|0));
     $1353 = __THREW__; __THREW__ = 0;
     if ((($1353|0) != 0) & ((threwValue|0) != 0)) { $1354 = _testSetjmp(HEAP32[$1353>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1354|0) == 0) { _longjmp($1353|0, threwValue|0); } tempRet0 = (threwValue); } else { $1354 = -1; };
     $1355 = tempRet0;
     $cond1620 = ($1354|0)==(1);
     if ($cond1620) {
      $$reg2mem1581$0 = $1355;
      continue L4;
     }
    }
    $1356 = ((($code$3$reg2mem1539$0)) + 6|0);
    $1357 = HEAP16[$1356>>1]|0;
    $1358 = $1357&65535;
    $1359 = ((($code$3$reg2mem1539$0)) + 2|0);
    $1360 = HEAP16[$1359>>1]|0;
    $1361 = $1360&65535;
    $1362 = ((($current_frame$2$reg2mem1549$0)) + 16|0);
    HEAP32[$1362>>2] = $1361;
    $1363 = (($code$3$reg2mem1539$0) + ($1358<<1)|0);
    $1364 = ((($1363)) + 10|0);
    $1365 = ((($current_frame$2$reg2mem1549$0)) + 12|0);
    HEAP32[$1365>>2] = $1364;
    $1366 = ((($current_frame$2$reg2mem1549$0)) + 24|0);
    HEAP32[$1366>>2] = $upvalues$2$reg2mem1551$0;
    $1367 = ((($fval$1$reg2mem1553$0)) + 14|0);
    $1368 = HEAP16[$1367>>1]|0;
    $1369 = $1368&65535;
    $1370 = (($1369) + ($num_registers$1$reg2mem1545$0))|0;
    $1371 = ($1370|0)>($max_registers$1$reg2mem1547$0|0);
    if ($1371) {
     __THREW__ = 0;
     invoke_vii(23,($vm|0),($1370|0));
     $1372 = __THREW__; __THREW__ = 0;
     if ((($1372|0) != 0) & ((threwValue|0) != 0)) { $1373 = _testSetjmp(HEAP32[$1372>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1373|0) == 0) { _longjmp($1372|0, threwValue|0); } tempRet0 = (threwValue); } else { $1373 = -1; };
     $1374 = tempRet0;
     $cond1619 = ($1373|0)==(1);
     if ($cond1619) {
      $$reg2mem1581$0 = $1374;
      continue L4;
     }
     $1375 = HEAP32[$6>>2]|0;
     $1376 = HEAP32[$vm>>2]|0;
     $1377 = HEAP32[$8>>2]|0;
     $max_registers$2$reg2mem1537$0 = $1377;$regs_from_main$3$reg2mem1533$0 = $1375;$vm_regs$3$reg2mem1535$0 = $1376;
    } else {
     $max_registers$2$reg2mem1537$0 = $max_registers$1$reg2mem1547$0;$regs_from_main$3$reg2mem1533$0 = $regs_from_main$2$reg2mem1541$0;$vm_regs$3$reg2mem1535$0 = $vm_regs$2$reg2mem1543$0;
    }
    $1378 = ((($fval$1$reg2mem1553$0)) + 32|0);
    $1379 = HEAP32[$1378>>2]|0;
    __THREW__ = 0;
    invoke_viii(3,($vm|0),($fval$1$reg2mem1553$0|0),($code$3$reg2mem1539$0|0));
    $1380 = __THREW__; __THREW__ = 0;
    if ((($1380|0) != 0) & ((threwValue|0) != 0)) { $1381 = _testSetjmp(HEAP32[$1380>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1381|0) == 0) { _longjmp($1380|0, threwValue|0); } tempRet0 = (threwValue); } else { $1381 = -1; };
    $1382 = tempRet0;
    $cond1617 = ($1381|0)==(1);
    if ($cond1617) {
     $$reg2mem1581$0 = $1382;
     continue L4;
    }
    $1383 = ((($code$3$reg2mem1539$0)) + 8|0);
    $1384 = HEAP16[$1383>>1]|0;
    $1385 = $1384&65535;
    $1386 = (($vm_regs$3$reg2mem1535$0) + ($1385<<2)|0);
    $1387 = HEAP32[$1386>>2]|0;
    $1388 = ((($current_frame$2$reg2mem1549$0)) + 4|0);
    HEAP32[$1388>>2] = $1387;
    $1389 = ((($current_frame$2$reg2mem1549$0)) + 8|0);
    $1390 = HEAP32[$1389>>2]|0;
    $1391 = (($vm_regs$3$reg2mem1535$0) + ($1390<<2)|0);
    HEAP32[$vm>>2] = $1391;
    $1392 = HEAP32[$1345>>2]|0;
    HEAP32[$0>>2] = $1392;
    $1393 = ((($1392)) + 20|0);
    HEAP32[$1393>>2] = $num_registers$1$reg2mem1545$0;
    HEAP32[$1392>>2] = $fval$1$reg2mem1553$0;
    $1394 = ((($1392)) + 16|0);
    HEAP32[$1394>>2] = -1;
    $1395 = ((($1392)) + 12|0);
    HEAP32[$1395>>2] = 0;
    $1396 = ((($1392)) + 28|0);
    HEAP32[$1396>>2] = 0;
    $1397 = ((($1392)) + 24|0);
    HEAP32[$1397>>2] = 0;
    $1398 = ((($1392)) + 8|0);
    HEAP32[$1398>>2] = $1358;
    $1399 = HEAP32[$64>>2]|0;
    $1400 = (($1399) + 1)|0;
    HEAP32[$64>>2] = $1400;
    __THREW__ = 0;
    invoke_vi($1379|0,($vm|0));
    $1401 = __THREW__; __THREW__ = 0;
    if ((($1401|0) != 0) & ((threwValue|0) != 0)) { $1402 = _testSetjmp(HEAP32[$1401>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1402|0) == 0) { _longjmp($1401|0, threwValue|0); } tempRet0 = (threwValue); } else { $1402 = -1; };
    $1403 = tempRet0;
    $cond1618 = ($1402|0)==(1);
    if ($cond1618) {
     $$reg2mem1581$0 = $1403;
     continue L4;
    }
    $1404 = HEAP32[$8>>2]|0;
    $1405 = ($1404|0)==($max_registers$2$reg2mem1537$0|0);
    if ($1405) {
     $max_registers$3$reg2mem1531$0 = $max_registers$2$reg2mem1537$0;$regs_from_main$4$reg2mem1529$0 = $regs_from_main$3$reg2mem1533$0;
    } else {
     $1406 = HEAP32[$6>>2]|0;
     $max_registers$3$reg2mem1531$0 = $1404;$regs_from_main$4$reg2mem1529$0 = $1406;
    }
    $1407 = ((($1392)) + 32|0);
    $1408 = HEAP32[$1407>>2]|0;
    $1409 = HEAP32[$6>>2]|0;
    $1410 = (($1409) + ($num_registers$1$reg2mem1545$0<<2)|0);
    $1411 = ((($1408)) + 8|0);
    $1412 = HEAP32[$1411>>2]|0;
    $1413 = (0 - ($1412))|0;
    $1414 = (($1410) + ($1413<<2)|0);
    HEAP32[$vm>>2] = $1414;
    HEAP32[$0>>2] = $1408;
    $1415 = (($1358) + 5)|0;
    $1416 = (($code$3$reg2mem1539$0) + ($1415<<1)|0);
    $1417 = HEAP32[$64>>2]|0;
    $1418 = (($1417) + -1)|0;
    HEAP32[$64>>2] = $1418;
    HEAP32[$61>>2] = $num_registers$1$reg2mem1545$0;
    $$0$reg2mem$0 = 4;$code$5$reg2mem1501$0 = $1416;$current_frame$3$reg2mem1511$0 = $1408;$fval$3$reg2mem1515$0 = $fval$1$reg2mem1553$0;$max_registers$5$reg2mem1509$0 = $max_registers$3$reg2mem1531$0;$num_registers$2$reg2mem1507$0 = $num_registers$1$reg2mem1545$0;$regs_from_main$6$reg2mem1503$0 = $regs_from_main$4$reg2mem1529$0;$upvalues$3$reg2mem1513$0 = $upvalues$2$reg2mem1551$0;$vm_regs$5$reg2mem1505$0 = $1414;
    label = 195;
   }
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _maybe_catch_exception($vm) {
 $vm = $vm|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa68 = 0, $$lcssa70 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $catch_iter$0 = 0, $catch_iter$0$lcssa = 0, $catch_iter$0$lcssa65 = 0;
 var $jump_location$1 = 0, $jump_location$1$lcssa = 0, $jump_location$2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($vm)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($vm)) + 4|0);
 $11 = ((($vm)) + 32|0);
 $catch_iter$0 = $7;
 L4: while(1) {
  $12 = ((($catch_iter$0)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($9|0);
  if (!($14)) {
   $catch_iter$0$lcssa = $catch_iter$0;
   label = 9;
   break;
  }
  $15 = HEAP32[$catch_iter$0>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($catch_iter$0)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($20) + -2)|0;
  $25 = (($24) + ($23))|0;
  $26 = HEAP32[$10>>2]|0;
  $27 = ((($catch_iter$0)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $jump_location$1 = $25;
  while(1) {
   $29 = (($jump_location$1) + 2)|0;
   $30 = (($18) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = HEAP32[$11>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_lily_class_greater_eq($35,$3)|0);
   $37 = ($36|0)==(0);
   if (!($37)) {
    $$lcssa = $18;$$lcssa68 = $26;$$lcssa70 = $28;$catch_iter$0$lcssa65 = $catch_iter$0;$jump_location$1$lcssa = $jump_location$1;
    label = 6;
    break L4;
   }
   $49 = (($jump_location$1) + 4)|0;
   $50 = (($18) + ($49<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $jump_location$2 = (($52) + ($jump_location$1))|0;
   $not$ = ($51<<16>>16)==(0);
   if ($not$) {
    break;
   } else {
    $jump_location$1 = $jump_location$2;
   }
  }
  $53 = ((($catch_iter$0)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$0 = 0;
   label = 14;
   break;
  } else {
   $catch_iter$0 = $54;
  }
 }
 if ((label|0) == 6) {
  $38 = (($$lcssa68) + ($$lcssa70<<2)|0);
  $39 = (($$lcssa) + ($jump_location$1$lcssa<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = ($40<<16>>16)==(54);
  $42 = (($jump_location$1$lcssa) + 3)|0;
  $43 = (($$lcssa) + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = (($38) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($jump_location$1$lcssa) + 5)|0;
  do {
   if ($41) {
    $58 = ((($vm)) + 76|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0|0);
    if ($60) {
     _make_proper_exception_val($vm,$3,$47);
     break;
    } else {
     _fixup_exception_val($vm,$47);
     break;
    }
   }
  } while(0);
  $61 = ((($vm)) + 76|0);
  HEAP32[$61>>2] = 0;
  $62 = HEAP32[$catch_iter$0$lcssa65>>2]|0;
  $63 = ((($vm)) + 24|0);
  HEAP32[$63>>2] = $62;
  $64 = ((($catch_iter$0$lcssa65)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($vm)) + 16|0);
  HEAP32[$66>>2] = $65;
  HEAP32[$vm>>2] = $38;
  $67 = HEAP32[$63>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($48<<1)|0);
  $72 = ((($67)) + 12|0);
  HEAP32[$72>>2] = $71;
  HEAP32[$4>>2] = $catch_iter$0$lcssa65;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $56 = ((($catch_iter$0$lcssa)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$4>>2] = $57;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _fixup_exception_val($vm,$result) {
 $vm = $vm|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_assign_value($result,$1);
 $2 = (_build_traceback_raw($vm)|0);
 $3 = ((($result)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_move_list_f(655360,$8,$2);
 return;
}
function _make_proper_exception_val($vm,$raised_cls,$result) {
 $vm = $vm|0;
 $raised_cls = $raised_cls|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_mb_get($3)|0);
 $5 = (_lily_new_instance_val(2)|0);
 $6 = (_lily_new_raw_string($4)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_mb_flush($9);
 _lily_instance_set_string($5,0,$6);
 $10 = (_build_traceback_raw($vm)|0);
 _lily_instance_set_list($5,1,$10);
 $11 = ((($raised_cls)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 | 655360;
 _lily_move_instance_f($14,$result,$5);
 return;
}
function _prep_registers($vm,$fval,$code) {
 $vm = $vm|0;
 $fval = $fval|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fval)) + 14|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + ($1))|0;
 $6 = HEAP32[$vm>>2]|0;
 $7 = ((($vm)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = ((($code)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(0);
 if ($12) {
  $i$0$lcssa = 0;
 } else {
  $i$01 = 0;
  while(1) {
   $13 = (($i$01) + 5)|0;
   $14 = (($code) + ($13<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15&65535;
   $17 = (($6) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($9) + ($i$01<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$18>>2]|0;
   $22 = $21 & 524288;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $24 = ((($18)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
   }
   $28 = HEAP32[$20>>2]|0;
   $29 = $28 & 524288;
   $30 = ($29|0)==(0);
   if (!($30)) {
    _lily_deref($20);
   }
   ;HEAP32[$20>>2]=HEAP32[$18>>2]|0;HEAP32[$20+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$18+12>>2]|0;
   $31 = (($i$01) + 1)|0;
   $32 = HEAP16[$10>>1]|0;
   $33 = $32&65535;
   $34 = ($31|0)<($33|0);
   if ($34) {
    $i$01 = $31;
   } else {
    $i$0$lcssa = $31;
    break;
   }
  }
 }
 $35 = HEAP16[$2>>1]|0;
 $36 = $35&65535;
 $37 = ($i$0$lcssa|0)==($36|0);
 if ($37) {
  HEAP32[$0>>2] = $5;
  return;
 }
 _scrub_registers($vm,$fval,$i$0$lcssa);
 HEAP32[$0>>2] = $5;
 return;
}
function _do_o_interpolation($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($vm)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_mb_flush($4);
 $5 = ($2<<16>>16)==(0);
 $6 = ((($code)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($0) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 if ($5) {
  $$lcssa = $10;
  $20 = (_lily_mb_get($4)|0);
  $21 = (_lily_new_raw_string($20)|0);
  _lily_move_string($$lcssa,$21);
  return;
 }
 $11 = $2&65535;
 $12 = $10;$i$01 = 0;
 while(1) {
  _lily_mb_add_value($4,$vm,$12);
  $13 = (($i$01) + 1)|0;
  $14 = (($i$01) + 4)|0;
  $15 = (($code) + ($14<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($0) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $exitcond = ($13|0)==($11|0);
  if ($exitcond) {
   $$lcssa = $19;
   break;
  } else {
   $12 = $19;$i$01 = $13;
  }
 }
 $20 = (_lily_mb_get($4)|0);
 $21 = (_lily_new_raw_string($20)|0);
 _lily_move_string($$lcssa,$21);
 return;
}
function _do_o_get_item($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index_int$0 = 0, $index_int$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($code)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($0) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($code)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$5>>1]|0;
 $17 = ($16<<16>>16)==(10);
 if ($17) {
  $49 = ((($5)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_lily_hash_get_elem($vm,$50,$10)|0);
  $52 = ($51|0)==(0|0);
  if ($52) {
   $53 = ((($code)) + 2|0);
   $54 = HEAP16[$53>>1]|0;
   _key_error($vm,$10,$54);
  }
  $55 = ((($51)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  _lily_assign_value($15,$56);
  return;
 }
 $18 = ((($10)) + 8|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($16<<16>>16)==(5);
 $26 = ((($5)) + 8|0);
 if ($25) {
  $27 = HEAP32[$26>>2]|0;
  $28 = ($21|0)<(0);
  $29 = ((($27)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  if ($28) {
   $31 = (($30) + ($21))|0;
   $32 = ($31|0)<(0);
   if ($32) {
    _boundary_error($vm,$21);
    $index_int$0 = $31;
   } else {
    $index_int$0 = $31;
   }
  } else {
   $33 = ($21>>>0)<($30>>>0);
   if ($33) {
    $index_int$0 = $21;
   } else {
    _boundary_error($vm,$21);
    $index_int$0 = $21;
   }
  }
  $34 = ((($27)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($index_int$0)|0);
  $37 = HEAP8[$36>>0]|0;
  _lily_move_byte($15,$37);
  return;
 } else {
  $38 = HEAP32[$26>>2]|0;
  $39 = ($21|0)<(0);
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  if ($39) {
   $42 = (($41) + ($21))|0;
   $43 = ($42|0)<(0);
   if ($43) {
    _boundary_error($vm,$21);
    $index_int$1 = $42;
   } else {
    $index_int$1 = $42;
   }
  } else {
   $44 = ($21>>>0)<($41>>>0);
   if ($44) {
    $index_int$1 = $21;
   } else {
    _boundary_error($vm,$21);
    $index_int$1 = $21;
   }
  }
  $45 = ((($38)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($index_int$1<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  _lily_assign_value($15,$48);
  return;
 }
}
function _boundary_error($vm,$bad_index) {
 $vm = $vm|0;
 $bad_index = $bad_index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($vm)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_mb_flush($3);
 HEAP32[$vararg_buffer>>2] = $bad_index;
 _lily_mb_add_fmt($3,9250,$vararg_buffer);
 $4 = (_lily_mb_get($3)|0);
 _lily_error($vm,24,$4);
 STACKTOP = sp;return;
}
function _key_error($vm,$key,$line_num) {
 $vm = $vm|0;
 $key = $key|0;
 $line_num = $line_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($vm)) + 20|0);
 HEAP16[$0>>1] = $line_num;
 $1 = ((($vm)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP16[$key>>1]|0;
 $6 = ($5<<16>>16)==(3);
 $7 = ((($key)) + 8|0);
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _lily_mb_add_fmt($4,9286,$vararg_buffer);
  $21 = (_lily_mb_get($4)|0);
  _lily_error($vm,21,$21);
  STACKTOP = sp;return;
 } else {
  $11 = $7;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $vararg_buffer1;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  _lily_mb_add_fmt($4,9291,$vararg_buffer1);
  $21 = (_lily_mb_get($4)|0);
  _lily_error($vm,21,$21);
  STACKTOP = sp;return;
 }
}
function _do_o_get_property($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($code)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($code)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($10)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($3<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_assign_value($15,$19);
 return;
}
function _do_o_set_item($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index_int$0 = 0, $index_int$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($code)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($0) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($code)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$5>>1]|0;
 $17 = ($16<<16>>16)==(10);
 if ($17) {
  $56 = ((($5)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  _lily_hash_set_elem($vm,$57,$10,$15);
  return;
 }
 $18 = ((($10)) + 8|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($16<<16>>16)==(5);
 $26 = ((($5)) + 8|0);
 if ($25) {
  $27 = HEAP32[$26>>2]|0;
  $28 = ($21|0)<(0);
  $29 = ((($27)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  if ($28) {
   $31 = (($30) + ($21))|0;
   $32 = ($31|0)<(0);
   if ($32) {
    _boundary_error($vm,$21);
    $index_int$0 = $31;
   } else {
    $index_int$0 = $31;
   }
  } else {
   $33 = ($21>>>0)<($30>>>0);
   if ($33) {
    $index_int$0 = $21;
   } else {
    _boundary_error($vm,$21);
    $index_int$0 = $21;
   }
  }
  $34 = ((($15)) + 8|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $37&255;
  $42 = ((($27)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($index_int$0)|0);
  HEAP8[$44>>0] = $41;
  return;
 } else {
  $45 = HEAP32[$26>>2]|0;
  $46 = ($21|0)<(0);
  $47 = ((($45)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  if ($46) {
   $49 = (($48) + ($21))|0;
   $50 = ($49|0)<(0);
   if ($50) {
    _boundary_error($vm,$21);
    $index_int$1 = $49;
   } else {
    $index_int$1 = $49;
   }
  } else {
   $51 = ($21>>>0)<($48>>>0);
   if ($51) {
    $index_int$1 = $21;
   } else {
    _boundary_error($vm,$21);
    $index_int$1 = $21;
   }
  }
  $52 = ((($45)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($index_int$1<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  _lily_assign_value($55,$15);
  return;
 }
}
function _do_o_set_property($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($code)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($code)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($10)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($3<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_assign_value($19,$15);
 return;
}
function _do_o_build_hash($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($3) + 3)|0;
 $5 = (($code) + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($0) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_new_hash_val()|0);
 _lily_move_hash_f(655360,$9,$10);
 $11 = ($2<<16>>16)==(0);
 if ($11) {
  return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $12 = (($i$01) + 3)|0;
  $13 = (($code) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (($0) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($i$01) + 4)|0;
  $19 = (($code) + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = (($0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_hash_set_elem($vm,$10,$17,$23);
  $24 = (($i$01) + 2)|0;
  $25 = ($24|0)<($3|0);
  if ($25) {
   $i$01 = $24;
  } else {
   break;
  }
 }
 return;
}
function _do_o_build_list_tuple($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($3) + 3)|0;
 $5 = (($code) + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($0) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_new_list_val_n($3)|0);
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP16[$code>>1]|0;
 $14 = ($13<<16>>16)==(33);
 if ($14) {
  _lily_move_list_f(655360,$9,$10);
 } else {
  _lily_move_tuple_f(655360,$9,$10);
 }
 $15 = ($2<<16>>16)==(0);
 if ($15) {
  return;
 }
 $16 = $2&65535;
 $i$01 = 0;
 while(1) {
  $17 = (($i$01) + 3)|0;
  $18 = (($code) + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($0) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($12) + ($i$01<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_assign_value($24,$22);
  $25 = (($i$01) + 1)|0;
  $exitcond = ($25|0)==($16|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $25;
  }
 }
 return;
}
function _do_o_build_enum($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($code)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + 4)|0;
 $8 = (($code) + ($7<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_new_instance_val($6)|0);
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3 | 655360;
 _lily_move_variant_f($16,$12,$13);
 $17 = ($5<<16>>16)==(0);
 if ($17) {
  return;
 }
 $18 = $5&65535;
 $i$01 = 0;
 while(1) {
  $19 = (($i$01) + 4)|0;
  $20 = (($code) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($0) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($15) + ($i$01<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  _lily_assign_value($26,$24);
  $27 = (($i$01) + 1)|0;
  $exitcond = ($27|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $27;
  }
 }
 return;
}
function _do_o_dynamic_cast($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($vm)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($code)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($code)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($12)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP16[$21>>1]|0;
 $23 = ((($7)) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ($22<<16>>16)==($24<<16>>16);
 if ($25) {
  $26 = (_lily_new_enum_n(1)|0);
  _lily_variant_set_value($26,0,$21);
  _lily_move_variant_f(655374,$17,$26);
  return;
 } else {
  _lily_move_empty_variant(15,$17);
  return;
 }
}
function _do_o_create_function($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 2|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($code)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($vm)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($code)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($0) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_new_function_copy($14)|0);
 $21 = ((($5)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 _copy_upvalues($20,$22);
 _lily_move_function_f(655360,$19,$20);
 _lily_tag_value($vm,$19);
 return;
}
function _new_function_copy($to_copy) {
 $to_copy = $to_copy|0;
 var $0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(44)|0);
 dest=$0; src=$to_copy; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$0>>2] = 0;
 return ($0|0);
}
function _copy_upvalues($target,$source) {
 $target = $target|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($source)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 << 2;
 $6 = (_lily_malloc($5)|0);
 $7 = ($3<<16>>16)==(0);
 if ($7) {
  $17 = ((($target)) + 40|0);
  HEAP32[$17>>2] = $6;
  $18 = ((($target)) + 12|0);
  HEAP16[$18>>1] = $3;
  return;
 }
 $8 = $3&65535;
 $i$01 = 0;
 while(1) {
  $9 = (($1) + ($i$01<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($10)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
  }
  $15 = (($6) + ($i$01<<2)|0);
  HEAP32[$15>>2] = $10;
  $16 = (($i$01) + 1)|0;
  $exitcond = ($16|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $16;
  }
 }
 $17 = ((($target)) + 40|0);
 HEAP32[$17>>2] = $6;
 $18 = ((($target)) + 12|0);
 HEAP16[$18>>1] = $3;
 return;
}
function _make_cell_from($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 ;HEAP32[$0>>2]=HEAP32[$value>>2]|0;HEAP32[$0+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$value+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$value+12>>2]|0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 1;
 $2 = HEAP32[$value>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if ($4) {
  return ($0|0);
 }
 $5 = ((($value)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 return ($0|0);
}
function _do_o_optarg_dispatch($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ((($code)) + 2|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($code)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5) + -1)|0;
 $7 = $2&65535;
 $8 = ($6|0)==(0);
 L1: do {
  if ($8) {
   $i$0$lcssa = 0;
  } else {
   $i$01 = 0;
   while(1) {
    $9 = (($7) - ($i$01))|0;
    $10 = (($0) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $i$0$lcssa = $i$01;
     break L1;
    }
    $14 = (($i$01) + 1)|0;
    $15 = ($14>>>0)<($6>>>0);
    if ($15) {
     $i$01 = $14;
    } else {
     $i$0$lcssa = $14;
     break;
    }
   }
  }
 } while(0);
 $16 = (($i$0$lcssa) + 3)|0;
 $17 = (($code) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 return ($19|0);
}
function _add_catch_entry($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(32)|0);
 $1 = ((($vm)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = $5;
 return;
}
function _do_o_raise($vm,$exception_val) {
 $vm = $vm|0;
 $exception_val = $exception_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exception_val)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP16[$exception_val>>1]|0;
 $10 = $9&65535;
 $11 = ((($vm)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($vm)) + 76|0);
 HEAP32[$15>>2] = $exception_val;
 $16 = ((($vm)) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_raise_class($17,$14,$8);
 // unreachable;
}
function _do_o_new_instance($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter_class$0 = 0, $iter_class$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = HEAP32[$vm>>2]|0;
 $4 = ((($code)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($3) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($vm)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 48|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($vm)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 L1: do {
  if (!($22)) {
   $23 = HEAP16[$21>>1]|0;
   $24 = ($23&65535)>($1&65535);
   if ($24) {
    $25 = $23&65535;
    $26 = (($10) + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $$pn = $27;
    while(1) {
     $iter_class$0$in = ((($$pn)) + 32|0);
     $iter_class$0 = HEAP32[$iter_class$0$in>>2]|0;
     $28 = ($iter_class$0|0)==(0|0);
     if ($28) {
      break L1;
     }
     $29 = ((($iter_class$0)) + 8|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = ($30<<16>>16)==($1<<16>>16);
     if ($31) {
      break;
     } else {
      $$pn = $iter_class$0;
     }
    }
    $32 = HEAP32[$20>>2]|0;
    _lily_assign_value($8,$32);
    $33 = HEAP32[$16>>2]|0;
    $34 = ((($33)) + 28|0);
    HEAP32[$34>>2] = $8;
    return;
   }
  }
 } while(0);
 $35 = (_lily_new_instance_val($15)|0);
 $36 = HEAP16[$code>>1]|0;
 $37 = ($36<<16>>16)==(47);
 if ($37) {
  $38 = $2 | 655360;
  _lily_move_instance_f($38,$8,$35);
 } else {
  $39 = $2 | 524288;
  _lily_move_instance_f($39,$8,$35);
  $40 = HEAP16[$code>>1]|0;
  $41 = ($40<<16>>16)==(48);
  if ($41) {
   _lily_tag_value($vm,$8);
  }
 }
 $42 = HEAP32[$16>>2]|0;
 $43 = ((($42)) + 28|0);
 HEAP32[$43>>2] = $8;
 return;
}
function _do_o_create_closure($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($code)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = HEAP32[$vm>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($vm)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_new_function_copy($11)|0);
 $13 = $2 << 2;
 $14 = (_lily_malloc($13)|0);
 $15 = ($1<<16>>16)==(0);
 if (!($15)) {
  $16 = $1&65535;
  $17 = $16 << 2;
  _memset(($14|0),0,($17|0))|0;
 }
 $18 = ((($12)) + 12|0);
 HEAP16[$18>>1] = $1;
 $19 = ((($12)) + 40|0);
 HEAP32[$19>>2] = $14;
 _lily_move_function_f(524288,$8,$12);
 _lily_tag_value($vm,$8);
 return ($14|0);
}
function _do_o_load_class_closure($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _do_o_get_property($vm,$code);
 $0 = ((($code)) + 8|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = HEAP32[$vm>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_new_function_copy($7)|0);
 _copy_upvalues($8,$7);
 _lily_move_function_f(655360,$5,$8);
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 return ($10|0);
}
function _do_o_load_closure($vm,$code) {
 $vm = $vm|0;
 $code = $code|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($code)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($code)) + 6|0);
 $8 = ($6<<16>>16)==(0);
 $9 = HEAP16[$7>>1]|0;
 $10 = $9&65535;
 if ($8) {
  $$lcssa = $10;
 } else {
  $11 = $6&65535;
  $13 = $10;$21 = $7;$i$01 = 0;
  while(1) {
   $12 = (($4) + ($13<<2)|0);
   $14 = HEAP32[$12>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = ((($14)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + -1)|0;
    HEAP32[$16>>2] = $18;
    $19 = ($18|0)==(0);
    if ($19) {
     _lily_deref($14);
     _lily_free($14);
    }
    $20 = HEAP16[$21>>1]|0;
    $22 = $20&65535;
    $23 = (($4) + ($22<<2)|0);
    HEAP32[$23>>2] = 0;
   }
   $24 = (($i$01) + 1)|0;
   $25 = (($7) + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $exitcond = ($24|0)==($11|0);
   if ($exitcond) {
    $$lcssa = $27;
    break;
   } else {
    $13 = $27;$21 = $25;$i$01 = $24;
   }
  }
 }
 $28 = HEAP32[$vm>>2]|0;
 $29 = (($28) + ($$lcssa<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$2>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$2>>2] = $32;
 _lily_move_function_f(589824,$30,$2);
 $33 = HEAP32[$3>>2]|0;
 return ($33|0);
}
function _lily_exec_simple($vm,$f,$count) {
 $vm = $vm|0;
 $f = $f|0;
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_prepare_call($vm,$f);
 _lily_exec_prepared($vm,$count);
 return;
}
function _lily_siphash($vm,$key) {
 $vm = $vm|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$key>>1]|0;
 switch ($0<<16>>16) {
 case 3:  {
  $1 = ((($key)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($vm)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_siphash24($4,$6,$8)|0);
  $10 = tempRet0;
  $18 = $10;$19 = $9;
  tempRet0 = ($18);
  return ($19|0);
  break;
 }
 case 1:  {
  $11 = ((($key)) + 8|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;$19 = $14;
  tempRet0 = ($18);
  return ($19|0);
  break;
 }
 default: {
  $18 = 0;$19 = 0;
  tempRet0 = ($18);
  return ($19|0);
 }
 }
 return (0)|0;
}
function _lily_vm_ensure_class_table($vm,$size) {
 $vm = $vm|0;
 $size = $size|0;
 var $$lcssa = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($size>>>0);
 if (!($2)) {
  $3 = ($1|0)==(0);
  if ($3) {
   HEAP32[$0>>2] = 1;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4>>>0)>($size>>>0);
  if ($5) {
   $$lcssa = $4;
  } else {
   $7 = $4;
   while(1) {
    $6 = $7 << 1;
    $8 = ($6>>>0)>($size>>>0);
    if ($8) {
     $$lcssa9 = $6;
     break;
    } else {
     $7 = $6;
    }
   }
   HEAP32[$0>>2] = $$lcssa9;
   $$lcssa = $$lcssa9;
  }
  $9 = ((($vm)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $$lcssa << 2;
  $12 = (_lily_realloc($10,$11)|0);
  HEAP32[$9>>2] = $12;
 }
 $13 = ($1|0)==(0);
 if (!($13)) {
  return;
 }
 $14 = ((($vm)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 76|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$14>>2]|0;
 $18 = ((($17)) + 80|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$14>>2]|0;
 $20 = ((($19)) + 84|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$14>>2]|0;
 $22 = ((($21)) + 88|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$14>>2]|0;
 $24 = ((($23)) + 92|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$14>>2]|0;
 $26 = ((($25)) + 96|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$14>>2]|0;
 $28 = ((($27)) + 100|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$14>>2]|0;
 $30 = ((($29)) + 104|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$14>>2]|0;
 $32 = ((($31)) + 108|0);
 HEAP32[$32>>2] = 0;
 return;
}
function _lily_vm_add_class_unchecked($vm,$cls) {
 $vm = $vm|0;
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cls)) + 8|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($vm)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 HEAP32[$5>>2] = $cls;
 return;
}
function _lily_vm_prep($vm,$symtab,$readonly_table,$foreign_values) {
 $vm = $vm|0;
 $symtab = $symtab|0;
 $readonly_table = $readonly_table|0;
 $foreign_values = $foreign_values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 28|0);
 HEAP32[$0>>2] = $readonly_table;
 $1 = ((($symtab)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 14|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($vm)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  _grow_vm_registers($vm,$5);
  $9 = ((($vm)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vm>>2] = $10;
 } else {
  $11 = HEAP32[$vm>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   _grow_vm_registers($vm,1);
   $13 = ((($vm)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$vm>>2] = $14;
  }
 }
 _load_foreign_values($vm,$foreign_values);
 $15 = ((($vm)) + 100|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  _maybe_fix_print($vm);
 }
 $18 = HEAP16[$3>>1]|0;
 $19 = $18&65535;
 $20 = ((($vm)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($vm)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$22>>2] = $2;
 $23 = ((($2)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($22)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP16[$3>>1]|0;
 $27 = $26&65535;
 $28 = ((($22)) + 8|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($22)) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($22)) + 28|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($vm)) + 16|0);
 HEAP32[$31>>2] = 1;
 return;
}
function _load_foreign_values($vm,$values) {
 $vm = $vm|0;
 $values = $values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($values)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($vm)) + 4|0);
 while(1) {
  $4 = (_lily_vs_pop($values)|0);
  $5 = ((($4)) + 6|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&65535;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_assign_value_noref($10,$4);
  _lily_free($4);
  $11 = HEAP32[$0>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
 }
 return;
}
function _maybe_fix_print($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_find_var($1,$3,9321)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = (_lily_find_var($1,$3,9328)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($6)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vm)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 HEAP32[$16>>2] = 11;
 $17 = ((($4)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($vm)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($vm)) + 100|0);
 HEAP32[$23>>2] = $22;
 return;
}
function _builtin_stdout_print($vm) {
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vm)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _lily_error($vm,23,9334);
 }
 $7 = HEAP32[$4>>2]|0;
 $8 = (_lily_arg_value($vm,0)|0);
 _do_print($vm,$7,$8);
 return;
}
function _lily_new_string_pile() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 63;
 return ($0|0);
}
function _lily_free_string_pile($sp) {
 $sp = $sp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sp>>2]|0;
 _lily_free($0);
 _lily_free($sp);
 return;
}
function _lily_sp_insert($sp,$new_str,$pos) {
 $sp = $sp|0;
 $new_str = $new_str|0;
 $pos = $pos|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$pos>>1]|0;
 $1 = $0&65535;
 $2 = (($1) + 1)|0;
 $3 = (_strlen($new_str)|0);
 $4 = (($2) + ($3))|0;
 $5 = ((($sp)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($4>>>0);
 if ($7) {
  $8 = HEAP32[$5>>2]|0;
  $9 = ($8>>>0)<($4>>>0);
  if ($9) {
   $11 = $8;
   while(1) {
    $10 = $11 << 1;
    $12 = ($10>>>0)<($4>>>0);
    if ($12) {
     $11 = $10;
    } else {
     $$lcssa6 = $10;
     break;
    }
   }
   HEAP32[$5>>2] = $$lcssa6;
   $$lcssa = $$lcssa6;
  } else {
   $$lcssa = $8;
  }
  $13 = HEAP32[$sp>>2]|0;
  $14 = (_lily_realloc($13,$$lcssa)|0);
  HEAP32[$sp>>2] = $14;
 }
 $15 = HEAP32[$sp>>2]|0;
 $16 = HEAP16[$pos>>1]|0;
 $17 = $16&65535;
 $18 = (($15) + ($17)|0);
 (_strcpy($18,$new_str)|0);
 $19 = $4&65535;
 HEAP16[$pos>>1] = $19;
 return;
}
function _lily_sp_get($sp,$pos) {
 $sp = $sp|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sp>>2]|0;
 $1 = (($0) + ($pos)|0);
 return ($1|0);
}
function _lily_new_expr_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(36)|0);
 $1 = (_lily_malloc(40)|0);
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_malloc(40)|0);
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = $1;
 $5 = (_lily_malloc(40)|0);
 $6 = ((($5)) + 36|0);
 HEAP32[$6>>2] = $3;
 $7 = (_lily_malloc(40)|0);
 $8 = ((($7)) + 36|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $7;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 $12 = ((($0)) + 32|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$0>>2] = 0;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = 0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP16[$11+8>>1]=0|0;
 _add_save_entry($0);
 return ($0|0);
}
function _add_save_entry($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = ((($es)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = $0;
  $4 = ((($0)) + 16|0);
  HEAP32[$4>>2] = 0;
 } else {
  $5 = ((($2)) + 12|0);
  HEAP32[$5>>2] = $0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $6;
 }
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function _lily_free_expr_state($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ast_iter$02 = 0, $save_iter$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $ast_iter$02 = $1;
  while(1) {
   $3 = ((($ast_iter$02)) + 36|0);
   $4 = HEAP32[$3>>2]|0;
   _lily_free($ast_iter$02);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $ast_iter$02 = $4;
   }
  }
 }
 $6 = ((($es)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _lily_free($es);
  return;
 } else {
  $save_iter$01 = $7;
 }
 while(1) {
  $9 = ((($save_iter$01)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_free($save_iter$01);
  $11 = ($10|0)==(0|0);
  if ($11) {
   break;
  } else {
   $save_iter$01 = $10;
  }
 }
 _lily_free($es);
 return;
}
function _lily_es_collect_arg($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$es>>2]|0;
 _push_tree_arg($3,$4);
 HEAP32[$es>>2] = 0;
 $5 = ((($es)) + 4|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _push_tree_arg($entered_tree,$arg) {
 $entered_tree = $entered_tree|0;
 $arg = $arg|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tree_iter$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($arg|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($entered_tree)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = $arg;
 } else {
  $tree_iter$0 = $2;
  while(1) {
   $4 = ((($tree_iter$0)) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$lcssa = $4;
    break;
   } else {
    $tree_iter$0 = $5;
   }
  }
  HEAP32[$$lcssa>>2] = $arg;
 }
 $7 = ((($arg)) + 28|0);
 HEAP32[$7>>2] = $entered_tree;
 $8 = ((($arg)) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($entered_tree)) + 14|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = (($10) + 1)<<16>>16;
 HEAP16[$9>>1] = $11;
 return;
}
function _lily_es_enter_tree($es,$tree_type) {
 $es = $es|0;
 $tree_type = $tree_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $save_entry$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = $tree_type&65535;
 $8 = HEAP16[$6>>1]|0;
 $9 = $7 & 255;
 $10 = $8 & -256;
 $11 = $10 | $9;
 HEAP16[$6>>1] = $11;
 $12 = ((($1)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($es)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($1)) + 12|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($1)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($1)) + 14|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($1)) + 24|0);
 HEAP32[$20>>2] = 0;
 HEAP32[$1>>2] = 0;
 _merge_value($es,$1);
 $21 = ((($es)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $save_entry$0 = $22;
 } else {
  $26 = ((($22)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   _add_save_entry($es);
  }
  $29 = HEAP32[$21>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$21>>2] = $31;
  $save_entry$0 = $31;
 }
 $32 = HEAP32[$es>>2]|0;
 $33 = ((($save_entry$0)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($es)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$save_entry$0>>2] = $35;
 $36 = ((($save_entry$0)) + 8|0);
 HEAP32[$36>>2] = $1;
 $37 = ((($es)) + 20|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = (($38) + 1)<<16>>16;
 HEAP16[$37>>1] = $39;
 HEAP32[$es>>2] = 0;
 HEAP32[$34>>2] = 0;
 return;
}
function _add_new_tree($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(40)|0);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($es)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = $0;
 return;
}
function _merge_value($es,$new_tree) {
 $es = $es|0;
 $new_tree = $new_tree|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$es>>2] = $new_tree;
  HEAP32[$0>>2] = $new_tree;
  return;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & 255;
 switch ($5<<16>>16) {
 case 27:  {
  $6 = ((($1)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   HEAP32[$6>>2] = $new_tree;
   $9 = ((($new_tree)) + 28|0);
   HEAP32[$9>>2] = $1;
   return;
  }
  $10 = ((($7)) + 4|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 & 255;
  $13 = ($12<<16>>16)==(9);
  if ($13) {
   _merge_unary($es,$7,$new_tree);
   return;
  } else {
   _merge_absorb($es,$7,$new_tree);
   HEAP32[$6>>2] = $new_tree;
   $14 = ((($new_tree)) + 28|0);
   HEAP32[$14>>2] = $1;
   return;
  }
  break;
 }
 case 9:  {
  _merge_unary($es,$1,$new_tree);
  return;
  break;
 }
 default: {
  _merge_absorb($es,$1,$new_tree);
  return;
 }
 }
}
function _merge_unary($es,$given,$new_tree) {
 $es = $es|0;
 $given = $given|0;
 $new_tree = $new_tree|0;
 var $$0 = 0, $$0$lcssa = 0, $$017 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $given;
 while(1) {
  $0 = ((($$0)) + 4|0);
  $1 = HEAP16[$0>>1]|0;
  $2 = $1 & 255;
  $3 = ($2<<16>>16)==(9);
  if (!($3)) {
   $$0$lcssa = $$0;
   label = 4;
   break;
  }
  $4 = ((($$0)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0$lcssa = $$0;
   label = 4;
   break;
  }
  $9 = ((($5)) + 4|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & 255;
  $12 = ($11<<16>>16)==(9);
  $13 = ((($$0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  if ($12) {
   $$0 = $14;
  } else {
   $$017 = $$0;$15 = $14;$17 = $13;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = ((($$0$lcssa)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $$017 = $$0$lcssa;$15 = $8;$17 = $7;
 }
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$17>>2] = $new_tree;
  $18 = ((($new_tree)) + 28|0);
  HEAP32[$18>>2] = $$017;
  return;
 }
 _merge_absorb($es,$15,$new_tree);
 HEAP32[$17>>2] = $new_tree;
 $18 = ((($new_tree)) + 28|0);
 HEAP32[$18>>2] = $$017;
 return;
}
function _merge_absorb($es,$given,$new_tree) {
 $es = $es|0;
 $given = $given|0;
 $new_tree = $new_tree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($given|0);
 if ($2) {
  HEAP32[$0>>2] = $new_tree;
  $3 = HEAP32[$es>>2]|0;
  $4 = ($3|0)==($given|0);
  if ($4) {
   HEAP32[$es>>2] = $new_tree;
  }
 }
 $5 = ((($given)) + 28|0);
 HEAP32[$5>>2] = $new_tree;
 $6 = ((($new_tree)) + 24|0);
 HEAP32[$6>>2] = $given;
 $7 = ((($new_tree)) + 14|0);
 HEAP16[$7>>1] = 1;
 $8 = ((($new_tree)) + 32|0);
 HEAP32[$8>>2] = 0;
 return;
}
function _lily_es_leave_tree($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$es>>2]|0;
 _push_tree_arg($3,$4);
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$es>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($es)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = ((($9)) + 8|0);
  HEAP32[$13>>2] = 0;
 } else {
  HEAP32[$0>>2] = $11;
 }
 $14 = ((($es)) + 20|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = (($15) + -1)<<16>>16;
 HEAP16[$14>>1] = $16;
 return;
}
function _lily_es_get_saved_tree($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _lily_es_push_binary_op($es,$op) {
 $es = $es|0;
 $op = $op|0;
 var $$lcssa25 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tree$0 = 0;
 var $tree$0$lcssa22 = 0, $tree$023 = 0, $tree$024 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 27;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = (_priority_for_op($op)|0);
 $18 = ((($1)) + 6|0);
 HEAP8[$18>>0] = $17;
 $19 = $op&65535;
 $20 = HEAP16[$6>>1]|0;
 $21 = ($19 << 8)&65535;
 $22 = $20 & 255;
 $23 = $22 | $21;
 HEAP16[$6>>1] = $23;
 $24 = ((($1)) + 20|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($1)) + 24|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($es)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 & 255;
 $31 = ($30&65535)<(27);
 if ($31) {
  $32 = HEAP32[$es>>2]|0;
  $33 = ($32|0)==($27|0);
  if ($33) {
   HEAP32[$es>>2] = $1;
  }
  $34 = ((($27)) + 28|0);
  HEAP32[$34>>2] = $1;
  HEAP32[$24>>2] = $27;
  HEAP32[$26>>2] = $1;
  return;
 }
 $35 = ($30<<16>>16)==(27);
 if (!($35)) {
  return;
 }
 $36 = HEAP8[$18>>0]|0;
 $37 = ((($27)) + 6|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = (($36) + -1)<<24>>24;
 $40 = ($39&255)<($38&255);
 if ($40) {
  $tree$0 = $27;
  while(1) {
   $43 = ((($tree$0)) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $56 = $43;$tree$024 = $tree$0;
    label = 17;
    break;
   }
   $46 = ((($44)) + 6|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($36&255)>($47&255);
   if ($48) {
    $$lcssa25 = $43;$tree$0$lcssa22 = $tree$0;
    label = 12;
    break;
   } else {
    $tree$0 = $44;
   }
  }
  if ((label|0) == 12) {
   $$pr = HEAP32[$$lcssa25>>2]|0;
   $49 = ($$pr|0)==(0|0);
   if ($49) {
    $56 = $$lcssa25;$tree$024 = $tree$0$lcssa22;
    label = 17;
   } else {
    $50 = ((($$pr)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==($tree$0$lcssa22|0);
    if ($52) {
     HEAP32[$50>>2] = $1;
    } else {
     $53 = ((($$pr)) + 24|0);
     HEAP32[$53>>2] = $1;
    }
    $54 = ((($27)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$16>>2] = $55;
    $tree$023 = $tree$0$lcssa22;
   }
  }
  if ((label|0) == 17) {
   HEAP32[$56>>2] = $1;
   HEAP32[$es>>2] = $1;
   $tree$023 = $tree$024;
  }
  HEAP32[$24>>2] = $tree$023;
 } else {
  $41 = ((($27)) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$24>>2] = $42;
  HEAP32[$41>>2] = $1;
  HEAP32[$16>>2] = $27;
 }
 HEAP32[$26>>2] = $1;
 return;
}
function _priority_for_op($o) {
 $o = $o|0;
 var $prio$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($o|0) {
  case 28: case 27: case 23: case 22: case 25: case 26: case 21:  {
   $prio$0 = 0;
   break;
  }
  case 19:  {
   $prio$0 = 1;
   break;
  }
  case 18:  {
   $prio$0 = 2;
   break;
  }
  case 7: case 2:  {
   $prio$0 = 3;
   break;
  }
  case 6: case 4: case 5: case 3:  {
   $prio$0 = 4;
   break;
  }
  case 20:  {
   $prio$0 = 5;
   break;
  }
  case 14:  {
   $prio$0 = 6;
   break;
  }
  case 15:  {
   $prio$0 = 7;
   break;
  }
  case 13:  {
   $prio$0 = 8;
   break;
  }
  case 12: case 11:  {
   $prio$0 = 9;
   break;
  }
  case 1: case 0:  {
   $prio$0 = 10;
   break;
  }
  case 8: case 10: case 9:  {
   $prio$0 = 11;
   break;
  }
  default: {
   $prio$0 = -1;
  }
  }
 } while(0);
 return ($prio$0|0);
}
function _lily_es_enter_typecast($es,$type) {
 $es = $es|0;
 $type = $type|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_es_enter_tree($es,11);
 _push_type($es,$type);
 _lily_es_collect_arg($es);
 return;
}
function _push_type($es,$type) {
 $es = $es|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 10;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $type;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_unary_op($es,$op) {
 $es = $es|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 9;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = 0;
 $18 = $op&65535;
 $19 = HEAP16[$6>>1]|0;
 $20 = ($18 << 8)&65535;
 $21 = $19 & 255;
 $22 = $21 | $20;
 HEAP16[$6>>1] = $22;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_local_var($es,$var) {
 $es = $es|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 5;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $var;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $var;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_global_var($es,$var) {
 $es = $es|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 7;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $var;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $var;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_upvalue($es,$var) {
 $es = $es|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 21;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $var;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_defined_func($es,$func) {
 $es = $es|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 6;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $func;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $func;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_method($es,$func) {
 $es = $es|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 18;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $func;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $func;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_static_func($es,$func) {
 $es = $es|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 19;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $func;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $func;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_inherited_new($es,$func) {
 $es = $es|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 17;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$1>>2] = $func;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $func;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_literal($es,$t,$reg_spot) {
 $es = $es|0;
 $t = $t|0;
 $reg_spot = $reg_spot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 16;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $t;
 $18 = ((($1)) + 16|0);
 HEAP16[$18>>1] = $reg_spot;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_boolean($es,$value) {
 $es = $es|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 24;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 16|0);
 HEAP16[$17>>1] = $value;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_byte($es,$value) {
 $es = $es|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 25;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $value&255;
 $18 = ((($1)) + 16|0);
 HEAP16[$18>>1] = $17;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_integer($es,$value) {
 $es = $es|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 26;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 16|0);
 HEAP16[$17>>1] = $value;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_property($es,$prop) {
 $es = $es|0;
 $prop = $prop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 13;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $prop;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_variant($es,$variant) {
 $es = $es|0;
 $variant = $variant|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 14;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $variant;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_self($es) {
 $es = $es|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -256;
 $9 = $8 | 20;
 HEAP16[$6>>1] = $9;
 $10 = ((($1)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($es)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 12|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP32[$16>>2] = 0;
 _merge_value($es,$1);
 return;
}
function _lily_es_push_text($es,$tt,$start,$pos) {
 $es = $es|0;
 $tt = $tt|0;
 $start = $start|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($es)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _add_new_tree($es);
 }
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = $tt&65535;
 $8 = HEAP16[$6>>1]|0;
 $9 = $7 & 255;
 $10 = $8 & -256;
 $11 = $10 | $9;
 HEAP16[$6>>1] = $11;
 $12 = ((($1)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 8|0);
 $14 = ((($1)) + 12|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($1)) + 28|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($1)) + 16|0);
 HEAP32[$16>>2] = $pos;
 HEAP32[$13>>2] = $start;
 _merge_value($es,$1);
 return;
}
function _lily_new_symtab($gp) {
 $gp = $gp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(100)|0);
 $1 = ((($0)) + 28|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 36|0);
 HEAP32[$2>>2] = 1;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = (_lily_new_value_stack()|0);
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = $gp;
 return ($0|0);
}
function _lily_set_builtin($symtab,$builtin) {
 $symtab = $symtab|0;
 $builtin = $builtin|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 8|0);
 HEAP32[$0>>2] = $builtin;
 $1 = ((($symtab)) + 12|0);
 HEAP32[$1>>2] = $builtin;
 return;
}
function _hide_classes($symtab,$class_iter,$stop) {
 $symtab = $symtab|0;
 $class_iter = $class_iter|0;
 $stop = $stop|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $hidden_top$0$lcssa = 0, $hidden_top$01 = 0, $hidden_top$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($class_iter|0)==($stop|0);
 if ($2) {
  $hidden_top$0$lcssa = $1;
 } else {
  $$02 = $class_iter;$hidden_top$01 = $1;
  while(1) {
   $3 = HEAP32[$$02>>2]|0;
   HEAP32[$$02>>2] = $hidden_top$01;
   $4 = ($3|0)==($stop|0);
   if ($4) {
    $hidden_top$0$lcssa = $$02;
    break;
   } else {
    $hidden_top$01$phi = $$02;$$02 = $3;$hidden_top$01 = $hidden_top$01$phi;
   }
  }
 }
 HEAP32[$0>>2] = $hidden_top$0$lcssa;
 return;
}
function _free_vars_since($var,$stop) {
 $var = $var|0;
 $stop = $stop|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($var|0)==($stop|0);
 if ($0) {
  return;
 } else {
  $$01 = $var;
 }
 while(1) {
  $1 = HEAP32[$$01>>2]|0;
  $2 = ((($$01)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  _lily_free($3);
  _lily_free($$01);
  $4 = ($1|0)==($stop|0);
  if ($4) {
   break;
  } else {
   $$01 = $1;
  }
 }
 return;
}
function _lily_free_module_symbols($symtab,$entry) {
 $symtab = $symtab|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($entry)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _free_classes_until($1,0);
 $2 = ((($entry)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free_vars_since($3,0);
 return;
}
function _free_classes_until($class_iter,$stop) {
 $class_iter = $class_iter|0;
 $stop = $stop|0;
 var $$0$be = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $type_iter$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($class_iter|0)==($stop|0);
 if ($0) {
  return;
 } else {
  $$04 = $class_iter;
 }
 while(1) {
  $1 = ((($$04)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  _lily_free($2);
  $3 = ((($$04)) + 4|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = ($4<<16>>16)==(3);
  if ($5) {
   $6 = HEAP32[$$04>>2]|0;
   _lily_free($$04);
   $$0$be = $6;
  } else {
   $8 = ((($$04)) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    _free_properties($$04);
   }
   $11 = ((($$04)) + 56|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $type_iter$01 = $12;
    while(1) {
     $14 = HEAP32[$type_iter$01>>2]|0;
     $15 = ((($type_iter$01)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     _lily_free($16);
     _lily_free($type_iter$01);
     $17 = ($14|0)==(0|0);
     if ($17) {
      break;
     } else {
      $type_iter$01 = $14;
     }
    }
   }
   $18 = ((($$04)) + 6|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 & 8;
   $21 = ($20<<16>>16)==(0);
   if (!($21)) {
    $22 = ((($$04)) + 48|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = ($23<<16>>16)==(0);
    if (!($24)) {
     $25 = ((($$04)) + 40|0);
     $i$02 = 0;
     while(1) {
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + ($i$02<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ((($28)) + 16|0);
      $30 = HEAP32[$29>>2]|0;
      _lily_free($30);
      $31 = HEAP32[$25>>2]|0;
      $32 = (($31) + ($i$02<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      _lily_free($33);
      $34 = (($i$02) + 1)|0;
      $35 = HEAP16[$22>>1]|0;
      $36 = $35&65535;
      $37 = ($34|0)<($36|0);
      if ($37) {
       $i$02 = $34;
      } else {
       break;
      }
     }
    }
   }
   $38 = ((($$04)) + 40|0);
   $39 = HEAP32[$38>>2]|0;
   _lily_free($39);
   $40 = HEAP32[$$04>>2]|0;
   _lily_free($$04);
   $$0$be = $40;
  }
  $7 = ($$0$be|0)==($stop|0);
  if ($7) {
   break;
  } else {
   $$04 = $$0$be;
  }
 }
 return;
}
function _free_properties($cls) {
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $prop_iter$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cls)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 } else {
  $prop_iter$01 = $1;
 }
 while(1) {
  $3 = HEAP32[$prop_iter$01>>2]|0;
  $4 = ((($prop_iter$01)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_free($5);
  _lily_free($prop_iter$01);
  $6 = ($3|0)==(0|0);
  if ($6) {
   break;
  } else {
   $prop_iter$01 = $3;
  }
 }
 return;
}
function _lily_rewind_symtab($symtab,$main_module,$stop_class,$stop_var,$hide) {
 $symtab = $symtab|0;
 $main_module = $main_module|0;
 $stop_class = $stop_class|0;
 $stop_var = $stop_var|0;
 $hide = $hide|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 12|0);
 HEAP32[$0>>2] = $main_module;
 $1 = ((($main_module)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($stop_var|0);
 if (!($3)) {
  _free_vars_since($2,$stop_var);
  HEAP32[$1>>2] = $stop_var;
 }
 $4 = ((($main_module)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($stop_class|0);
 if ($6) {
  return;
 }
 $7 = ($hide|0)==(0);
 if ($7) {
  _hide_classes($symtab,$5,$stop_class);
 } else {
  _free_classes_until($5,$stop_class);
 }
 HEAP32[$4>>2] = $stop_class;
 return;
}
function _lily_free_symtab($symtab) {
 $symtab = $symtab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _free_literals($1);
 $2 = ((($symtab)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _free_classes_until($3,0);
 $4 = ((($symtab)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free_classes_until($5,0);
 $6 = ((($symtab)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _free_vars_since($7,0);
 $8 = ((($symtab)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_free($9);
 _lily_free($symtab);
 return;
}
function _free_literals($literals) {
 $literals = $literals|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($literals)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_free_value_stack($literals);
  return;
 }
 while(1) {
  $3 = (_lily_vs_pop($literals)|0);
  $4 = HEAP16[$3>>1]|0;
  switch ($4<<16>>16) {
  case 2: case 1: case 6:  {
   break;
  }
  default: {
   $5 = HEAP32[$3>>2]|0;
   $6 = $5 | 524288;
   HEAP32[$3>>2] = $6;
   _lily_deref($3);
  }
  }
  _lily_free($3);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 _lily_free_value_stack($literals);
 return;
}
function _lily_get_integer_literal($symtab,$0,$1) {
 $symtab = $symtab|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter$0 = 0, $iter$0$lcssa17 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($symtab)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_first_lit_of($3,1)|0);
 $$old1 = ($4|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $iter$0 = $4;
   while(1) {
    $5 = ((($iter$0)) + 8|0);
    $6 = $5;
    $7 = $6;
    $8 = HEAP32[$7>>2]|0;
    $9 = (($6) + 4)|0;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($8|0)==($0|0);
    $13 = ($11|0)==($1|0);
    $14 = $12 & $13;
    if ($14) {
     $$0 = $iter$0;
     label = 7;
     break;
    }
    $15 = ((($iter$0)) + 4|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(0);
    if ($17) {
     $iter$0$lcssa17 = $iter$0;
     label = 5;
     break;
    }
    $18 = $16&65535;
    $19 = HEAP32[$2>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     break L1;
    } else {
     $iter$0 = $22;
    }
   }
   if ((label|0) == 5) {
    $24 = HEAP32[$2>>2]|0;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    $28 = ((($iter$0$lcssa17)) + 4|0);
    HEAP16[$28>>1] = $27;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $29 = (_lily_new_value_of_integer($0,$1)|0);
 $30 = HEAP32[$2>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($29)) + 6|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($29)) + 4|0);
 HEAP16[$35>>1] = 0;
 $36 = HEAP32[$2>>2]|0;
 _lily_vs_push($36,$29);
 $$0 = $29;
 return ($$0|0);
}
function _first_lit_of($vs,$to_find) {
 $vs = $vs|0;
 $to_find = $to_find|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$2 = 0;
  return ($$2|0);
 }
 $3 = HEAP32[$vs>>2]|0;
 $i$02 = 0;
 while(1) {
  $6 = (($3) + ($i$02<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = ($9|0)==($to_find|0);
  $4 = (($i$02) + 1)|0;
  if ($10) {
   $$2 = $7;
   label = 5;
   break;
  }
  $5 = ($4|0)<($1|0);
  if ($5) {
   $i$02 = $4;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_get_double_literal($symtab,$dbl_val) {
 $symtab = $symtab|0;
 $dbl_val = +$dbl_val;
 var $$0 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter$0 = 0, $iter$0$lcssa17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_first_lit_of($1,2)|0);
 $$old1 = ($2|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $iter$0 = $2;
   while(1) {
    $3 = ((($iter$0)) + 8|0);
    $4 = +HEAPF64[$3>>3];
    $5 = $4 == $dbl_val;
    if ($5) {
     $$0 = $iter$0;
     label = 7;
     break;
    }
    $6 = ((($iter$0)) + 4|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = ($7<<16>>16)==(0);
    if ($8) {
     $iter$0$lcssa17 = $iter$0;
     label = 5;
     break;
    }
    $9 = $7&65535;
    $10 = HEAP32[$0>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($9<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     break L1;
    } else {
     $iter$0 = $13;
    }
   }
   if ((label|0) == 5) {
    $15 = HEAP32[$0>>2]|0;
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17&65535;
    $19 = ((($iter$0$lcssa17)) + 4|0);
    HEAP16[$19>>1] = $18;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $20 = (_lily_new_value_of_double($dbl_val)|0);
 $21 = HEAP32[$0>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23&65535;
 $25 = ((($20)) + 6|0);
 HEAP16[$25>>1] = $24;
 $26 = ((($20)) + 4|0);
 HEAP16[$26>>1] = 0;
 $27 = HEAP32[$0>>2]|0;
 _lily_vs_push($27,$20);
 $$0 = $20;
 return ($$0|0);
}
function _lily_get_bytestring_literal($symtab,$want_string,$len) {
 $symtab = $symtab|0;
 $want_string = $want_string|0;
 $len = $len|0;
 var $$0 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter$0 = 0, $iter$0$lcssa17 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_first_lit_of($1,5)|0);
 $$old1 = ($2|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $iter$0 = $2;
   while(1) {
    $3 = ((($iter$0)) + 8|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($4)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($len|0);
    if ($7) {
     $8 = ((($4)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (_memcmp($9,$want_string,$len)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $iter$0;
      label = 8;
      break;
     }
    }
    $12 = ((($iter$0)) + 4|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($13<<16>>16)==(0);
    if ($14) {
     $iter$0$lcssa17 = $iter$0;
     label = 6;
     break;
    }
    $15 = $13&65535;
    $16 = HEAP32[$0>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($15<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break L1;
    } else {
     $iter$0 = $19;
    }
   }
   if ((label|0) == 6) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23&65535;
    $25 = ((($iter$0$lcssa17)) + 4|0);
    HEAP16[$25>>1] = $24;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $26 = (_lily_new_raw_string_sized($want_string,$len)|0);
 $27 = (_lily_new_value_of_bytestring($26)|0);
 HEAP32[$27>>2] = 5;
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30&65535;
 $32 = ((($27)) + 6|0);
 HEAP16[$32>>1] = $31;
 $33 = ((($27)) + 4|0);
 HEAP16[$33>>1] = 0;
 $34 = HEAP32[$0>>2]|0;
 _lily_vs_push($34,$27);
 $$0 = $27;
 return ($$0|0);
}
function _lily_get_string_literal($symtab,$want_string) {
 $symtab = $symtab|0;
 $want_string = $want_string|0;
 var $$0 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter$0 = 0, $iter$0$lcssa17 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_first_lit_of($1,3)|0);
 $3 = (_strlen($want_string)|0);
 $$old1 = ($2|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $iter$0 = $2;
   while(1) {
    $4 = ((($iter$0)) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ((($5)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($3|0);
    if ($8) {
     $9 = ((($5)) + 8|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (_strcmp($10,$want_string)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $$0 = $iter$0;
      label = 8;
      break;
     }
    }
    $13 = ((($iter$0)) + 4|0);
    $14 = HEAP16[$13>>1]|0;
    $15 = ($14<<16>>16)==(0);
    if ($15) {
     $iter$0$lcssa17 = $iter$0;
     label = 6;
     break;
    }
    $16 = $14&65535;
    $17 = HEAP32[$0>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + ($16<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     break L1;
    } else {
     $iter$0 = $20;
    }
   }
   if ((label|0) == 6) {
    $22 = HEAP32[$0>>2]|0;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24&65535;
    $26 = ((($iter$0$lcssa17)) + 4|0);
    HEAP16[$26>>1] = $25;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $27 = (_lily_new_raw_string($want_string)|0);
 $28 = (_lily_new_value_of_string($27)|0);
 HEAP32[$28>>2] = 3;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 $33 = ((($28)) + 6|0);
 HEAP16[$33>>1] = $32;
 $34 = ((($28)) + 4|0);
 HEAP16[$34>>1] = 0;
 $35 = HEAP32[$0>>2]|0;
 _lily_vs_push($35,$28);
 $$0 = $28;
 return ($$0|0);
}
function _store_function($symtab,$func_var,$func_val,$module) {
 $symtab = $symtab|0;
 $func_var = $func_var|0;
 $func_val = $func_val|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($func_var)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($func_val)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($func_val)) + 16|0);
 HEAP32[$3>>2] = $module;
 $4 = (_lily_malloc(16)|0);
 HEAP32[$4>>2] = 7;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $func_val;
 $6 = ((($symtab)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_vs_push($7,$4);
 return;
}
function _lily_store_function($symtab,$func_var,$func_val) {
 $symtab = $symtab|0;
 $func_var = $func_var|0;
 $func_val = $func_val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _store_function($symtab,$func_var,$func_val,$1);
 return;
}
function _lily_new_raw_unlinked_var($symtab,$type,$name) {
 $symtab = $symtab|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(48)|0);
 $1 = (_strlen($name)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 4|0);
 HEAP16[$5>>1] = 1;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = 0;
 $7 = HEAP32[$4>>2]|0;
 (_strcpy($7,$name)|0);
 $8 = ((($symtab)) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 32|0);
 HEAP32[$11>>2] = $10;
 $12 = (_shorthash_for_name_494($name)|0);
 $13 = tempRet0;
 $14 = ((($0)) + 24|0);
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = ((($0)) + 12|0);
 HEAP32[$19>>2] = $type;
 HEAP32[$0>>2] = 0;
 $20 = ((($0)) + 40|0);
 HEAP32[$20>>2] = 0;
 return ($0|0);
}
function _shorthash_for_name_494($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ch$01 = 0, $i$02 = 0, $shift$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $19 = 0;$20 = 0;
  tempRet0 = ($19);
  return ($20|0);
 } else {
  $11 = 0;$3 = $0;$9 = 0;$ch$01 = $name;$i$02 = 0;$shift$03 = 0;
 }
 while(1) {
  $2 = $3 << 24 >> 24;
  $4 = ($2|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_bitshift64Shl(($2|0),($5|0),($shift$03|0))|0);
  $7 = tempRet0;
  $8 = $6 | $9;
  $10 = $7 | $11;
  $12 = ((($ch$01)) + 1|0);
  $13 = (($i$02) + 1)|0;
  $14 = (($shift$03) + 8)|0;
  $15 = HEAP8[$12>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  $17 = ($13|0)!=(8);
  $18 = $17 & $16;
  if ($18) {
   $11 = $10;$3 = $15;$9 = $8;$ch$01 = $12;$i$02 = $13;$shift$03 = $14;
  } else {
   $19 = $10;$20 = $8;
   break;
  }
 }
 tempRet0 = ($19);
 return ($20|0);
}
function _lily_new_raw_var($symtab,$type,$name) {
 $symtab = $symtab|0;
 $type = $type|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_raw_unlinked_var($symtab,$type,$name)|0);
 $1 = ((($symtab)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 32|0);
 HEAP32[$6>>2] = $0;
 return ($0|0);
}
function _lily_find_var($symtab,$module,$name) {
 $symtab = $symtab|0;
 $module = $module|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_shorthash_for_name_494($name)|0);
 $1 = tempRet0;
 $2 = ($module|0)==(0|0);
 if (!($2)) {
  $14 = ((($module)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_find_var($15,$name,$0,$1)|0);
  $result$0 = $16;
  return ($result$0|0);
 }
 $3 = ((($symtab)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_find_var($6,$name,$0,$1)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $result$0 = $7;
  return ($result$0|0);
 }
 $9 = ((($symtab)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_find_var($12,$name,$0,$1)|0);
 $result$0 = $13;
 return ($result$0|0);
}
function _find_var($var_iter,$name,$0,$1) {
 $var_iter = $var_iter|0;
 $name = $name|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($var_iter|0)==(0|0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$01 = $var_iter;
 }
 while(1) {
  $3 = ((($$01)) + 24|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)==($0|0);
  $11 = ($9|0)==($1|0);
  $12 = $10 & $11;
  if ($12) {
   $13 = ((($$01)) + 6|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 & 32;
   $16 = ($15<<16>>16)==(0);
   if ($16) {
    $17 = ((($$01)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_strcmp($18,$name)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$0$lcssa = $$01;
     label = 6;
     break;
    }
   }
  }
  $21 = HEAP32[$$01>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0$lcssa = 0;
   label = 6;
   break;
  } else {
   $$01 = $21;
  }
 }
 if ((label|0) == 6) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_hide_block_vars($symtab,$var_stop) {
 $symtab = $symtab|0;
 $var_stop = $var_stop|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $var_iter$0 = 0, $var_iter$01 = 0, $var_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $var_iter$01 = HEAP32[$2>>2]|0;
 $3 = ($var_iter$01|0)==($var_stop|0);
 if ($3) {
  return;
 } else {
  $var_iter$02 = $var_iter$01;
 }
 while(1) {
  $4 = ((($var_iter$02)) + 6|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $6 | 32;
  $8 = $7&65535;
  HEAP16[$4>>1] = $8;
  $var_iter$0 = HEAP32[$var_iter$02>>2]|0;
  $9 = ($var_iter$0|0)==($var_stop|0);
  if ($9) {
   break;
  } else {
   $var_iter$02 = $var_iter$0;
  }
 }
 return;
}
function _lily_new_raw_class($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(64)|0);
 $1 = (_strlen($name)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 (_strcpy($3,$name)|0);
 $4 = ((($0)) + 4|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 6|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($0)) + 10|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = (_shorthash_for_name_494($name)|0);
 $10 = tempRet0;
 $11 = ((($0)) + 24|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = $3;
 $17 = ((($0)) + 46|0);
 $18 = ((($0)) + 40|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 36|0);
 HEAP32[$19>>2] = 0;
 ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP16[$17+4>>1]=0|0;HEAP16[$17+6>>1]=0|0;HEAP16[$17+8>>1]=0|0;HEAP16[$17+10>>1]=0|0;HEAP16[$17+12>>1]=0|0;
 return ($0|0);
}
function _lily_new_class($symtab,$name) {
 $symtab = $symtab|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_raw_class($name)|0);
 $1 = ((($symtab)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 52|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($symtab)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 8|0);
 HEAP16[$7>>1] = $6;
 $8 = HEAP32[$4>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$0>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 28|0);
 HEAP32[$14>>2] = $0;
 return ($0|0);
}
function _lily_new_enum($symtab,$name) {
 $symtab = $symtab|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_class($symtab,$name)|0);
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 | 4;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 return ($0|0);
}
function _lily_find_class($symtab,$module,$name) {
 $symtab = $symtab|0;
 $module = $module|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_shorthash_for_name_494($name)|0);
 $1 = tempRet0;
 $2 = ($module|0)==(0|0);
 if (!($2)) {
  $20 = ((($module)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_find_class($21,$name,$0,$1)|0);
  $result$0 = $22;
  return ($result$0|0);
 }
 $3 = ((($name)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $17 = ((($symtab)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_lily_gp_find($18,$name)|0);
  $result$0 = $19;
  return ($result$0|0);
 }
 $6 = ((($symtab)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_find_class($9,$name,$0,$1)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $result$0 = $10;
  return ($result$0|0);
 }
 $12 = ((($symtab)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_find_class($15,$name,$0,$1)|0);
 $result$0 = $16;
 return ($result$0|0);
}
function _find_class($class_iter,$name,$0,$1) {
 $class_iter = $class_iter|0;
 $name = $name|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($class_iter|0)==(0|0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$01 = $class_iter;
 }
 while(1) {
  $3 = ((($$01)) + 24|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)==($0|0);
  $11 = ($9|0)==($1|0);
  $12 = $10 & $11;
  if ($12) {
   $13 = ((($$01)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strcmp($14,$name)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $$01;
    label = 5;
    break;
   }
  }
  $17 = HEAP32[$$01>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0$lcssa = 0;
   label = 5;
   break;
  } else {
   $$01 = $17;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_find_member($cls,$name) {
 $cls = $cls|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cls$tr = 0, $ret$2 = 0, $sym_iter$0 = 0, $sym_iter$05 = 0, $sym_iter$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cls$tr = $cls;
 L1: while(1) {
  $0 = ((($cls$tr)) + 36|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = (_shorthash_for_name_494($name)|0);
   $4 = tempRet0;
   $sym_iter$05 = HEAP32[$0>>2]|0;
   $5 = ($sym_iter$05|0)==(0|0);
   if (!($5)) {
    $sym_iter$06 = $sym_iter$05;
    while(1) {
     $6 = ((($sym_iter$06)) + 24|0);
     $7 = $6;
     $8 = $7;
     $9 = HEAP32[$8>>2]|0;
     $10 = (($7) + 4)|0;
     $11 = $10;
     $12 = HEAP32[$11>>2]|0;
     $13 = ($9|0)==($3|0);
     $14 = ($12|0)==($4|0);
     $15 = $13 & $14;
     if ($15) {
      $16 = ((($sym_iter$06)) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_strcmp($17,$name)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       $ret$2 = $sym_iter$06;
       label = 8;
       break L1;
      }
     }
     $sym_iter$0 = HEAP32[$sym_iter$06>>2]|0;
     $20 = ($sym_iter$0|0)==(0|0);
     if ($20) {
      break;
     } else {
      $sym_iter$06 = $sym_iter$0;
     }
    }
   }
  }
  $21 = ((($cls$tr)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   $ret$2 = 0;
   label = 8;
   break;
  } else {
   $cls$tr = $22;
  }
 }
 if ((label|0) == 8) {
  return ($ret$2|0);
 }
 return (0)|0;
}
function _lily_find_method($cls,$name) {
 $cls = $cls|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, $sym$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_find_member($cls,$name)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $sym$0 = 0;
  return ($sym$0|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(1);
 $phitmp = $4 ? $0 : 0;
 $sym$0 = $phitmp;
 return ($sym$0|0);
}
function _lily_find_property($cls,$name) {
 $cls = $cls|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, $sym$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_find_member($cls,$name)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $sym$0 = 0;
  return ($sym$0|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(4);
 $phitmp = $4 ? $0 : 0;
 $sym$0 = $phitmp;
 return ($sym$0|0);
}
function _lily_add_class_method($symtab,$cls,$method_var) {
 $symtab = $symtab|0;
 $cls = $cls|0;
 $method_var = $method_var|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($method_var|0);
 if ($4) {
  $5 = HEAP32[$method_var>>2]|0;
  HEAP32[$2>>2] = $5;
 }
 $6 = ((($cls)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$method_var>>2] = $7;
 HEAP32[$6>>2] = $method_var;
 return;
}
function _lily_add_class_property($symtab,$cls,$type,$name,$flags) {
 $symtab = $symtab|0;
 $cls = $cls|0;
 $type = $type|0;
 $name = $name|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(40)|0);
 $1 = (_strlen($name)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 (_strcpy($3,$name)|0);
 $4 = ((($0)) + 4|0);
 HEAP16[$4>>1] = 4;
 $5 = $flags&65535;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $type;
 $9 = (_shorthash_for_name_494($3)|0);
 $10 = tempRet0;
 $11 = ((($0)) + 24|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = ((($cls)) + 48|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 32|0);
 HEAP32[$20>>2] = $cls;
 $21 = HEAP16[$16>>1]|0;
 $22 = (($21) + 1)<<16>>16;
 HEAP16[$16>>1] = $22;
 $23 = ((($cls)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$0>>2] = $24;
 HEAP32[$23>>2] = $0;
 return ($0|0);
}
function _lily_new_variant($symtab,$enum_cls,$name) {
 $symtab = $symtab|0;
 $enum_cls = $enum_cls|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(40)|0);
 $1 = ((($0)) + 4|0);
 HEAP16[$1>>1] = 3;
 $2 = ((($0)) + 6|0);
 HEAP16[$2>>1] = 16;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = $enum_cls;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = (_shorthash_for_name_494($name)|0);
 $6 = tempRet0;
 $7 = ((($0)) + 24|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (_strlen($name)|0);
 $13 = (($12) + 1)|0;
 $14 = (_lily_malloc($13)|0);
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = $14;
 (_strcpy($14,$name)|0);
 $16 = ((($symtab)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 $19 = ((($0)) + 8|0);
 HEAP16[$19>>1] = $18;
 $20 = HEAP32[$16>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$16>>2] = $21;
 $22 = ((($symtab)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$0>>2] = $25;
 $26 = HEAP32[$22>>2]|0;
 $27 = ((($26)) + 28|0);
 HEAP32[$27>>2] = $0;
 return ($0|0);
}
function _lily_find_scoped_variant($enum_cls,$name) {
 $enum_cls = $enum_cls|0;
 $name = $name|0;
 var $$ret$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $ret$0$lcssa = 0, $ret$01 = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_shorthash_for_name_494($name)|0);
 $1 = tempRet0;
 $2 = ((($enum_cls)) + 48|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $ret$0$lcssa = 0;
  return ($ret$0$lcssa|0);
 }
 $5 = ((($enum_cls)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP16[$2>>1]|0;
 $8 = $7&65535;
 $i$02 = 0;$ret$01 = 0;
 while(1) {
  $9 = (($6) + ($i$02<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($0|0);
  $19 = ($17|0)==($1|0);
  $20 = $18 & $19;
  if ($20) {
   $21 = ((($10)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_strcmp($22,$name)|0);
   $24 = ($23|0)==(0);
   $$ret$0 = $24 ? $10 : $ret$01;
   $ret$1 = $$ret$0;
  } else {
   $ret$1 = $ret$01;
  }
  $25 = (($i$02) + 1)|0;
  $26 = ($25|0)<($8|0);
  if ($26) {
   $i$02 = $25;$ret$01 = $ret$1;
  } else {
   $ret$0$lcssa = $ret$1;
   break;
  }
 }
 return ($ret$0$lcssa|0);
}
function _lily_finish_enum($symtab,$enum_cls,$is_scoped,$enum_type) {
 $symtab = $symtab|0;
 $enum_cls = $enum_cls|0;
 $is_scoped = $is_scoped|0;
 $enum_type = $enum_type|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $class_iter$0 = 0, $class_iter$04 = 0;
 var $class_iter$06 = 0, $class_iter$13 = 0, $class_iter$13$in = 0, $exitcond = 0, $i$02 = 0, $variant_count$0$lcssa10 = 0, $variant_count$05 = 0, $variant_count$05$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $class_iter$04 = HEAP32[$2>>2]|0;
 $3 = ($class_iter$04|0)==($enum_cls|0);
 if ($3) {
  $4 = (_lily_malloc(0)|0);
  $24 = $4;$variant_count$0$lcssa10 = 0;
 } else {
  $class_iter$06 = $class_iter$04;$variant_count$05 = 0;
  while(1) {
   $5 = (($variant_count$05) + 1)|0;
   $class_iter$0 = HEAP32[$class_iter$06>>2]|0;
   $6 = ($class_iter$0|0)==($enum_cls|0);
   if ($6) {
    $$lcssa = $5;$variant_count$05$lcssa = $variant_count$05;
    break;
   } else {
    $class_iter$06 = $class_iter$0;$variant_count$05 = $5;
   }
  }
  $7 = $$lcssa << 2;
  $8 = (_lily_malloc($7)|0);
  $9 = ($variant_count$05$lcssa|0)>(-1);
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 28|0);
   $12 = ((($enum_cls)) + 6|0);
   $class_iter$13$in = $11;$i$02 = 0;
   while(1) {
    $class_iter$13 = HEAP32[$class_iter$13$in>>2]|0;
    $13 = (($variant_count$05$lcssa) - ($i$02))|0;
    $14 = (($8) + ($13<<2)|0);
    HEAP32[$14>>2] = $class_iter$13;
    $15 = ((($class_iter$13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $18 = HEAP16[$12>>1]|0;
     $19 = $18&65535;
     $20 = $19 | 2;
     $21 = $20&65535;
     HEAP16[$12>>1] = $21;
    }
    $22 = (($i$02) + 1)|0;
    $exitcond = ($22|0)==($$lcssa|0);
    if ($exitcond) {
     $24 = $8;$variant_count$0$lcssa10 = $$lcssa;
     break;
    } else {
     $class_iter$13$in = $class_iter$13;$i$02 = $22;
    }
   }
  } else {
   $24 = $8;$variant_count$0$lcssa10 = $$lcssa;
  }
 }
 $23 = ((($enum_cls)) + 40|0);
 HEAP32[$23>>2] = $24;
 $25 = $variant_count$0$lcssa10&65535;
 $26 = ((($enum_cls)) + 48|0);
 HEAP16[$26>>1] = $25;
 $27 = ((($enum_cls)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $29 | 4;
 $31 = $30&65535;
 HEAP16[$27>>1] = $31;
 $32 = ($is_scoped|0)==(0);
 if ($32) {
  return;
 }
 $33 = $29 | 12;
 $34 = $33&65535;
 HEAP16[$27>>1] = $34;
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($35)) + 28|0);
 HEAP32[$36>>2] = $enum_cls;
 return;
}
function _lily_register_classes($symtab,$vm) {
 $symtab = $symtab|0;
 $vm = $vm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $class_iter$0 = 0, $class_iter$02 = 0, $class_iter$03 = 0, $i$01 = 0, $module_iter$0 = 0, $module_iter$07 = 0, $module_iter$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($symtab)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 _lily_vm_ensure_class_table($vm,$2);
 $3 = ((($symtab)) + 8|0);
 $module_iter$07 = HEAP32[$3>>2]|0;
 $4 = ($module_iter$07|0)==(0|0);
 if ($4) {
  $24 = ((($symtab)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  _lily_vm_add_class_unchecked($vm,$25);
  return;
 } else {
  $module_iter$08 = $module_iter$07;
 }
 while(1) {
  $5 = ((($module_iter$08)) + 28|0);
  $class_iter$02 = HEAP32[$5>>2]|0;
  $6 = ($class_iter$02|0)==(0|0);
  if (!($6)) {
   $class_iter$03 = $class_iter$02;
   while(1) {
    _lily_vm_add_class_unchecked($vm,$class_iter$03);
    $7 = ((($class_iter$03)) + 6|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8 & 8;
    $10 = ($9<<16>>16)==(0);
    if (!($10)) {
     $11 = ((($class_iter$03)) + 48|0);
     $12 = HEAP16[$11>>1]|0;
     $13 = ($12<<16>>16)==(0);
     if (!($13)) {
      $14 = ((($class_iter$03)) + 40|0);
      $i$01 = 0;
      while(1) {
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + ($i$01<<2)|0);
       $17 = HEAP32[$16>>2]|0;
       _lily_vm_add_class_unchecked($vm,$17);
       $18 = (($i$01) + 1)|0;
       $19 = HEAP16[$11>>1]|0;
       $20 = $19&65535;
       $21 = ($18|0)<($20|0);
       if ($21) {
        $i$01 = $18;
       } else {
        break;
       }
      }
     }
    }
    $class_iter$0 = HEAP32[$class_iter$03>>2]|0;
    $22 = ($class_iter$0|0)==(0|0);
    if ($22) {
     break;
    } else {
     $class_iter$03 = $class_iter$0;
    }
   }
  }
  $module_iter$0 = HEAP32[$module_iter$08>>2]|0;
  $23 = ($module_iter$0|0)==(0|0);
  if ($23) {
   break;
  } else {
   $module_iter$08 = $module_iter$0;
  }
 }
 $24 = ((($symtab)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 _lily_vm_add_class_unchecked($vm,$25);
 return;
}
function _lily_find_module($symtab,$module,$name) {
 $symtab = $symtab|0;
 $module = $module|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($module|0)==(0|0);
 if ($0) {
  $1 = ((($symtab)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_find_module($2,$name)|0);
  $result$0 = $3;
  return ($result$0|0);
 } else {
  $4 = (_find_module($module,$name)|0);
  $result$0 = $4;
  return ($result$0|0);
 }
 return (0)|0;
}
function _find_module($module,$name) {
 $module = $module|0;
 $name = $name|0;
 var $$lcssa = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $link_iter$0 = 0, $result$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $$old1 = ($1|0)==(0|0);
 if ($$old1) {
  $result$2 = 0;
  return ($result$2|0);
 } else {
  $link_iter$0 = $1;
 }
 while(1) {
  $2 = ((($link_iter$0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $cond = ($3|0)==(0|0);
  if ($cond) {
   $6 = HEAP32[$link_iter$0>>2]|0;
   $7 = ((($6)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_strcmp($8,$name)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$lcssa = $link_iter$0;
    break;
   }
  } else {
   $4 = (_strcmp($3,$name)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$lcssa = $link_iter$0;
    break;
   }
  }
  $12 = ((($link_iter$0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $result$2 = 0;
   label = 7;
   break;
  } else {
   $link_iter$0 = $13;
  }
 }
 if ((label|0) == 7) {
  return ($result$2|0);
 }
 $11 = HEAP32[$$lcssa>>2]|0;
 $result$2 = $11;
 return ($result$2|0);
}
function _lily_instance_set_list($source,$i,$v) {
 $source = $source|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_move_list_f(655360,$3,$v);
 return;
}
function _lily_instance_set_string($source,$i,$v) {
 $source = $source|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_move_string($3,$v);
 return;
}
function _lily_assign_value($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$right>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($right)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$4>>2] = $6;
 }
 $7 = HEAP32[$left>>2]|0;
 $8 = $7 & 524288;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _lily_deref($left);
 }
 $10 = ((($right)) + 8|0);
 $11 = ((($left)) + 8|0);
 $12 = $10;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $11;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = HEAP32[$right>>2]|0;
 HEAP32[$left>>2] = $22;
 return;
}
function _lily_deref($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$value>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($value)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  return;
 }
 _lily_destroy_value($value);
 return;
}
function _lily_destroy_value($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$v>>1]|0;
 $1 = $0 | 2;
 $2 = ($1<<16>>16)==(11);
 if ($2) {
  _destroy_list($v);
  return;
 }
 $3 = HEAP32[$v>>2]|0;
 $4 = $3 & 2359296;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _destroy_instance($v);
  return;
 }
 switch ($0<<16>>16) {
 case 3: case 5:  {
  _destroy_string($v);
  return;
  break;
 }
 case 7:  {
  _destroy_function($v);
  return;
  break;
 }
 case 10:  {
  _lily_destroy_hash($v);
  return;
  break;
 }
 case 8:  {
  _destroy_dynamic($v);
  return;
  break;
 }
 case 12:  {
  _destroy_file($v);
  return;
  break;
 }
 default: {
  $6 = $3 & 1048576;
  $7 = ($6|0)==(0);
  if ($7) {
   return;
  }
  $8 = ((($v)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 127]($9);
  return;
 }
 }
}
function _destroy_list($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ((($1)) + 16|0);
 if ($4) {
  $15 = HEAP32[$5>>2]|0;
  _lily_free($15);
  _lily_free($1);
  return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_deref($8);
  $9 = HEAP32[$5>>2]|0;
  $10 = (($9) + ($i$01<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($11);
  $12 = (($i$01) + 1)|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $i$01 = $12;
  } else {
   break;
  }
 }
 $15 = HEAP32[$5>>2]|0;
 _lily_free($15);
 _lily_free($1);
 return;
}
function _destroy_instance($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $full_destroy$0 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[110]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ($3|0)==(0|0);
 do {
  if ($6) {
   $full_destroy$0 = 1;
  } else {
   $7 = ((($3)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(-1);
   if ($9) {
    HEAP32[$2>>2] = $4;
    $full_destroy$0 = 0;
    break;
   } else {
    $10 = ((($3)) + 8|0);
    HEAP32[$10>>2] = 0;
    $full_destroy$0 = 1;
    break;
   }
  }
 } while(0);
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 $14 = ((($1)) + 16|0);
 if (!($13)) {
  $i$01 = 0;
  while(1) {
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($i$01<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   _lily_deref($17);
   $18 = HEAP32[$14>>2]|0;
   $19 = (($18) + ($i$01<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   _lily_free($20);
   $21 = (($i$01) + 1)|0;
   $22 = HEAP32[$11>>2]|0;
   $23 = ($21>>>0)<($22>>>0);
   if ($23) {
    $i$01 = $21;
   } else {
    break;
   }
  }
 }
 $24 = HEAP32[$14>>2]|0;
 _lily_free($24);
 $25 = ($full_destroy$0|0)==(0);
 if ($25) {
  return;
 }
 _lily_free($1);
 return;
}
function _destroy_string($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_free($3);
 _lily_free($1);
 return;
}
function _destroy_function($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $full_destroy$0 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[110]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(-1);
 if ($8) {
  $9 = ((($1)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_free($10);
  _lily_free($1);
  return;
 }
 $11 = ($3|0)==(0|0);
 do {
  if ($11) {
   $full_destroy$0 = 1;
  } else {
   $12 = ((($3)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(-1);
   if ($14) {
    HEAP32[$2>>2] = $4;
    $full_destroy$0 = 0;
    break;
   } else {
    $15 = ((($3)) + 8|0);
    HEAP32[$15>>2] = 0;
    $full_destroy$0 = 1;
    break;
   }
  }
 } while(0);
 $16 = ((($1)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP16[$6>>1]|0;
 $19 = ($18<<16>>16)==(0);
 if (!($19)) {
  $20 = $18&65535;
  $i$01 = 0;
  while(1) {
   $21 = (($17) + ($i$01<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $24 = ((($22)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + -1)|0;
    HEAP32[$24>>2] = $26;
    $27 = ($26|0)==(0);
    if ($27) {
     _lily_deref($22);
     _lily_free($22);
    }
   }
   $28 = (($i$01) + 1)|0;
   $exitcond = ($28|0)==($20|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $28;
   }
  }
 }
 _lily_free($17);
 $29 = ($full_destroy$0|0)==(0);
 if ($29) {
  return;
 }
 _lily_free($1);
 return;
}
function _destroy_dynamic($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[110]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ($3|0)==(0|0);
 do {
  if (!($6)) {
   $7 = ((($3)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(-1);
   if (!($9)) {
    $13 = ((($3)) + 8|0);
    HEAP32[$13>>2] = 0;
    break;
   }
   HEAP32[$2>>2] = $4;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_deref($11);
   $12 = HEAP32[$10>>2]|0;
   _lily_free($12);
   return;
  }
 } while(0);
 $14 = ((($1)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_deref($15);
 $16 = HEAP32[$14>>2]|0;
 _lily_free($16);
 _lily_free($1);
 return;
}
function _destroy_file($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($1)) + 6|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   (_fclose($3)|0);
  }
 }
 _lily_free($1);
 return;
}
function _lily_instance_value($source,$i) {
 $source = $source|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _lily_dynamic_set_value($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_assign_value($1,$v);
 return;
}
function _lily_list_set_string($source,$i,$v) {
 $source = $source|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_move_string($3,$v);
 return;
}
function _lily_variant_set_integer($source,$i,$0,$1) {
 $source = $source|0;
 $i = $i|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($source)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($i<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_integer($5,$0,$1);
 return;
}
function _lily_variant_set_string($source,$i,$v) {
 $source = $source|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_move_string($3,$v);
 return;
}
function _lily_variant_set_value($source,$i,$v) {
 $source = $source|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_assign_value($3,$v);
 return;
}
function _lily_return_boolean($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($v|0)<(0);
 $7 = $6 << 31 >> 31;
 _lily_move_boolean($5,$v,$7);
 return;
}
function _lily_return_byte($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_byte($5,$v);
 return;
}
function _lily_return_bytestring($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_bytestring($5,$v);
 return;
}
function _lily_return_double($source,$v) {
 $source = $source|0;
 $v = +$v;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_double($5,$v);
 return;
}
function _lily_return_empty_variant($source,$f) {
 $source = $source|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_empty_variant($f,$5);
 return;
}
function _lily_return_file($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_file($5,$v);
 return;
}
function _lily_return_filled_variant($source,$f,$v) {
 $source = $source|0;
 $f = $f|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f&65535;
 $1 = $0 | 655360;
 $2 = ((($source)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_variant_f($1,$7,$v);
 return;
}
function _lily_return_hash($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_hash_f(655360,$5,$v);
 return;
}
function _lily_return_integer($source,$0,$1) {
 $source = $source|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($source)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_move_integer($7,$0,$1);
 return;
}
function _lily_return_list($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_list_f(655360,$5,$v);
 return;
}
function _lily_return_string($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_string($5,$v);
 return;
}
function _lily_return_tuple($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_tuple_f(655360,$5,$v);
 return;
}
function _lily_return_unit($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_move_unit($5);
 return;
}
function _lily_return_value($source,$v) {
 $source = $source|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_assign_value($5,$v);
 return;
}
function _lily_return_value_noref($s,$v) {
 $s = $s|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_assign_value_noref($5,$v);
 return;
}
function _lily_assign_value_noref($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$left>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _lily_deref($left);
 }
 $3 = ((($right)) + 8|0);
 $4 = ((($left)) + 8|0);
 $5 = $3;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[$right>>2]|0;
 HEAP32[$left>>2] = $15;
 return;
}
function _lily_result_return($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = ((($s)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($s)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_assign_value_noref($12,$6);
 HEAP32[$6>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$0>>2] = $14;
 return;
}
function _lily_arg_boolean($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 return ($6|0);
}
function _lily_arg_byte($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 return ($10|0);
}
function _lily_arg_double($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 return (+$4);
}
function _lily_arg_file($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_file_raw($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_function($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_hash($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_instance($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_integer($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 return ($6|0);
}
function _lily_arg_list($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_string($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_arg_string_raw($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_arg_value($source,$index) {
 $source = $source|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_result_boolean($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 return ($7|0);
}
function _lily_result_value($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _lily_arg_class_id($s,$index) {
 $s = $s|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 return ($4|0);
}
function _lily_arg_count($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _lily_arg_instance_for_id($s,$index,$iv) {
 $s = $s|0;
 $index = $index|0;
 $iv = $iv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = (($0) + ($index<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$iv>>2] = $4;
 $5 = HEAP16[$2>>1]|0;
 $6 = $5&65535;
 return ($6|0);
}
function _lily_pop_value($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($s)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_drop_value($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($s)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_deref($6);
 HEAP32[$6>>2] = 0;
 return;
}
function _lily_new_value_of_bytestring($bv) {
 $bv = $bv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = HEAP32[$bv>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$bv>>2] = $2;
 HEAP32[$0>>2] = 524293;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $bv;
 return ($0|0);
}
function _lily_new_value_of_double($d) {
 $d = +$d;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = 2;
 $1 = ((($0)) + 8|0);
 HEAPF64[$1>>3] = $d;
 return ($0|0);
}
function _lily_new_value_of_file($fv) {
 $fv = $fv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = HEAP32[$fv>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$fv>>2] = $2;
 HEAP32[$0>>2] = 524300;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $fv;
 return ($0|0);
}
function _lily_new_value_of_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(16)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 return ($2|0);
}
function _lily_new_value_of_list($lv) {
 $lv = $lv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = HEAP32[$lv>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$lv>>2] = $2;
 HEAP32[$0>>2] = 655369;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $lv;
 return ($0|0);
}
function _lily_new_value_of_string($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = HEAP32[$sv>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$sv>>2] = $2;
 HEAP32[$0>>2] = 524291;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $sv;
 return ($0|0);
}
function _lily_new_raw_string($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($source)|0);
 $1 = (($0) + 1)|0;
 $2 = (_lily_malloc($1)|0);
 (_strcpy($2,$source)|0);
 $3 = (_new_sv($2,$0)|0);
 return ($3|0);
}
function _new_sv($buffer,$size) {
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = $buffer;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $size;
 return ($0|0);
}
function _lily_new_dynamic_val() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return ($0|0);
}
function _lily_new_file_val($inner_file,$mode) {
 $inner_file = $inner_file|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = (_strchr($mode,43)|0);
 $2 = ($1|0)!=(0|0);
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $inner_file;
 $4 = HEAP8[$mode>>0]|0;
 $5 = ($4<<24>>24)==(114);
 $6 = $2 | $5;
 $7 = $6&1;
 $8 = ((($0)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = HEAP8[$mode>>0]|0;
 $10 = ($9<<24>>24)==(119);
 $11 = $2 | $10;
 $12 = $11&1;
 $13 = ((($0)) + 5|0);
 HEAP8[$13>>0] = $12;
 $14 = ((($0)) + 6|0);
 HEAP8[$14>>0] = 0;
 return ($0|0);
}
function _lily_new_list_val_n($initial) {
 $initial = $initial|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = $initial << 2;
 $2 = (_lily_malloc($1)|0);
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $initial;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ($initial|0)>(0);
 if ($6) {
  $i$01 = 0;
 } else {
  return ($0|0);
 }
 while(1) {
  $7 = (_lily_malloc(16)|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($i$01<<2)|0);
  HEAP32[$9>>2] = $7;
  $10 = (($i$01) + 1)|0;
  $exitcond = ($10|0)==($initial|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $10;
  }
 }
 return ($0|0);
}
function _lily_new_hash_val() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 return ($0|0);
}
function _lily_new_instance_val($initial) {
 $initial = $initial|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = $initial << 2;
 $2 = (_lily_malloc($1)|0);
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $initial;
 $6 = ($initial|0)>(0);
 if ($6) {
  $i$01 = 0;
 } else {
  return ($0|0);
 }
 while(1) {
  $7 = (_lily_malloc(16)|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($i$01<<2)|0);
  HEAP32[$9>>2] = $7;
  $10 = (($i$01) + 1)|0;
  $exitcond = ($10|0)==($initial|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $10;
  }
 }
 return ($0|0);
}
function _lily_new_raw_string_sized($source,$len) {
 $source = $source|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($len) + 1)|0;
 $1 = (_lily_malloc($0)|0);
 _memcpy(($1|0),($source|0),($len|0))|0;
 $2 = (($1) + ($len)|0);
 HEAP8[$2>>0] = 0;
 $3 = (_new_sv($1,$len)|0);
 return ($3|0);
}
function _lily_new_raw_string_take($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($source)|0);
 $1 = (_new_sv($source,$0)|0);
 return ($1|0);
}
function _lily_new_enum_n($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = $size << 2;
 $2 = (_lily_malloc($1)|0);
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $size;
 $6 = ($size|0)>(0);
 if ($6) {
  $i$01 = 0;
 } else {
  return ($0|0);
 }
 while(1) {
  $7 = (_lily_malloc(16)|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($i$01<<2)|0);
  HEAP32[$9>>2] = $7;
  $10 = (($i$01) + 1)|0;
  $exitcond = ($10|0)==($size|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $10;
  }
 }
 return ($0|0);
}
function _lily_bytestring_get_raw($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($sv)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_bytestring_length($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($sv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_file_ensure_writeable($s,$filev) {
 $s = $s|0;
 $filev = $filev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($filev)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _lily_error($s,20,9334);
 }
 $3 = ((($filev)) + 5|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  return;
 }
 _lily_error($s,20,9363);
 return;
}
function _lily_file_ensure_readable($s,$filev) {
 $s = $s|0;
 $filev = $filev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($filev)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _lily_error($s,20,9334);
 }
 $3 = ((($filev)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  return;
 }
 _lily_error($s,20,9390);
 return;
}
function _lily_string_get_raw($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($sv)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_string_length($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($sv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_copy_value($input) {
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$input>>2]|0;
 $1 = $0 & 524288;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($input)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$4>>2] = $6;
 }
 $7 = (_lily_malloc(16)|0);
 $8 = HEAP32[$input>>2]|0;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 8|0);
 $10 = ((($input)) + 8|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $9;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 return ($7|0);
}
function _lily_eq_value($s,$left,$right) {
 $s = $s|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $depth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $depth = sp;
 HEAP32[$depth>>2] = 0;
 $0 = (_lily_eq_value_raw($s,$depth,$left,$right)|0);
 STACKTOP = sp;return ($0|0);
}
function _lily_eq_value_raw($s,$depth,$left,$right) {
 $s = $s|0;
 $depth = $depth|0;
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $left_iter$0 = 0, $left_iter$07 = 0, $left_iter$09 = 0, $right_iter$05 = 0, $right_iter$05$lcssa = 0, $right_start$08 = 0, $right_start$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP16[$left>>1]|0;
 $1 = HEAP16[$right>>1]|0;
 $2 = HEAP32[$depth>>2]|0;
 $3 = ($2|0)==(100);
 if ($3) {
  $4 = ((($s)) + 92|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_raise($5,5,9417,$vararg_buffer);
  // unreachable;
 }
 $6 = ($0<<16>>16)==($1<<16>>16);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 switch ($0<<16>>16) {
 case 1: case 6:  {
  $7 = ((($left)) + 8|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($right)) + 8|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($10|0)==($17|0);
  $22 = ($13|0)==($20|0);
  $23 = $21 & $22;
  $24 = $23&1;
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $25 = ((($left)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = ((($right)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $26 == $28;
  $30 = $29&1;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $31 = ((($left)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($right)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_strcmp($34,$38)|0);
  $40 = ($39|0)==(0);
  $41 = $40&1;
  $$0 = $41;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  $42 = ((($left)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($right)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($43)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($45)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)==($49|0);
  if ($50) {
   $51 = ((($45)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($43)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_memcmp($54,$52,$47)|0);
   $56 = ($55|0)==(0);
   $58 = $56;
  } else {
   $58 = 0;
  }
  $57 = $58&1;
  $$0 = $57;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $59 = $0 | 2;
  $60 = ($59<<16>>16)==(11);
  if ($60) {
   $61 = (_subvalue_eq($s,$depth,$left,$right)|0);
   $$0 = $61;
   STACKTOP = sp;return ($$0|0);
  }
  switch ($0<<16>>16) {
  case 10:  {
   $62 = ((($left)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($63)) + 16|0);
   $left_iter$07 = HEAP32[$64>>2]|0;
   $65 = ($left_iter$07|0)==(0|0);
   if ($65) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $66 = ((($right)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $left_iter$09 = $left_iter$07;$right_start$08 = $69;
   L27: while(1) {
    $72 = HEAP32[$depth>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[$depth>>2] = $73;
    $74 = ($right_start$08|0)==(0|0);
    if ($74) {
     label = 19;
     break;
    }
    $75 = $left_iter$09;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (($75) + 4)|0;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $right_iter$05 = $right_start$08;
    while(1) {
     $83 = $right_iter$05;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($83) + 4)|0;
     $87 = $86;
     $88 = HEAP32[$87>>2]|0;
     $89 = ($77|0)==($85|0);
     $90 = ($80|0)==($88|0);
     $91 = $89 & $90;
     if ($91) {
      $right_iter$05$lcssa = $right_iter$05;
      break;
     }
     $109 = ((($right_iter$05)) + 16|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      label = 19;
      break L27;
     } else {
      $right_iter$05 = $110;
     }
    }
    $92 = ((($left_iter$09)) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($right_iter$05$lcssa)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (_lily_eq_value_raw($s,$depth,$93,$95)|0);
    $97 = ($96|0)==(0);
    if ($97) {
     $105 = 0;
    } else {
     $98 = ((($left_iter$09)) + 12|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ((($right_iter$05$lcssa)) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (_lily_eq_value_raw($s,$depth,$99,$101)|0);
     $103 = ($102|0)!=(0);
     $105 = $103;
    }
    $104 = $105&1;
    $106 = ($right_iter$05$lcssa|0)==($right_start$08|0);
    if ($106) {
     $107 = ((($right_start$08)) + 16|0);
     $108 = HEAP32[$107>>2]|0;
     $right_start$1 = $108;
    } else {
     $right_start$1 = $right_start$08;
    }
    $112 = HEAP32[$depth>>2]|0;
    $113 = (($112) + -1)|0;
    HEAP32[$depth>>2] = $113;
    if (!($105)) {
     $$0 = 0;
     label = 32;
     break;
    }
    $70 = ((($left_iter$09)) + 16|0);
    $left_iter$0 = HEAP32[$70>>2]|0;
    $71 = ($left_iter$0|0)==(0|0);
    if ($71) {
     $$0 = $104;
     label = 32;
     break;
    } else {
     $left_iter$09 = $left_iter$0;$right_start$08 = $right_start$1;
    }
   }
   if ((label|0) == 19) {
    $81 = HEAP32[$depth>>2]|0;
    $82 = (($81) + -1)|0;
    HEAP32[$depth>>2] = $82;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 32) {
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 8:  {
   $114 = HEAP32[$depth>>2]|0;
   $115 = (($114) + 1)|0;
   HEAP32[$depth>>2] = $115;
   $116 = ((($left)) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($right)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($121)) + 16|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (_lily_eq_value_raw($s,$depth,$119,$123)|0);
   $125 = HEAP32[$depth>>2]|0;
   $126 = (($125) + -1)|0;
   HEAP32[$depth>>2] = $126;
   STACKTOP = sp;return ($124|0);
   break;
  }
  default: {
   $127 = HEAP32[$left>>2]|0;
   $128 = $127 & 2097152;
   $129 = ($128|0)==(0);
   $130 = ((($left)) + 8|0);
   if ($129) {
    $134 = HEAP32[$130>>2]|0;
    $135 = ((($right)) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($134|0)==($136|0);
    $138 = $137&1;
    $$0 = $138;
    STACKTOP = sp;return ($$0|0);
   }
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(0|0);
   if ($132) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $133 = (_subvalue_eq($s,$depth,$left,$right)|0);
   $$0 = $133;
   STACKTOP = sp;return ($$0|0);
  }
  }
 }
 }
 return (0)|0;
}
function _subvalue_eq($s,$depth,$left,$right) {
 $s = $s|0;
 $depth = $depth|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($left)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($right)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $ok$3 = 0;
  return ($ok$3|0);
 }
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$4>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $ok$3 = 1;
  return ($ok$3|0);
 }
 $12 = ((($3)) + 16|0);
 $i$01 = 0;
 while(1) {
  $16 = HEAP32[$9>>2]|0;
  $17 = (($16) + ($i$01<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $20 = (($19) + ($i$01<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$depth>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$depth>>2] = $23;
  $24 = (_lily_eq_value_raw($s,$depth,$18,$21)|0);
  $25 = ($24|0)==(0);
  $26 = HEAP32[$depth>>2]|0;
  $27 = (($26) + -1)|0;
  HEAP32[$depth>>2] = $27;
  $14 = (($i$01) + 1)|0;
  if ($25) {
   $ok$3 = 0;
   label = 6;
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $15 = ($14>>>0)<($13>>>0);
  if ($15) {
   $i$01 = $14;
  } else {
   $ok$3 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($ok$3|0);
 }
 return (0)|0;
}
function _lily_new_lex_state($options,$raiser) {
 $options = $options|0;
 $raiser = $raiser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep10 = 0, $scevgep11 = 0, $scevgep12 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(72)|0);
 $1 = ((($options)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 64|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($options)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 60|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 24|0);
 HEAP16[$7>>1] = 0;
 HEAP32[$0>>2] = 0;
 $8 = ((($0)) + 56|0);
 HEAP32[$8>>2] = $raiser;
 $9 = (_lily_malloc(128)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (_lily_malloc(128)|0);
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 48|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 32|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (_lily_malloc(256)|0);
 $21 = ((($0)) + 30|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 28|0);
 HEAP16[$22>>1] = 128;
 $23 = ((($0)) + 26|0);
 HEAP16[$23>>1] = 128;
 $24 = ((($0)) + 16|0);
 HEAP32[$24>>2] = 0;
 _memset(($20|0),30,256)|0;
 $scevgep12 = ((($20)) + 97|0);
 dest=$scevgep12; stop=dest+26|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep11 = ((($20)) + 65|0);
 dest=$scevgep11; stop=dest+26|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep10 = ((($20)) + 48|0);
 dest=$scevgep10; stop=dest+10|0; do { HEAP8[dest>>0]=17|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep = ((($20)) + 194|0);
 dest=$scevgep; stop=dest+51|0; do { HEAP8[dest>>0]=15|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $25 = ((($20)) + 66|0);
 HEAP8[$25>>0] = 28;
 $26 = ((($20)) + 95|0);
 HEAP8[$26>>0] = 15;
 $27 = ((($20)) + 40|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($20)) + 41|0);
 HEAP8[$28>>0] = 1;
 $29 = ((($20)) + 34|0);
 HEAP8[$29>>0] = 16;
 $30 = ((($20)) + 64|0);
 HEAP8[$30>>0] = 24;
 $31 = ((($20)) + 63|0);
 HEAP8[$31>>0] = 27;
 $32 = ((($20)) + 35|0);
 HEAP8[$32>>0] = 22;
 $33 = ((($20)) + 61|0);
 HEAP8[$33>>0] = 20;
 $34 = ((($20)) + 46|0);
 HEAP8[$34>>0] = 23;
 $35 = ((($20)) + 44|0);
 HEAP8[$35>>0] = 2;
 $36 = ((($20)) + 43|0);
 HEAP8[$36>>0] = 13;
 $37 = ((($20)) + 45|0);
 HEAP8[$37>>0] = 14;
 $38 = ((($20)) + 123|0);
 HEAP8[$38>>0] = 18;
 $39 = ((($20)) + 125|0);
 HEAP8[$39>>0] = 3;
 $40 = ((($20)) + 60|0);
 HEAP8[$40>>0] = 12;
 $41 = ((($20)) + 62|0);
 HEAP8[$41>>0] = 11;
 $42 = ((($20)) + 58|0);
 HEAP8[$42>>0] = 6;
 $43 = ((($20)) + 33|0);
 HEAP8[$43>>0] = 7;
 $44 = ((($20)) + 42|0);
 HEAP8[$44>>0] = 9;
 $45 = ((($20)) + 47|0);
 HEAP8[$45>>0] = 10;
 $46 = ((($20)) + 38|0);
 HEAP8[$46>>0] = 25;
 $47 = ((($20)) + 37|0);
 HEAP8[$47>>0] = 8;
 $48 = ((($20)) + 124|0);
 HEAP8[$48>>0] = 26;
 $49 = ((($20)) + 91|0);
 HEAP8[$49>>0] = 4;
 $50 = ((($20)) + 93|0);
 HEAP8[$50>>0] = 19;
 $51 = ((($20)) + 36|0);
 HEAP8[$51>>0] = 29;
 $52 = ((($20)) + 10|0);
 HEAP8[$52>>0] = 21;
 $53 = ((($0)) + 40|0);
 HEAP32[$53>>2] = 51;
 HEAP32[$13>>2] = $20;
 return ($0|0);
}
function _lily_rewind_lex_state($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $entry_iter$0 = 0, $entry_iter$0$lcssa = 0, $entry_iter$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lexer>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $entry_iter$0 = $0;
  while(1) {
   $2 = ((($entry_iter$0)) + 48|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $entry_iter$0$lcssa = $entry_iter$0;
    break;
   } else {
    $entry_iter$0 = $3;
   }
  }
  HEAP32[$lexer>>2] = $entry_iter$0$lcssa;
  $entry_iter$11 = $entry_iter$0$lcssa;
  while(1) {
   $5 = ((($entry_iter$11)) + 40|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    _close_entry($entry_iter$11);
    HEAP32[$5>>2] = 0;
   }
   $8 = ((($entry_iter$11)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   _lily_free($9);
   HEAP32[$8>>2] = 0;
   $10 = ((($entry_iter$11)) + 52|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $entry_iter$11 = $11;
   }
  }
 }
 $13 = ((($lexer)) + 24|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($lexer)) + 48|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($lexer)) + 32|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((($lexer)) + 30|0);
 HEAP16[$20>>1] = 0;
 return;
}
function _close_entry($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($entry)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 65535;
 switch ($2|0) {
 case 0:  {
  $3 = ((($entry)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  (_fclose($4)|0);
  return;
  break;
 }
 case 2:  {
  $5 = ((($entry)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_free($6);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _lily_free_lex_state($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_iter$0 = 0;
 var $entry_iter$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lexer>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $entry_iter$0 = $0;
  while(1) {
   $2 = ((($entry_iter$0)) + 48|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $entry_iter$12 = $entry_iter$0;
    break;
   } else {
    $entry_iter$0 = $3;
   }
  }
  while(1) {
   $5 = ((($entry_iter$12)) + 40|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    _close_entry($entry_iter$12);
   }
   $8 = ((($entry_iter$12)) + 52|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($entry_iter$12)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_free($11);
   _lily_free($entry_iter$12);
   $12 = ($9|0)==(0|0);
   if ($12) {
    break;
   } else {
    $entry_iter$12 = $9;
   }
  }
 }
 $13 = ((($lexer)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_free($14);
 $15 = ((($lexer)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _lily_free($16);
 $17 = ((($lexer)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_free($18);
 _lily_free($lexer);
 return;
}
function _lily_pop_lex_entry($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $pos$0 = 0, $pos$1 = 0, $pos$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lexer>>2]|0;
 _close_entry($0);
 $1 = ((($0)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $52 = ((($lexer)) + 16|0);
  HEAP32[$52>>2] = 0;
  return;
 }
 $5 = ((($lexer)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 (_strcpy($6,$8)|0);
 $9 = ((($3)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($lexer)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($3)) + 12|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($lexer)) + 30|0);
 HEAP16[$14>>1] = $13;
 HEAP32[$lexer>>2] = $3;
 $15 = ((($3)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($lexer)) + 48|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($3)) + 32|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($lexer)) + 32|0);
 $26 = $25;
 $27 = $26;
 HEAP32[$27>>2] = $21;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $24;
 $30 = ((($3)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 16;
 $33 = ((($lexer)) + 40|0);
 HEAP32[$33>>2] = $32;
 $34 = ($32|0)==(35);
 if (!($34)) {
  return;
 }
 $35 = HEAP16[$14>>1]|0;
 $36 = $35&65535;
 $37 = HEAP32[$5>>2]|0;
 $pos$0 = $36;
 while(1) {
  $38 = (($pos$0) + -1)|0;
  $39 = (($37) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (9446 + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)==(0);
  $pos$1 = $44 ? $pos$0 : $38;
  $not$ = $44 ^ 1;
  $45 = ($pos$1|0)!=(0);
  $or$cond = $45 & $not$;
  if ($or$cond) {
   $pos$0 = $pos$1;
  } else {
   $pos$1$lcssa = $pos$1;
   break;
  }
 }
 $46 = ((($lexer)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($37) + ($pos$1$lcssa)|0);
 $49 = (($36) - ($pos$1$lcssa))|0;
 (_strncpy($47,$48,$49)|0);
 $50 = HEAP32[$46>>2]|0;
 $51 = (($50) + ($49)|0);
 HEAP8[$51>>0] = 0;
 return;
}
function _lily_scan_interpolation_piece($lexer,$start_ch) {
 $lexer = $lexer|0;
 $start_ch = $start_ch|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ch = 0, $is_interpolated$0 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ch = sp + 4|0;
 $start = sp;
 $0 = HEAP32[$start_ch>>2]|0;
 HEAP32[$ch>>2] = $0;
 HEAP32[$start>>2] = 0;
 $$cast = $0;
 $1 = HEAP8[$$cast>>0]|0;
 $2 = ($1<<24>>24)==(94);
 if ($2) {
  $3 = ((($$cast)) + 1|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(40);
  if ($5) {
   $6 = ((($$cast)) + 2|0);
   HEAP32[$ch>>2] = $6;
   $7 = ((($lexer)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($lexer)) + 20|0);
   HEAP32[$9>>2] = $8;
   _scan_interpolation($lexer,$ch,$start);
   $10 = HEAP32[$ch>>2]|0;
   $11 = ((($10)) + 1|0);
   HEAP32[$ch>>2] = $11;
   $is_interpolated$0 = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $12 = HEAP32[$ch>>2]|0;
  $13 = ((($12)) + -1|0);
  HEAP32[$ch>>2] = $13;
  _scan_quoted_raw($lexer,$ch,$start,80);
  $is_interpolated$0 = 0;
 }
 $14 = HEAP32[$start>>2]|0;
 $15 = ((($lexer)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($14)|0);
 HEAP8[$17>>0] = 0;
 $18 = HEAP32[$ch>>2]|0;
 HEAP32[$start_ch>>2] = $18;
 STACKTOP = sp;return ($is_interpolated$0|0);
}
function _scan_interpolation($lexer,$source_ch,$start) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 $start = $start|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ch = 0, $label_pos = 0, $parenth_depth$0 = 0, $parenth_depth$1 = 0, $parenth_depth$2 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ch = sp + 32|0;
 $label_pos = sp + 28|0;
 $0 = ((($lexer)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$source_ch>>2]|0;
 HEAP32[$ch>>2] = $2;
 $3 = HEAP32[$start>>2]|0;
 $4 = ((($lexer)) + 56|0);
 $5 = ((($lexer)) + 56|0);
 $6 = ((($lexer)) + 56|0);
 $7 = ((($lexer)) + 56|0);
 $parenth_depth$0 = 1;$storemerge = $3;
 L1: while(1) {
  HEAP32[$label_pos>>2] = $storemerge;
  $8 = HEAP32[$ch>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  switch ($9<<24>>24) {
  case 40:  {
   $10 = (($parenth_depth$0) + 1)|0;
   $parenth_depth$1 = $10;
   break;
  }
  case 36:  {
   $11 = ((($8)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(34);
   if ($13) {
    label = 5;
    break L1;
   } else {
    label = 6;
   }
   break;
  }
  default: {
   label = 6;
  }
  }
  L6: do {
   if ((label|0) == 6) {
    label = 0;
    $15 = HEAP32[$ch>>2]|0;
    $16 = HEAP8[$15>>0]|0;
    switch ($16<<24>>24) {
    case 10:  {
     label = 11;
     break L1;
     break;
    }
    case 35:  {
     label = 12;
     break L1;
     break;
    }
    case 34:  {
     break;
    }
    default: {
     $parenth_depth$1 = $parenth_depth$0;
     break L6;
    }
    }
    $17 = ((($15)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(34);
    if ($19) {
     $20 = ((($15)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(34);
     if ($22) {
      label = 9;
      break L1;
     }
    }
    _scan_quoted_raw($lexer,$ch,$label_pos,36);
    $parenth_depth$1 = $parenth_depth$0;
   }
  } while(0);
  $26 = HEAP32[$ch>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = HEAP32[$label_pos>>2]|0;
  $29 = (($1) + ($28)|0);
  HEAP8[$29>>0] = $27;
  $30 = HEAP8[$26>>0]|0;
  $31 = ($30<<24>>24)==(41);
  if ($31) {
   $32 = ($parenth_depth$1|0)==(1);
   if ($32) {
    $$lcssa = $26;
    label = 17;
    break;
   }
   $33 = (($parenth_depth$1) + -1)|0;
   $parenth_depth$2 = $33;
  } else {
   $parenth_depth$2 = $parenth_depth$1;
  }
  $34 = HEAP32[$ch>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$ch>>2] = $35;
  $36 = HEAP32[$label_pos>>2]|0;
  $37 = (($36) + 1)|0;
  $parenth_depth$0 = $parenth_depth$2;$storemerge = $37;
 }
 if ((label|0) == 5) {
  $14 = HEAP32[$7>>2]|0;
  _lily_raise($14,1,9702,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $23 = HEAP32[$4>>2]|0;
  _lily_raise($23,1,9739,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $24 = HEAP32[$5>>2]|0;
  _lily_raise($24,1,9939,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $25 = HEAP32[$6>>2]|0;
  _lily_raise($25,1,9972,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 17) {
  HEAP32[$source_ch>>2] = $$lcssa;
  $38 = HEAP32[$label_pos>>2]|0;
  HEAP32[$start>>2] = $38;
  STACKTOP = sp;return;
 }
}
function _scan_quoted_raw($lexer,$source_ch,$start,$flags) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 $start = $start|0;
 $flags = $flags|0;
 var $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $is_multiline$0 = 0, $label$0$ph = 0, $label$0$ph$lcssa = 0, $label$0$ph18 = 0, $label_pos = 0, $multiline_start$0 = 0, $new_ch = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $label_pos = sp + 16|0;
 $new_ch = sp + 12|0;
 $0 = HEAP32[$source_ch>>2]|0;
 HEAP32[$new_ch>>2] = $0;
 $1 = ((($lexer)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(34);
 if ($5) {
  $6 = ((($0)) + 2|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(34);
  $9 = $flags & 64;
  $10 = ($9|0)==(0);
  $or$cond = $10 & $8;
  if ($or$cond) {
   $11 = ((($lexer)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$new_ch>>2] = $6;
   $is_multiline$0 = 1;$multiline_start$0 = $12;
  } else {
   $is_multiline$0 = 0;$multiline_start$0 = 0;
  }
 } else {
  $is_multiline$0 = 0;$multiline_start$0 = 0;
 }
 $13 = $flags & 32;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = ($is_multiline$0|0)!=(0);
  $16 = $15 ? 3 : 1;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$start>>2]|0;
  $19 = (($17) + ($18)|0);
  (_strncpy($19,9791,$16)|0);
  $20 = HEAP32[$start>>2]|0;
  $21 = (($20) + ($16))|0;
  HEAP32[$start>>2] = $21;
 }
 $22 = HEAP32[$new_ch>>2]|0;
 $23 = ((($22)) + 1|0);
 HEAP32[$new_ch>>2] = $23;
 $24 = HEAP32[$start>>2]|0;
 HEAP32[$label_pos>>2] = $24;
 $25 = ($is_multiline$0|0)==(0);
 $$old = $flags & 64;
 $$old2 = ($$old|0)==(0);
 $26 = $flags & 64;
 $27 = ($26|0)==(0);
 $28 = $flags & 66;
 $29 = ($28|0)==(0);
 $30 = $flags & 64;
 $31 = ($30|0)==(0);
 $32 = $flags & 64;
 $33 = ($32|0)==(0);
 $34 = ($is_multiline$0|0)==(0);
 $35 = ((($lexer)) + 56|0);
 $36 = ((($lexer)) + 56|0);
 $37 = ((($lexer)) + 8|0);
 $label$0$ph = $2;
 L8: while(1) {
  L10: while(1) {
   $38 = HEAP32[$new_ch>>2]|0;
   $39 = HEAP8[$38>>0]|0;
   switch ($39<<24>>24) {
   case 92:  {
    _collect_escape($lexer,$new_ch,$label_pos,$flags);
    continue L10;
    break;
   }
   case 10:  {
    if ($33) {
     break L10;
    }
    break;
   }
   default: {
   }
   }
   $52 = HEAP32[$new_ch>>2]|0;
   $53 = HEAP8[$52>>0]|0;
   $54 = ($53<<24>>24)==(34);
   do {
    if ($54) {
     if ($25) {
      if ($$old2) {
       $label$0$ph$lcssa = $label$0$ph;
       label = 21;
       break L8;
      } else {
       break;
      }
     }
     $55 = ((($52)) + 1|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = ($56<<24>>24)==(34);
     if ($57) {
      $58 = ((($52)) + 2|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = ($59<<24>>24)==(34);
      $or$cond3 = $27 & $60;
      if ($or$cond3) {
       $label$0$ph$lcssa = $label$0$ph;
       label = 21;
       break L8;
      }
     }
    }
   } while(0);
   $63 = HEAP32[$new_ch>>2]|0;
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(94);
   if ($65) {
    $66 = ((($63)) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ($67<<24>>24)!=(40);
    $or$cond6 = $29 | $68;
    if (!($or$cond6)) {
     if (!($31)) {
      $label$0$ph18 = $label$0$ph;
      break L8;
     }
     $69 = HEAP32[$label_pos>>2]|0;
     $70 = (($label$0$ph) + ($69)|0);
     HEAP8[$70>>0] = 94;
     $71 = (($69) + 1)|0;
     $72 = (($label$0$ph) + ($71)|0);
     HEAP8[$72>>0] = 40;
     $73 = (($69) + 2)|0;
     HEAP32[$label_pos>>2] = $73;
     $74 = HEAP32[$new_ch>>2]|0;
     $75 = ((($74)) + 2|0);
     HEAP32[$new_ch>>2] = $75;
     _scan_interpolation($lexer,$new_ch,$label_pos);
     continue;
    }
   }
   $76 = HEAP32[$new_ch>>2]|0;
   $77 = HEAP8[$76>>0]|0;
   $78 = ($77<<24>>24)==(0);
   if ($78) {
    $label$0$ph18 = $label$0$ph;
    break L8;
   }
   $79 = HEAP32[$label_pos>>2]|0;
   $80 = (($label$0$ph) + ($79)|0);
   HEAP8[$80>>0] = $77;
   $81 = (($79) + 1)|0;
   HEAP32[$label_pos>>2] = $81;
   $82 = HEAP32[$new_ch>>2]|0;
   $83 = ((($82)) + 1|0);
   HEAP32[$new_ch>>2] = $83;
  }
  if ($34) {
   label = 12;
   break;
  }
  $41 = (_read_line($lexer)|0);
  $42 = ($41|0)==(0);
  if ($42) {
   label = 14;
   break;
  }
  $44 = HEAP32[$label_pos>>2]|0;
  $45 = (($41) + 3)|0;
  $46 = (($45) + ($44))|0;
  _ensure_label_size($lexer,$46);
  $47 = HEAP32[$1>>2]|0;
  $48 = HEAP32[$37>>2]|0;
  HEAP32[$new_ch>>2] = $48;
  $49 = HEAP32[$label_pos>>2]|0;
  $50 = (($47) + ($49)|0);
  HEAP8[$50>>0] = 10;
  $51 = (($49) + 1)|0;
  HEAP32[$label_pos>>2] = $51;
  $label$0$ph = $47;
 }
 if ((label|0) == 12) {
  $40 = HEAP32[$35>>2]|0;
  _lily_raise($40,1,9820,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $43 = HEAP32[$36>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $multiline_start$0;
  _lily_raise($43,1,9886,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $61 = HEAP32[$new_ch>>2]|0;
  $62 = ((($61)) + 1|0);
  HEAP32[$new_ch>>2] = $62;
  $label$0$ph18 = $label$0$ph$lcssa;
 }
 $84 = ($is_multiline$0|0)!=(0);
 if ($84) {
  $85 = HEAP32[$new_ch>>2]|0;
  $86 = ((($85)) + 2|0);
  HEAP32[$new_ch>>2] = $86;
 }
 if ($14) {
  $87 = $84 ? 3 : 1;
  $88 = HEAP32[$1>>2]|0;
  $89 = HEAP32[$label_pos>>2]|0;
  $90 = (($88) + ($89)|0);
  (_strncpy($90,9791,$87)|0);
  $91 = (($89) + ($87))|0;
  HEAP32[$label_pos>>2] = $91;
 }
 $92 = $flags & 1;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[$label_pos>>2]|0;
  $95 = (($label$0$ph18) + ($94)|0);
  HEAP8[$95>>0] = 0;
 }
 $96 = $flags & 16;
 $97 = ($96|0)==(0);
 if (!($97)) {
  $105 = HEAP32[$new_ch>>2]|0;
  HEAP32[$source_ch>>2] = $105;
  $106 = HEAP32[$label_pos>>2]|0;
  HEAP32[$start>>2] = $106;
  STACKTOP = sp;return;
 }
 $98 = ((($lexer)) + 52|0);
 $99 = HEAP32[$98>>2]|0;
 if ($93) {
  $100 = (_lily_get_string_literal($99,$label$0$ph18)|0);
  $101 = ((($lexer)) + 48|0);
  HEAP32[$101>>2] = $100;
  $105 = HEAP32[$new_ch>>2]|0;
  HEAP32[$source_ch>>2] = $105;
  $106 = HEAP32[$label_pos>>2]|0;
  HEAP32[$start>>2] = $106;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$label_pos>>2]|0;
  $103 = (_lily_get_bytestring_literal($99,$label$0$ph18,$102)|0);
  $104 = ((($lexer)) + 48|0);
  HEAP32[$104>>2] = $103;
  $105 = HEAP32[$new_ch>>2]|0;
  HEAP32[$source_ch>>2] = $105;
  $106 = HEAP32[$label_pos>>2]|0;
  HEAP32[$start>>2] = $106;
  STACKTOP = sp;return;
 }
}
function _collect_escape($lexer,$source_ch,$start,$flags) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 $start = $start|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adjust_ch = 0, $label_pos$0 = 0, $new_ch$0 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $adjust_ch = sp + 4|0;
 $0 = ((($lexer)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$source_ch>>2]|0;
 $3 = HEAP32[$start>>2]|0;
 $4 = $flags & 4;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   HEAP32[$adjust_ch>>2] = 2;
   $6 = (_scan_escape($lexer,$2,$adjust_ch)|0);
   $7 = $flags & 1;
   $8 = ($7|0)==(0);
   $9 = ($6<<24>>24)<(1);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($lexer)) + 56|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_raise($11,1,9795,$vararg_buffer);
    // unreachable;
   } else {
    $12 = (($1) + ($3)|0);
    HEAP8[$12>>0] = $6;
    $13 = (($3) + 1)|0;
    $14 = HEAP32[$adjust_ch>>2]|0;
    $15 = (($2) + ($14)|0);
    $label_pos$0 = $13;$new_ch$0 = $15;
    break;
   }
  } else {
   $16 = HEAP8[$2>>0]|0;
   $17 = (($1) + ($3)|0);
   HEAP8[$17>>0] = $16;
   $18 = (($3) + 1)|0;
   $19 = ((($2)) + 1|0);
   $20 = HEAP8[$19>>0]|0;
   switch ($20<<24>>24) {
   case 34: case 92:  {
    break;
   }
   default: {
    $label_pos$0 = $18;$new_ch$0 = $19;
    break L1;
   }
   }
   $21 = HEAP8[$19>>0]|0;
   $22 = (($1) + ($18)|0);
   HEAP8[$22>>0] = $21;
   $23 = (($3) + 2)|0;
   $24 = ((($2)) + 2|0);
   $label_pos$0 = $23;$new_ch$0 = $24;
  }
 } while(0);
 HEAP32[$source_ch>>2] = $new_ch$0;
 HEAP32[$start>>2] = $label_pos$0;
 STACKTOP = sp;return;
}
function _scan_escape($lexer,$ch,$adjust) {
 $lexer = $lexer|0;
 $ch = $ch|0;
 $adjust = $adjust|0;
 var $$ = 0, $$8 = 0, $$off = 0, $$off2 = 0, $$off2$1 = 0, $$off2$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $ret$0 = 0, $total$0$lcssa = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ch)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 110:  {
  $ret$0 = 10;
  break;
 }
 case 114:  {
  $ret$0 = 13;
  break;
 }
 case 116:  {
  $ret$0 = 9;
  break;
 }
 case 39:  {
  $ret$0 = $1;
  break;
 }
 case 34:  {
  $ret$0 = $1;
  break;
 }
 case 92:  {
  $ret$0 = $1;
  break;
 }
 case 98:  {
  $ret$0 = 8;
  break;
 }
 case 97:  {
  $ret$0 = 7;
  break;
 }
 default: {
  $$off = (($1) + -48)<<24>>24;
  $2 = ($$off&255)<(10);
  if (!($2)) {
   $14 = ((($lexer)) + 56|0);
   $15 = HEAP32[$14>>2]|0;
   _lily_raise($15,1,9795,$vararg_buffer);
   // unreachable;
  }
  $3 = HEAP8[$0>>0]|0;
  $$off2 = (($3) + -48)<<24>>24;
  $4 = ($$off2&255)>(9);
  if ($4) {
   $i$0$lcssa = -1;$total$0$lcssa = 0;
  } else {
   $5 = $3 << 24 >> 24;
   $6 = (($5) + -48)|0;
   $7 = ($6|0)>(255);
   if ($7) {
    $i$0$lcssa = -1;$total$0$lcssa = 0;
   } else {
    $8 = ((($ch)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $$off2$1 = (($9) + -48)<<24>>24;
    $10 = ($$off2$1&255)>(9);
    if ($10) {
     $i$0$lcssa = 0;$total$0$lcssa = $6;
    } else {
     $16 = $9 << 24 >> 24;
     $17 = ($6*10)|0;
     $18 = (($17) + -48)|0;
     $19 = (($18) + ($16))|0;
     $20 = ($19|0)>(255);
     if ($20) {
      $i$0$lcssa = 0;$total$0$lcssa = $6;
     } else {
      $21 = ((($ch)) + 3|0);
      $22 = HEAP8[$21>>0]|0;
      $$off2$2 = (($22) + -48)<<24>>24;
      $23 = ($$off2$2&255)>(9);
      if ($23) {
       $i$0$lcssa = 1;$total$0$lcssa = $19;
      } else {
       $24 = $22 << 24 >> 24;
       $25 = ($19*10)|0;
       $26 = (($25) + -48)|0;
       $27 = (($26) + ($24))|0;
       $28 = ($27|0)>(255);
       $$ = $28 ? $19 : $27;
       $$8 = $28 ? 1 : 2;
       $i$0$lcssa = $$8;$total$0$lcssa = $$;
      }
     }
    }
   }
  }
  $11 = HEAP32[$adjust>>2]|0;
  $12 = (($i$0$lcssa) + ($11))|0;
  HEAP32[$adjust>>2] = $12;
  $13 = $total$0$lcssa&255;
  $ret$0 = $13;
 }
 }
 STACKTOP = sp;return ($ret$0|0);
}
function _read_line($lex) {
 $lex = $lex|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lex>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65535;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_read_file_line($0)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = (_read_str_line($0)|0);
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _read_file_line($entry) {
 $entry = $entry|0;
 var $$lcssa = 0, $$lcssa36 = 0, $$utf8_check$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufsize$0 = 0, $bufsize$1 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$0$lcssa33 = 0, $i$1 = 0, $input_buffer$0 = 0, $input_buffer$1 = 0, $input_buffer$1$lcssa = 0, $input_buffer$1$lcssa37 = 0, $input_buffer$138 = 0, $utf8_check$0 = 0, $utf8_check$0$lcssa = 0, $utf8_check$0$lcssa34 = 0;
 var $utf8_check$035 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$entry>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($entry)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $bufsize$0 = $5;$i$0 = 0;$input_buffer$0 = $2;$utf8_check$0 = 0;
 L1: while(1) {
  $8 = (_fgetc($7)|0);
  $9 = (($i$0) + 2)|0;
  $10 = ($9|0)==($bufsize$0|0);
  if ($10) {
   _lily_grow_lexer_buffers($0);
   $11 = HEAP32[$1>>2]|0;
   $12 = HEAP16[$3>>1]|0;
   $13 = $12&65535;
   $bufsize$1 = $13;$input_buffer$1 = $11;
  } else {
   $bufsize$1 = $bufsize$0;$input_buffer$1 = $input_buffer$0;
  }
  $14 = ($8|0)==(-1);
  if ($14) {
   $i$0$lcssa = $i$0;$input_buffer$1$lcssa = $input_buffer$1;$utf8_check$0$lcssa = $utf8_check$0;
   label = 5;
   break;
  }
  $23 = $8&255;
  $24 = (($input_buffer$1) + ($i$0)|0);
  HEAP8[$24>>0] = $23;
  switch ($8|0) {
  case 10: case 13:  {
   $$lcssa = $24;$$lcssa36 = $8;$i$0$lcssa33 = $i$0;$input_buffer$1$lcssa37 = $input_buffer$1;$utf8_check$0$lcssa34 = $utf8_check$0;
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $33 = $8 & 128;
  $34 = ($33>>>0)>(127);
  $$utf8_check$0 = $34 ? 1 : $utf8_check$0;
  $35 = (($i$0) + 1)|0;
  $bufsize$0 = $bufsize$1;$i$0 = $35;$input_buffer$0 = $input_buffer$1;$utf8_check$0 = $$utf8_check$0;
 }
 if ((label|0) == 5) {
  $15 = (($input_buffer$1$lcssa) + ($i$0$lcssa)|0);
  HEAP8[$15>>0] = 10;
  $16 = (($i$0$lcssa) + 1)|0;
  $17 = (($input_buffer$1$lcssa) + ($16)|0);
  HEAP8[$17>>0] = 0;
  $18 = ($i$0$lcssa|0)!=(0);
  $19 = $18&1;
  $20 = ((($0)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($19))|0;
  HEAP32[$20>>2] = $22;
  $i$1 = $i$0$lcssa;$input_buffer$138 = $input_buffer$1$lcssa;$utf8_check$035 = $utf8_check$0$lcssa;
 }
 else if ((label|0) == 7) {
  $25 = ($$lcssa36|0)==(13);
  $26 = ((($0)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  if ($25) {
   HEAP8[$$lcssa>>0] = 10;
   $29 = (_fgetc($7)|0);
   $30 = ($29|0)==(10);
   if (!($30)) {
    (_ungetc($29,$7)|0);
   }
  }
  $31 = (($i$0$lcssa33) + 1)|0;
  $32 = (($input_buffer$1$lcssa37) + ($31)|0);
  HEAP8[$32>>0] = 0;
  $i$1 = $31;$input_buffer$138 = $input_buffer$1$lcssa37;$utf8_check$035 = $utf8_check$0$lcssa34;
 }
 $36 = ($utf8_check$035|0)==(0);
 if ($36) {
  STACKTOP = sp;return ($i$1|0);
 }
 $37 = (_lily_is_valid_utf8($input_buffer$138)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = ((($0)) + 56|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($0)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer>>2] = $42;
  _lily_raise($40,0,9851,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($i$1|0);
 }
 return (0)|0;
}
function _lily_grow_lexer_buffers($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lexer)) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 1;
 $4 = ((($lexer)) + 26|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==($1<<16>>16);
 if ($6) {
  $7 = ((($lexer)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_realloc($8,$3)|0);
  HEAP32[$7>>2] = $9;
  $10 = $3&65535;
  HEAP16[$4>>1] = $10;
 }
 $11 = ((($lexer)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_realloc($12,$3)|0);
 HEAP32[$11>>2] = $13;
 $14 = $3&65535;
 HEAP16[$0>>1] = $14;
 return;
}
function _read_str_line($entry) {
 $entry = $entry|0;
 var $$ = 0, $$lcssa = 0, $$lcssa42 = 0, $$utf8_check$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufsize$0 = 0, $bufsize$1 = 0, $ch$0 = 0, $ch$0$lcssa = 0, $ch$0$lcssa39 = 0, $ch$1 = 0, $ch$2 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$0$lcssa36 = 0;
 var $i$1 = 0, $input_buffer$0 = 0, $input_buffer$1 = 0, $input_buffer$1$lcssa = 0, $input_buffer$1$lcssa40 = 0, $input_buffer$141 = 0, $utf8_check$0 = 0, $utf8_check$0$lcssa = 0, $utf8_check$0$lcssa37 = 0, $utf8_check$038 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$entry>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($entry)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $bufsize$0 = $5;$ch$0 = $7;$i$0 = 0;$input_buffer$0 = $2;$utf8_check$0 = 0;
 L1: while(1) {
  $8 = (($i$0) + 2)|0;
  $9 = ($8|0)==($bufsize$0|0);
  if ($9) {
   _lily_grow_lexer_buffers($0);
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP16[$3>>1]|0;
   $12 = $11&65535;
   $bufsize$1 = $12;$input_buffer$1 = $10;
  } else {
   $bufsize$1 = $bufsize$0;$input_buffer$1 = $input_buffer$0;
  }
  $13 = HEAP8[$ch$0>>0]|0;
  $14 = ($13<<24>>24)==(0);
  $15 = (($input_buffer$1) + ($i$0)|0);
  if ($14) {
   $$lcssa = $15;$ch$0$lcssa = $ch$0;$i$0$lcssa = $i$0;$input_buffer$1$lcssa = $input_buffer$1;$utf8_check$0$lcssa = $utf8_check$0;
   label = 5;
   break;
  }
  HEAP8[$15>>0] = $13;
  $23 = HEAP8[$ch$0>>0]|0;
  switch ($23<<24>>24) {
  case 10: case 13:  {
   $$lcssa42 = $15;$ch$0$lcssa39 = $ch$0;$i$0$lcssa36 = $i$0;$input_buffer$1$lcssa40 = $input_buffer$1;$utf8_check$0$lcssa37 = $utf8_check$0;
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $36 = ($23<<24>>24)<(0);
  $$utf8_check$0 = $36 ? 1 : $utf8_check$0;
  $37 = (($i$0) + 1)|0;
  $38 = ((($ch$0)) + 1|0);
  $bufsize$0 = $bufsize$1;$ch$0 = $38;$i$0 = $37;$input_buffer$0 = $input_buffer$1;$utf8_check$0 = $$utf8_check$0;
 }
 if ((label|0) == 5) {
  HEAP8[$$lcssa>>0] = 10;
  $16 = (($i$0$lcssa) + 1)|0;
  $17 = (($input_buffer$1$lcssa) + ($16)|0);
  HEAP8[$17>>0] = 0;
  $18 = ($i$0$lcssa|0)!=(0);
  $19 = $18&1;
  $20 = ((($0)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($19))|0;
  HEAP32[$20>>2] = $22;
  $ch$2 = $ch$0$lcssa;$i$1 = $i$0$lcssa;$input_buffer$141 = $input_buffer$1$lcssa;$utf8_check$038 = $utf8_check$0$lcssa;
 }
 else if ((label|0) == 7) {
  $24 = ((($0)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = HEAP8[$ch$0$lcssa39>>0]|0;
  $28 = ($27<<24>>24)==(13);
  if ($28) {
   HEAP8[$$lcssa42>>0] = 10;
   $29 = ((($ch$0$lcssa39)) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(10);
   $32 = ((($ch$0$lcssa39)) + 2|0);
   $$ = $31 ? $32 : $29;
   $ch$1 = $$;
  } else {
   $33 = ((($ch$0$lcssa39)) + 1|0);
   $ch$1 = $33;
  }
  $34 = (($i$0$lcssa36) + 1)|0;
  $35 = (($input_buffer$1$lcssa40) + ($34)|0);
  HEAP8[$35>>0] = 0;
  $ch$2 = $ch$1;$i$1 = $34;$input_buffer$141 = $input_buffer$1$lcssa40;$utf8_check$038 = $utf8_check$0$lcssa37;
 }
 HEAP32[$6>>2] = $ch$2;
 $39 = ($utf8_check$038|0)==(0);
 if ($39) {
  STACKTOP = sp;return ($i$1|0);
 }
 $40 = (_lily_is_valid_utf8($input_buffer$141)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = ((($0)) + 56|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($0)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer>>2] = $45;
  _lily_raise($43,0,9851,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($i$1|0);
 }
 return (0)|0;
}
function _ensure_label_size($lexer,$at_least) {
 $lexer = $lexer|0;
 $at_least = $at_least|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $new_size$0 = 0, $new_size$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lexer)) + 26|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $new_size$0 = $2;
 while(1) {
  $3 = ($new_size$0|0)<($at_least|0);
  $4 = $new_size$0 << 1;
  if ($3) {
   $new_size$0 = $4;
  } else {
   $new_size$0$lcssa = $new_size$0;
   break;
  }
 }
 $5 = ((($lexer)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_realloc($6,$new_size$0$lcssa)|0);
 HEAP32[$5>>2] = $7;
 $8 = $new_size$0$lcssa&65535;
 HEAP16[$0>>1] = $8;
 return;
}
function _lily_lexer_digit_rescan($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lexer)) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($2) + 1)|0;
 $4 = $3&65535;
 $5 = ((($lexer)) + 30|0);
 HEAP16[$5>>1] = $4;
 _lily_lexer($lexer);
 return;
}
function _lily_lexer($lexer) {
 $lexer = $lexer|0;
 var $$5 = 0, $$lcssa = 0, $$lcssa157 = 0, $$lcssa159 = 0, $$lcssa160 = 0, $$lcssa168 = 0, $$lcssa169 = 0, $$lcssa171 = 0, $$lcssa175 = 0, $$lcssa176 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ch = 0, $input_pos = 0, $or$cond3 = 0, $storemerge = 0, $storemerge$lcssa = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $word_pos$0 = 0, $word_pos2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $input_pos = sp + 36|0;
 $token = sp + 32|0;
 $ch = sp + 28|0;
 $0 = ((($lexer)) + 30|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 HEAP32[$input_pos>>2] = $2;
 $3 = ((($lexer)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($lexer)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$input_pos>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + ($6)|0);
  $storemerge = $8;
  L3: while(1) {
   HEAP32[$ch>>2] = $storemerge;
   $9 = HEAP8[$storemerge>>0]|0;
   switch ($9<<24>>24) {
   case 9: case 32:  {
    break;
   }
   default: {
    $storemerge$lcssa = $storemerge;
    break L3;
   }
   }
   $10 = ((($storemerge)) + 1|0);
   $storemerge = $10;
  }
  $11 = $storemerge$lcssa;
  $12 = $8;
  $13 = (($11) - ($12))|0;
  $14 = HEAP32[$input_pos>>2]|0;
  $15 = (($14) + ($13))|0;
  HEAP32[$input_pos>>2] = $15;
  $16 = HEAP32[$ch>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($4) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==(15);
  if ($21) {
   label = 6;
   break;
  }
  $38 = ($20<<24>>24)<(7);
  if ($38) {
   $$lcssa159 = $15;$$lcssa175 = $20;
   label = 10;
   break;
  }
  L9: do {
   switch ($20<<24>>24) {
   case 29:  {
    $$lcssa169 = $16;
    label = 21;
    break L1;
    break;
   }
   case 16:  {
    label = 24;
    break L1;
    break;
   }
   case 28:  {
    $$lcssa171 = $16;
    label = 25;
    break L1;
    break;
   }
   case 21:  {
    $41 = (_read_line($lexer)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     label = 14;
     break L1;
    }
    HEAP32[$input_pos>>2] = 0;
    break;
   }
   case 22:  {
    $43 = ($17<<24>>24)==(35);
    if ($43) {
     $44 = ((($16)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ($45<<24>>24)==(91);
     if ($46) {
      _scan_multiline_comment($lexer,$ch);
      $47 = HEAP32[$ch>>2]|0;
      $48 = HEAP32[$5>>2]|0;
      $49 = (($47) - ($48))|0;
      HEAP32[$input_pos>>2] = $49;
      break L9;
     }
    }
    $50 = (_read_line($lexer)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     label = 20;
     break L1;
    }
    HEAP32[$input_pos>>2] = 0;
    break;
   }
   default: {
    $$lcssa160 = $15;$$lcssa168 = $16;$$lcssa176 = $20;
    label = 27;
    break L1;
   }
   }
  } while(0);
 }
 L19: do {
  if ((label|0) == 10) {
   $39 = $$lcssa175 << 24 >> 24;
   $40 = (($$lcssa159) + 1)|0;
   HEAP32[$input_pos>>2] = $40;
   HEAP32[$token>>2] = $39;
  }
  else if ((label|0) == 14) {
   HEAP32[$token>>2] = 53;
   HEAP32[$input_pos>>2] = 0;
  }
  else if ((label|0) == 20) {
   HEAP32[$token>>2] = 53;
   HEAP32[$input_pos>>2] = 0;
  }
  else if ((label|0) == 21) {
   $52 = ((($$lcssa169)) + 1|0);
   HEAP32[$ch>>2] = $52;
   $53 = HEAP8[$52>>0]|0;
   $54 = ($53<<24>>24)==(34);
   if ($54) {
    _scan_quoted($lexer,$ch,22);
    $57 = HEAP32[$ch>>2]|0;
    $58 = HEAP32[$5>>2]|0;
    $59 = (($57) - ($58))|0;
    HEAP32[$input_pos>>2] = $59;
    HEAP32[$token>>2] = 39;
    break;
   } else {
    $55 = ((($lexer)) + 56|0);
    $56 = HEAP32[$55>>2]|0;
    _lily_raise($56,1,10063,$vararg_buffer);
    // unreachable;
   }
  }
  else if ((label|0) == 24) {
   _scan_quoted($lexer,$ch,0);
   $60 = HEAP32[$ch>>2]|0;
   $61 = HEAP32[$5>>2]|0;
   $62 = (($60) - ($61))|0;
   HEAP32[$input_pos>>2] = $62;
   HEAP32[$token>>2] = 37;
  }
  else if ((label|0) == 25) {
   $63 = ((($$lcssa171)) + 1|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(34);
   if ($65) {
    HEAP32[$ch>>2] = $63;
    $66 = HEAP32[$input_pos>>2]|0;
    $67 = (($66) + 1)|0;
    HEAP32[$input_pos>>2] = $67;
    _scan_quoted($lexer,$ch,1);
    $68 = HEAP32[$ch>>2]|0;
    $69 = HEAP32[$5>>2]|0;
    $70 = (($68) - ($69))|0;
    HEAP32[$input_pos>>2] = $70;
    HEAP32[$token>>2] = 38;
   } else {
    label = 6;
   }
  }
  else if ((label|0) == 27) {
   $71 = $$lcssa176 << 24 >> 24;
   $72 = ($$lcssa176<<24>>24)<(11);
   if ($72) {
    $73 = (($$lcssa160) + 1)|0;
    HEAP32[$input_pos>>2] = $73;
    $74 = HEAP32[$5>>2]|0;
    $75 = (($74) + ($73)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($76<<24>>24)==(61);
    if ($77) {
     $78 = (($$lcssa160) + 2)|0;
     HEAP32[$input_pos>>2] = $78;
     $79 = (($71) + -7)|0;
     $80 = (1516 + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$token>>2] = $81;
     break;
    } else {
     $82 = (($71) + -7)|0;
     $83 = (1532 + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     HEAP32[$token>>2] = $84;
     break;
    }
   }
   switch ($$lcssa176<<24>>24) {
   case 17:  {
    _scan_number($lexer,$input_pos,$token,$$lcssa168);
    break L19;
    break;
   }
   case 23:  {
    $85 = ((($$lcssa168)) + 1|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = (($4) + ($87)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = ($89<<24>>24)==(17);
    if ($90) {
     _scan_number($lexer,$input_pos,$token,$$lcssa168);
     break L19;
    }
    HEAP32[$ch>>2] = $85;
    $91 = HEAP32[$input_pos>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$input_pos>>2] = $92;
    HEAP32[$token>>2] = 43;
    $93 = HEAP8[$85>>0]|0;
    $94 = ($93<<24>>24)==(46);
    if (!($94)) {
     break L19;
    }
    $95 = ((($$lcssa168)) + 2|0);
    HEAP32[$ch>>2] = $95;
    $96 = HEAP32[$input_pos>>2]|0;
    $97 = (($96) + 1)|0;
    HEAP32[$input_pos>>2] = $97;
    $98 = HEAP8[$95>>0]|0;
    $99 = ($98<<24>>24)==(46);
    if ($99) {
     $100 = (($96) + 2)|0;
     HEAP32[$input_pos>>2] = $100;
     HEAP32[$token>>2] = 49;
     break L19;
    } else {
     $101 = ((($lexer)) + 56|0);
     $102 = HEAP32[$101>>2]|0;
     _lily_raise($102,1,10295,$vararg_buffer1);
     // unreachable;
    }
    break;
   }
   case 13:  {
    $103 = ((($$lcssa168)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($4) + ($105)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(17);
    if ($108) {
     _scan_number($lexer,$input_pos,$token,$$lcssa168);
     break L19;
    }
    $109 = ($104<<24>>24)==(61);
    if ($109) {
     $110 = ((($$lcssa168)) + 2|0);
     HEAP32[$ch>>2] = $110;
     $111 = HEAP32[$input_pos>>2]|0;
     $112 = (($111) + 2)|0;
     HEAP32[$input_pos>>2] = $112;
     HEAP32[$token>>2] = 16;
     break L19;
    } else {
     HEAP32[$ch>>2] = $103;
     $113 = HEAP32[$input_pos>>2]|0;
     $114 = (($113) + 1)|0;
     HEAP32[$input_pos>>2] = $114;
     HEAP32[$token>>2] = 15;
     break L19;
    }
    break;
   }
   case 14:  {
    $115 = ((($$lcssa168)) + 1|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = (($4) + ($117)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(17);
    if ($120) {
     _scan_number($lexer,$input_pos,$token,$$lcssa168);
     break L19;
    }
    $121 = ($116<<24>>24)==(61);
    if ($121) {
     $122 = ((($$lcssa168)) + 2|0);
     HEAP32[$ch>>2] = $122;
     $123 = HEAP32[$input_pos>>2]|0;
     $124 = (($123) + 2)|0;
     HEAP32[$input_pos>>2] = $124;
     HEAP32[$token>>2] = 18;
     break L19;
    } else {
     HEAP32[$ch>>2] = $115;
     $125 = HEAP32[$input_pos>>2]|0;
     $126 = (($125) + 1)|0;
     HEAP32[$input_pos>>2] = $126;
     HEAP32[$token>>2] = 17;
     break L19;
    }
    break;
   }
   case 18:  {
    $127 = (($$lcssa160) + 1)|0;
    HEAP32[$input_pos>>2] = $127;
    $128 = HEAP32[$ch>>2]|0;
    $129 = ((($128)) + 1|0);
    HEAP32[$ch>>2] = $129;
    $130 = HEAP8[$129>>0]|0;
    $131 = ($130<<24>>24)==(124);
    if ($131) {
     _scan_lambda($lexer,$ch);
     $132 = HEAP32[$ch>>2]|0;
     $133 = HEAP32[$5>>2]|0;
     $134 = (($132) - ($133))|0;
     HEAP32[$input_pos>>2] = $134;
     HEAP32[$token>>2] = 30;
     break L19;
    } else {
     HEAP32[$token>>2] = 29;
     break L19;
    }
    break;
   }
   case 25:  {
    $135 = (($$lcssa160) + 1)|0;
    HEAP32[$input_pos>>2] = $135;
    $136 = HEAP32[$ch>>2]|0;
    $137 = ((($136)) + 1|0);
    HEAP32[$ch>>2] = $137;
    $138 = HEAP8[$137>>0]|0;
    $139 = ($138<<24>>24)==(38);
    if ($139) {
     $140 = HEAP32[$input_pos>>2]|0;
     $141 = (($140) + 1)|0;
     HEAP32[$input_pos>>2] = $141;
     $142 = HEAP32[$ch>>2]|0;
     $143 = ((($142)) + 1|0);
     HEAP32[$ch>>2] = $143;
     HEAP32[$token>>2] = 45;
     break L19;
    } else {
     HEAP32[$token>>2] = 44;
     break L19;
    }
    break;
   }
   case 26:  {
    $144 = (($$lcssa160) + 1)|0;
    HEAP32[$input_pos>>2] = $144;
    $145 = HEAP32[$ch>>2]|0;
    $146 = ((($145)) + 1|0);
    HEAP32[$ch>>2] = $146;
    $147 = HEAP8[$146>>0]|0;
    switch ($147<<24>>24) {
    case 124:  {
     $148 = HEAP32[$input_pos>>2]|0;
     $149 = (($148) + 1)|0;
     HEAP32[$input_pos>>2] = $149;
     $150 = HEAP32[$ch>>2]|0;
     $151 = ((($150)) + 1|0);
     HEAP32[$ch>>2] = $151;
     HEAP32[$token>>2] = 47;
     break L19;
     break;
    }
    case 62:  {
     $152 = HEAP32[$input_pos>>2]|0;
     $153 = (($152) + 1)|0;
     HEAP32[$input_pos>>2] = $153;
     $154 = HEAP32[$ch>>2]|0;
     $155 = ((($154)) + 1|0);
     HEAP32[$ch>>2] = $155;
     HEAP32[$token>>2] = 50;
     break L19;
     break;
    }
    default: {
     HEAP32[$token>>2] = 46;
     break L19;
    }
    }
    break;
   }
   default: {
    $$off = (($$lcssa176) + -11)<<24>>24;
    $156 = ($$off&255)<(2);
    if ($156) {
     $157 = ($$lcssa176<<24>>24)==(11);
     $158 = (($$lcssa160) + 1)|0;
     HEAP32[$input_pos>>2] = $158;
     $$5 = $157 ? 23 : 19;
     HEAP32[$token>>2] = $$5;
     $159 = HEAP32[$ch>>2]|0;
     $160 = ((($159)) + 1|0);
     HEAP32[$ch>>2] = $160;
     $161 = HEAP8[$160>>0]|0;
     $162 = ($161<<24>>24)==(61);
     if ($162) {
      $163 = HEAP32[$token>>2]|0;
      $164 = (($163) + 1)|0;
      HEAP32[$token>>2] = $164;
      $165 = HEAP32[$input_pos>>2]|0;
      $166 = (($165) + 1)|0;
      HEAP32[$input_pos>>2] = $166;
      break L19;
     }
     $167 = HEAP8[$159>>0]|0;
     $168 = ($161<<24>>24)==($167<<24>>24);
     if (!($168)) {
      $181 = ($161<<24>>24)==(91);
      $182 = HEAP32[$token>>2]|0;
      $183 = ($182|0)==(19);
      $or$cond3 = $181 & $183;
      if (!($or$cond3)) {
       break L19;
      }
      $184 = HEAP32[$input_pos>>2]|0;
      $185 = (($184) + 1)|0;
      HEAP32[$input_pos>>2] = $185;
      HEAP32[$token>>2] = 31;
      break L19;
     }
     $169 = HEAP32[$input_pos>>2]|0;
     $170 = (($169) + 1)|0;
     HEAP32[$input_pos>>2] = $170;
     $171 = HEAP32[$ch>>2]|0;
     $172 = ((($171)) + 1|0);
     HEAP32[$ch>>2] = $172;
     $173 = HEAP8[$172>>0]|0;
     $174 = ($173<<24>>24)==(61);
     if ($174) {
      $175 = HEAP32[$input_pos>>2]|0;
      $176 = (($175) + 1)|0;
      HEAP32[$input_pos>>2] = $176;
      $177 = HEAP32[$token>>2]|0;
      $178 = (($177) + 3)|0;
      HEAP32[$token>>2] = $178;
      break L19;
     } else {
      $179 = HEAP32[$token>>2]|0;
      $180 = (($179) + 2)|0;
      HEAP32[$token>>2] = $180;
      break L19;
     }
    }
    switch ($$lcssa176<<24>>24) {
    case 20:  {
     $186 = (($$lcssa160) + 1)|0;
     HEAP32[$input_pos>>2] = $186;
     $187 = HEAP32[$5>>2]|0;
     $188 = (($187) + ($186)|0);
     $189 = HEAP8[$188>>0]|0;
     switch ($189<<24>>24) {
     case 61:  {
      HEAP32[$token>>2] = 28;
      $190 = HEAP32[$input_pos>>2]|0;
      $191 = (($190) + 1)|0;
      HEAP32[$input_pos>>2] = $191;
      break L19;
      break;
     }
     case 62:  {
      HEAP32[$token>>2] = 34;
      $192 = HEAP32[$input_pos>>2]|0;
      $193 = (($192) + 1)|0;
      HEAP32[$input_pos>>2] = $193;
      break L19;
      break;
     }
     default: {
      HEAP32[$token>>2] = 27;
      break L19;
     }
     }
     break;
    }
    case 19:  {
     $194 = (($$lcssa160) + 1)|0;
     HEAP32[$input_pos>>2] = $194;
     $195 = HEAP32[$ch>>2]|0;
     $196 = ((($195)) + 1|0);
     HEAP32[$ch>>2] = $196;
     $197 = HEAP8[$196>>0]|0;
     $198 = ($197<<24>>24)==(62);
     if ($198) {
      $199 = HEAP32[$input_pos>>2]|0;
      $200 = (($199) + 1)|0;
      HEAP32[$input_pos>>2] = $200;
      HEAP32[$token>>2] = 32;
      break L19;
     } else {
      HEAP32[$token>>2] = 33;
      break L19;
     }
     break;
    }
    case 24:  {
     $201 = ((($$lcssa168)) + 1|0);
     HEAP32[$ch>>2] = $201;
     $202 = HEAP32[$input_pos>>2]|0;
     $203 = (($202) + 1)|0;
     HEAP32[$input_pos>>2] = $203;
     $204 = HEAP8[$201>>0]|0;
     $205 = ($204<<24>>24)==(40);
     if ($205) {
      $206 = (($202) + 2)|0;
      HEAP32[$input_pos>>2] = $206;
      HEAP32[$token>>2] = 48;
      break L19;
     }
     $207 = $204&255;
     $208 = (($4) + ($207)|0);
     $209 = HEAP8[$208>>0]|0;
     $210 = ($209<<24>>24)==(15);
     if (!($210)) {
      HEAP32[$token>>2] = 51;
      break L19;
     }
     $211 = ((($lexer)) + 12|0);
     $212 = HEAP32[$211>>2]|0;
     $word_pos2$0 = 0;
     while(1) {
      $213 = HEAP32[$ch>>2]|0;
      $214 = HEAP8[$213>>0]|0;
      $215 = (($212) + ($word_pos2$0)|0);
      HEAP8[$215>>0] = $214;
      $216 = (($word_pos2$0) + 1)|0;
      $217 = HEAP32[$ch>>2]|0;
      $218 = ((($217)) + 1|0);
      HEAP32[$ch>>2] = $218;
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = (9446 + ($220)|0);
      $222 = HEAP8[$221>>0]|0;
      $223 = ($222<<24>>24)==(0);
      if ($223) {
       $$lcssa157 = $216;
       break;
      } else {
       $word_pos2$0 = $216;
      }
     }
     $224 = HEAP32[$input_pos>>2]|0;
     $225 = (($224) + ($$lcssa157))|0;
     HEAP32[$input_pos>>2] = $225;
     $226 = (($212) + ($$lcssa157)|0);
     HEAP8[$226>>0] = 0;
     HEAP32[$token>>2] = 36;
     break L19;
     break;
    }
    case 27:  {
     $227 = ((($$lcssa168)) + 1|0);
     HEAP32[$ch>>2] = $227;
     $228 = HEAP32[$input_pos>>2]|0;
     $229 = (($228) + 1)|0;
     HEAP32[$input_pos>>2] = $229;
     $230 = HEAP8[$227>>0]|0;
     $231 = ($230<<24>>24)==(62);
     if (!($231)) {
      HEAP32[$token>>2] = 51;
      break L19;
     }
     $232 = ((($lexer)) + 44|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)==(1);
     if ($234) {
      $235 = ((($lexer)) + 56|0);
      $236 = HEAP32[$235>>2]|0;
      _lily_raise($236,1,10387,$vararg_buffer3);
      // unreachable;
     }
     $237 = HEAP32[$lexer>>2]|0;
     $238 = ((($237)) + 48|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = ($239|0)==(0|0);
     if ($240) {
      $243 = HEAP32[$input_pos>>2]|0;
      $244 = (($243) + 1)|0;
      HEAP32[$input_pos>>2] = $244;
      HEAP32[$token>>2] = 52;
      break L19;
     } else {
      $241 = ((($lexer)) + 56|0);
      $242 = HEAP32[$241>>2]|0;
      _lily_raise($242,1,10420,$vararg_buffer5);
      // unreachable;
     }
     break;
    }
    default: {
     HEAP32[$token>>2] = 51;
     break L19;
    }
    }
   }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $22 = ((($lexer)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $word_pos$0 = 0;
  while(1) {
   $24 = HEAP32[$ch>>2]|0;
   $25 = HEAP8[$24>>0]|0;
   $26 = (($23) + ($word_pos$0)|0);
   HEAP8[$26>>0] = $25;
   $27 = (($word_pos$0) + 1)|0;
   $28 = HEAP32[$ch>>2]|0;
   $29 = ((($28)) + 1|0);
   HEAP32[$ch>>2] = $29;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (9446 + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $$lcssa = $27;
    break;
   } else {
    $word_pos$0 = $27;
   }
  }
  $35 = HEAP32[$input_pos>>2]|0;
  $36 = (($35) + ($$lcssa))|0;
  HEAP32[$input_pos>>2] = $36;
  $37 = (($23) + ($$lcssa)|0);
  HEAP8[$37>>0] = 0;
  HEAP32[$token>>2] = 35;
 }
 $245 = HEAP32[$input_pos>>2]|0;
 $246 = $245&65535;
 HEAP16[$0>>1] = $246;
 $247 = HEAP32[$token>>2]|0;
 $248 = ((($lexer)) + 40|0);
 HEAP32[$248>>2] = $247;
 STACKTOP = sp;return;
}
function _scan_multiline_comment($lexer,$source_ch) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_ch$0 = 0, $new_ch$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($lexer)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$source_ch>>2]|0;
 $3 = ((($2)) + 2|0);
 $4 = ((($lexer)) + 56|0);
 $5 = ((($lexer)) + 8|0);
 $new_ch$0 = $3;
 while(1) {
  $6 = HEAP8[$new_ch$0>>0]|0;
  $7 = ($6<<24>>24)==(93);
  if ($7) {
   $8 = ((($new_ch$0)) + 1|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(35);
   if ($10) {
    $new_ch$0$lcssa = $new_ch$0;
    label = 4;
    break;
   }
   $$pr = HEAP8[$new_ch$0>>0]|0;
   $12 = $$pr;
  } else {
   $12 = $6;
  }
  $13 = ($12<<24>>24)==(10);
  if (!($13)) {
   $18 = ((($new_ch$0)) + 1|0);
   $new_ch$0 = $18;
   continue;
  }
  $14 = (_read_line($lexer)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   label = 9;
   break;
  }
  $16 = HEAP32[$5>>2]|0;
  $new_ch$0 = $16;
 }
 if ((label|0) == 4) {
  $11 = ((($new_ch$0$lcssa)) + 2|0);
  HEAP32[$source_ch>>2] = $11;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $17 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise($17,1,10009,$vararg_buffer);
  // unreachable;
 }
}
function _scan_quoted($lexer,$source_ch,$flags) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 $flags = $flags|0;
 var $dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 HEAP32[$dummy>>2] = 0;
 _scan_quoted_raw($lexer,$source_ch,$dummy,$flags);
 STACKTOP = sp;return;
}
function _scan_number($lexer,$pos,$tok,$new_ch) {
 $lexer = $lexer|0;
 $pos = $pos|0;
 $tok = $tok|0;
 $new_ch = $new_ch|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $is_integer = 0, $num_pos = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $num_pos = sp + 48|0;
 $is_integer = sp + 44|0;
 $0 = HEAP8[$new_ch>>0]|0;
 $1 = HEAP32[$pos>>2]|0;
 HEAP32[$num_pos>>2] = $1;
 HEAP32[$is_integer>>2] = 1;
 $2 = $1&65535;
 $3 = ((($lexer)) + 24|0);
 HEAP16[$3>>1] = $2;
 switch ($0<<24>>24) {
 case 43: case 45:  {
  $4 = HEAP32[$num_pos>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$num_pos>>2] = $5;
  $6 = ((($new_ch)) + 1|0);
  $$0 = $6;
  break;
 }
 default: {
  $$0 = $new_ch;
 }
 }
 $7 = HEAP8[$$0>>0]|0;
 $8 = ($7<<24>>24)==(48);
 L4: do {
  if ($8) {
   $9 = HEAP32[$num_pos>>2]|0;
   $10 = (($9) + 1)|0;
   HEAP32[$num_pos>>2] = $10;
   $11 = ((($$0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   switch ($12<<24>>24) {
   case 98:  {
    $13 = (_scan_binary($num_pos,$11)|0);
    $14 = tempRet0;
    $35 = $14;$37 = $13;
    break L4;
    break;
   }
   case 99:  {
    $15 = (_scan_octal($num_pos,$11)|0);
    $16 = tempRet0;
    $35 = $16;$37 = $15;
    break L4;
    break;
   }
   case 120:  {
    $17 = (_scan_hex($num_pos,$11)|0);
    $18 = tempRet0;
    $35 = $18;$37 = $17;
    break L4;
    break;
   }
   default: {
    $19 = (_scan_decimal($lexer,$num_pos,$is_integer,$11)|0);
    $20 = tempRet0;
    $35 = $20;$37 = $19;
    break L4;
   }
   }
  } else {
   $21 = (_scan_decimal($lexer,$num_pos,$is_integer,$$0)|0);
   $22 = tempRet0;
   $35 = $22;$37 = $21;
  }
 } while(0);
 $23 = HEAP32[$num_pos>>2]|0;
 $24 = ((($lexer)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(116);
 $29 = HEAP32[$is_integer>>2]|0;
 $30 = ($29|0)==(0);
 if ($28) {
  if ($30) {
   $31 = ((($lexer)) + 56|0);
   $32 = HEAP32[$31>>2]|0;
   _lily_raise($32,1,10152,$vararg_buffer);
   // unreachable;
  }
  switch ($0<<24>>24) {
  case 43: case 45:  {
   $33 = ((($lexer)) + 56|0);
   $34 = HEAP32[$33>>2]|0;
   _lily_raise($34,1,10183,$vararg_buffer1);
   // unreachable;
   break;
  }
  default: {
  }
  }
  $36 = ($35>>>0)>(0);
  $38 = ($37>>>0)>(255);
  $39 = ($35|0)==(0);
  $40 = $39 & $38;
  $41 = $36 | $40;
  if ($41) {
   $42 = ((($lexer)) + 56|0);
   $43 = HEAP32[$42>>2]|0;
   _lily_raise($43,1,10215,$vararg_buffer3);
   // unreachable;
  }
  $44 = ((($lexer)) + 32|0);
  $45 = $44;
  $46 = $45;
  HEAP32[$46>>2] = $37;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $35;
  HEAP32[$tok>>2] = 40;
  $49 = HEAP32[$num_pos>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$num_pos>>2] = $50;
  $92 = HEAP32[$num_pos>>2]|0;
  HEAP32[$pos>>2] = $92;
  STACKTOP = sp;return;
 }
 if ($30) {
  $75 = (($23) - ($1))|0;
  $76 = ((($lexer)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($25) + ($1)|0);
  (_strncpy($77,$78,$75)|0);
  $79 = HEAP32[$76>>2]|0;
  $80 = (($79) + ($75)|0);
  HEAP8[$80>>0] = 0;
  $81 = (___errno_location()|0);
  HEAP32[$81>>2] = 0;
  $82 = HEAP32[$76>>2]|0;
  $83 = (+_strtod($82,0));
  $84 = HEAP32[$81>>2]|0;
  $85 = ($84|0)==(34);
  if ($85) {
   $86 = ((($lexer)) + 56|0);
   $87 = HEAP32[$86>>2]|0;
   _lily_raise($87,1,10268,$vararg_buffer9);
   // unreachable;
  }
  $88 = ((($lexer)) + 52|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_lily_get_double_literal($89,$83)|0);
  $91 = ((($lexer)) + 48|0);
  HEAP32[$91>>2] = $90;
  HEAP32[$tok>>2] = 42;
  $92 = HEAP32[$num_pos>>2]|0;
  HEAP32[$pos>>2] = $92;
  STACKTOP = sp;return;
 }
 $51 = ($0<<24>>24)==(45);
 do {
  if ($51) {
   $59 = ($35>>>0)<(2147483648);
   $60 = ($37>>>0)<(1);
   $61 = ($35|0)==(-2147483648);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $64 = (_i64Subtract(0,0,($37|0),($35|0))|0);
    $65 = tempRet0;
    $71 = $64;$74 = $65;
    break;
   } else {
    $66 = ((($lexer)) + 56|0);
    $67 = HEAP32[$66>>2]|0;
    _lily_raise($67,1,10240,$vararg_buffer7);
    // unreachable;
   }
  } else {
   $52 = ($35|0)>(-1);
   $53 = ($37>>>0)>(4294967295);
   $54 = ($35|0)==(-1);
   $55 = $54 & $53;
   $56 = $52 | $55;
   if ($56) {
    $71 = $37;$74 = $35;
   } else {
    $57 = ((($lexer)) + 56|0);
    $58 = HEAP32[$57>>2]|0;
    _lily_raise($58,1,10240,$vararg_buffer5);
    // unreachable;
   }
  }
 } while(0);
 $68 = ((($lexer)) + 32|0);
 $69 = $68;
 $70 = $69;
 HEAP32[$70>>2] = $71;
 $72 = (($69) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = $74;
 HEAP32[$tok>>2] = 41;
 $92 = HEAP32[$num_pos>>2]|0;
 HEAP32[$pos>>2] = $92;
 STACKTOP = sp;return;
}
function _scan_binary($pos,$ch) {
 $pos = $pos|0;
 $ch = $ch|0;
 var $$0 = 0, $$0$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$pn = 0, $num_digits$03 = 0, $num_pos$0 = 0, $num_pos$0$in = 0, $num_pos$0$lcssa = 0, $num_pos$1$lcssa = 0, $num_pos$15 = 0, $or$cond = 0, $switch = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pos>>2]|0;
 $ch$pn = $ch;$num_pos$0$in = $0;
 while(1) {
  $num_pos$0 = (($num_pos$0$in) + 1)|0;
  $$0 = ((($ch$pn)) + 1|0);
  $1 = HEAP8[$$0>>0]|0;
  $2 = ($1<<24>>24)==(48);
  if ($2) {
   $ch$pn = $$0;$num_pos$0$in = $num_pos$0;
  } else {
   $$0$lcssa = $$0;$num_pos$0$lcssa = $num_pos$0;
   break;
  }
 }
 $3 = HEAP8[$$0$lcssa>>0]|0;
 $4 = $3 & -2;
 $switch1 = ($4<<24>>24)==(48);
 if ($switch1) {
  $$14 = $$0$lcssa;$11 = $3;$6 = 0;$7 = 0;$num_digits$03 = 0;$num_pos$15 = $num_pos$0$lcssa;
 } else {
  $23 = 0;$24 = 0;$num_pos$1$lcssa = $num_pos$0$lcssa;
  HEAP32[$pos>>2] = $num_pos$1$lcssa;
  tempRet0 = ($23);
  return ($24|0);
 }
 while(1) {
  $5 = (($num_digits$03) + 1)|0;
  $8 = (_bitshift64Shl(($6|0),($7|0),1)|0);
  $9 = tempRet0;
  $10 = $11 << 24 >> 24;
  $12 = ($10|0)<(0);
  $13 = $12 << 31 >> 31;
  $14 = (_i64Add(($8|0),($9|0),-48,-1)|0);
  $15 = tempRet0;
  $16 = (_i64Add(($14|0),($15|0),($10|0),($13|0))|0);
  $17 = tempRet0;
  $18 = ((($$14)) + 1|0);
  $19 = (($num_pos$15) + 1)|0;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20 & -2;
  $switch = ($21<<24>>24)!=(48);
  $22 = ($5|0)==(65);
  $or$cond = $22 | $switch;
  if ($or$cond) {
   $23 = $17;$24 = $16;$num_pos$1$lcssa = $19;
   break;
  } else {
   $$14 = $18;$11 = $20;$6 = $16;$7 = $17;$num_digits$03 = $5;$num_pos$15 = $19;
  }
 }
 HEAP32[$pos>>2] = $num_pos$1$lcssa;
 tempRet0 = ($23);
 return ($24|0);
}
function _scan_octal($pos,$ch) {
 $pos = $pos|0;
 $ch = $ch|0;
 var $$0 = 0, $$0$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$pn = 0, $num_digits$05 = 0, $num_pos$0 = 0, $num_pos$0$in = 0, $num_pos$0$lcssa = 0, $num_pos$1$lcssa = 0, $num_pos$17 = 0, $or$cond$not = 0, $or$cond$not3 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pos>>2]|0;
 $ch$pn = $ch;$num_pos$0$in = $0;
 while(1) {
  $num_pos$0 = (($num_pos$0$in) + 1)|0;
  $$0 = ((($ch$pn)) + 1|0);
  $1 = HEAP8[$$0>>0]|0;
  $2 = ($1<<24>>24)==(48);
  if ($2) {
   $ch$pn = $$0;$num_pos$0$in = $num_pos$0;
  } else {
   $$0$lcssa = $$0;$num_pos$0$lcssa = $num_pos$0;
   break;
  }
 }
 $3 = HEAP8[$$0$lcssa>>0]|0;
 $4 = $3 & -8;
 $or$cond$not3 = ($4<<24>>24)==(48);
 if ($or$cond$not3) {
  $$16 = $$0$lcssa;$11 = $3;$6 = 0;$7 = 0;$num_digits$05 = 0;$num_pos$17 = $num_pos$0$lcssa;
 } else {
  $23 = 0;$24 = 0;$num_pos$1$lcssa = $num_pos$0$lcssa;
  HEAP32[$pos>>2] = $num_pos$1$lcssa;
  tempRet0 = ($23);
  return ($24|0);
 }
 while(1) {
  $5 = (($num_digits$05) + 1)|0;
  $8 = (_bitshift64Shl(($6|0),($7|0),3)|0);
  $9 = tempRet0;
  $10 = $11 << 24 >> 24;
  $12 = ($10|0)<(0);
  $13 = $12 << 31 >> 31;
  $14 = (_i64Add(($8|0),($9|0),-48,-1)|0);
  $15 = tempRet0;
  $16 = (_i64Add(($14|0),($15|0),($10|0),($13|0))|0);
  $17 = tempRet0;
  $18 = (($num_pos$17) + 1)|0;
  $19 = ((($$16)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 & -8;
  $or$cond$not = ($21<<24>>24)!=(48);
  $22 = ($5|0)==(23);
  $or$cond2 = $22 | $or$cond$not;
  if ($or$cond2) {
   $23 = $17;$24 = $16;$num_pos$1$lcssa = $18;
   break;
  } else {
   $$16 = $19;$11 = $20;$6 = $16;$7 = $17;$num_digits$05 = $5;$num_pos$17 = $18;
  }
 }
 HEAP32[$pos>>2] = $num_pos$1$lcssa;
 tempRet0 = ($23);
 return ($24|0);
}
function _scan_hex($pos,$new_ch) {
 $pos = $pos|0;
 $new_ch = $new_ch|0;
 var $$01 = 0, $$18 = 0, $$off = 0, $$off4 = 0, $$off5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ch$pn = 0, $num_digits$07 = 0, $num_pos$0 = 0, $num_pos$0$in = 0, $num_pos$1$lcssa = 0, $num_pos$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pos>>2]|0;
 $new_ch$pn = $new_ch;$num_pos$0$in = $0;
 while(1) {
  $num_pos$0 = (($num_pos$0$in) + 1)|0;
  $$01 = ((($new_ch$pn)) + 1|0);
  $1 = HEAP8[$$01>>0]|0;
  $2 = ($1<<24>>24)==(48);
  if ($2) {
   $new_ch$pn = $$01;$num_pos$0$in = $num_pos$0;
  } else {
   $$18 = $$01;$7 = 0;$8 = 0;$num_digits$07 = 0;$num_pos$19 = $num_pos$0;
   break;
  }
 }
 while(1) {
  $3 = HEAP8[$$18>>0]|0;
  $$off = (($3) + -48)<<24>>24;
  $4 = ($$off&255)<(10);
  if ($4) {
   $15 = 48;$16 = 0;
  } else {
   $$off4 = (($3) + -97)<<24>>24;
   $5 = ($$off4&255)<(6);
   if ($5) {
    $15 = 87;$16 = 0;
   } else {
    $$off5 = (($3) + -65)<<24>>24;
    $6 = ($$off5&255)<(6);
    if ($6) {
     $15 = 55;$16 = 0;
    } else {
     $25 = $8;$26 = $7;$num_pos$1$lcssa = $num_pos$19;
     label = 7;
     break;
    }
   }
  }
  $9 = (_bitshift64Shl(($7|0),($8|0),4)|0);
  $10 = tempRet0;
  $11 = HEAP8[$$18>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)<(0);
  $14 = $13 << 31 >> 31;
  $17 = (_i64Subtract(($9|0),($10|0),($15|0),($16|0))|0);
  $18 = tempRet0;
  $19 = (_i64Add(($17|0),($18|0),($12|0),($14|0))|0);
  $20 = tempRet0;
  $21 = (($num_digits$07) + 1)|0;
  $22 = (($num_pos$19) + 1)|0;
  $23 = ((($$18)) + 1|0);
  $24 = ($21|0)==(17);
  if ($24) {
   $25 = $20;$26 = $19;$num_pos$1$lcssa = $22;
   label = 7;
   break;
  } else {
   $$18 = $23;$7 = $19;$8 = $20;$num_digits$07 = $21;$num_pos$19 = $22;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$pos>>2] = $num_pos$1$lcssa;
  tempRet0 = ($25);
  return ($26|0);
 }
 return (0)|0;
}
function _scan_decimal($lexer,$pos,$is_integer,$new_ch) {
 $lexer = $lexer|0;
 $pos = $pos|0;
 $is_integer = $is_integer|0;
 $new_ch = $new_ch|0;
 var $$08 = 0, $$16 = 0, $$16$lcssa17 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $have_dot$07 = 0, $have_dot$1 = 0, $isdigit = 0, $isdigittmp = 0, $num_digits$05 = 0, $num_digits$1 = 0, $num_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $num_pos = sp;
 $0 = HEAP32[$pos>>2]|0;
 HEAP32[$num_pos>>2] = $0;
 $1 = HEAP8[$new_ch>>0]|0;
 $2 = ($1<<24>>24)==(48);
 if ($2) {
  $$08 = $new_ch;
  while(1) {
   $3 = HEAP32[$num_pos>>2]|0;
   $4 = (($3) + 1)|0;
   HEAP32[$num_pos>>2] = $4;
   $5 = ((($$08)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(48);
   if ($7) {
    $$08 = $5;
   } else {
    $$16 = $5;$13 = 0;$14 = 0;$have_dot$07 = 0;$num_digits$05 = 0;
    break;
   }
  }
 } else {
  $$16 = $new_ch;$13 = 0;$14 = 0;$have_dot$07 = 0;$num_digits$05 = 0;
 }
 L4: while(1) {
  $8 = HEAP8[$$16>>0]|0;
  $$off = (($8) + -48)<<24>>24;
  $9 = ($$off&255)<(10);
  if ($9) {
   $10 = HEAP32[$is_integer>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $36 = $13;$37 = $14;$have_dot$1 = $have_dot$07;$num_digits$1 = $num_digits$05;
   } else {
    $12 = (($num_digits$05) + 1)|0;
    $15 = (___muldi3(($13|0),($14|0),10,0)|0);
    $16 = tempRet0;
    $17 = $8 << 24 >> 24;
    $18 = ($17|0)<(0);
    $19 = $18 << 31 >> 31;
    $20 = (_i64Add(($15|0),($16|0),-48,-1)|0);
    $21 = tempRet0;
    $22 = (_i64Add(($20|0),($21|0),($17|0),($19|0))|0);
    $23 = tempRet0;
    $36 = $22;$37 = $23;$have_dot$1 = $have_dot$07;$num_digits$1 = $12;
   }
  } else {
   switch ($8<<24>>24) {
   case 101:  {
    $$16$lcssa17 = $$16;$38 = $13;$39 = $14;
    label = 10;
    break L4;
    break;
   }
   case 46:  {
    break;
   }
   default: {
    $34 = $14;$35 = $13;
    break L4;
   }
   }
   $24 = ($have_dot$07|0)==(1);
   if ($24) {
    $34 = $14;$35 = $13;
    break;
   }
   $25 = ((($$16)) + 1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $isdigittmp = (($27) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    $34 = $14;$35 = $13;
    break;
   }
   HEAP32[$is_integer>>2] = 0;
   $36 = $13;$37 = $14;$have_dot$1 = 1;$num_digits$1 = $num_digits$05;
  }
  $28 = (($num_digits$1) + 1)|0;
  $29 = HEAP32[$num_pos>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$num_pos>>2] = $30;
  $31 = ((($$16)) + 1|0);
  $32 = ($28|0)==(21);
  if ($32) {
   $34 = $37;$35 = $36;
   break;
  } else {
   $$16 = $31;$13 = $36;$14 = $37;$have_dot$07 = $have_dot$1;$num_digits$05 = $28;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$is_integer>>2] = 0;
  _scan_exponent($lexer,$num_pos,$$16$lcssa17);
  $34 = $39;$35 = $38;
 }
 $33 = HEAP32[$num_pos>>2]|0;
 HEAP32[$pos>>2] = $33;
 tempRet0 = ($34);
 STACKTOP = sp;return ($35|0);
}
function _scan_exponent($lexer,$pos,$new_ch) {
 $lexer = $lexer|0;
 $pos = $pos|0;
 $new_ch = $new_ch|0;
 var $$0 = 0, $$14 = 0, $$off = 0, $$off2 = 0, $$off23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num_digits$06 = 0, $num_pos$0 = 0, $num_pos$1$lcssa = 0, $num_pos$15 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pos>>2]|0;
 $1 = ((($new_ch)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(43);
 if ($3) {
  label = 3;
 } else {
  $4 = (($0) + 1)|0;
  $5 = ($2<<24>>24)==(45);
  if ($5) {
   label = 3;
  } else {
   $$0 = $1;$num_pos$0 = $4;
  }
 }
 if ((label|0) == 3) {
  $6 = (($0) + 2)|0;
  $7 = ((($new_ch)) + 2|0);
  $$0 = $7;$num_pos$0 = $6;
 }
 $8 = HEAP8[$$0>>0]|0;
 $$off = (($8) + -48)<<24>>24;
 $9 = ($$off&255)>(9);
 if ($9) {
  $10 = ((($lexer)) + 56|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise($11,1,10087,$vararg_buffer);
  // unreachable;
 }
 $12 = HEAP8[$$0>>0]|0;
 $$off23 = (($12) + -48)<<24>>24;
 $13 = ($$off23&255)<(10);
 if (!($13)) {
  $num_pos$1$lcssa = $num_pos$0;
  HEAP32[$pos>>2] = $num_pos$1$lcssa;
  STACKTOP = sp;return;
 }
 $14 = ((($lexer)) + 56|0);
 $$14 = $$0;$num_digits$06 = 0;$num_pos$15 = $num_pos$0;
 while(1) {
  $15 = (($num_digits$06) + 1)|0;
  $16 = ($num_digits$06|0)>(2);
  if ($16) {
   label = 9;
   break;
  }
  $18 = (($num_pos$15) + 1)|0;
  $19 = ((($$14)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $$off2 = (($20) + -48)<<24>>24;
  $21 = ($$off2&255)<(10);
  if ($21) {
   $$14 = $19;$num_digits$06 = $15;$num_pos$15 = $18;
  } else {
   $num_pos$1$lcssa = $18;
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $17 = HEAP32[$14>>2]|0;
  _lily_raise($17,1,10129,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  HEAP32[$pos>>2] = $num_pos$1$lcssa;
  STACKTOP = sp;return;
 }
}
function _scan_lambda($lexer,$source_ch) {
 $lexer = $lexer|0;
 $source_ch = $source_ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $brace_depth$0$ph = 0, $brace_depth$1 = 0, $ch = 0, $i = 0, $label$0$ph = 0, $label$0$ph2 = 0, $label$0$ph2$lcssa18 = 0, $label$0$ph2$lcssa19 = 0, $label$0$ph2$lcssa19$lcssa = 0, $label$0$ph220 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $ch = sp + 8|0;
 $i = sp + 4|0;
 $0 = ((($lexer)) + 12|0);
 $1 = HEAP32[$source_ch>>2]|0;
 HEAP32[$ch>>2] = $1;
 HEAP32[$i>>2] = 0;
 $2 = ((($lexer)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($lexer)) + 20|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($lexer)) + 8|0);
 $7 = ((($lexer)) + 56|0);
 $8 = ((($lexer)) + 8|0);
 $brace_depth$0$ph = 1;$label$0$ph = $5;
 L1: while(1) {
  $label$0$ph2 = $label$0$ph;
  L3: while(1) {
   L5: while(1) {
    $9 = HEAP32[$ch>>2]|0;
    $10 = HEAP8[$9>>0]|0;
    switch ($10<<24>>24) {
    case 10:  {
     break L5;
     break;
    }
    case 35:  {
     $11 = ((($9)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(91);
     if (!($13)) {
      break L5;
     }
     break;
    }
    default: {
    }
    }
    $26 = HEAP32[$ch>>2]|0;
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==(35);
    if ($28) {
     $29 = ((($26)) + 1|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(91);
     if ($31) {
      $32 = HEAP32[$2>>2]|0;
      _scan_multiline_comment($lexer,$ch);
      $33 = HEAP32[$2>>2]|0;
      $34 = ($33|0)==($32|0);
      if ($34) {
       continue;
      }
      $35 = (($33) - ($32))|0;
      $36 = HEAP32[$i>>2]|0;
      $37 = HEAP32[$6>>2]|0;
      $38 = (_strlen($37)|0);
      $39 = (($35) + 3)|0;
      $40 = (($39) + ($36))|0;
      $41 = (($40) + ($38))|0;
      _ensure_label_size($lexer,$41);
      $42 = HEAP32[$0>>2]|0;
      $43 = HEAP32[$i>>2]|0;
      $44 = (($42) + ($43)|0);
      _memset(($44|0),10,($35|0))|0;
      $45 = (($43) + ($35))|0;
      HEAP32[$i>>2] = $45;
      continue;
     }
    }
    $46 = HEAP32[$ch>>2]|0;
    $47 = HEAP8[$46>>0]|0;
    switch ($47<<24>>24) {
    case 123:  {
     $label$0$ph2$lcssa18 = $label$0$ph2;
     label = 15;
     break L3;
     break;
    }
    case 125:  {
     $label$0$ph2$lcssa19 = $label$0$ph2;
     label = 16;
     break L3;
     break;
    }
    case 34:  {
     break;
    }
    default: {
     $brace_depth$1 = $brace_depth$0$ph;$label$0$ph220 = $label$0$ph2;
     break L3;
    }
    }
    _scan_quoted_raw($lexer,$ch,$i,52);
   }
   $14 = (_read_line($lexer)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    label = 7;
    break L1;
   }
   $18 = HEAP32[$i>>2]|0;
   $19 = (($14) + 3)|0;
   $20 = (($19) + ($18))|0;
   _ensure_label_size($lexer,$20);
   $21 = HEAP32[$0>>2]|0;
   $22 = HEAP32[$8>>2]|0;
   HEAP32[$ch>>2] = $22;
   $23 = HEAP32[$i>>2]|0;
   $24 = (($21) + ($23)|0);
   HEAP8[$24>>0] = 10;
   $25 = (($23) + 1)|0;
   HEAP32[$i>>2] = $25;
   $label$0$ph2 = $21;
  }
  if ((label|0) == 15) {
   label = 0;
   $48 = (($brace_depth$0$ph) + 1)|0;
   $brace_depth$1 = $48;$label$0$ph220 = $label$0$ph2$lcssa18;
  }
  else if ((label|0) == 16) {
   label = 0;
   $49 = ($brace_depth$0$ph|0)==(1);
   if ($49) {
    $label$0$ph2$lcssa19$lcssa = $label$0$ph2$lcssa19;
    label = 19;
    break;
   }
   $50 = (($brace_depth$0$ph) + -1)|0;
   $brace_depth$1 = $50;$label$0$ph220 = $label$0$ph2$lcssa19;
  }
  $51 = HEAP32[$ch>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = HEAP32[$i>>2]|0;
  $54 = (($label$0$ph220) + ($53)|0);
  HEAP8[$54>>0] = $52;
  $55 = HEAP32[$ch>>2]|0;
  $56 = ((($55)) + 1|0);
  HEAP32[$ch>>2] = $56;
  $57 = HEAP32[$i>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$i>>2] = $58;
  $brace_depth$0$ph = $brace_depth$1;$label$0$ph = $label$0$ph220;
 }
 if ((label|0) == 7) {
  $16 = HEAP32[$7>>2]|0;
  $17 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  _lily_raise($16,1,10345,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 19) {
  $59 = HEAP32[$i>>2]|0;
  $60 = (($label$0$ph2$lcssa19$lcssa) + ($59)|0);
  HEAP8[$60>>0] = 125;
  $61 = HEAP32[$i>>2]|0;
  $62 = (($61) + 1)|0;
  $63 = (($label$0$ph2$lcssa19$lcssa) + ($62)|0);
  HEAP8[$63>>0] = 0;
  $64 = HEAP32[$ch>>2]|0;
  $65 = ((($64)) + 1|0);
  HEAP32[$source_ch>>2] = $65;
  STACKTOP = sp;return;
 }
}
function _get_entry($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $new_input$0 = 0, $ret_entry$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$lexer>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   label = 4;
  } else {
   $2 = ((($0)) + 40|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if (!($4)) {
    $5 = ((($0)) + 52|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if ($7) {
     label = 4;
     break;
    }
   }
   $20 = HEAP32[$lexer>>2]|0;
   $21 = ((($20)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $ret_entry$0 = $20;
   } else {
    $24 = ((($20)) + 52|0);
    $25 = HEAP32[$24>>2]|0;
    $ret_entry$0 = $25;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $8 = (_lily_malloc(56)|0);
  $9 = HEAP32[$lexer>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   HEAP32[$lexer>>2] = $8;
   $11 = ((($8)) + 48|0);
   HEAP32[$11>>2] = 0;
  } else {
   $12 = ((($9)) + 52|0);
   HEAP32[$12>>2] = $8;
   $13 = HEAP32[$lexer>>2]|0;
   $14 = ((($8)) + 48|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = ((($8)) + 40|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($8)) + 44|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($8)) + 8|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($8)) + 12|0);
  HEAP16[$18>>1] = 0;
  $19 = ((($8)) + 52|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$8>>2] = $lexer;
  $ret_entry$0 = $8;
 }
 $26 = ((($ret_entry$0)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $76 = ((($lexer)) + 30|0);
  HEAP16[$76>>1] = 0;
  HEAP32[$lexer>>2] = $ret_entry$0;
  return ($ret_entry$0|0);
 }
 $29 = ((($27)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = ((($lexer)) + 28|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = (_lily_malloc($34)|0);
  $new_input$0 = $35;
 } else {
  $36 = ((($27)) + 14|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = ((($lexer)) + 28|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = ($37&65535)<($39&65535);
  if ($40) {
   $41 = $39&65535;
   $42 = (_lily_realloc($30,$41)|0);
   $new_input$0 = $42;
  } else {
   $new_input$0 = $30;
  }
 }
 $43 = ((($lexer)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 (_strcpy($new_input$0,$44)|0);
 HEAP32[$29>>2] = $new_input$0;
 $45 = ((($lexer)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($27)) + 20|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($lexer)) + 30|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = ((($27)) + 12|0);
 HEAP16[$50>>1] = $49;
 $51 = ((($lexer)) + 28|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = ((($27)) + 14|0);
 HEAP16[$53>>1] = $52;
 $54 = ((($lexer)) + 40|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($27)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $55 << 16;
 $59 = $57 & 65535;
 $60 = $59 | $58;
 HEAP32[$56>>2] = $60;
 $61 = ((($lexer)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($27)) + 4|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($lexer)) + 32|0);
 $65 = $64;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($27)) + 32|0);
 $72 = $71;
 $73 = $72;
 HEAP32[$73>>2] = $67;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $70;
 HEAP32[$45>>2] = 0;
 $76 = ((($lexer)) + 30|0);
 HEAP16[$76>>1] = 0;
 HEAP32[$lexer>>2] = $ret_entry$0;
 return ($ret_entry$0|0);
}
function _setup_entry($lexer,$new_entry,$mode) {
 $lexer = $lexer|0;
 $new_entry = $new_entry|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($new_entry)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (_read_line($lexer)|0);
  STACKTOP = sp;return;
 }
 $3 = ((($lexer)) + 44|0);
 HEAP32[$3>>2] = $mode;
 (_read_line($lexer)|0);
 $4 = ($mode|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($lexer)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_strncmp($6,10456,5)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($lexer)) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise($10,1,10463,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer_handle_page_data($lexer);
 STACKTOP = sp;return;
}
function _lily_lexer_handle_page_data($lexer) {
 $lexer = $lexer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$in = 0, $htmlp$0 = 0, $htmlp$0$lcssa = 0, $htmlp$1 = 0, $htmlp$1$lcssa = 0, $lbp$0 = 0, $lbp$0$lcssa = 0;
 var $lbp$1 = 0, $lbp$2 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lexer)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($lexer)) + 30|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($lexer)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = ((($lexer)) + 12|0);
 $9 = ((($lexer)) + 28|0);
 $10 = ((($lexer)) + 60|0);
 $c$0$in = $7;$htmlp$0 = 0;$lbp$0 = $4;
 while(1) {
  $c$0 = HEAP8[$c$0$in>>0]|0;
  $11 = (($lbp$0) + 1)|0;
  $12 = ($c$0<<24>>24)==(60);
  if ($12) {
   $13 = HEAP32[$5>>2]|0;
   $14 = (($13) + ($11)|0);
   $15 = (_strncmp($14,10512,5)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $htmlp$0$lcssa = $htmlp$0;$lbp$0$lcssa = $lbp$0;
    label = 4;
    break;
   }
  }
  $25 = HEAP32[$8>>2]|0;
  $26 = (($25) + ($htmlp$0)|0);
  HEAP8[$26>>0] = $c$0;
  $27 = (($htmlp$0) + 1)|0;
  $28 = HEAP16[$9>>1]|0;
  $29 = $28&65535;
  $30 = (($29) + -1)|0;
  $31 = ($27|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$8>>2]|0;
   $33 = (($32) + ($27)|0);
   HEAP8[$33>>0] = 0;
   $34 = HEAP32[$10>>2]|0;
   $35 = HEAP32[$8>>2]|0;
   FUNCTION_TABLE_vii[$34 & 63]($35,$1);
   $htmlp$1 = 0;
  } else {
   $htmlp$1 = $27;
  }
  $36 = ($c$0<<24>>24)==(10);
  if ($36) {
   $37 = (_read_line($lexer)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $htmlp$1$lcssa = $htmlp$1;
    break;
   } else {
    $lbp$1 = 0;
   }
  } else {
   $lbp$1 = $11;
  }
  $50 = HEAP32[$5>>2]|0;
  $51 = (($50) + ($lbp$1)|0);
  $c$0$in = $51;$htmlp$0 = $htmlp$1;$lbp$0 = $lbp$1;
 }
 if ((label|0) == 4) {
  $17 = ($htmlp$0$lcssa|0)==(0);
  if (!($17)) {
   $18 = ((($lexer)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($htmlp$0$lcssa)|0);
   HEAP8[$20>>0] = 0;
   $21 = ((($lexer)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$22 & 63]($23,$1);
  }
  $24 = (($lbp$0$lcssa) + 6)|0;
  $phitmp = $24&65535;
  $lbp$2 = $phitmp;
  HEAP16[$2>>1] = $lbp$2;
  return;
 }
 $39 = ($htmlp$1$lcssa|0)==(0);
 do {
  if (!($39)) {
   $40 = HEAP32[$8>>2]|0;
   $41 = (($40) + ($htmlp$1$lcssa)|0);
   HEAP8[$41>>0] = 0;
   $42 = ($htmlp$1$lcssa|0)==(1);
   if (!($42)) {
    $43 = HEAP32[$8>>2]|0;
    $44 = HEAP8[$43>>0]|0;
    $45 = ($44<<24>>24)==(10);
    if (!($45)) {
     $46 = ((($lexer)) + 60|0);
     $47 = HEAP32[$46>>2]|0;
     FUNCTION_TABLE_vii[$47 & 63]($43,$1);
     break;
    }
   }
   $48 = HEAP32[$8>>2]|0;
   HEAP8[$48>>0] = 0;
  }
 } while(0);
 $49 = ((($lexer)) + 40|0);
 HEAP32[$49>>2] = 53;
 $lbp$2 = 0;
 HEAP16[$2>>1] = $lbp$2;
 return;
}
function _lily_load_str($lexer,$mode,$str) {
 $lexer = $lexer|0;
 $mode = $mode|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get_entry($lexer)|0);
 $1 = ((($0)) + 40|0);
 HEAP32[$1>>2] = $str;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -65536;
 $5 = $4 | 1;
 HEAP32[$2>>2] = $5;
 _setup_entry($lexer,$0,$mode);
 return;
}
function _lily_load_copy_string($lexer,$mode,$str) {
 $lexer = $lexer|0;
 $mode = $mode|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get_entry($lexer)|0);
 $1 = (_strlen($str)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 (_strcpy($3,$str)|0);
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 44|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & -65536;
 $9 = $8 | 2;
 HEAP32[$6>>2] = $9;
 _setup_entry($lexer,$0,$mode);
 return;
}
function _tokname($t) {
 $t = $t|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($t>>>0)<(54);
 if (!($0)) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (1548 + ($t<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _lily_builtin_Boolean_to_i($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_boolean($s,0)|0);
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 _lily_return_integer($s,$0,$2);
 return;
}
function _lily_builtin_Boolean_to_s($s) {
 $s = $s|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_boolean($s,0)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 14077 : 14083;
 $2 = (_lily_new_raw_string($$)|0);
 _lily_return_string($s,$2);
 return;
}
function _lily_builtin_Byte_to_i($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_byte($s,0)|0);
 $1 = $0&255;
 _lily_return_integer($s,$1,0);
 return;
}
function _lily_builtin_ByteString_encode($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encode_method$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_arg_count($s)|0);
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = (_lily_arg_string_raw($s,1)|0);
  $encode_method$0 = $3;
 } else {
  $encode_method$0 = 14088;
 }
 $4 = (_strcmp($encode_method$0,14088)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_return_empty_variant($s,15);
  return;
 }
 $6 = (_lily_bytestring_get_raw($0)|0);
 $7 = (_lily_bytestring_length($0)|0);
 $8 = (_lily_is_valid_sized_utf8($6,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  _lily_return_empty_variant($s,15);
  return;
 } else {
  $10 = (_lily_new_enum_n(1)|0);
  $11 = (_lily_new_raw_string($6)|0);
  _lily_variant_set_string($10,0,$11);
  _lily_return_filled_variant($s,14,$10);
  return;
 }
}
function _lily_builtin_Double_to_i($s) {
 $s = $s|0;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_lily_arg_double($s,0));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 _lily_return_integer($s,$1,$2);
 return;
}
function _lily_builtin_Either_is_left($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_is_left_right($s,17);
 return;
}
function _either_is_left_right($s,$expect) {
 $s = $s|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_class_id($s,0)|0);
 $1 = ($0|0)==($expect|0);
 $2 = $1&1;
 _lily_return_boolean($s,$2);
 return;
}
function _lily_builtin_Either_is_right($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_is_left_right($s,18);
 return;
}
function _lily_builtin_Either_left($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_optionize_left_right($s,17);
 return;
}
function _either_optionize_left_right($s,$expect) {
 $s = $s|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $iv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iv = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$iv)|0);
 $1 = ($0|0)==($expect|0);
 if ($1) {
  $2 = (_lily_new_enum_n(1)|0);
  $3 = HEAP32[$iv>>2]|0;
  $4 = (_lily_instance_value($3,0)|0);
  _lily_variant_set_value($2,0,$4);
  _lily_return_filled_variant($s,14,$2);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($s,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Either_right($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _either_optionize_left_right($s,18);
 return;
}
function _lily_builtin_File_close($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_file($s,0)|0);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _lily_return_unit($s);
  return;
 }
 $4 = ((($0)) + 6|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  (_fclose($2)|0);
 }
 HEAP32[$1>>2] = 0;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_File_each_line($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos$0$be = 0, $pos$01 = 0;
 var $pos$1 = 0, $read_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $read_buffer = sp;
 $0 = (_lily_arg_file($s,0)|0);
 $1 = (_lily_get_msgbuf($s)|0);
 _lily_file_ensure_readable($s,$0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$4);
 $5 = (_fgetc($3)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  _lily_return_unit($s);
  STACKTOP = sp;return;
 } else {
  $9 = $5;$pos$01 = 0;
 }
 while(1) {
  $7 = ($pos$01|0)==(128);
  if ($7) {
   _lily_mb_add_range($1,$read_buffer,0,128);
   $pos$1 = 0;
  } else {
   $pos$1 = $pos$01;
  }
  $8 = $9&255;
  $10 = (($read_buffer) + ($pos$1)|0);
  HEAP8[$10>>0] = $8;
  $11 = ($9|0)==(10);
  if ($11) {
   $12 = ($pos$1|0)==(0);
   if (!($12)) {
    _lily_mb_add_range($1,$read_buffer,0,$pos$1);
   }
   $13 = (_lily_mb_get($1)|0);
   $14 = (_lily_new_raw_string($13)|0);
   _lily_push_bytestring($s,$14);
   _lily_exec_prepared($s,1);
   _lily_mb_flush($1);
   $pos$0$be = 0;
  } else {
   $15 = (($pos$1) + 1)|0;
   $pos$0$be = $15;
  }
  $16 = (_fgetc($3)|0);
  $17 = ($16|0)==(-1);
  if ($17) {
   break;
  } else {
   $9 = $16;$pos$01 = $pos$0$be;
  }
 }
 _lily_return_unit($s);
 STACKTOP = sp;return;
}
function _lily_builtin_File_open($s) {
 $s = $s|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mode_ch$1 = 0, $phitmp = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lily_arg_string_raw($s,0)|0);
 $1 = (_lily_arg_string_raw($s,1)|0);
 $2 = (___errno_location()|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$1>>0]|0;
 switch ($3<<24>>24) {
 case 97: case 119: case 114:  {
  $4 = ((($1)) + 1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(98);
  $7 = ((($1)) + 2|0);
  $$ = $6 ? $7 : $4;
  $8 = HEAP8[$$>>0]|0;
  $9 = ($8<<24>>24)==(43);
  $10 = ((($$)) + 1|0);
  $mode_ch$1 = $9 ? $10 : $$;
  $11 = HEAP8[$mode_ch$1>>0]|0;
  $phitmp = ($11<<24>>24)==(0);
  if (!($phitmp)) {
   label = 3;
  }
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_error_fmt($s,20,14094,$vararg_buffer);
 }
 $12 = (_fopen($0,$1)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $15 = (_lily_new_file_val($12,$1)|0);
  _lily_return_file($s,$15);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $14;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $14;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $0;
 _lily_error_fmt($s,20,14119,$vararg_buffer1);
 $15 = (_lily_new_file_val($12,$1)|0);
 _lily_return_file($s,$15);
 STACKTOP = sp;return;
}
function _lily_builtin_File_print($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_builtin_File_write($s);
 $0 = (_lily_arg_file_raw($s,0)|0);
 (_fputc(10,$0)|0);
 _lily_return_unit($s);
 return;
}
function _lily_builtin_File_write($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_file($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 _lily_file_ensure_writeable($s,$0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(3);
 if ($3) {
  $4 = ((($1)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  (_fputs($7,$9)|0);
  _lily_return_unit($s);
  return;
 } else {
  $10 = ((($s)) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_mb_flush($11);
  _lily_mb_add_value($11,$s,$1);
  $12 = (_lily_mb_get($11)|0);
  $13 = ((($0)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  (_fputs($12,$14)|0);
  _lily_return_unit($s);
  return;
 }
}
function _lily_builtin_File_read_line($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos$0 = 0, $pos$1 = 0, $pos$2 = 0, $read_buffer = 0;
 var $total_pos$0 = 0, $total_pos$1 = 0, $total_pos$2 = 0, $total_pos$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $read_buffer = sp;
 $0 = (_lily_arg_file($s,0)|0);
 $1 = (_lily_get_msgbuf($s)|0);
 _lily_file_ensure_readable($s,$0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $pos$0 = 0;$total_pos$0 = 0;
 while(1) {
  $4 = (_fgetc($3)|0);
  $5 = ($4|0)==(-1);
  if ($5) {
   $pos$2 = $pos$0;$total_pos$2 = $total_pos$0;
   break;
  }
  $6 = ($pos$0|0)==(128);
  if ($6) {
   _lily_mb_add_range($1,$read_buffer,0,128);
   $7 = (($pos$0) + ($total_pos$0))|0;
   $pos$1 = 0;$total_pos$1 = $7;
  } else {
   $pos$1 = $pos$0;$total_pos$1 = $total_pos$0;
  }
  $8 = $4&255;
  $9 = (($read_buffer) + ($pos$1)|0);
  HEAP8[$9>>0] = $8;
  $10 = (($pos$1) + 1)|0;
  $11 = ($4|0)==(10);
  if ($11) {
   $pos$2 = $10;$total_pos$2 = $total_pos$1;
   break;
  } else {
   $pos$0 = $10;$total_pos$0 = $total_pos$1;
  }
 }
 $12 = ($pos$2|0)==(0);
 if ($12) {
  $total_pos$3 = $total_pos$2;
 } else {
  _lily_mb_add_range($1,$read_buffer,0,$pos$2);
  $13 = (($pos$2) + ($total_pos$2))|0;
  $total_pos$3 = $13;
 }
 $14 = (_lily_mb_get($1)|0);
 $15 = (_lily_new_raw_string_sized($14,$total_pos$3)|0);
 _lily_return_bytestring($s,$15);
 STACKTOP = sp;return;
}
function _lily_hash_get_elem($s,$hash_val,$key) {
 $s = $s|0;
 $hash_val = $hash_val|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $elem_iter$0 = 0, $elem_iter$0$lcssa = 0, $elem_iter$01 = 0, $elem_iter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_siphash($s,$key)|0);
 $1 = tempRet0;
 $2 = ((($hash_val)) + 16|0);
 $3 = ((($key)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP16[$key>>1]|0;
 $elem_iter$01 = HEAP32[$2>>2]|0;
 $6 = ($elem_iter$01|0)==(0|0);
 if ($6) {
  $elem_iter$0$lcssa = 0;
  return ($elem_iter$0$lcssa|0);
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = ((($4)) + 4|0);
 $11 = ((($4)) + 8|0);
 $elem_iter$02 = $elem_iter$01;
 L4: while(1) {
  $12 = $elem_iter$02;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($0|0);
  $19 = ($17|0)==($1|0);
  $20 = $18 & $19;
  L6: do {
   if ($20) {
    $21 = ((($elem_iter$02)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    switch ($5<<16>>16) {
    case 1:  {
     $25 = ((($23)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $24;
     $28 = ($27|0)==($9|0);
     $29 = ($26|0)==($8|0);
     $30 = $28 & $29;
     if ($30) {
      $elem_iter$0$lcssa = $elem_iter$02;
      label = 10;
      break L4;
     } else {
      break L6;
     }
     break;
    }
    case 3:  {
     break;
    }
    default: {
     break L6;
    }
    }
    $31 = ($24|0)==($4|0);
    if ($31) {
     $elem_iter$0$lcssa = $elem_iter$02;
     label = 10;
     break L4;
    }
    $32 = ((($24)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$10>>2]|0;
    $35 = ($33|0)==($34|0);
    if ($35) {
     $36 = ((($24)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = HEAP32[$11>>2]|0;
     $39 = (_strcmp($37,$38)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      $elem_iter$0$lcssa = $elem_iter$02;
      label = 10;
      break L4;
     }
    }
   }
  } while(0);
  $41 = ((($elem_iter$02)) + 16|0);
  $elem_iter$0 = HEAP32[$41>>2]|0;
  $42 = ($elem_iter$0|0)==(0|0);
  if ($42) {
   $elem_iter$0$lcssa = 0;
   label = 10;
   break;
  } else {
   $elem_iter$02 = $elem_iter$0;
  }
 }
 if ((label|0) == 10) {
  return ($elem_iter$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_hash_add_unique($s,$hash_val,$pair_key,$pair_value) {
 $s = $s|0;
 $hash_val = $hash_val|0;
 $pair_key = $pair_key|0;
 $pair_value = $pair_value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _remove_key_check($s,$hash_val);
 $0 = (_lily_copy_value($pair_key)|0);
 $1 = (_lily_copy_value($pair_value)|0);
 _hash_add_unique_nocopy($s,$hash_val,$0,$1);
 return;
}
function _remove_key_check($s,$hash_val) {
 $s = $s|0;
 $hash_val = $hash_val|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hash_val)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 _lily_error($s,22,14138);
 return;
}
function _hash_add_unique_nocopy($s,$hash_val,$pair_key,$pair_value) {
 $s = $s|0;
 $hash_val = $hash_val|0;
 $pair_key = $pair_key|0;
 $pair_value = $pair_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(24)|0);
 $1 = (_lily_siphash($s,$pair_key)|0);
 $2 = tempRet0;
 $3 = $0;
 $4 = $3;
 HEAP32[$4>>2] = $1;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $pair_key;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $pair_value;
 $9 = ((($hash_val)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($10)) + 20|0);
  HEAP32[$12>>2] = $0;
 }
 $13 = ((($0)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$9>>2]|0;
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$9>>2] = $0;
 $16 = ((($hash_val)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 return;
}
function _lily_hash_set_elem($s,$hash_val,$pair_key,$pair_value) {
 $s = $s|0;
 $hash_val = $hash_val|0;
 $pair_key = $pair_key|0;
 $pair_value = $pair_value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_hash_get_elem($s,$hash_val,$pair_key)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _lily_hash_add_unique($s,$hash_val,$pair_key,$pair_value);
  return;
 } else {
  $2 = ((($0)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  _lily_assign_value($3,$pair_value);
  return;
 }
}
function _lily_destroy_hash($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _destroy_hash_elems($1);
 _lily_free($1);
 return;
}
function _destroy_hash_elems($hash_val) {
 $hash_val = $hash_val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $elem_iter$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hash_val)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 } else {
  $elem_iter$01 = $1;
 }
 while(1) {
  $3 = ((($elem_iter$01)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  _destroy_elem($elem_iter$01);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $elem_iter$01 = $4;
  }
 }
 return;
}
function _destroy_elem($elem) {
 $elem = $elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($elem)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _lily_deref($1);
 $2 = HEAP32[$0>>2]|0;
 _lily_free($2);
 $3 = ((($elem)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_deref($4);
 $5 = HEAP32[$3>>2]|0;
 _lily_free($5);
 _lily_free($elem);
 return;
}
function _lily_builtin_Hash_clear($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _lily_error($s,22,14138);
 }
 _destroy_hash_elems($0);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_Hash_delete($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 _remove_key_check($s,$0);
 $2 = (_lily_hash_get_elem($s,$0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _lily_return_unit($s);
  return;
 }
 $4 = ((($2)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($2)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($5)) + 20|0);
  HEAP32[$9>>2] = $8;
 }
 $10 = ((($2)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[$4>>2]|0;
  $14 = ((($11)) + 16|0);
  HEAP32[$14>>2] = $13;
 }
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($2|0)==($16|0);
 if ($17) {
  $18 = HEAP32[$4>>2]|0;
  HEAP32[$15>>2] = $18;
 }
 _destroy_elem($2);
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_Hash_each_pair($s) {
 $s = $s|0;
 var $$reg2mem22$0 = 0, $$reg2mem22$0$phi = 0, $$reg2mem26$0 = 0, $$reg2mem26$0$phi = 0, $$reg2mem39$0 = 0, $$reg2mem39$0$phi = 0, $$reg2mem49$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond51 = 0, $cond52 = 0, $cond53 = 0, $cond54 = 0, $cond55 = 0, $cond56 = 0, $cond57 = 0, $cond58 = 0, $elem_iter$01$reg2mem47$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_iii(7,($s|0),0)|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = (threwValue); } else { $2 = -1; };
 $3 = tempRet0;
 $cond = ($2|0)==(1);
 if ($cond) {
  $$reg2mem22$0 = 0;$$reg2mem26$0 = 0;$$reg2mem39$0 = 0;$$reg2mem49$0 = $3;
 } else {
  $4 = ((($0)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  $6 = (invoke_iii(8,($s|0),1)|0);
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond51 = ($8|0)==(1);
  if ($cond51) {
   $$reg2mem22$0 = 0;$$reg2mem26$0 = 0;$$reg2mem39$0 = $5;$$reg2mem49$0 = $9;
  } else {
   __THREW__ = 0;
   invoke_vii(37,($s|0),($6|0));
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
   $12 = tempRet0;
   $cond52 = ($11|0)==(1);
   if ($cond52) {
    $$reg2mem22$0 = 0;$$reg2mem26$0 = 0;$$reg2mem39$0 = $5;$$reg2mem49$0 = $12;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($s)) + 92|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii(2,($17|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
    $21 = tempRet0;
    $cond53 = ($20|0)==(1);
    if ($cond53) {
     $$reg2mem22$0 = $16;$$reg2mem26$0 = $13;$$reg2mem39$0 = $5;$$reg2mem49$0 = $21;
    } else {
     $22 = ((($18)) + 8|0);
     _setjmpTable = _saveSetjmp($22,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
     $25 = tempRet0;
     $cond54 = ($24|0)==(1);
     if ($cond54) {
      $$reg2mem22$0 = $16;$$reg2mem26$0 = $13;$$reg2mem39$0 = $5;$$reg2mem49$0 = $25;
     } else {
      $$reg2mem22$0 = $16;$$reg2mem26$0 = $13;$$reg2mem39$0 = $5;$$reg2mem49$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $26 = ($$reg2mem49$0|0)==(0);
  if (!($26)) {
   $50 = HEAP32[$$reg2mem26$0>>2]|0;
   $51 = (($50) + -1)|0;
   HEAP32[$$reg2mem26$0>>2] = $51;
   $52 = HEAP32[$$reg2mem22$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($52|0));
   $53 = __THREW__; __THREW__ = 0;
   if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
   $55 = tempRet0;
   $$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem26$0$phi = $$reg2mem26$0;$$reg2mem22$0$phi = $$reg2mem22$0;$$reg2mem49$0 = $55;$$reg2mem39$0 = $$reg2mem39$0$phi;$$reg2mem26$0 = $$reg2mem26$0$phi;$$reg2mem22$0 = $$reg2mem22$0$phi;
   continue;
  }
  $27 = ($$reg2mem39$0|0)==(0|0);
  if (!($27)) {
   $elem_iter$01$reg2mem47$0 = $$reg2mem39$0;
   while(1) {
    $28 = ((($elem_iter$01$reg2mem47$0)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    invoke_vii(38,($s|0),($29|0));
    $30 = __THREW__; __THREW__ = 0;
    if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = (threwValue); } else { $31 = -1; };
    $32 = tempRet0;
    $cond55 = ($31|0)==(1);
    if ($cond55) {
     $$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem26$0$phi = $$reg2mem26$0;$$reg2mem22$0$phi = $$reg2mem22$0;$$reg2mem49$0 = $32;$$reg2mem39$0 = $$reg2mem39$0$phi;$$reg2mem26$0 = $$reg2mem26$0$phi;$$reg2mem22$0 = $$reg2mem22$0$phi;
     continue L7;
    }
    $33 = ((($elem_iter$01$reg2mem47$0)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    __THREW__ = 0;
    invoke_vii(38,($s|0),($34|0));
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
    $37 = tempRet0;
    $cond56 = ($36|0)==(1);
    if ($cond56) {
     $$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem26$0$phi = $$reg2mem26$0;$$reg2mem22$0$phi = $$reg2mem22$0;$$reg2mem49$0 = $37;$$reg2mem39$0 = $$reg2mem39$0$phi;$$reg2mem26$0 = $$reg2mem26$0$phi;$$reg2mem22$0 = $$reg2mem22$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(39,($s|0),2);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
    $40 = tempRet0;
    $cond57 = ($39|0)==(1);
    if ($cond57) {
     $$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem26$0$phi = $$reg2mem26$0;$$reg2mem22$0$phi = $$reg2mem22$0;$$reg2mem49$0 = $40;$$reg2mem39$0 = $$reg2mem39$0$phi;$$reg2mem26$0 = $$reg2mem26$0$phi;$$reg2mem22$0 = $$reg2mem22$0$phi;
     continue L7;
    }
    $41 = ((($elem_iter$01$reg2mem47$0)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0|0);
    if ($43) {
     break;
    } else {
     $elem_iter$01$reg2mem47$0 = $42;
    }
   }
  }
  $44 = HEAP32[$$reg2mem26$0>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[$$reg2mem26$0>>2] = $45;
  $46 = HEAP32[$$reg2mem22$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(10,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = (threwValue); } else { $48 = -1; };
  $49 = tempRet0;
  $cond58 = ($48|0)==(1);
  if ($cond58) {
   $$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem26$0$phi = $$reg2mem26$0;$$reg2mem22$0$phi = $$reg2mem22$0;$$reg2mem49$0 = $49;$$reg2mem39$0 = $$reg2mem39$0$phi;$$reg2mem26$0 = $$reg2mem26$0$phi;$$reg2mem22$0 = $$reg2mem22$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _lily_builtin_Hash_get($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = (_lily_arg_value($s,2)|0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_hash_get_elem($s,$4,$1)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $9 = $2;
  _lily_return_value($s,$9);
  return;
 }
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 _lily_return_value($s,$9);
 return;
}
function _lily_builtin_Hash_has_key($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = (_lily_hash_get_elem($s,$0,$1)|0);
 $3 = ($2|0)!=(0|0);
 $4 = $3&1;
 _lily_return_boolean($s,$4);
 return;
}
function _lily_builtin_Hash_keys($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elem_iter$0 = 0, $elem_iter$01 = 0, $elem_iter$03 = 0, $i$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lily_new_list_val_n($2)|0);
 $4 = ((($0)) + 16|0);
 $elem_iter$01 = HEAP32[$4>>2]|0;
 $5 = ($elem_iter$01|0)==(0|0);
 if ($5) {
  _lily_return_list($s,$3);
  return;
 }
 $6 = ((($3)) + 16|0);
 $elem_iter$03 = $elem_iter$01;$i$02 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($i$02<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($elem_iter$03)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_assign_value($9,$11);
  $12 = (($i$02) + 1)|0;
  $13 = ((($elem_iter$03)) + 16|0);
  $elem_iter$0 = HEAP32[$13>>2]|0;
  $14 = ($elem_iter$0|0)==(0|0);
  if ($14) {
   break;
  } else {
   $elem_iter$03 = $elem_iter$0;$i$02 = $12;
  }
 }
 _lily_return_list($s,$3);
 return;
}
function _lily_builtin_Hash_map_values($s) {
 $s = $s|0;
 var $$reg2mem39$0 = 0, $$reg2mem39$0$phi = 0, $$reg2mem43$0 = 0, $$reg2mem43$0$phi = 0, $$reg2mem50$0 = 0, $$reg2mem50$0$phi = 0, $$reg2mem68$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $cond = 0, $cond70 = 0;
 var $cond71 = 0, $cond72 = 0, $cond73 = 0, $cond74 = 0, $cond75 = 0, $cond76 = 0, $cond77 = 0, $cond78 = 0, $cond79 = 0, $cond80 = 0, $cond81 = 0, $count$0$lcssa$reg2mem$0 = 0, $count$01$reg2mem64$0 = 0, $elem_iter$02$reg2mem66$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_iii(7,($s|0),0)|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = (threwValue); } else { $2 = -1; };
 $3 = tempRet0;
 $cond = ($2|0)==(1);
 if ($cond) {
  $$reg2mem39$0 = 0;$$reg2mem43$0 = 0;$$reg2mem50$0 = 0;$$reg2mem68$0 = $3;
 } else {
  __THREW__ = 0;
  $4 = (invoke_iii(8,($s|0),1)|0);
  $5 = __THREW__; __THREW__ = 0;
  if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = (threwValue); } else { $6 = -1; };
  $7 = tempRet0;
  $cond70 = ($6|0)==(1);
  if ($cond70) {
   $$reg2mem39$0 = 0;$$reg2mem43$0 = 0;$$reg2mem50$0 = 0;$$reg2mem68$0 = $7;
  } else {
   __THREW__ = 0;
   invoke_vii(37,($s|0),($4|0));
   $8 = __THREW__; __THREW__ = 0;
   if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = (threwValue); } else { $9 = -1; };
   $10 = tempRet0;
   $cond71 = ($9|0)==(1);
   if ($cond71) {
    $$reg2mem39$0 = 0;$$reg2mem43$0 = 0;$$reg2mem50$0 = 0;$$reg2mem68$0 = $10;
   } else {
    $11 = ((($0)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($s)) + 92|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii(2,($17|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
    $21 = tempRet0;
    $cond72 = ($20|0)==(1);
    if ($cond72) {
     $$reg2mem39$0 = $16;$$reg2mem43$0 = $13;$$reg2mem50$0 = $12;$$reg2mem68$0 = $21;
    } else {
     $22 = ((($18)) + 8|0);
     _setjmpTable = _saveSetjmp($22,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
     $25 = tempRet0;
     $cond73 = ($24|0)==(1);
     if ($cond73) {
      $$reg2mem39$0 = $16;$$reg2mem43$0 = $13;$$reg2mem50$0 = $12;$$reg2mem68$0 = $25;
     } else {
      $$reg2mem39$0 = $16;$$reg2mem43$0 = $13;$$reg2mem50$0 = $12;$$reg2mem68$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $26 = ($$reg2mem68$0|0)==(0);
  if (!($26)) {
   $65 = HEAP32[$$reg2mem43$0>>2]|0;
   $66 = (($65) + -1)|0;
   HEAP32[$$reg2mem43$0>>2] = $66;
   $67 = HEAP32[$$reg2mem39$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($67|0));
   $68 = __THREW__; __THREW__ = 0;
   if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = (threwValue); } else { $69 = -1; };
   $70 = tempRet0;
   $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $70;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
   continue;
  }
  $27 = ($$reg2mem50$0|0)==(0|0);
  if ($27) {
   $count$0$lcssa$reg2mem$0 = 0;
  } else {
   $count$01$reg2mem64$0 = 0;$elem_iter$02$reg2mem66$0 = $$reg2mem50$0;
   while(1) {
    $28 = ((($elem_iter$02$reg2mem66$0)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($elem_iter$02$reg2mem66$0)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    invoke_vii(38,($s|0),($29|0));
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
    $34 = tempRet0;
    $cond74 = ($33|0)==(1);
    if ($cond74) {
     $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $34;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(38,($s|0),($31|0));
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
    $37 = tempRet0;
    $cond75 = ($36|0)==(1);
    if ($cond75) {
     $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $37;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(39,($s|0),1);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
    $40 = tempRet0;
    $cond76 = ($39|0)==(1);
    if ($cond76) {
     $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $40;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    $41 = (invoke_ii(5,($s|0))|0);
    $42 = __THREW__; __THREW__ = 0;
    if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = (threwValue); } else { $43 = -1; };
    $44 = tempRet0;
    $cond77 = ($43|0)==(1);
    if ($cond77) {
     $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $44;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(38,($s|0),($41|0));
    $45 = __THREW__; __THREW__ = 0;
    if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = (threwValue); } else { $46 = -1; };
    $47 = tempRet0;
    $cond78 = ($46|0)==(1);
    if ($cond78) {
     $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $47;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
     continue L7;
    }
    $48 = ((($elem_iter$02$reg2mem66$0)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($count$01$reg2mem64$0) + 1)|0;
    $51 = ($49|0)==(0|0);
    if ($51) {
     $count$0$lcssa$reg2mem$0 = $50;
     break;
    } else {
     $count$01$reg2mem64$0 = $50;$elem_iter$02$reg2mem66$0 = $49;
    }
   }
  }
  __THREW__ = 0;
  $52 = (invoke_iii(9,($s|0),($count$0$lcssa$reg2mem$0|0))|0);
  $53 = __THREW__; __THREW__ = 0;
  if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
  $55 = tempRet0;
  $cond79 = ($54|0)==(1);
  if ($cond79) {
   $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $55;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
   continue;
  }
  $56 = HEAP32[$$reg2mem43$0>>2]|0;
  $57 = (($56) + -1)|0;
  HEAP32[$$reg2mem43$0>>2] = $57;
  $58 = HEAP32[$$reg2mem39$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(10,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
  $61 = tempRet0;
  $cond80 = ($60|0)==(1);
  if ($cond80) {
   $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $61;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(40,($s|0),($52|0));
  $62 = __THREW__; __THREW__ = 0;
  if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = (threwValue); } else { $63 = -1; };
  $64 = tempRet0;
  $cond81 = ($63|0)==(1);
  if ($cond81) {
   $$reg2mem50$0$phi = $$reg2mem50$0;$$reg2mem43$0$phi = $$reg2mem43$0;$$reg2mem39$0$phi = $$reg2mem39$0;$$reg2mem68$0 = $64;$$reg2mem50$0 = $$reg2mem50$0$phi;$$reg2mem43$0 = $$reg2mem43$0$phi;$$reg2mem39$0 = $$reg2mem39$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _build_hash($s,$count) {
 $s = $s|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_hash_val()|0);
 $1 = ($count|0)>(0);
 if ($1) {
  $i$01 = 0;
 } else {
  return ($0|0);
 }
 while(1) {
  $2 = (_lily_pop_value($s)|0);
  $3 = (_lily_copy_value($2)|0);
  $4 = (_lily_pop_value($s)|0);
  $5 = (_lily_copy_value($4)|0);
  _hash_add_unique_nocopy($s,$0,$5,$3);
  $6 = (($i$01) + 1)|0;
  $exitcond = ($6|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $6;
  }
 }
 return ($0|0);
}
function _lily_builtin_Hash_merge($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elem_iter$0 = 0, $elem_iter$06 = 0, $elem_iter$07 = 0, $elem_iter$1 = 0, $elem_iter$11 = 0, $elem_iter$12 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = (_lily_arg_list($s,1)|0);
 $2 = (_lily_new_hash_val()|0);
 $3 = ((($0)) + 16|0);
 $elem_iter$06 = HEAP32[$3>>2]|0;
 $4 = ($elem_iter$06|0)==(0|0);
 if (!($4)) {
  $elem_iter$07 = $elem_iter$06;
  while(1) {
   $9 = ((($elem_iter$07)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($elem_iter$07)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_hash_add_unique($s,$2,$10,$12);
   $13 = ((($elem_iter$07)) + 16|0);
   $elem_iter$0 = HEAP32[$13>>2]|0;
   $14 = ($elem_iter$0|0)==(0|0);
   if ($14) {
    break;
   } else {
    $elem_iter$07 = $elem_iter$0;
   }
  }
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  _lily_return_hash($s,$2);
  return;
 }
 $8 = ((($1)) + 16|0);
 $i$03 = 0;
 while(1) {
  $15 = HEAP32[$8>>2]|0;
  $16 = (($15) + ($i$03<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $elem_iter$11 = HEAP32[$20>>2]|0;
  $21 = ($elem_iter$11|0)==(0|0);
  if (!($21)) {
   $elem_iter$12 = $elem_iter$11;
   while(1) {
    $22 = ((($elem_iter$12)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($elem_iter$12)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    _lily_hash_set_elem($s,$2,$23,$25);
    $26 = ((($elem_iter$12)) + 16|0);
    $elem_iter$1 = HEAP32[$26>>2]|0;
    $27 = ($elem_iter$1|0)==(0|0);
    if ($27) {
     break;
    } else {
     $elem_iter$12 = $elem_iter$1;
    }
   }
  }
  $28 = (($i$03) + 1)|0;
  $29 = HEAP32[$5>>2]|0;
  $30 = ($28>>>0)<($29>>>0);
  if ($30) {
   $i$03 = $28;
  } else {
   break;
  }
 }
 _lily_return_hash($s,$2);
 return;
}
function _lily_builtin_Hash_reject($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($s,0);
 return;
}
function _hash_select_reject_common($s,$expect) {
 $s = $s|0;
 $expect = $expect|0;
 var $$reg2mem51$0 = 0, $$reg2mem51$0$phi = 0, $$reg2mem55$0 = 0, $$reg2mem55$0$phi = 0, $$reg2mem62$0 = 0, $$reg2mem62$0$phi = 0, $$reg2mem82$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $cond = 0, $cond84 = 0, $cond85 = 0, $cond86 = 0, $cond87 = 0, $cond88 = 0, $cond89 = 0, $cond90 = 0, $cond91 = 0, $cond92 = 0, $cond93 = 0, $cond94 = 0;
 var $cond95 = 0, $cond96 = 0, $cond97 = 0, $cond98 = 0, $count$0$lcssa$reg2mem$0 = 0, $count$01$reg2mem78$0 = 0, $count$1$reg2mem76$0 = 0, $elem_iter$02$reg2mem80$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_iii(7,($s|0),0)|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = (threwValue); } else { $2 = -1; };
 $3 = tempRet0;
 $cond = ($2|0)==(1);
 if ($cond) {
  $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem62$0 = 0;$$reg2mem82$0 = $3;
 } else {
  __THREW__ = 0;
  $4 = (invoke_iii(8,($s|0),1)|0);
  $5 = __THREW__; __THREW__ = 0;
  if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = (threwValue); } else { $6 = -1; };
  $7 = tempRet0;
  $cond84 = ($6|0)==(1);
  if ($cond84) {
   $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem62$0 = 0;$$reg2mem82$0 = $7;
  } else {
   __THREW__ = 0;
   invoke_vii(37,($s|0),($4|0));
   $8 = __THREW__; __THREW__ = 0;
   if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = (threwValue); } else { $9 = -1; };
   $10 = tempRet0;
   $cond85 = ($9|0)==(1);
   if ($cond85) {
    $$reg2mem51$0 = 0;$$reg2mem55$0 = 0;$$reg2mem62$0 = 0;$$reg2mem82$0 = $10;
   } else {
    $11 = ((($0)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($s)) + 92|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii(2,($17|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
    $21 = tempRet0;
    $cond86 = ($20|0)==(1);
    if ($cond86) {
     $$reg2mem51$0 = $16;$$reg2mem55$0 = $13;$$reg2mem62$0 = $12;$$reg2mem82$0 = $21;
    } else {
     $22 = ((($18)) + 8|0);
     _setjmpTable = _saveSetjmp($22,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
     $25 = tempRet0;
     $cond87 = ($24|0)==(1);
     if ($cond87) {
      $$reg2mem51$0 = $16;$$reg2mem55$0 = $13;$$reg2mem62$0 = $12;$$reg2mem82$0 = $25;
     } else {
      $$reg2mem51$0 = $16;$$reg2mem55$0 = $13;$$reg2mem62$0 = $12;$$reg2mem82$0 = 0;
     }
    }
   }
  }
 }
 L7: while(1) {
  $26 = ($$reg2mem82$0|0)==(0);
  if (!($26)) {
   $75 = HEAP32[$$reg2mem55$0>>2]|0;
   $76 = (($75) + -1)|0;
   HEAP32[$$reg2mem55$0>>2] = $76;
   $77 = HEAP32[$$reg2mem51$0>>2]|0;
   __THREW__ = 0;
   invoke_vi(6,($77|0));
   $78 = __THREW__; __THREW__ = 0;
   if ((($78|0) != 0) & ((threwValue|0) != 0)) { $79 = _testSetjmp(HEAP32[$78>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($79|0) == 0) { _longjmp($78|0, threwValue|0); } tempRet0 = (threwValue); } else { $79 = -1; };
   $80 = tempRet0;
   $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $80;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  $27 = ($$reg2mem62$0|0)==(0|0);
  if ($27) {
   $count$0$lcssa$reg2mem$0 = 0;
  } else {
   $count$01$reg2mem78$0 = 0;$elem_iter$02$reg2mem80$0 = $$reg2mem62$0;
   while(1) {
    $28 = ((($elem_iter$02$reg2mem80$0)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($elem_iter$02$reg2mem80$0)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    invoke_vii(38,($s|0),($29|0));
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
    $34 = tempRet0;
    $cond88 = ($33|0)==(1);
    if ($cond88) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $34;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(38,($s|0),($31|0));
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
    $37 = tempRet0;
    $cond89 = ($36|0)==(1);
    if ($cond89) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $37;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(38,($s|0),($29|0));
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
    $40 = tempRet0;
    $cond90 = ($39|0)==(1);
    if ($cond90) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $40;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(38,($s|0),($31|0));
    $41 = __THREW__; __THREW__ = 0;
    if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = (threwValue); } else { $42 = -1; };
    $43 = tempRet0;
    $cond91 = ($42|0)==(1);
    if ($cond91) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $43;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    invoke_vii(39,($s|0),2);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
    $46 = tempRet0;
    $cond92 = ($45|0)==(1);
    if ($cond92) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $46;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    __THREW__ = 0;
    $47 = (invoke_ii(6,($s|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = (threwValue); } else { $49 = -1; };
    $50 = tempRet0;
    $cond93 = ($49|0)==(1);
    if ($cond93) {
     $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $50;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
     continue L7;
    }
    $51 = ($47|0)==($expect|0);
    if ($51) {
     $58 = (($count$01$reg2mem78$0) + 1)|0;
     $count$1$reg2mem76$0 = $58;
    } else {
     __THREW__ = 0;
     invoke_vi(12,($s|0));
     $52 = __THREW__; __THREW__ = 0;
     if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = (threwValue); } else { $53 = -1; };
     $54 = tempRet0;
     $cond94 = ($53|0)==(1);
     if ($cond94) {
      $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $54;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     __THREW__ = 0;
     invoke_vi(12,($s|0));
     $55 = __THREW__; __THREW__ = 0;
     if ((($55|0) != 0) & ((threwValue|0) != 0)) { $56 = _testSetjmp(HEAP32[$55>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($56|0) == 0) { _longjmp($55|0, threwValue|0); } tempRet0 = (threwValue); } else { $56 = -1; };
     $57 = tempRet0;
     $cond95 = ($56|0)==(1);
     if ($cond95) {
      $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $57;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
      continue L7;
     }
     $count$1$reg2mem76$0 = $count$01$reg2mem78$0;
    }
    $59 = ((($elem_iter$02$reg2mem80$0)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     $count$0$lcssa$reg2mem$0 = $count$1$reg2mem76$0;
     break;
    } else {
     $count$01$reg2mem78$0 = $count$1$reg2mem76$0;$elem_iter$02$reg2mem80$0 = $60;
    }
   }
  }
  __THREW__ = 0;
  $62 = (invoke_iii(9,($s|0),($count$0$lcssa$reg2mem$0|0))|0);
  $63 = __THREW__; __THREW__ = 0;
  if ((($63|0) != 0) & ((threwValue|0) != 0)) { $64 = _testSetjmp(HEAP32[$63>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($64|0) == 0) { _longjmp($63|0, threwValue|0); } tempRet0 = (threwValue); } else { $64 = -1; };
  $65 = tempRet0;
  $cond96 = ($64|0)==(1);
  if ($cond96) {
   $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $65;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  $66 = HEAP32[$$reg2mem55$0>>2]|0;
  $67 = (($66) + -1)|0;
  HEAP32[$$reg2mem55$0>>2] = $67;
  $68 = HEAP32[$$reg2mem51$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(10,($68|0));
  $69 = __THREW__; __THREW__ = 0;
  if ((($69|0) != 0) & ((threwValue|0) != 0)) { $70 = _testSetjmp(HEAP32[$69>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($70|0) == 0) { _longjmp($69|0, threwValue|0); } tempRet0 = (threwValue); } else { $70 = -1; };
  $71 = tempRet0;
  $cond97 = ($70|0)==(1);
  if ($cond97) {
   $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $71;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(40,($s|0),($62|0));
  $72 = __THREW__; __THREW__ = 0;
  if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = (threwValue); } else { $73 = -1; };
  $74 = tempRet0;
  $cond98 = ($73|0)==(1);
  if ($cond98) {
   $$reg2mem62$0$phi = $$reg2mem62$0;$$reg2mem55$0$phi = $$reg2mem55$0;$$reg2mem51$0$phi = $$reg2mem51$0;$$reg2mem82$0 = $74;$$reg2mem62$0 = $$reg2mem62$0$phi;$$reg2mem55$0 = $$reg2mem55$0$phi;$$reg2mem51$0 = $$reg2mem51$0$phi;
  } else {
   break;
  }
 }
 _free(_setjmpTable|0);
 return;
}
function _lily_builtin_Hash_select($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($s,1);
 return;
}
function _lily_builtin_Hash_size($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_hash($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_return_integer($s,$2,0);
 return;
}
function _lily_builtin_Integer_to_bool($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_integer($s,0)|0);
 $1 = tempRet0;
 $2 = ($0|0)!=(0);
 $3 = ($1|0)!=(0);
 $4 = $2 | $3;
 $5 = $4&1;
 _lily_return_boolean($s,$5);
 return;
}
function _lily_builtin_Integer_to_byte($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_integer($s,0)|0);
 $1 = tempRet0;
 $2 = $0&255;
 _lily_return_byte($s,$2);
 return;
}
function _lily_builtin_Integer_to_d($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_integer($s,0)|0);
 $1 = tempRet0;
 $2 = (+($0>>>0)) + (4294967296.0*(+($1|0)));
 _lily_return_double($s,$2);
 return;
}
function _lily_builtin_Integer_to_s($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $buffer = sp + 8|0;
 $0 = (_lily_arg_integer($s,0)|0);
 $1 = tempRet0;
 $2 = $vararg_buffer;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 (_snprintf($buffer,32,14184,$vararg_buffer)|0);
 $6 = (_lily_new_raw_string($buffer)|0);
 _lily_return_string($s,$6);
 STACKTOP = sp;return;
}
function _lily_builtin_List_clear($s) {
 $s = $s|0;
 var $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$lcssa1 = 0;
 } else {
  $4 = ((($0)) + 16|0);
  $i$02 = 0;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($i$02<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   _lily_deref($7);
   $8 = HEAP32[$4>>2]|0;
   $9 = (($8) + ($i$02<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_free($10);
   $11 = (($i$02) + 1)|0;
   $12 = HEAP32[$1>>2]|0;
   $13 = ($11>>>0)<($12>>>0);
   if ($13) {
    $i$02 = $11;
   } else {
    $$lcssa1 = $12;
    break;
   }
  }
 }
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($$lcssa1))|0;
 HEAP32[$14>>2] = $16;
 HEAP32[$1>>2] = 0;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_List_count($s) {
 $s = $s|0;
 var $$count$0 = 0, $$count$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $count$01 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$1);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $17 = 0;$18 = 0;
  _lily_return_integer($s,$17,$18);
  return;
 }
 $5 = ((($0)) + 16|0);
 $count$01 = 0;$i$02 = 0;
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($i$02<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_push_value($s,$8);
  _lily_exec_prepared($s,1);
  $9 = (_lily_result_boolean($s)|0);
  $10 = ($9|0)==(1);
  $11 = $10&1;
  $$count$0 = (($11) + ($count$01))|0;
  $12 = (($i$02) + 1)|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $count$01 = $$count$0;$i$02 = $12;
  } else {
   $$count$0$lcssa = $$count$0;
   break;
  }
 }
 $15 = ($$count$0$lcssa|0)<(0);
 $16 = $15 << 31 >> 31;
 $17 = $$count$0$lcssa;$18 = $16;
 _lily_return_integer($s,$17,$18);
 return;
}
function _lily_builtin_List_delete_at($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_integer($s,1)|0);
 $2 = tempRet0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _lily_error($s,24,14189);
 }
 $6 = (_get_relative_index($s,$0,$1,$2)|0);
 $7 = tempRet0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  _make_extra_space_in_list($0);
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($6<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_deref($14);
 _lily_free($14);
 $15 = HEAP32[$3>>2]|0;
 $16 = ($15|0)==($6|0);
 $17 = (0)==($7|0);
 $18 = $16 & $17;
 if ($18) {
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + -1)|0;
  HEAP32[$3>>2] = $27;
  $28 = HEAP32[$8>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$8>>2] = $29;
  return;
 }
 $19 = HEAP32[$11>>2]|0;
 $20 = (($19) + ($6<<2)|0);
 $21 = ((($20)) + 4|0);
 $22 = (_i64Subtract(($15|0),0,($6|0),($7|0))|0);
 $23 = tempRet0;
 $24 = (_bitshift64Shl(($22|0),($23|0),2)|0);
 $25 = tempRet0;
 _memmove(($20|0),($21|0),($24|0))|0;
 $26 = HEAP32[$3>>2]|0;
 $27 = (($26) + -1)|0;
 HEAP32[$3>>2] = $27;
 $28 = HEAP32[$8>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$8>>2] = $29;
 return;
}
function _get_relative_index($s,$list_val,$0,$1) {
 $s = $s|0;
 $list_val = $list_val|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = (_i64Subtract(0,0,($0|0),($1|0))|0);
  $4 = tempRet0;
  $5 = ((($list_val)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (0)<($4>>>0);
  $8 = ($6>>>0)<($3>>>0);
  $9 = (0)==($4|0);
  $10 = $9 & $8;
  $11 = $7 | $10;
  if ($11) {
   $12 = (_i64Subtract(0,0,($6|0),0)|0);
   $13 = tempRet0;
   $14 = $vararg_buffer;
   $15 = $14;
   HEAP32[$15>>2] = $0;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $1;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   $18 = $vararg_ptr1;
   $19 = $18;
   HEAP32[$19>>2] = $12;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = $13;
   _lily_error_fmt($s,24,14223,$vararg_buffer);
  }
  $22 = HEAP32[$5>>2]|0;
  $23 = (_i64Add(($22|0),0,($0|0),($1|0))|0);
  $24 = tempRet0;
  $36 = $24;$37 = $23;
  tempRet0 = ($36);
  STACKTOP = sp;return ($37|0);
 } else {
  $25 = ((($list_val)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (0)<($1|0);
  $28 = ($26>>>0)<($0>>>0);
  $29 = (0)==($1|0);
  $30 = $29 & $28;
  $31 = $27 | $30;
  if (!($31)) {
   $36 = $1;$37 = $0;
   tempRet0 = ($36);
   STACKTOP = sp;return ($37|0);
  }
  $32 = $vararg_buffer2;
  $33 = $32;
  HEAP32[$33>>2] = $0;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $1;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $26;
  _lily_error_fmt($s,24,14268,$vararg_buffer2);
  $36 = $1;$37 = $0;
  tempRet0 = ($36);
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _make_extra_space_in_list($lv) {
 $lv = $lv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lv)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8)|0;
 $3 = $2 >>> 2;
 $4 = ((($lv)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($1))|0;
 $7 = $6 << 2;
 $8 = (_lily_realloc($5,$7)|0);
 HEAP32[$4>>2] = $8;
 $9 = ((($lv)) + 4|0);
 HEAP32[$9>>2] = $3;
 return;
}
function _lily_builtin_List_each($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$1);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_return_list($s,$0);
  return;
 }
 $5 = ((($0)) + 16|0);
 $i$01 = 0;
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_push_value($s,$8);
  _lily_exec_prepared($s,1);
  $9 = (($i$01) + 1)|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if ($11) {
   $i$01 = $9;
  } else {
   break;
  }
 }
 _lily_return_list($s,$0);
 return;
}
function _lily_builtin_List_each_index($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$1);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_return_list($s,$0);
  return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = ($i$01|0)<(0);
  $6 = $5 << 31 >> 31;
  _lily_push_integer($s,$i$01,$6);
  _lily_exec_prepared($s,1);
  $7 = (($i$01) + 1)|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $i$01 = $7;
  } else {
   break;
  }
 }
 _lily_return_list($s,$0);
 return;
}
function _lily_builtin_List_fill($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_lily_arg_integer($s,0)|0);
 $1 = tempRet0;
 $2 = ($0|0)<(0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = $0;
  _lily_error_fmt($s,23,14313,$vararg_buffer);
 }
 $3 = (_lily_arg_value($s,1)|0);
 $4 = (_lily_new_list_val_n($0)|0);
 $5 = ($0|0)>(0);
 if (!($5)) {
  _lily_return_list($s,$4);
  STACKTOP = sp;return;
 }
 $6 = ((($4)) + 16|0);
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($i$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_assign_value($9,$3);
  $10 = (($i$01) + 1)|0;
  $exitcond = ($10|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $10;
  }
 }
 _lily_return_list($s,$4);
 STACKTOP = sp;return;
}
function _lily_builtin_List_fold($s) {
 $s = $s|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_return_value($s,$1);
  return;
 }
 $5 = (_lily_arg_function($s,2)|0);
 _lily_prepare_call($s,$5);
 _lily_push_value($s,$1);
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 _lily_push_value($s,$8);
 _lily_exec_prepared($s,2);
 $9 = (_lily_result_value($s)|0);
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(1);
 if ($11) {
  $$lcssa = $9;
 } else {
  $12 = $9;$i$01 = 0;
  while(1) {
   _lily_push_value($s,$12);
   $13 = (($i$01) + 1)|0;
   $14 = HEAP32[$6>>2]|0;
   $15 = (($14) + ($13<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_push_value($s,$16);
   _lily_exec_prepared($s,2);
   $17 = (_lily_result_value($s)|0);
   $18 = HEAP32[$2>>2]|0;
   $19 = (($18) + -1)|0;
   $20 = ($13|0)==($19|0);
   if ($20) {
    $$lcssa = $17;
    break;
   } else {
    $12 = $17;$i$01 = $13;
   }
  }
 }
 _lily_return_value($s,$$lcssa);
 return;
}
function _lily_builtin_List_insert($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_integer($s,1)|0);
 $2 = tempRet0;
 $3 = (_lily_arg_value($s,2)|0);
 $4 = (_get_relative_index($s,$0,$1,$2)|0);
 $5 = tempRet0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  _make_extra_space_in_list($0);
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==($4|0);
 $12 = (0)==($5|0);
 $13 = $11 & $12;
 if (!($13)) {
  $14 = ((($0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($4<<2)|0);
  $17 = ((($16)) + 4|0);
  $18 = (_i64Subtract(($10|0),0,($4|0),($5|0))|0);
  $19 = tempRet0;
  $20 = (_bitshift64Shl(($18|0),($19|0),2)|0);
  $21 = tempRet0;
  _memmove(($17|0),($16|0),($20|0))|0;
 }
 $22 = (_lily_copy_value($3)|0);
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($4<<2)|0);
 HEAP32[$25>>2] = $22;
 $26 = HEAP32[$9>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$9>>2] = $27;
 $28 = HEAP32[$6>>2]|0;
 $29 = (($28) + -1)|0;
 HEAP32[$6>>2] = $29;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_List_join($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $delim$0 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_count($s)|0);
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = (_lily_arg_string_raw($s,1)|0);
  $delim$0 = $3;
 } else {
  $delim$0 = 18083;
 }
 $4 = ((($s)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_mb_flush($5);
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($7) + -1)|0;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)>(0);
  $13 = HEAP32[$11>>2]|0;
  _lily_mb_add_value($5,$s,$13);
  if ($12) {
   $14 = (($7) + -1)|0;
   $i$01 = 0;
   while(1) {
    _lily_mb_add($5,$delim$0);
    $15 = (($i$01) + 1)|0;
    $16 = (($11) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    _lily_mb_add_value($5,$s,$17);
    $exitcond = ($15|0)==($14|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $15;
    }
   }
  }
 }
 $18 = (_lily_mb_get($5)|0);
 $19 = (_lily_new_raw_string($18)|0);
 _lily_return_string($s,$19);
 return;
}
function _lily_builtin_List_map($s) {
 $s = $s|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $i$12$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$1);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_lily_new_list_val_n(0)|0);
  $28 = $5;
  _lily_return_list($s,$28);
  return;
 }
 $6 = ((($0)) + 16|0);
 $i$03 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($i$03<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_push_value($s,$9);
  _lily_exec_prepared($s,1);
  $10 = (_lily_result_value($s)|0);
  _lily_push_value($s,$10);
  $11 = (($i$03) + 1)|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$03 = $11;
  } else {
   $$lcssa = $11;$i$03$lcssa = $i$03;
   break;
  }
 }
 $14 = (_lily_new_list_val_n($$lcssa)|0);
 $15 = ($i$03$lcssa|0)>(-1);
 if (!($15)) {
  $28 = $14;
  _lily_return_list($s,$28);
  return;
 }
 $16 = ((($s)) + 12|0);
 $17 = ((($14)) + 16|0);
 $18 = ((($s)) + 4|0);
 $i$12$in = $$lcssa;
 while(1) {
  $i$12 = (($i$12$in) + -1)|0;
  $19 = HEAP32[$16>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$16>>2] = $20;
  $21 = HEAP32[$17>>2]|0;
  $22 = (($21) + ($i$12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($20<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  _lily_assign_value($23,$26);
  $27 = ($i$12$in|0)>(1);
  if ($27) {
   $i$12$in = $i$12;
  } else {
   $28 = $14;
   break;
  }
 }
 _lily_return_list($s,$28);
 return;
}
function _lily_builtin_List_pop($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_error($s,24,14351);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_return_value_noref($s,$9);
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = HEAP32[$6>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_free($14);
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$1>>2] = $16;
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 return;
}
function _lily_builtin_List_push($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _make_extra_space_in_list($0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_copy_value($1)|0);
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6<<2)|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$5>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$5>>2] = $12;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$2>>2] = $14;
 _lily_return_unit($s);
 return;
}
function _lily_builtin_List_reject($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($s,0);
 return;
}
function _list_select_reject_common($s,$expect) {
 $s = $s|0;
 $expect = $expect|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $n$04 = 0, $n$1 = 0, $n$1$lcssa = 0, $n$22 = 0, $n$22$in = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_function($s,1)|0);
 _lily_prepare_call($s,$1);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_lily_new_list_val_n(0)|0);
  $33 = $5;
  _lily_return_list($s,$33);
  return;
 }
 $6 = ((($0)) + 16|0);
 $i$03 = 0;$n$04 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($i$03<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_push_value($s,$9);
  _lily_exec_prepared($s,1);
  $10 = (_lily_result_boolean($s)|0);
  $11 = ($10|0)==($expect|0);
  if ($11) {
   $12 = HEAP32[$6>>2]|0;
   $13 = (($12) + ($i$03<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   _lily_push_value($s,$14);
   $15 = (($n$04) + 1)|0;
   $n$1 = $15;
  } else {
   $n$1 = $n$04;
  }
  $16 = (($i$03) + 1)|0;
  $17 = HEAP32[$2>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  if ($18) {
   $i$03 = $16;$n$04 = $n$1;
  } else {
   $n$1$lcssa = $n$1;
   break;
  }
 }
 $19 = (_lily_new_list_val_n($n$1$lcssa)|0);
 $20 = ($n$1$lcssa|0)>(0);
 if (!($20)) {
  $33 = $19;
  _lily_return_list($s,$33);
  return;
 }
 $21 = ((($s)) + 12|0);
 $22 = ((($19)) + 16|0);
 $23 = ((($s)) + 4|0);
 $n$22$in = $n$1$lcssa;
 while(1) {
  $n$22 = (($n$22$in) + -1)|0;
  $24 = HEAP32[$21>>2]|0;
  $25 = (($24) + -1)|0;
  HEAP32[$21>>2] = $25;
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + ($n$22<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$23>>2]|0;
  $30 = (($29) + ($25<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_assign_value($28,$31);
  $32 = ($n$22$in|0)>(1);
  if ($32) {
   $n$22$in = $n$22;
  } else {
   $33 = $19;
   break;
  }
 }
 _lily_return_list($s,$33);
 return;
}
function _lily_builtin_List_select($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($s,1);
 return;
}
function _lily_builtin_List_size($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_return_integer($s,$2,0);
 return;
}
function _lily_builtin_List_shift($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_error($s,24,14375);
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 _lily_return_value_noref($s,$6);
 $7 = HEAP32[$4>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 _lily_free($8);
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)==(1);
 if (!($10)) {
  $11 = HEAP32[$4>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = $9 << 2;
  $14 = (($13) + -4)|0;
  _memmove(($11|0),($12|0),($14|0))|0;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$1>>2] = $16;
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 return;
}
function _lily_builtin_List_unshift($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _make_extra_space_in_list($0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($0)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = $6 << 2;
  _memmove(($10|0),($9|0),($11|0))|0;
 }
 $12 = (_lily_copy_value($1)|0);
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$14>>2] = $12;
 $15 = HEAP32[$5>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$5>>2] = $16;
 $17 = HEAP32[$2>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$2>>2] = $18;
 return;
}
function _lily_builtin_Option_and($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_class_id($s,0)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = (_lily_arg_value($s,1)|0);
  _lily_return_value($s,$2);
  return;
 } else {
  $3 = (_lily_arg_value($s,0)|0);
  _lily_return_value($s,$3);
  return;
 }
}
function _lily_builtin_Option_and_then($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  $3 = (_lily_instance_value($2,0)|0);
  _lily_push_value($s,$3);
  $4 = (_lily_arg_function($s,1)|0);
  _lily_exec_simple($s,$4,1);
  $5 = (_lily_result_value($s)|0);
  _lily_return_value($s,$5);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($s,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_is_none($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_class_id($s,0)|0);
 $1 = ($0|0)==(15);
 $2 = $1&1;
 _lily_return_boolean($s,$2);
 return;
}
function _lily_builtin_Option_is_some($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_class_id($s,0)|0);
 $1 = ($0|0)==(14);
 $2 = $1&1;
 _lily_return_boolean($s,$2);
 return;
}
function _lily_builtin_Option_map($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  $3 = (_lily_instance_value($2,0)|0);
  _lily_push_value($s,$3);
  $4 = (_lily_arg_function($s,1)|0);
  _lily_exec_simple($s,$4,1);
  $5 = (_lily_new_enum_n(1)|0);
  $6 = (_lily_result_value($s)|0);
  _lily_variant_set_value($5,0,$6);
  _lily_return_filled_variant($s,14,$5);
  STACKTOP = sp;return;
 } else {
  _lily_return_empty_variant($s,15);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_or($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  _lily_return_filled_variant($s,14,$2);
  STACKTOP = sp;return;
 } else {
  $3 = (_lily_arg_value($s,1)|0);
  _lily_return_value($s,$3);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_or_else($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  _lily_return_filled_variant($s,14,$2);
  STACKTOP = sp;return;
 } else {
  $3 = (_lily_arg_function($s,1)|0);
  _lily_exec_simple($s,$3,0);
  _lily_result_return($s);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_unwrap($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  $3 = (_lily_instance_value($2,0)|0);
  _lily_return_value($s,$3);
  STACKTOP = sp;return;
 } else {
  _lily_error($s,23,14399);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_unwrap_or($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $optval = 0, $source$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_value($s,1)|0);
 $1 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $2 = ($1|0)==(14);
 if ($2) {
  $3 = HEAP32[$optval>>2]|0;
  $4 = (_lily_instance_value($3,0)|0);
  $source$0 = $4;
 } else {
  $source$0 = $0;
 }
 _lily_return_value($s,$source$0);
 STACKTOP = sp;return;
}
function _lily_builtin_Option_unwrap_or_else($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $optval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $optval = sp;
 $0 = (_lily_arg_instance_for_id($s,0,$optval)|0);
 $1 = ($0|0)==(14);
 if ($1) {
  $2 = HEAP32[$optval>>2]|0;
  $3 = (_lily_instance_value($2,0)|0);
  _lily_return_value($s,$3);
  STACKTOP = sp;return;
 } else {
  $4 = (_lily_arg_function($s,1)|0);
  _lily_exec_simple($s,$4,0);
  $5 = (_lily_result_value($s)|0);
  _lily_return_value($s,$5);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_String_ends_with($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $input_i$0 = 0, $input_i$0$in = 0, $ok$0 = 0, $suffix_i$0 = 0, $suffix_i$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>($11|0);
 if ($14) {
  _lily_return_boolean($s,0);
  return;
 } else {
  $input_i$0$in = $11;$suffix_i$0$in = $13;
 }
 while(1) {
  $suffix_i$0 = (($suffix_i$0$in) + -1)|0;
  $input_i$0 = (($input_i$0$in) + -1)|0;
  $15 = ($suffix_i$0$in|0)>(0);
  if (!($15)) {
   $ok$0 = 1;
   break;
  }
  $16 = (($5) + ($input_i$0)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (($9) + ($suffix_i$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($17<<24>>24)==($19<<24>>24);
  if ($20) {
   $input_i$0$in = $input_i$0;$suffix_i$0$in = $suffix_i$0;
  } else {
   $ok$0 = 0;
   break;
  }
 }
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_find($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$0829 = 0, $j$06 = 0, $j$06$in = 0, $k$05 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($7|0)<($13|0);
 $15 = ($13|0)==(0);
 $or$cond = $14 | $15;
 if ($or$cond) {
  _lily_return_empty_variant($s,15);
  return;
 }
 $16 = (($7) - ($13))|0;
 $17 = HEAP8[$11>>0]|0;
 $18 = ($16|0)<(0);
 L5: do {
  if (!($18)) {
   $19 = ($13|0)>(1);
   $i$08 = 0;
   L7: while(1) {
    $20 = (($5) + ($i$08)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==($17<<24>>24);
    L9: do {
     if ($22) {
      if ($19) {
       $j$06$in = $i$08;$k$05 = 1;
      } else {
       $i$0829 = $i$08;
       break L7;
      }
      while(1) {
       $j$06 = (($j$06$in) + 1)|0;
       $25 = (($5) + ($j$06)|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = (($11) + ($k$05)|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = ($26<<24>>24)==($28<<24>>24);
       $23 = (($k$05) + 1)|0;
       if (!($29)) {
        break L9;
       }
       $24 = ($23|0)<($13|0);
       if ($24) {
        $j$06$in = $j$06;$k$05 = $23;
       } else {
        $i$0829 = $i$08;
        break L7;
       }
      }
     }
    } while(0);
    $30 = (($i$08) + 1)|0;
    $31 = ($i$08|0)<($16|0);
    if ($31) {
     $i$08 = $30;
    } else {
     break L5;
    }
   }
   $32 = (_lily_new_enum_n(1)|0);
   $33 = ($i$0829|0)<(0);
   $34 = $33 << 31 >> 31;
   _lily_variant_set_integer($32,0,$i$0829,$34);
   _lily_return_filled_variant($s,14,$32);
   return;
  }
 } while(0);
 _lily_return_empty_variant($s,15);
 return;
}
function _lily_maybe_html_encode_to_buffer($s,$input) {
 $s = $s|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $ch$0$lcssa = 0, $start$0 = 0, $start$0$lcssa = 0, $start$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_get_msgbuf($s)|0);
 $1 = ((($input)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = $4;
 $7 = $4;
 $ch$0 = $4;$start$0 = 0;
 L1: while(1) {
  $8 = HEAP8[$ch$0>>0]|0;
  switch ($8<<24>>24) {
  case 0:  {
   $ch$0$lcssa = $ch$0;$start$0$lcssa = $start$0;
   break L1;
   break;
  }
  case 38:  {
   $9 = $ch$0;
   $10 = (($9) - ($5))|0;
   _lily_mb_add_range($0,$4,$start$0,$10);
   _lily_mb_add($0,14422);
   $11 = (($10) + 1)|0;
   $start$1 = $11;
   break;
  }
  case 60:  {
   $12 = $ch$0;
   $13 = (($12) - ($6))|0;
   _lily_mb_add_range($0,$4,$start$0,$13);
   _lily_mb_add($0,14428);
   $14 = (($13) + 1)|0;
   $start$1 = $14;
   break;
  }
  case 62:  {
   $15 = $ch$0;
   $16 = (($15) - ($7))|0;
   _lily_mb_add_range($0,$4,$start$0,$16);
   _lily_mb_add($0,14433);
   $17 = (($16) + 1)|0;
   $start$1 = $17;
   break;
  }
  default: {
   $start$1 = $start$0;
  }
  }
  $18 = ((($ch$0)) + 1|0);
  $ch$0 = $18;$start$0 = $start$1;
 }
 $19 = ($start$0$lcssa|0)==(0);
 if ($19) {
  return ($start$0$lcssa|0);
 }
 $20 = $ch$0$lcssa;
 $21 = $4;
 $22 = (($20) - ($21))|0;
 _lily_mb_add_range($0,$4,$start$0$lcssa,$22);
 return ($start$0$lcssa|0);
}
function _lily_builtin_String_html_encode($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_maybe_html_encode_to_buffer($s,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_value($s,$0);
  return;
 } else {
  $3 = ((($s)) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_lily_mb_get($4)|0);
  $6 = (_lily_new_raw_string($5)|0);
  _lily_return_string($s,$6);
  return;
 }
}
function _lily_builtin_String_is_alnum($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_string_length($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_boolean($s,0);
  return;
 }
 $3 = (_lily_string_get_raw($0)|0);
 $4 = ($1|0)>(0);
 L5: do {
  if ($4) {
   $i$01 = 0;
   while(1) {
    $7 = (($3) + ($i$01)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = (_isalnum($9)|0);
    $11 = ($10|0)==(0);
    $5 = (($i$01) + 1)|0;
    if ($11) {
     $ok$0 = 0;
     break L5;
    }
    $6 = ($5|0)<($1|0);
    if ($6) {
     $i$01 = $5;
    } else {
     $ok$0 = 1;
     break;
    }
   }
  } else {
   $ok$0 = 1;
  }
 } while(0);
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_is_alpha($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_string_length($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_boolean($s,0);
  return;
 }
 $3 = (_lily_string_get_raw($0)|0);
 $4 = ($1|0)>(0);
 L5: do {
  if ($4) {
   $i$01 = 0;
   while(1) {
    $7 = (($3) + ($i$01)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = (_isalpha($9)|0);
    $11 = ($10|0)==(0);
    $5 = (($i$01) + 1)|0;
    if ($11) {
     $ok$0 = 0;
     break L5;
    }
    $6 = ($5|0)<($1|0);
    if ($6) {
     $i$01 = $5;
    } else {
     $ok$0 = 1;
     break;
    }
   }
  } else {
   $ok$0 = 1;
  }
 } while(0);
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_is_digit($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $isdigit = 0, $isdigittmp = 0, $ok$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_string_length($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_boolean($s,0);
  return;
 }
 $3 = (_lily_string_get_raw($0)|0);
 $4 = ($1|0)>(0);
 L5: do {
  if ($4) {
   $i$01 = 0;
   while(1) {
    $7 = (($3) + ($i$01)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    $isdigittmp = (($9) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $5 = (($i$01) + 1)|0;
    if (!($isdigit)) {
     $ok$0 = 0;
     break L5;
    }
    $6 = ($5|0)<($1|0);
    if ($6) {
     $i$01 = $5;
    } else {
     $ok$0 = 1;
     break;
    }
   }
  } else {
   $ok$0 = 1;
  }
 } while(0);
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_is_space($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_string_length($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_boolean($s,0);
  return;
 }
 $3 = (_lily_string_get_raw($0)|0);
 $4 = ($1|0)>(0);
 L5: do {
  if ($4) {
   $i$01 = 0;
   while(1) {
    $7 = (($3) + ($i$01)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    $5 = (($i$01) + 1)|0;
    if ($11) {
     $ok$0 = 0;
     break L5;
    }
    $6 = ($5|0)<($1|0);
    if ($6) {
     $i$01 = $5;
    } else {
     $ok$0 = 1;
     break;
    }
   }
  } else {
   $ok$0 = 1;
  }
 } while(0);
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_lower($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_make_sv($5)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $i$01 = 0;
 } else {
  $25 = (($8) + ($13)|0);
  HEAP8[$25>>0] = 0;
  _lily_return_string($s,$6);
  return;
 }
 while(1) {
  $15 = (($11) + ($i$01)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isupper($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $23 = (($8) + ($i$01)|0);
   HEAP8[$23>>0] = $16;
  } else {
   $20 = (_tolower($17)|0);
   $21 = $20&255;
   $22 = (($8) + ($i$01)|0);
   HEAP8[$22>>0] = $21;
  }
  $24 = (($i$01) + 1)|0;
  $exitcond = ($24|0)==($13|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $24;
  }
 }
 $25 = (($8) + ($13)|0);
 HEAP8[$25>>0] = 0;
 _lily_return_string($s,$6);
 return;
}
function _make_sv($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc($size)|0);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($size) + -1)|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$0>>2] = 0;
 return ($0|0);
}
function _lily_builtin_String_lstrip($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy_from$0 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($8)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_strlen($13)|0);
   $15 = ($14|0)>(0);
   L4: do {
    if ($15) {
     $i$01 = 0;
     while(1) {
      $18 = (($13) + ($i$01)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)<(0);
      $16 = (($i$01) + 1)|0;
      if ($20) {
       break;
      }
      $17 = ($16|0)<($14|0);
      if ($17) {
       $i$01 = $16;
      } else {
       label = 7;
       break L4;
      }
     }
     $22 = (_lstrip_utf8_start($0,$8)|0);
     $copy_from$0 = $22;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $21 = (_lstrip_ascii_start($0,$8)|0);
    $copy_from$0 = $21;
   }
   $23 = HEAP32[$2>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (1 - ($copy_from$0))|0;
   $27 = (($26) + ($25))|0;
   $28 = (_make_sv($27)|0);
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($copy_from$0)|0);
   (_strcpy($30,$34)|0);
   _lily_return_string($s,$28);
   return;
  }
 }
 _lily_return_value($s,$0);
 return;
}
function _lstrip_ascii_start($input_arg,$strip_sv) {
 $input_arg = $input_arg|0;
 $strip_sv = $strip_sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$112 = 0, $i$2 = 0, $j$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($input_arg)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($strip_sv)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 $9 = ((($strip_sv)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $13 = HEAP8[$10>>0]|0;
  $14 = ($5|0)>(0);
  if ($14) {
   $i$04 = 0;
  } else {
   $i$2 = 0;
   return ($i$2|0);
  }
  while(1) {
   $15 = (($3) + ($i$04)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==($13<<24>>24);
   if (!($17)) {
    $i$2 = $i$04;
    label = 11;
    break;
   }
   $18 = (($i$04) + 1)|0;
   $19 = ($18|0)<($5|0);
   if ($19) {
    $i$04 = $18;
   } else {
    $i$2 = $18;
    label = 11;
    break;
   }
  }
  if ((label|0) == 11) {
   return ($i$2|0);
  }
 }
 $11 = ($5|0)>(0);
 if (!($11)) {
  $i$2 = 0;
  return ($i$2|0);
 }
 $12 = ($7|0)>(0);
 $i$112 = 0;
 L15: while(1) {
  $20 = (($3) + ($i$112)|0);
  $21 = HEAP8[$20>>0]|0;
  if ($12) {
   $j$07 = 0;
  } else {
   $i$2 = $i$112;
   label = 11;
   break;
  }
  while(1) {
   $24 = (($10) + ($j$07)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($21<<24>>24)==($25<<24>>24);
   $22 = (($j$07) + 1)|0;
   if ($26) {
    break;
   }
   $23 = ($22|0)<($7|0);
   if ($23) {
    $j$07 = $22;
   } else {
    $i$2 = $i$112;
    label = 11;
    break L15;
   }
  }
  $27 = (($i$112) + 1)|0;
  $28 = ($27|0)<($5|0);
  if ($28) {
   $i$112 = $27;
  } else {
   $i$2 = $27;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($i$2|0);
 }
 return (0)|0;
}
function _lstrip_utf8_start($input_arg,$strip_sv) {
 $input_arg = $input_arg|0;
 $strip_sv = $strip_sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$010 = 0, $i$1$ph = 0, $i$3 = 0, $j$09 = 0, $j$1 = 0, $k$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($input_arg)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($strip_sv)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($strip_sv)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP8[$7>>0]|0;
 $11 = $10&255;
 $12 = (14438 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==($9|0);
 if (!($15)) {
  $i$1$ph = 0;
  L2: while(1) {
   $54 = (($3) + ($i$1$ph)|0);
   $34 = HEAP8[$54>>0]|0;
   $j$1 = 0;
   L4: while(1) {
    $32 = (($7) + ($j$1)|0);
    $33 = HEAP8[$32>>0]|0;
    $35 = ($34<<24>>24)==($33<<24>>24);
    L6: do {
     if ($35) {
      $36 = $33&255;
      $37 = (14438 + ($36)|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = (($36) + -194)|0;
      $41 = ($40>>>0)<(51);
      if ($41) {
       $k$015 = 1;
      } else {
       $52 = $39;
       break L4;
      }
      while(1) {
       $44 = (($k$015) + ($i$1$ph))|0;
       $45 = (($3) + ($44)|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = (($k$015) + ($j$1))|0;
       $48 = (($7) + ($47)|0);
       $49 = HEAP8[$48>>0]|0;
       $50 = ($46<<24>>24)==($49<<24>>24);
       $42 = (($k$015) + 1)|0;
       if (!($50)) {
        break L6;
       }
       $43 = ($42|0)<($39|0);
       if ($43) {
        $k$015 = $42;
       } else {
        $52 = $39;
        break L4;
       }
      }
     }
    } while(0);
    $55 = HEAP8[$32>>0]|0;
    $56 = $55&255;
    $57 = (14438 + ($56)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58 << 24 >> 24;
    $60 = (($59) + ($j$1))|0;
    $61 = ($60|0)==($9|0);
    if ($61) {
     $i$3 = $i$1$ph;
     label = 16;
     break L2;
    } else {
     $j$1 = $60;
    }
   }
   $51 = (($52) + ($i$1$ph))|0;
   $53 = ($51|0)<($5|0);
   if ($53) {
    $i$1$ph = $51;
   } else {
    $i$3 = $51;
    label = 16;
    break;
   }
  }
  if ((label|0) == 16) {
   return ($i$3|0);
  }
 }
 $16 = ($5|0)>(0);
 if (!($16)) {
  $i$3 = 0;
  return ($i$3|0);
 }
 $17 = (($11) + -194)|0;
 $18 = ($17>>>0)<(51);
 $i$010 = 0;
 L20: while(1) {
  $19 = (($3) + ($i$010)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==($10<<24>>24);
  if (!($21)) {
   $i$3 = $i$010;
   label = 16;
   break;
  }
  if ($18) {
   $j$09 = 1;
   while(1) {
    $24 = (($j$09) + ($i$010))|0;
    $25 = (($3) + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = (($7) + ($j$09)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($26<<24>>24)==($28<<24>>24);
    $22 = (($j$09) + 1)|0;
    if (!($29)) {
     $i$3 = $i$010;
     label = 16;
     break L20;
    }
    $23 = ($22|0)<($14|0);
    if ($23) {
     $j$09 = $22;
    } else {
     break;
    }
   }
  }
  $30 = (($i$010) + ($14))|0;
  $31 = ($30|0)<($5|0);
  if ($31) {
   $i$010 = $30;
  } else {
   $i$3 = $30;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return ($i$3|0);
 }
 return (0)|0;
}
function _lily_builtin_String_parse_i($s) {
 $s = $s|0;
 var $$lcssa15 = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$off = 0, $$off6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $input$0 = 0, $input$0$pn = 0, $input$1 = 0, $input$2$ph = 0, $input$29 = 0, $is_negative$0 = 0, $leading_zeroes$0$ph = 0, $or$cond3 = 0, $or$cond4 = 0;
 var $rounds$0$lcssa16 = 0, $rounds$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_string_raw($s,0)|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 45:  {
  $2 = ((($0)) + 1|0);
  $input$0 = $2;$is_negative$0 = 1;
  break;
 }
 case 43:  {
  $3 = ((($0)) + 1|0);
  $input$0 = $3;$is_negative$0 = 0;
  break;
 }
 default: {
  $input$0 = $0;$is_negative$0 = 0;
 }
 }
 $4 = HEAP8[$input$0>>0]|0;
 $5 = ($4<<24>>24)==(48);
 if ($5) {
  $input$0$pn = $input$0;
  while(1) {
   $input$1 = ((($input$0$pn)) + 1|0);
   $6 = HEAP8[$input$1>>0]|0;
   $7 = ($6<<24>>24)==(48);
   if ($7) {
    $input$0$pn = $input$1;
   } else {
    $input$2$ph = $input$1;$leading_zeroes$0$ph = 1;
    break;
   }
  }
 } else {
  $input$2$ph = $input$0;$leading_zeroes$0$ph = 0;
 }
 $8 = HEAP8[$input$2$ph>>0]|0;
 $$off6 = (($8) + -48)<<24>>24;
 $9 = ($$off6&255)<(10);
 if ($9) {
  $10 = 0;$11 = 0;$15 = $8;$input$29 = $input$2$ph;$rounds$08 = 0;
  while(1) {
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = tempRet0;
   $14 = $15 << 24 >> 24;
   $16 = (($14) + -48)|0;
   $17 = ($16|0)<(0);
   $18 = $17 << 31 >> 31;
   $19 = (_i64Add(($16|0),($18|0),($12|0),($13|0))|0);
   $20 = tempRet0;
   $21 = ((($input$29)) + 1|0);
   $22 = (($rounds$08) + 1)|0;
   $23 = HEAP8[$21>>0]|0;
   $$off = (($23) + -48)<<24>>24;
   $24 = ($$off&255)<(10);
   $25 = ($22|0)!=(20);
   $or$cond4 = $25 & $24;
   if ($or$cond4) {
    $10 = $19;$11 = $20;$15 = $23;$input$29 = $21;$rounds$08 = $22;
   } else {
    $$lcssa24 = $22;$$lcssa25 = $23;$28 = $20;$30 = $19;
    break;
   }
  }
  $26 = (_i64Add(($is_negative$0|0),0,-1,2147483647)|0);
  $27 = tempRet0;
  $29 = ($28>>>0)>($27>>>0);
  $31 = ($30>>>0)>($26>>>0);
  $32 = ($28|0)==($27|0);
  $33 = $32 & $31;
  $34 = $29 | $33;
  if (!($34)) {
   $$lcssa15 = $$lcssa25;$39 = $30;$40 = $28;$rounds$0$lcssa16 = $$lcssa24;
   label = 9;
  }
 } else {
  $$lcssa15 = $8;$39 = 0;$40 = 0;$rounds$0$lcssa16 = 0;
  label = 9;
 }
 if ((label|0) == 9) {
  $35 = ($$lcssa15<<24>>24)!=(0);
  $36 = $leading_zeroes$0$ph | $rounds$0$lcssa16;
  $37 = ($36|0)==(0);
  $or$cond3 = $37 | $35;
  if (!($or$cond3)) {
   $38 = ($is_negative$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = tempRet0;
   $43 = $38 ? $39 : $41;
   $44 = $38 ? $40 : $42;
   $45 = (_lily_new_enum_n(1)|0);
   _lily_variant_set_integer($45,0,$43,$44);
   _lily_return_filled_variant($s,14,$45);
   return;
  }
 }
 _lily_return_empty_variant($s,15);
 return;
}
function _lily_builtin_String_rstrip($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy_to$0 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($8)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_strlen($13)|0);
   $15 = ($14|0)>(0);
   L4: do {
    if ($15) {
     $i$01 = 0;
     while(1) {
      $18 = (($13) + ($i$01)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)<(0);
      $16 = (($i$01) + 1)|0;
      if ($20) {
       break;
      }
      $17 = ($16|0)<($14|0);
      if ($17) {
       $i$01 = $16;
      } else {
       label = 7;
       break L4;
      }
     }
     $22 = (_rstrip_utf8_stop($0,$8)|0);
     $copy_to$0 = $22;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $21 = (_rstrip_ascii_stop($0,$8)|0);
    $copy_to$0 = $21;
   }
   $23 = (($copy_to$0) + 1)|0;
   $24 = (_make_sv($23)|0);
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$2>>2]|0;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   (_strncpy($26,$29,$copy_to$0)|0);
   $30 = HEAP32[$25>>2]|0;
   $31 = (($30) + ($copy_to$0)|0);
   HEAP8[$31>>0] = 0;
   _lily_return_string($s,$24);
   return;
  }
 }
 _lily_return_value($s,$0);
 return;
}
function _rstrip_ascii_stop($input_arg,$strip_sv) {
 $input_arg = $input_arg|0;
 $strip_sv = $strip_sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $i$1 = 0, $i$17 = 0, $i$18 = 0, $i$2 = 0, $j$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($input_arg)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($strip_sv)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 $9 = ((($strip_sv)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 L1: do {
  if ($8) {
   $13 = HEAP8[$10>>0]|0;
   $i$0$in = $5;
   while(1) {
    $i$0 = (($i$0$in) + -1)|0;
    $14 = ($i$0$in|0)>(0);
    if (!($14)) {
     $i$2 = $i$0;
     break L1;
    }
    $15 = (($3) + ($i$0)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($13<<24>>24);
    if ($17) {
     $i$0$in = $i$0;
    } else {
     $i$2 = $i$0;
     break;
    }
   }
  } else {
   $i$17 = (($5) + -1)|0;
   $11 = ($5|0)>(0);
   if ($11) {
    $12 = ($7|0)>(0);
    $i$18 = $i$17;
    while(1) {
     $19 = (($3) + ($i$18)|0);
     $20 = HEAP8[$19>>0]|0;
     if ($12) {
      $j$04 = 0;
     } else {
      $i$2 = $i$18;
      break L1;
     }
     while(1) {
      $23 = (($10) + ($j$04)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($20<<24>>24)==($24<<24>>24);
      $21 = (($j$04) + 1)|0;
      if ($25) {
       break;
      }
      $22 = ($21|0)<($7|0);
      if ($22) {
       $j$04 = $21;
      } else {
       $i$2 = $i$18;
       break L1;
      }
     }
     $i$1 = (($i$18) + -1)|0;
     $18 = ($i$18|0)>(0);
     if ($18) {
      $i$18 = $i$1;
     } else {
      $i$2 = $i$1;
      break;
     }
    }
   } else {
    $i$2 = $i$17;
   }
  }
 } while(0);
 $26 = (($i$2) + 1)|0;
 return ($26|0);
}
function _rstrip_utf8_stop($input_arg,$strip_sv) {
 $input_arg = $input_arg|0;
 $strip_sv = $strip_sv|0;
 var $$ = 0, $$1 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$3 = 0, $i$4 = 0, $input_i$08 = 0, $input_i$08$in = 0, $j$0 = 0, $j$3 = 0, $k$07 = 0, $or$cond = 0, $or$cond3 = 0, $strip_i$06 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($input_arg)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($strip_sv)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($strip_sv)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($5) + -1)|0;
 $$old1 = ($5|0)>(0);
 if ($$old1) {
  $i$0 = $10;$j$0 = 0;
 } else {
  $i$4 = $10;
  $42 = (($i$4) + 1)|0;
  return ($42|0);
 }
 while(1) {
  $11 = (($7) + ($j$0)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (14438 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (($j$0) + -1)|0;
  $18 = (($17) + ($16))|0;
  $19 = (($7) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = (($3) + ($i$0)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)!=($20<<24>>24);
  $24 = (($i$0) + 1)|0;
  $25 = ($24|0)<($16|0);
  $or$cond3 = $25 | $23;
  L5: do {
   if ($or$cond3) {
    label = 8;
   } else {
    $26 = (($13) + -194)|0;
    $27 = ($26>>>0)<(51);
    if ($27) {
     $28 = (($j$0) + -2)|0;
     $29 = (($28) + ($16))|0;
     $input_i$08$in = $i$0;$k$07 = 1;$strip_i$06 = $29;
     while(1) {
      $input_i$08 = (($input_i$08$in) + -1)|0;
      $30 = (($3) + ($input_i$08)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = (($7) + ($strip_i$06)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($31<<24>>24)==($33<<24>>24);
      if (!($34)) {
       label = 8;
       break L5;
      }
      $35 = (($strip_i$06) + -1)|0;
      $36 = (($k$07) + 1)|0;
      $37 = ($36|0)<($16|0);
      if ($37) {
       $input_i$08$in = $input_i$08;$k$07 = $36;$strip_i$06 = $35;
      } else {
       break;
      }
     }
    }
    $38 = (($i$0) - ($16))|0;
    $$1 = 2;$i$3 = $38;$j$3 = 0;
   }
  } while(0);
  if ((label|0) == 8) {
   label = 0;
   $39 = (($16) + ($j$0))|0;
   $40 = ($39|0)==($9|0);
   $$ = $40 ? 3 : 2;
   $$1 = $$;$i$3 = $i$0;$j$3 = $39;
  }
  $switch = ($$1|0)==(2);
  $41 = ($i$3|0)>(-1);
  $or$cond = $41 & $switch;
  if ($or$cond) {
   $i$0 = $i$3;$j$0 = $j$3;
  } else {
   $i$4 = $i$3;
   break;
  }
 }
 $42 = (($i$4) + 1)|0;
 return ($42|0);
}
function _lily_builtin_String_split($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fake_sv = 0, $split_strval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fake_sv = sp;
 $0 = (_lily_arg_string($s,0)|0);
 $1 = (_lily_arg_count($s)|0);
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = (_lily_arg_string($s,1)|0);
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   _lily_error($s,23,14694);
   $split_strval$0 = $3;
  } else {
   $split_strval$0 = $3;
  }
 } else {
  $7 = ((($fake_sv)) + 8|0);
  HEAP32[$7>>2] = 14724;
  $8 = ((($fake_sv)) + 4|0);
  HEAP32[$8>>2] = 1;
  $split_strval$0 = $fake_sv;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($split_strval$0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_string_split_by_val($10,$12)|0);
 _lily_return_list($s,$13);
 STACKTOP = sp;return;
}
function _string_split_by_val($input,$splitby) {
 $input = $input|0;
 $splitby = $splitby|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0 = 0, $i$1 = 0, $input_ch$0$ph11 = 0, $input_ch$08 = 0, $input_ch$08$lcssa = 0, $input_ch$1 = 0, $input_ch$2 = 0, $input_ch$3 = 0, $input_ch$4 = 0, $input_ch$61 = 0, $input_ch$63 = 0, $is_match$0 = 0, $last_start$0 = 0, $last_start$2 = 0, $splitby_ch$1 = 0, $splitby_ch$3 = 0, $values_needed$0$ph$lcssa = 0, $values_needed$0$ph10 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$input>>0]|0;
 $1 = $0&255;
 $2 = (14726 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   $values_needed$0$ph$lcssa = 0;
  } else {
   $5 = $3 << 24 >> 24;
   $6 = HEAP8[$splitby>>0]|0;
   $58 = $5;$59 = $0;$input_ch$0$ph11 = $input;$values_needed$0$ph10 = 0;
   while(1) {
    $26 = $58;$7 = $59;$input_ch$08 = $input_ch$0$ph11;
    while(1) {
     $8 = ($7<<24>>24)==($6<<24>>24);
     if ($8) {
      $input_ch$08$lcssa = $input_ch$08;
      break;
     }
     $25 = (($input_ch$08) + ($26)|0);
     $27 = HEAP8[$25>>0]|0;
     $28 = $27&255;
     $29 = (14726 + ($28)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30 << 24 >> 24;
     $32 = ($30<<24>>24)==(0);
     if ($32) {
      $values_needed$0$ph$lcssa = $values_needed$0$ph10;
      break L1;
     } else {
      $26 = $31;$7 = $27;$input_ch$08 = $25;
     }
    }
    $input_ch$1 = $input_ch$08$lcssa;$splitby_ch$1 = $splitby;
    while(1) {
     $9 = HEAP8[$input_ch$1>>0]|0;
     $10 = HEAP8[$splitby_ch$1>>0]|0;
     $11 = ($9<<24>>24)==($10<<24>>24);
     if (!($11)) {
      $input_ch$2 = $input_ch$1;$is_match$0 = 1;
      break;
     }
     $12 = ((($splitby_ch$1)) + 1|0);
     $13 = ((($input_ch$1)) + 1|0);
     $14 = HEAP8[$12>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if ($15) {
      $input_ch$2 = $13;$is_match$0 = 1;
      break;
     }
     $16 = HEAP8[$13>>0]|0;
     $17 = ($16<<24>>24)==($14<<24>>24);
     if ($17) {
      $input_ch$1 = $13;$splitby_ch$1 = $12;
     } else {
      $input_ch$2 = $input_ch$08$lcssa;$is_match$0 = 0;
      break;
     }
    }
    $18 = (($is_match$0) + ($values_needed$0$ph10))|0;
    $19 = HEAP8[$input_ch$2>>0]|0;
    $20 = $19&255;
    $21 = (14726 + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = ($22<<24>>24)==(0);
    if ($24) {
     $values_needed$0$ph$lcssa = $18;
     break;
    } else {
     $58 = $23;$59 = $19;$input_ch$0$ph11 = $input_ch$2;$values_needed$0$ph10 = $18;
    }
   }
  }
 } while(0);
 $33 = (($values_needed$0$ph$lcssa) + 1)|0;
 $34 = (_lily_new_list_val_n($33)|0);
 $i$0 = 0;$input_ch$3 = $input;$last_start$0 = $input;
 while(1) {
  $35 = HEAP8[$input_ch$3>>0]|0;
  $36 = HEAP8[$splitby>>0]|0;
  $37 = ($35<<24>>24)==($36<<24>>24);
  L17: do {
   if ($37) {
    $input_ch$4 = $input_ch$3;$splitby_ch$3 = $splitby;
    while(1) {
     $38 = HEAP8[$input_ch$4>>0]|0;
     $39 = HEAP8[$splitby_ch$3>>0]|0;
     $40 = ($38<<24>>24)==($39<<24>>24);
     if (!($40)) {
      $input_ch$61 = $input_ch$4;
      label = 18;
      break L17;
     }
     $41 = ((($splitby_ch$3)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)==(0);
     if ($43) {
      $input_ch$61 = $input_ch$4;
      label = 18;
      break L17;
     }
     $44 = ((($input_ch$4)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ($45<<24>>24)==($42<<24>>24);
     if ($46) {
      $input_ch$4 = $44;$splitby_ch$3 = $41;
     } else {
      break;
     }
    }
    $$pr = HEAP8[$input_ch$3>>0]|0;
    $47 = $$pr;
    label = 17;
   } else {
    $47 = $35;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   $48 = ($47<<24>>24)==(0);
   if ($48) {
    $input_ch$61 = $input_ch$3;
    label = 18;
   } else {
    $i$1 = $i$0;$input_ch$63 = $input_ch$3;$last_start$2 = $last_start$0;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $49 = $input_ch$3;
   $50 = $last_start$0;
   $51 = (($49) - ($50))|0;
   $52 = (_lily_new_raw_string_sized($last_start$0,$51)|0);
   _lily_list_set_string($34,$i$0,$52);
   $53 = (($i$0) + 1)|0;
   $54 = HEAP8[$input_ch$61>>0]|0;
   $55 = ($54<<24>>24)==(0);
   $56 = ((($input_ch$61)) + 1|0);
   if ($55) {
    break;
   } else {
    $i$1 = $53;$input_ch$63 = $input_ch$61;$last_start$2 = $56;
   }
  }
  $57 = ((($input_ch$63)) + 1|0);
  $i$0 = $i$1;$input_ch$3 = $57;$last_start$0 = $last_start$2;
 }
 return ($34|0);
}
function _lily_builtin_String_starts_with($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $ok$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<($11>>>0);
 if ($14) {
  _lily_return_boolean($s,0);
  return;
 }
 $15 = ($11|0)>(0);
 L5: do {
  if ($15) {
   $i$01 = 0;
   while(1) {
    $18 = (($5) + ($i$01)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = (($9) + ($i$01)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($19<<24>>24)==($21<<24>>24);
    $16 = (($i$01) + 1)|0;
    if (!($22)) {
     $ok$0 = 0;
     break L5;
    }
    $17 = ($16|0)<($11|0);
    if ($17) {
     $i$01 = $16;
    } else {
     $ok$0 = 1;
     break;
    }
   }
  } else {
   $ok$0 = 1;
  }
 } while(0);
 _lily_return_boolean($s,$ok$0);
 return;
}
function _lily_builtin_String_strip($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy_to$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = (_lstrip_ascii_start($0,$8)|0);
   $13 = HEAP32[$2>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)==($15|0);
   if ($16) {
    $copy_to$0 = $12;
   } else {
    $17 = (_rstrip_utf8_stop($0,$8)|0);
    $copy_to$0 = $17;
   }
   $18 = (($copy_to$0) - ($12))|0;
   $19 = (($18) + 1)|0;
   $20 = (_make_sv($19)|0);
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$2>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($12)|0);
   (_strncpy($22,$26,$18)|0);
   $27 = (($22) + ($18)|0);
   HEAP8[$27>>0] = 0;
   _lily_return_string($s,$20);
   return;
  }
 }
 _lily_return_value($s,$0);
 return;
}
function _lily_builtin_String_trim($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fake_buffer = 0, $fake_sv = 0, $new_sv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $fake_buffer = sp + 12|0;
 $fake_sv = sp;
 $0 = (_lily_arg_value($s,0)|0);
 ;HEAP8[$fake_buffer>>0]=HEAP8[14982>>0]|0;HEAP8[$fake_buffer+1>>0]=HEAP8[14982+1>>0]|0;HEAP8[$fake_buffer+2>>0]=HEAP8[14982+2>>0]|0;HEAP8[$fake_buffer+3>>0]=HEAP8[14982+3>>0]|0;HEAP8[$fake_buffer+4>>0]=HEAP8[14982+4>>0]|0;
 $1 = ((($fake_sv)) + 8|0);
 HEAP32[$1>>2] = $fake_buffer;
 $2 = (_strlen($fake_buffer)|0);
 $3 = ((($fake_sv)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_lstrip_ascii_start($0,$fake_sv)|0);
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($4|0)==($8|0);
 if ($9) {
  $21 = (_make_sv(1)|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP8[$23>>0] = 0;
  $new_sv$0 = $21;
  _lily_return_string($s,$new_sv$0);
  STACKTOP = sp;return;
 } else {
  $10 = (_rstrip_ascii_stop($0,$fake_sv)|0);
  $11 = (($10) - ($4))|0;
  $12 = (($11) + 1)|0;
  $13 = (_make_sv($12)|0);
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$5>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($4)|0);
  (_strncpy($15,$19,$11)|0);
  $20 = (($15) + ($11)|0);
  HEAP8[$20>>0] = 0;
  $new_sv$0 = $13;
  _lily_return_string($s,$new_sv$0);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_String_upper($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_value($s,0)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_make_sv($5)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $i$01 = 0;
 } else {
  $25 = (($8) + ($13)|0);
  HEAP8[$25>>0] = 0;
  _lily_return_string($s,$6);
  return;
 }
 while(1) {
  $15 = (($11) + ($i$01)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_islower($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $23 = (($8) + ($i$01)|0);
   HEAP8[$23>>0] = $16;
  } else {
   $20 = (_toupper($17)|0);
   $21 = $20&255;
   $22 = (($8) + ($i$01)|0);
   HEAP8[$22>>0] = $21;
  }
  $24 = (($i$01) + 1)|0;
  $exitcond = ($24|0)==($13|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $24;
  }
 }
 $25 = (($8) + ($13)|0);
 HEAP8[$25>>0] = 0;
 _lily_return_string($s,$6);
 return;
}
function _lily_builtin_Tainted_sanitize($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_instance($s,0)|0);
 $1 = (_lily_instance_value($0,0)|0);
 _lily_push_value($s,$1);
 $2 = (_lily_arg_function($s,1)|0);
 _lily_exec_simple($s,$2,1);
 _lily_result_return($s);
 return;
}
function _lily_builtin_Tuple_merge($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$11 = 0, $j$0$lcssa = 0, $j$04 = 0, $j$12 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_list($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = (_lily_new_list_val_n($6)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $j$0$lcssa = 0;
 } else {
  $10 = ((($7)) + 16|0);
  $11 = ((($0)) + 16|0);
  $j$04 = 0;
  while(1) {
   $16 = HEAP32[$10>>2]|0;
   $17 = (($16) + ($j$04<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$11>>2]|0;
   $20 = (($19) + ($j$04<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   _lily_assign_value($18,$21);
   $22 = (($j$04) + 1)|0;
   $23 = HEAP32[$2>>2]|0;
   $24 = ($22>>>0)<($23>>>0);
   if ($24) {
    $j$04 = $22;
   } else {
    $j$0$lcssa = $22;
    break;
   }
  }
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  _lily_return_tuple($s,$7);
  return;
 }
 $14 = ((($7)) + 16|0);
 $15 = ((($1)) + 16|0);
 $i$11 = 0;$j$12 = $j$0$lcssa;
 while(1) {
  $25 = HEAP32[$14>>2]|0;
  $26 = (($25) + ($j$12<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$15>>2]|0;
  $29 = (($28) + ($i$11<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  _lily_assign_value($27,$30);
  $31 = (($i$11) + 1)|0;
  $32 = (($j$12) + 1)|0;
  $33 = HEAP32[$4>>2]|0;
  $34 = ($31>>>0)<($33>>>0);
  if ($34) {
   $i$11 = $31;$j$12 = $32;
  } else {
   break;
  }
 }
 _lily_return_tuple($s,$7);
 return;
}
function _lily_builtin_Tuple_push($s) {
 $s = $s|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_arg_list($s,0)|0);
 $1 = (_lily_arg_value($s,1)|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (_lily_new_list_val_n($4)|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(0);
 $8 = ((($5)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 if ($7) {
  $$lcssa = $10;
  _lily_assign_value($$lcssa,$1);
  _lily_return_tuple($s,$5);
  return;
 }
 $11 = ((($0)) + 16|0);
 $15 = $10;$j$02 = 0;
 while(1) {
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($j$02<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_assign_value($15,$14);
  $16 = (($j$02) + 1)|0;
  $17 = HEAP32[$2>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  $19 = HEAP32[$8>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  if ($18) {
   $15 = $21;$j$02 = $16;
  } else {
   $$lcssa = $21;
   break;
  }
 }
 _lily_assign_value($$lcssa,$1);
 _lily_return_tuple($s,$5);
 return;
}
function _lily_builtin_loader($o,$c,$id) {
 $o = $o|0;
 $c = $c|0;
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($id|0) {
  case 1:  {
   $0 = (_load_var_stdin()|0);
   $$0 = $0;
   break;
  }
  case 2:  {
   $1 = (_load_var_stderr()|0);
   $$0 = $1;
   break;
  }
  case 3:  {
   $2 = (_load_var_stdout()|0);
   $$0 = $2;
   break;
  }
  case 4:  {
   $$0 = 13;
   break;
  }
  case 5:  {
   $$0 = 14;
   break;
  }
  case 7:  {
   $$0 = 15;
   break;
  }
  case 8:  {
   $$0 = 16;
   break;
  }
  case 10:  {
   $$0 = 17;
   break;
  }
  case 12:  {
   $$0 = 18;
   break;
  }
  case 15:  {
   $$0 = 19;
   break;
  }
  case 17:  {
   $$0 = 20;
   break;
  }
  case 19:  {
   $$0 = 21;
   break;
  }
  case 20:  {
   $$0 = 22;
   break;
  }
  case 21:  {
   $$0 = 23;
   break;
  }
  case 22:  {
   $$0 = 24;
   break;
  }
  case 27:  {
   $$0 = 25;
   break;
  }
  case 28:  {
   $$0 = 26;
   break;
  }
  case 29:  {
   $$0 = 27;
   break;
  }
  case 30:  {
   $$0 = 28;
   break;
  }
  case 31:  {
   $$0 = 29;
   break;
  }
  case 32:  {
   $$0 = 30;
   break;
  }
  case 35:  {
   $$0 = 31;
   break;
  }
  case 36:  {
   $$0 = 32;
   break;
  }
  case 37:  {
   $$0 = 33;
   break;
  }
  case 38:  {
   $$0 = 34;
   break;
  }
  case 39:  {
   $$0 = 35;
   break;
  }
  case 40:  {
   $$0 = 36;
   break;
  }
  case 41:  {
   $$0 = 37;
   break;
  }
  case 42:  {
   $$0 = 38;
   break;
  }
  case 43:  {
   $$0 = 39;
   break;
  }
  case 44:  {
   $$0 = 40;
   break;
  }
  case 45:  {
   $$0 = 41;
   break;
  }
  case 48:  {
   $$0 = 42;
   break;
  }
  case 49:  {
   $$0 = 43;
   break;
  }
  case 50:  {
   $$0 = 44;
   break;
  }
  case 51:  {
   $$0 = 45;
   break;
  }
  case 55:  {
   $$0 = 46;
   break;
  }
  case 56:  {
   $$0 = 47;
   break;
  }
  case 57:  {
   $$0 = 48;
   break;
  }
  case 58:  {
   $$0 = 49;
   break;
  }
  case 59:  {
   $$0 = 50;
   break;
  }
  case 60:  {
   $$0 = 51;
   break;
  }
  case 61:  {
   $$0 = 52;
   break;
  }
  case 62:  {
   $$0 = 53;
   break;
  }
  case 63:  {
   $$0 = 54;
   break;
  }
  case 64:  {
   $$0 = 55;
   break;
  }
  case 65:  {
   $$0 = 56;
   break;
  }
  case 66:  {
   $$0 = 57;
   break;
  }
  case 67:  {
   $$0 = 58;
   break;
  }
  case 68:  {
   $$0 = 59;
   break;
  }
  case 69:  {
   $$0 = 60;
   break;
  }
  case 70:  {
   $$0 = 61;
   break;
  }
  case 71:  {
   $$0 = 62;
   break;
  }
  case 73:  {
   $$0 = 63;
   break;
  }
  case 74:  {
   $$0 = 64;
   break;
  }
  case 75:  {
   $$0 = 65;
   break;
  }
  case 76:  {
   $$0 = 66;
   break;
  }
  case 77:  {
   $$0 = 67;
   break;
  }
  case 78:  {
   $$0 = 68;
   break;
  }
  case 79:  {
   $$0 = 69;
   break;
  }
  case 80:  {
   $$0 = 70;
   break;
  }
  case 81:  {
   $$0 = 71;
   break;
  }
  case 82:  {
   $$0 = 72;
   break;
  }
  case 87:  {
   $$0 = 73;
   break;
  }
  case 88:  {
   $$0 = 74;
   break;
  }
  case 89:  {
   $$0 = 75;
   break;
  }
  case 90:  {
   $$0 = 76;
   break;
  }
  case 91:  {
   $$0 = 77;
   break;
  }
  case 92:  {
   $$0 = 78;
   break;
  }
  case 93:  {
   $$0 = 79;
   break;
  }
  case 94:  {
   $$0 = 80;
   break;
  }
  case 95:  {
   $$0 = 81;
   break;
  }
  case 96:  {
   $$0 = 82;
   break;
  }
  case 97:  {
   $$0 = 83;
   break;
  }
  case 98:  {
   $$0 = 84;
   break;
  }
  case 99:  {
   $$0 = 85;
   break;
  }
  case 100:  {
   $$0 = 86;
   break;
  }
  case 101:  {
   $$0 = 87;
   break;
  }
  case 102:  {
   $$0 = 88;
   break;
  }
  case 104:  {
   $$0 = 89;
   break;
  }
  case 106:  {
   $$0 = 90;
   break;
  }
  case 107:  {
   $$0 = 91;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _load_var_stdin() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[612]|0;
 $1 = (_new_builtin_file($0,14987)|0);
 return ($1|0);
}
function _new_builtin_file($source,$mode) {
 $source = $source|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_file_val($source,$mode)|0);
 $1 = ((($0)) + 6|0);
 HEAP8[$1>>0] = 1;
 $2 = (_lily_new_value_of_file($0)|0);
 return ($2|0);
}
function _load_var_stderr() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[553]|0;
 $1 = (_new_builtin_file($0,14989)|0);
 return ($1|0);
}
function _load_var_stdout() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[582]|0;
 $1 = (_new_builtin_file($0,14989)|0);
 return ($1|0);
}
function _lily_register_pkg_builtin($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_register_package($s,18083,1772,8);
 return;
}
function _lily_init_pkg_builtin($symtab) {
 $symtab = $symtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_build_class($symtab,14991,0,48)|0);
 $1 = ((($symtab)) + 44|0);
 HEAP32[$1>>2] = $0;
 $2 = (_build_class($symtab,14999,0,15)|0);
 $3 = ((($symtab)) + 48|0);
 HEAP32[$3>>2] = $2;
 $4 = (_build_class($symtab,15006,0,87)|0);
 $5 = ((($symtab)) + 52|0);
 HEAP32[$5>>2] = $4;
 $6 = (_build_class($symtab,15013,0,10)|0);
 $7 = ((($symtab)) + 56|0);
 HEAP32[$7>>2] = $6;
 $8 = (_build_class($symtab,15018,0,12)|0);
 $9 = ((($symtab)) + 60|0);
 HEAP32[$9>>2] = $8;
 $10 = (_build_class($symtab,15029,0,7)|0);
 $11 = ((($symtab)) + 64|0);
 HEAP32[$11>>2] = $10;
 $12 = (_build_class($symtab,15037,-1,34)|0);
 $13 = ((($symtab)) + 72|0);
 HEAP32[$13>>2] = $12;
 $14 = (_build_class($symtab,15046,0,17)|0);
 $15 = ((($symtab)) + 68|0);
 HEAP32[$15>>2] = $14;
 $16 = (_build_class($symtab,15054,1,55)|0);
 $17 = ((($symtab)) + 76|0);
 HEAP32[$17>>2] = $16;
 $18 = (_build_class($symtab,15059,2,35)|0);
 $19 = ((($symtab)) + 80|0);
 HEAP32[$19>>2] = $18;
 $20 = (_build_class($symtab,15064,-1,106)|0);
 $21 = ((($symtab)) + 84|0);
 HEAP32[$21>>2] = $20;
 (_build_class($symtab,15070,0,27)|0);
 $22 = (_build_special($symtab,15075,0,65530)|0);
 $23 = ((($symtab)) + 92|0);
 HEAP32[$23>>2] = $22;
 $24 = (_build_special($symtab,15077,1,65532)|0);
 $25 = ((($symtab)) + 88|0);
 HEAP32[$25>>2] = $24;
 $26 = (_build_special($symtab,15079,0,65534)|0);
 $27 = (_build_special($symtab,15082,0,65533)|0);
 $28 = ((($26)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 | 8192;
 $34 = $33&65535;
 HEAP16[$30>>1] = $34;
 $35 = ((($27)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 6|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = $39 | 8192;
 $41 = $40&65535;
 HEAP16[$37>>1] = $41;
 $42 = HEAP32[$1>>2]|0;
 $43 = ((($42)) + 6|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = $45 | 3;
 $47 = $46&65535;
 HEAP16[$43>>1] = $47;
 $48 = HEAP32[$3>>2]|0;
 $49 = ((($48)) + 6|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $52 = $51 | 2;
 $53 = $52&65535;
 HEAP16[$49>>1] = $53;
 $54 = HEAP32[$5>>2]|0;
 $55 = ((($54)) + 6|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $57 | 3;
 $59 = $58&65535;
 HEAP16[$55>>1] = $59;
 $60 = HEAP32[$9>>2]|0;
 $61 = ((($60)) + 6|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = $63 | 2;
 $65 = $64&65535;
 HEAP16[$61>>1] = $65;
 $66 = HEAP32[$11>>2]|0;
 $67 = ((($66)) + 6|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68&65535;
 $70 = $69 | 2;
 $71 = $70&65535;
 HEAP16[$67>>1] = $71;
 $72 = HEAP32[$23>>2]|0;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 6|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = $77 | 4096;
 $79 = $78&65535;
 HEAP16[$75>>1] = $79;
 $80 = HEAP32[$13>>2]|0;
 $81 = ((($80)) + 6|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = $82&65535;
 $84 = $83 | 32;
 $85 = $84&65535;
 HEAP16[$81>>1] = $85;
 $86 = HEAP32[$15>>2]|0;
 $87 = ((($86)) + 6|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88&65535;
 $90 = $89 | 64;
 $91 = $90&65535;
 HEAP16[$87>>1] = $91;
 $92 = ((($symtab)) + 36|0);
 HEAP32[$92>>2] = 28;
 return;
}
function _build_class($symtab,$name,$generic_count,$dyna_start) {
 $symtab = $symtab|0;
 $name = $name|0;
 $generic_count = $generic_count|0;
 $dyna_start = $dyna_start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_class($symtab,$name)|0);
 $1 = $dyna_start&65535;
 $2 = ((($0)) + 50|0);
 HEAP16[$2>>1] = $1;
 $3 = $generic_count&65535;
 $4 = ((($0)) + 46|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($0)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | 128;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 return ($0|0);
}
function _build_special($symtab,$name,$generic_count,$id) {
 $symtab = $symtab|0;
 $name = $name|0;
 $generic_count = $generic_count|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_class($symtab,$name)|0);
 $1 = $id&65535;
 $2 = ((($0)) + 8|0);
 HEAP16[$2>>1] = $1;
 $3 = $generic_count&65535;
 $4 = ((($0)) + 46|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($0)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | 128;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($symtab)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 28|0);
 HEAP32[$13>>2] = $10;
 $14 = ((($symtab)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($symtab)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$0>>2] = $18;
 HEAP32[$17>>2] = $0;
 return ($0|0);
}
function _lily_new_generic_pool() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = (_lily_malloc(16)|0);
 $2 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 8|0);
 HEAP16[$3>>1] = 4;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 10|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 12|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 14|0);
 HEAP16[$7>>1] = 4;
 return ($0|0);
}
function _lily_free_generic_pool($gp) {
 $gp = $gp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($gp)) + 8|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 L1: do {
  if (!($2)) {
   $i$01 = 0;
   while(1) {
    $3 = HEAP32[$gp>>2]|0;
    $4 = (($3) + ($i$01<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     break L1;
    }
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    _lily_free($8);
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    _lily_free($10);
    _lily_free($5);
    $11 = (($i$01) + 1)|0;
    $12 = HEAP16[$0>>1]|0;
    $13 = $12&65535;
    $14 = ($11|0)<($13|0);
    if ($14) {
     $i$01 = $11;
    } else {
     break;
    }
   }
  }
 } while(0);
 $15 = HEAP32[$gp>>2]|0;
 _lily_free($15);
 $16 = ((($gp)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free($17);
 _lily_free($gp);
 return;
}
function _lily_gp_push($gp,$name,$generic_pos) {
 $gp = $gp|0;
 $name = $name|0;
 $generic_pos = $generic_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i$promoted = 0, $result$0 = 0, $storemerge = 0, $storemerge$in1 = 0;
 var $storemerge$in4 = 0, $storemerge$lcssa = 0, $storemerge2 = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 $0 = (_find_in_cache($gp,$name,$i)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_lily_new_raw_class($name)|0);
  $3 = (_lily_new_raw_type($2)|0);
  $4 = ((($3)) + 6|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $6 | 1024;
  $8 = $7&65535;
  HEAP16[$4>>1] = $8;
  $9 = $generic_pos&65535;
  $10 = ((($3)) + 8|0);
  HEAP16[$10>>1] = $9;
  $11 = ((($2)) + 8|0);
  HEAP16[$11>>1] = -5;
  $12 = ((($2)) + 12|0);
  HEAP32[$12>>2] = $3;
  $13 = ((($2)) + 56|0);
  HEAP32[$13>>2] = $3;
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$gp>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  HEAP32[$16>>2] = $2;
  $17 = (($14) + 1)|0;
  $18 = ((($gp)) + 8|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($17|0)==($20|0);
  if ($21) {
   $22 = $20 << 1;
   $23 = $22&65535;
   HEAP16[$18>>1] = $23;
   $24 = HEAP32[$gp>>2]|0;
   $25 = $20 << 3;
   $26 = $25 & 262136;
   $27 = (_lily_realloc($24,$26)|0);
   $storemerge$in1 = HEAP32[$i>>2]|0;
   $storemerge2 = (($storemerge$in1) + 1)|0;
   HEAP32[$i>>2] = $storemerge2;
   $28 = HEAP16[$18>>1]|0;
   $29 = $28&65535;
   $30 = ($storemerge2|0)<($29|0);
   if ($30) {
    $31 = HEAP16[$18>>1]|0;
    $32 = $31&65535;
    $i$promoted = HEAP32[$i>>2]|0;
    $storemerge$in4 = $i$promoted;$storemerge3 = $storemerge2;
    while(1) {
     $33 = (($27) + ($storemerge3<<2)|0);
     HEAP32[$33>>2] = 0;
     $storemerge = (($storemerge$in4) + 1)|0;
     $34 = ($storemerge|0)<($32|0);
     if ($34) {
      $storemerge$in4 = $storemerge;$storemerge3 = $storemerge;
     } else {
      $storemerge$lcssa = $storemerge;
      break;
     }
    }
    HEAP32[$i>>2] = $storemerge$lcssa;
   }
   HEAP32[$gp>>2] = $27;
   $result$0 = $2;
  } else {
   $result$0 = $2;
  }
 } else {
  $result$0 = $0;
 }
 $35 = ((($gp)) + 12|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ((($gp)) + 14|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($36<<16>>16)==($38<<16>>16);
 if (!($39)) {
  $48 = HEAP16[$35>>1]|0;
  $49 = $48&65535;
  $50 = ((($gp)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($49<<2)|0);
  HEAP32[$52>>2] = $result$0;
  $53 = HEAP16[$35>>1]|0;
  $54 = (($53) + 1)<<16>>16;
  HEAP16[$35>>1] = $54;
  STACKTOP = sp;return;
 }
 $40 = $38&65535;
 $41 = $40 << 1;
 $42 = $41&65535;
 HEAP16[$37>>1] = $42;
 $43 = ((($gp)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $40 << 3;
 $46 = $45 & 262136;
 $47 = (_lily_realloc($44,$46)|0);
 HEAP32[$43>>2] = $47;
 $48 = HEAP16[$35>>1]|0;
 $49 = $48&65535;
 $50 = ((($gp)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($49<<2)|0);
 HEAP32[$52>>2] = $result$0;
 $53 = HEAP16[$35>>1]|0;
 $54 = (($53) + 1)<<16>>16;
 HEAP16[$35>>1] = $54;
 STACKTOP = sp;return;
}
function _find_in_cache($gp,$name,$next_pos) {
 $gp = $gp|0;
 $name = $name|0;
 $next_pos = $next_pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$03 = 0, $c$05 = 0, $i$0$lcssa = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$gp>>2]|0;
 $c$03 = HEAP32[$0>>2]|0;
 $1 = ($c$03|0)==(0|0);
 L1: do {
  if ($1) {
   $i$0$lcssa = 0;
  } else {
   $2 = HEAP8[$name>>0]|0;
   $c$05 = $c$03;$i$04 = 0;
   while(1) {
    $3 = ((($c$05)) + 16|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)==($2<<24>>24);
    if ($6) {
     $$0 = $c$05;
     break;
    }
    $7 = (($i$04) + 1)|0;
    $8 = HEAP32[$gp>>2]|0;
    $9 = (($8) + ($7<<2)|0);
    $c$0 = HEAP32[$9>>2]|0;
    $10 = ($c$0|0)==(0|0);
    if ($10) {
     $i$0$lcssa = $7;
     break L1;
    } else {
     $c$05 = $c$0;$i$04 = $7;
    }
   }
   return ($$0|0);
  }
 } while(0);
 HEAP32[$next_pos>>2] = $i$0$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _lily_gp_find($gp,$name) {
 $gp = $gp|0;
 $name = $name|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ((($gp)) + 10|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($gp)) + 12|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($2&65535)<($4&65535);
 if (!($5)) {
  $$2 = 0;
  return ($$2|0);
 }
 $6 = $2&65535;
 $7 = ((($gp)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $i$02 = $6;
 while(1) {
  $13 = (($8) + ($i$02<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==($0<<24>>24);
  $11 = (($i$02) + 1)|0;
  if ($18) {
   $$2 = $14;
   label = 5;
   break;
  }
  $9 = HEAP16[$3>>1]|0;
  $10 = $9&65535;
  $12 = ($11|0)<($10|0);
  if ($12) {
   $i$02 = $11;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_gp_num_in_scope($gp) {
 $gp = $gp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gp)) + 12|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($gp)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($2) - ($5))|0;
 return ($6|0);
}
function _lily_gp_save($gp,$save_end) {
 $gp = $gp|0;
 $save_end = $save_end|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gp)) + 12|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 HEAP32[$save_end>>2] = $2;
 return;
}
function _lily_gp_restore($gp,$old_end) {
 $gp = $gp|0;
 $old_end = $old_end|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $old_end&65535;
 $1 = ((($gp)) + 12|0);
 HEAP16[$1>>1] = $0;
 return;
}
function _lily_gp_save_and_hide($gp,$save_start) {
 $gp = $gp|0;
 $save_start = $save_start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gp)) + 10|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 HEAP32[$save_start>>2] = $2;
 $3 = ((($gp)) + 12|0);
 $4 = HEAP16[$3>>1]|0;
 HEAP16[$0>>1] = $4;
 return;
}
function _lily_gp_restore_and_unhide($gp,$old_start) {
 $gp = $gp|0;
 $old_start = $old_start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gp)) + 10|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($gp)) + 12|0);
 HEAP16[$2>>1] = $1;
 $3 = $old_start&65535;
 HEAP16[$0>>1] = $3;
 return;
}
function _lily_new_type_maker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_new_raw_type($cls) {
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = ((($0)) + 4|0);
 HEAP16[$1>>1] = 6;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = $cls;
 $3 = ((($0)) + 6|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 8|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 10|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$0>>2] = 0;
 return ($0|0);
}
function _lily_tm_reserve($tm,$amount) {
 $tm = $tm|0;
 $amount = $amount|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($amount))|0;
 $3 = ((($tm)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if (!($5)) {
  return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($amount))|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + ($amount))|0;
  $13 = $8;
  while(1) {
   $12 = $13 << 1;
   $14 = ($11>>>0)>($12>>>0);
   if ($14) {
    $13 = $12;
   } else {
    $$lcssa6 = $12;
    break;
   }
  }
  HEAP32[$3>>2] = $$lcssa6;
  $$lcssa = $$lcssa6;
 } else {
  $$lcssa = $8;
 }
 $15 = HEAP32[$tm>>2]|0;
 $16 = $$lcssa << 2;
 $17 = (_lily_realloc($15,$16)|0);
 HEAP32[$tm>>2] = $17;
 return;
}
function _lily_tm_add_unchecked($tm,$type) {
 $tm = $tm|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$tm>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 HEAP32[$3>>2] = $type;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$0>>2] = $5;
 return;
}
function _lily_tm_add($tm,$type) {
 $tm = $tm|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($tm)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$tm>>2]|0;
  $8 = $4 << 3;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$tm>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$tm>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 HEAP32[$12>>2] = $type;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$0>>2] = $14;
 return;
}
function _lily_tm_insert($tm,$pos,$type) {
 $tm = $tm|0;
 $pos = $pos|0;
 $type = $type|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($pos>>>0);
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3>>>0)>($pos>>>0);
  if ($4) {
   $$lcssa = $3;
  } else {
   $6 = $3;
   while(1) {
    $5 = $6 << 1;
    $7 = ($5>>>0)>($pos>>>0);
    if ($7) {
     $$lcssa6 = $5;
     break;
    } else {
     $6 = $5;
    }
   }
   HEAP32[$0>>2] = $$lcssa6;
   $$lcssa = $$lcssa6;
  }
  $8 = HEAP32[$tm>>2]|0;
  $9 = $$lcssa << 2;
  $10 = (_lily_realloc($8,$9)|0);
  HEAP32[$tm>>2] = $10;
 }
 $11 = HEAP32[$tm>>2]|0;
 $12 = (($11) + ($pos<<2)|0);
 HEAP32[$12>>2] = $type;
 return;
}
function _lily_tm_pop($tm) {
 $tm = $tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$tm>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_tm_make($tm,$flags,$cls,$num_entries) {
 $tm = $tm|0;
 $flags = $flags|0;
 $cls = $cls|0;
 $num_entries = $num_entries|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fake_type = 0, $result_type$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $fake_type = sp;
 $0 = ((($fake_type)) + 12|0);
 HEAP32[$0>>2] = $cls;
 $1 = ((($fake_type)) + 8|0);
 HEAP16[$1>>1] = 0;
 $2 = HEAP32[$tm>>2]|0;
 $3 = ((($tm)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($num_entries))|0;
 $6 = (($2) + ($5<<2)|0);
 $7 = ((($fake_type)) + 16|0);
 HEAP32[$7>>2] = $6;
 $8 = $num_entries&65535;
 $9 = ((($fake_type)) + 10|0);
 HEAP16[$9>>1] = $8;
 $10 = $flags&65535;
 $11 = ((($fake_type)) + 6|0);
 HEAP16[$11>>1] = $10;
 HEAP32[$fake_type>>2] = 0;
 $12 = (_lookup_type($fake_type)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $result_type$0 = $12;
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) - ($num_entries))|0;
  HEAP32[$3>>2] = $17;
  STACKTOP = sp;return ($result_type$0|0);
 }
 $14 = ((($fake_type)) + 4|0);
 HEAP16[$14>>1] = 6;
 $15 = (_build_real_type_for($fake_type)|0);
 $result_type$0 = $15;
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) - ($num_entries))|0;
 HEAP32[$3>>2] = $17;
 STACKTOP = sp;return ($result_type$0|0);
}
function _lookup_type($input_type) {
 $input_type = $input_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $iter_type$0 = 0, $iter_type$010 = 0, $iter_type$011 = 0, $ret$3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($input_type)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $iter_type$010 = HEAP32[$2>>2]|0;
 $3 = ($iter_type$010|0)==(0|0);
 if ($3) {
  $ret$3 = 0;
  return ($ret$3|0);
 }
 $4 = ((($input_type)) + 10|0);
 $5 = ((($input_type)) + 6|0);
 $6 = ((($input_type)) + 16|0);
 $iter_type$011 = $iter_type$010;
 L4: while(1) {
  $7 = ((($iter_type$011)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  L6: do {
   if (!($9)) {
    $10 = ((($iter_type$011)) + 10|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = HEAP16[$4>>1]|0;
    $13 = ($11<<16>>16)==($12<<16>>16);
    if ($13) {
     $14 = ((($iter_type$011)) + 6|0);
     $15 = HEAP16[$14>>1]|0;
     $16 = HEAP16[$5>>1]|0;
     $17 = $16 ^ $15;
     $18 = $17 & -13313;
     $19 = ($18<<16>>16)==(0);
     if ($19) {
      $20 = HEAP16[$10>>1]|0;
      $21 = ($20<<16>>16)==(0);
      if ($21) {
       $ret$3 = $iter_type$011;
       label = 11;
       break L4;
      }
      $22 = HEAP32[$7>>2]|0;
      $23 = HEAP32[$6>>2]|0;
      $i$08 = 0;
      while(1) {
       $28 = (($22) + ($i$08<<2)|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($23) + ($i$08<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       $26 = (($i$08) + 1)|0;
       if (!($32)) {
        break L6;
       }
       $24 = HEAP16[$10>>1]|0;
       $25 = $24&65535;
       $27 = ($26|0)<($25|0);
       if ($27) {
        $i$08 = $26;
       } else {
        $ret$3 = $iter_type$011;
        label = 11;
        break L4;
       }
      }
     }
    }
   }
  } while(0);
  $iter_type$0 = HEAP32[$iter_type$011>>2]|0;
  $33 = ($iter_type$0|0)==(0|0);
  if ($33) {
   $ret$3 = 0;
   label = 11;
   break;
  } else {
   $iter_type$011 = $iter_type$0;
  }
 }
 if ((label|0) == 11) {
  return ($ret$3|0);
 }
 return (0)|0;
}
function _build_real_type_for($fake_type) {
 $fake_type = $fake_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fake_type)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_new_raw_type($1)|0);
 ;HEAP32[$2>>2]=HEAP32[$fake_type>>2]|0;HEAP32[$2+4>>2]=HEAP32[$fake_type+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$fake_type+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$fake_type+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$fake_type+16>>2]|0;
 $3 = ((($fake_type)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 << 2;
 $7 = (_lily_malloc($6)|0);
 $8 = ((($fake_type)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _memcpy(($7|0),($9|0),($6|0))|0;
 $10 = ((($2)) + 16|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($2)) + 10|0);
 HEAP16[$11>>1] = $4;
 $12 = ((($2)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$2>>2] = $15;
 HEAP32[$14>>2] = $2;
 $16 = HEAP16[$11>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  return ($2|0);
 }
 $18 = HEAP32[$10>>2]|0;
 $19 = HEAP16[$11>>1]|0;
 $20 = $19&65535;
 $21 = ((($2)) + 6|0);
 $i$01 = 0;
 while(1) {
  $22 = (($18) + ($i$01<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = ((($23)) + 6|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = $27 & 13312;
   $29 = HEAP16[$21>>1]|0;
   $30 = $29&65535;
   $31 = $30 | $28;
   $32 = $31&65535;
   HEAP16[$21>>1] = $32;
  }
  $33 = (($i$01) + 1)|0;
  $34 = ($33|0)<($20|0);
  if ($34) {
   $i$01 = $33;
  } else {
   break;
  }
 }
 return ($2|0);
}
function _lily_tm_make_dynamicd_copy($tm,$t) {
 $tm = $tm|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $j$0$lcssa = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($t)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $j$0$lcssa = 0;
 } else {
  $5 = ((($t)) + 16|0);
  $j$01 = 0;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($j$01<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 6|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & 4096;
   $12 = ($11<<16>>16)==(0);
   if ($12) {
    _lily_tm_add($tm,$8);
   } else {
    _lily_tm_add($tm,$1);
   }
   $13 = (($j$01) + 1)|0;
   $14 = HEAP16[$2>>1]|0;
   $15 = $14&65535;
   $16 = ($13|0)<($15|0);
   if ($16) {
    $j$01 = $13;
   } else {
    $j$0$lcssa = $13;
    break;
   }
  }
 }
 $17 = ((($t)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_lily_tm_make($tm,0,$18,$j$0$lcssa)|0);
 return ($19|0);
}
function _lily_tm_pos($tm) {
 $tm = $tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_tm_restore($tm,$pos) {
 $tm = $tm|0;
 $pos = $pos|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tm)) + 4|0);
 HEAP32[$0>>2] = $pos;
 return;
}
function _lily_free_type_maker($tm) {
 $tm = $tm|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$tm>>2]|0;
 _lily_free($0);
 _lily_free($tm);
 return;
}
function _lily_new_buffer_u16($start) {
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = $start << 1;
 $2 = (_lily_malloc($1)|0);
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $start;
 return ($0|0);
}
function _lily_u16_write_1($b,$one) {
 $b = $b|0;
 $one = $one|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$0>>2] = $14;
 return;
}
function _lily_u16_write_2($b,$one,$two) {
 $b = $b|0;
 $one = $one|0;
 $two = $two|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 2)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$b>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $two;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 2)|0;
 HEAP32[$0>>2] = $18;
 return;
}
function _lily_u16_write_3($b,$one,$two,$three) {
 $b = $b|0;
 $one = $one|0;
 $two = $two|0;
 $three = $three|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$b>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $two;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 2)|0;
 $19 = HEAP32[$b>>2]|0;
 $20 = (($19) + ($18<<1)|0);
 HEAP16[$20>>1] = $three;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 3)|0;
 HEAP32[$0>>2] = $22;
 return;
}
function _lily_u16_write_4($b,$one,$two,$three,$four) {
 $b = $b|0;
 $one = $one|0;
 $two = $two|0;
 $three = $three|0;
 $four = $four|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$b>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $two;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 2)|0;
 $19 = HEAP32[$b>>2]|0;
 $20 = (($19) + ($18<<1)|0);
 HEAP16[$20>>1] = $three;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 3)|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (($23) + ($22<<1)|0);
 HEAP16[$24>>1] = $four;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[$0>>2] = $26;
 return;
}
function _lily_u16_write_5($b,$one,$two,$three,$four,$five) {
 $b = $b|0;
 $one = $one|0;
 $two = $two|0;
 $three = $three|0;
 $four = $four|0;
 $five = $five|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 5)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$b>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $two;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 2)|0;
 $19 = HEAP32[$b>>2]|0;
 $20 = (($19) + ($18<<1)|0);
 HEAP16[$20>>1] = $three;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 3)|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (($23) + ($22<<1)|0);
 HEAP16[$24>>1] = $four;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 4)|0;
 $27 = HEAP32[$b>>2]|0;
 $28 = (($27) + ($26<<1)|0);
 HEAP16[$28>>1] = $five;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 5)|0;
 HEAP32[$0>>2] = $30;
 return;
}
function _lily_u16_write_6($b,$one,$two,$three,$four,$five,$six) {
 $b = $b|0;
 $one = $one|0;
 $two = $two|0;
 $three = $three|0;
 $four = $four|0;
 $five = $five|0;
 $six = $six|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 6)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + ($10<<1)|0);
 HEAP16[$12>>1] = $one;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$b>>2]|0;
 $16 = (($15) + ($14<<1)|0);
 HEAP16[$16>>1] = $two;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 2)|0;
 $19 = HEAP32[$b>>2]|0;
 $20 = (($19) + ($18<<1)|0);
 HEAP16[$20>>1] = $three;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 3)|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (($23) + ($22<<1)|0);
 HEAP16[$24>>1] = $four;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 4)|0;
 $27 = HEAP32[$b>>2]|0;
 $28 = (($27) + ($26<<1)|0);
 HEAP16[$28>>1] = $five;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 5)|0;
 $31 = HEAP32[$b>>2]|0;
 $32 = (($31) + ($30<<1)|0);
 HEAP16[$32>>1] = $six;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + 6)|0;
 HEAP32[$0>>2] = $34;
 return;
}
function _lily_u16_write_prep($b,$needed) {
 $b = $b|0;
 $needed = $needed|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($needed))|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if (!($5)) {
  return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($needed))|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + ($needed))|0;
  $13 = $8;
  while(1) {
   $12 = $13 << 1;
   $14 = ($11>>>0)>($12>>>0);
   if ($14) {
    $13 = $12;
   } else {
    $$lcssa6 = $12;
    break;
   }
  }
  HEAP32[$3>>2] = $$lcssa6;
  $$lcssa = $$lcssa6;
 } else {
  $$lcssa = $8;
 }
 $15 = HEAP32[$b>>2]|0;
 $16 = $$lcssa << 1;
 $17 = (_lily_realloc($15,$16)|0);
 HEAP32[$b>>2] = $17;
 return;
}
function _lily_u16_pop($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[$b>>2]|0;
 $4 = (($3) + ($2<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP32[$0>>2] = $2;
 return ($5|0);
}
function _lily_u16_inject($b,$where,$value) {
 $b = $b|0;
 $where = $where|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $6 = $4 << 1;
  HEAP32[$3>>2] = $6;
  $7 = HEAP32[$b>>2]|0;
  $8 = $4 << 2;
  $9 = (_lily_realloc($7,$8)|0);
  HEAP32[$b>>2] = $9;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) - ($where))|0;
 $12 = HEAP32[$b>>2]|0;
 $13 = (($12) + ($where<<1)|0);
 $14 = ((($13)) + 2|0);
 $15 = $11 << 1;
 _memmove(($14|0),($13|0),($15|0))|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$0>>2] = $17;
 $18 = HEAP32[$b>>2]|0;
 $19 = (($18) + ($where<<1)|0);
 HEAP16[$19>>1] = $value;
 return;
}
function _lily_free_buffer_u16($b) {
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 _lily_free($0);
 _lily_free($b);
 return;
}
function _get_parser() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_new_default_options()|0);
 $1 = (_lily_new_state($0)|0);
 $2 = ((($0)) + 2|0);
 HEAP8[$2>>0] = 1;
 return ($1|0);
}
function _run_parser($state,$to_parse) {
 $state = $state|0;
 $to_parse = $to_parse|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_parse_string($state,15085,$to_parse)|0);
 return ($0|0);
}
function _destroy_parser($state) {
 $state = $state|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_free_state($state);
 return;
}
function _get_parser_error($state) {
 $state = $state|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_get_error($state)|0);
 return ($0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4384]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 17580;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[4384]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((92|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 1;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[4384]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((93|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_219($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$152 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$152 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $149;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strerror_r($err,$buf,$buflen) {
 $err = $err|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($err)|0);
 $1 = (_strlen($0)|0);
 $2 = ($1>>>0)<($buflen>>>0);
 if ($2) {
  $6 = (($1) + 1)|0;
  _memcpy(($buf|0),($0|0),($6|0))|0;
  $$0 = 0;
 } else {
  $3 = ($buflen|0)==(0);
  if ($3) {
   $$0 = 34;
  } else {
   $4 = (($buflen) + -1)|0;
   _memcpy(($buf|0),($0|0),($4|0))|0;
   $5 = (($buf) + ($4)|0);
   HEAP8[$5>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (15093 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 15181;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 15181;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 15181;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa42 = $$031;$$04$lcssa43 = $$0430;$$06$lcssa44 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa42 = $$0$lcssa;$$04$lcssa43 = $$04$lcssa;$$06$lcssa44 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa43>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa44;$$3 = $$0$lcssa42;
   } else {
    $19 = ($$0$lcssa42>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa42;$wd$018 = $$06$lcssa44;$ws$019 = $$04$lcssa43;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa42;$wd$0$lcssa = $$06$lcssa44;$ws$0$lcssa = $$04$lcssa43;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=2564; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 15]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((16985 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 17465;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 17465;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 17465;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 17465 : (17467);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (17466);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 17465;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 17465;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 17475;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 17482;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (17483) : (17488);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (17485);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (17449 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(17513,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(17513,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 17501 : 17505;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 17524 : 17509;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17465;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17465;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (17449 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17465;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (17465 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 17465;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 15]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 15]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 15]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 15]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(17528,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 4;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 1;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 2;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 1;
   $34 = HEAP32[(17540)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((17564)|0));
   $37 = HEAP32[(17560)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(17560)>>2] = $4;
   ___unlock(((17564)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((17564)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(17560)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(17560)>>2] = $14;
  }
  ___unlock(((17564)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 7]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[611]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[611]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((17564)|0));
   $$012 = HEAP32[(17560)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((17564)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 15]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 15]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 15]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (17515 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (17524 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$693 = $156;$694 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $170;$696 = $168;$697 = $170;$698 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $705;$394 = $707;$396 = $706;$397 = $708;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $699;$394 = 0;$396 = $700;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $395;$716 = $398;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $395;$722 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $426 = $715;$428 = $713;$429 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $426 = $721;$428 = $718;$429 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (2676 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($426) + -10)|0;
           $501 = (2676 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($426|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($426|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (2676 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $426;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $602 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $603 = ($602|0)==($a$6$i$lcssa|0);
          if (!($603)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $602;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($602) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $602;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(17528,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$1 = -1;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = (___lockfile($f)|0);
    $16 = $4;
   } else {
    $16 = 0;
   }
   $5 = ((($f)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (___toread($f)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $10 = ((($f)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + -8|0);
    $15 = ($11>>>0)>($14>>>0);
    if ($15) {
     $18 = $c&255;
     $19 = ((($11)) + -1|0);
     HEAP32[$10>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$f>>2]|0;
     $21 = $20 & -17;
     HEAP32[$f>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$1 = $c;
      break;
     }
     ___unlockfile($f);
     $$1 = $c;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = -1;
   } else {
    ___unlockfile($f);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _strtox_402($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($6))|0;
 $11 = ($p|0)==(0|0);
 if (!($11)) {
  $12 = ($10|0)!=(0);
  $13 = (($s) + ($10)|0);
  $14 = $12 ? $13 : $s;
  HEAP32[$p>>2] = $14;
 }
 STACKTOP = sp;return (+$4);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox_402($s,$p,1));
 return (+$0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[4396]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (17624 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[4396] = $22;
     } else {
      $23 = HEAP32[(17600)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(17592)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (17624 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[4396] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(17600)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(17592)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(17604)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (17624 + ($93<<2)|0);
      $95 = HEAP32[4396]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[4396] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(17600)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(17592)>>2] = $82;
     HEAP32[(17604)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(17588)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (17888 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(17600)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (17888 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(17588)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(17588)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(17600)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(17600)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(17600)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(17592)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(17604)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (17624 + ($231<<2)|0);
       $233 = HEAP32[4396]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[4396] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(17600)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(17592)>>2] = $rsize$0$i$lcssa;
      HEAP32[(17604)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(17588)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (17888 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (17888 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(17592)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(17600)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (17888 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(17588)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(17588)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(17600)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(17600)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(17600)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (17624 + ($428<<2)|0);
          $430 = HEAP32[4396]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[4396] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(17600)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (17888 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(17588)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(17588)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(17600)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(17600)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(17592)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(17604)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(17604)>>2] = $514;
   HEAP32[(17592)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(17592)>>2] = 0;
   HEAP32[(17604)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(17596)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(17596)>>2] = $529;
  $530 = HEAP32[(17608)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(17608)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[4514]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(18064)>>2] = $539;
    HEAP32[(18060)>>2] = $539;
    HEAP32[(18068)>>2] = -1;
    HEAP32[(18072)>>2] = -1;
    HEAP32[(18076)>>2] = 0;
    HEAP32[(18028)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[4514] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(18064)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(18024)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(18016)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(18028)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(17608)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (18032);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(17596)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(18060)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(18016)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(18024)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(18064)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(18028)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(18028)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(18016)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(18016)>>2] = $632;
  $633 = HEAP32[(18020)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(18020)>>2] = $632;
  }
  $635 = HEAP32[(17608)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(17600)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(17600)>>2] = $tbase$746$i;
    }
    HEAP32[(18032)>>2] = $tbase$746$i;
    HEAP32[(18036)>>2] = $tsize$745$i;
    HEAP32[(18044)>>2] = 0;
    $640 = HEAP32[4514]|0;
    HEAP32[(17620)>>2] = $640;
    HEAP32[(17616)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (17624 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(17608)>>2] = $654;
    HEAP32[(17596)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(18072)>>2]|0;
    HEAP32[(17612)>>2] = $660;
   } else {
    $sp$068$i = (18032);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(17596)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(17608)>>2] = $684;
       HEAP32[(17596)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(18072)>>2]|0;
       HEAP32[(17612)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(17600)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(17600)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (18032);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (18032);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(17596)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(17596)>>2] = $732;
        HEAP32[(17608)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(17604)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(17592)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(17592)>>2] = $738;
         HEAP32[(17604)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (17624 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[4396]|0;
            $765 = $764 & $763;
            HEAP32[4396] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (17888 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(17588)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(17588)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(17600)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(17600)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(17600)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (17624 + ($842<<2)|0);
         $844 = HEAP32[4396]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[4396] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(17600)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (17888 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(17588)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(17588)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(17600)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(17600)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (18032);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(17608)>>2] = $952;
    HEAP32[(17596)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(18072)>>2]|0;
    HEAP32[(17612)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(18032)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(18032)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(18032)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(18032)+12>>2]|0;
    HEAP32[(18032)>>2] = $tbase$746$i;
    HEAP32[(18036)>>2] = $tsize$745$i;
    HEAP32[(18044)>>2] = 0;
    HEAP32[(18040)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (17624 + ($973<<2)|0);
      $975 = HEAP32[4396]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[4396] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(17600)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (17888 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(17588)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(17588)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(17600)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(17600)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(17596)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(17596)>>2] = $1055;
   $1056 = HEAP32[(17608)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(17608)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(17600)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(17604)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(17592)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (17624 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[4396]|0;
     $37 = $36 & $35;
     HEAP32[4396] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (17888 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(17588)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(17588)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(17600)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(17600)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(17600)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(17608)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(17596)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(17596)>>2] = $122;
   HEAP32[(17608)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(17604)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(17604)>>2] = 0;
   HEAP32[(17592)>>2] = 0;
   return;
  }
  $127 = HEAP32[(17604)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(17592)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(17592)>>2] = $130;
   HEAP32[(17604)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (17624 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(17600)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[4396]|0;
     $154 = $153 & $152;
     HEAP32[4396] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(17600)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(17600)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(17600)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (17888 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(17588)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(17588)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(17600)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(17600)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(17600)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(17604)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(17592)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (17624 + ($235<<2)|0);
  $237 = HEAP32[4396]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[4396] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(17600)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (17888 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(17588)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(17588)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(17600)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(17600)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(17616)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(17616)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (18040);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(17616)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(17600)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(18064)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(17608)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(17596)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(17608)>>2] = $38;
  HEAP32[(17596)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(17604)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(17592)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(17592)>>2] = $storemerge1;
  HEAP32[(17604)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (17624 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[4396]|0;
    $91 = $90 & $89;
    HEAP32[4396] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (17888 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(17588)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(17588)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(17600)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(17600)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(17600)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(17600)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(17604)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(17592)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (17624 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[4396]|0;
     $32 = $31 & $30;
     HEAP32[4396] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (17888 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(17588)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(17588)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(17600)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(17600)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(17600)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(17600)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(17608)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(17596)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(17596)>>2] = $116;
   HEAP32[(17608)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(17604)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(17604)>>2] = 0;
   HEAP32[(17592)>>2] = 0;
   return;
  }
  $121 = HEAP32[(17604)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(17592)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(17592)>>2] = $124;
   HEAP32[(17604)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (17624 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[4396]|0;
     $147 = $146 & $145;
     HEAP32[4396] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (17888 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(17588)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(17588)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(17600)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(17600)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(17600)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(17604)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(17592)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (17624 + ($225<<2)|0);
  $227 = HEAP32[4396]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[4396] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(17600)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (17888 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(17588)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(17588)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(17600)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(17600)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,_sn_write,_lily_sys_loader,_lily_eq_value,_lily_builtin_loader,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,_handle_rewind,_parser_loop,_lily_pop_lex_entry,_lily_mb_flush,_lily_sys_getenv,_lily_jump_back,_lily_deref,_add_call_frame,_add_catch_entry,_lily_release_jump,_builtin_stdout_print,_lily_drop_value,_lily_builtin_print,_lily_builtin_calltrace,_lily_builtin_Boolean_to_i,_lily_builtin_Boolean_to_s,_lily_builtin_Byte_to_i,_lily_builtin_ByteString_encode,_lily_builtin_Double_to_i,_lily_builtin_Dynamic_new,_lily_builtin_Either_is_left,_lily_builtin_Either_is_right,_lily_builtin_Either_left,_lily_builtin_Either_right,_lily_builtin_File_close,_lily_builtin_File_each_line,_lily_builtin_File_open,_lily_builtin_File_print
,_lily_builtin_File_read_line,_lily_builtin_File_write,_lily_builtin_Hash_clear,_lily_builtin_Hash_delete,_lily_builtin_Hash_each_pair,_lily_builtin_Hash_get,_lily_builtin_Hash_has_key,_lily_builtin_Hash_keys,_lily_builtin_Hash_map_values,_lily_builtin_Hash_merge,_lily_builtin_Hash_reject,_lily_builtin_Hash_select,_lily_builtin_Hash_size,_lily_builtin_Integer_to_bool,_lily_builtin_Integer_to_byte,_lily_builtin_Integer_to_d,_lily_builtin_Integer_to_s,_lily_builtin_List_clear,_lily_builtin_List_count,_lily_builtin_List_delete_at,_lily_builtin_List_each,_lily_builtin_List_each_index,_lily_builtin_List_fill,_lily_builtin_List_fold,_lily_builtin_List_insert,_lily_builtin_List_join,_lily_builtin_List_map,_lily_builtin_List_pop,_lily_builtin_List_push,_lily_builtin_List_reject
,_lily_builtin_List_select,_lily_builtin_List_size,_lily_builtin_List_shift,_lily_builtin_List_unshift,_lily_builtin_Option_and,_lily_builtin_Option_and_then,_lily_builtin_Option_is_none,_lily_builtin_Option_is_some,_lily_builtin_Option_map,_lily_builtin_Option_or,_lily_builtin_Option_or_else,_lily_builtin_Option_unwrap,_lily_builtin_Option_unwrap_or,_lily_builtin_Option_unwrap_or_else,_lily_builtin_String_ends_with,_lily_builtin_String_find,_lily_builtin_String_html_encode,_lily_builtin_String_is_alnum,_lily_builtin_String_is_alpha,_lily_builtin_String_is_digit,_lily_builtin_String_is_space,_lily_builtin_String_lower,_lily_builtin_String_lstrip,_lily_builtin_String_parse_i,_lily_builtin_String_rstrip,_lily_builtin_String_split,_lily_builtin_String_starts_with,_lily_builtin_String_strip,_lily_builtin_String_trim,_lily_builtin_String_upper
,_lily_builtin_Tainted_sanitize,_lily_builtin_Tuple_merge,_lily_builtin_Tuple_push,_cleanup,_cleanup_219,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_if_handler,_do_handler,_var_handler,_for_handler,_try_handler,_case_handler,_else_handler,_elif_handler,_enum_handler,_while_handler,_raise_handler,_match_handler,_break_handler,_class_handler,_define_handler,_return_handler,_except_handler,_import_handler,_private_handler,_protected_handler,_continue_handler,_fix_first_file_name,_grow_vm_registers,_do_o_interpolation,_lily_assign_value,_do_o_get_item,_do_o_get_property,_do_o_set_item
,_do_o_set_property,_do_o_build_hash,_do_o_build_list_tuple,_do_o_build_enum,_do_o_dynamic_cast,_do_o_create_function,_do_o_raise,_do_o_new_instance,_lily_prepare_call,_lily_push_value,_lily_exec_prepared,_lily_return_hash,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,___stdio_close,_lily_jump_setup,_maybe_catch_exception,_make_cell_from,_lily_result_value,_lily_result_boolean,b3];
var FUNCTION_TABLE_viii = [b4,_lily_load_str,_lily_error,_prep_registers,_lily_move_unit,b4,b4,b4];
var FUNCTION_TABLE_iii = [b5,_fputs,_strcmp,_do_o_optarg_dispatch,_do_o_create_closure,_do_o_load_class_closure,_do_o_load_closure,_lily_arg_hash,_lily_arg_function,_build_hash,b5,b5,b5,b5,b5,b5];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _run_parser: _run_parser, _fflush: _fflush, _get_parser: _get_parser, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _destroy_parser: _destroy_parser, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _get_parser_error: _get_parser_error, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _run_parser = Module["_run_parser"] = asm["_run_parser"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _get_parser = Module["_get_parser"] = asm["_get_parser"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _destroy_parser = Module["_destroy_parser"] = asm["_destroy_parser"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _get_parser_error = Module["_get_parser_error"] = asm["_get_parser_error"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



