#[
Lily's enums are types that are able to be assigned one of a number of different
inner types. The inner types that an enum can be assigned to are termed the
'variant types' or the 'variants' of the enum. The enum here has two different
variants: TreeValue, and TreeList.

The enum here is fairly simple, as there are no generics associated with it. The
first variant, TreeValue, will take just an integer. The second, TreeList, is
able to accept any number of TreeValue (including 0).

Enums are sealed. There's no way to introduce new variants outside of the
initial declaration. Additionally, it's possible to attach member functions to
enums to make them more useful. However, once a member function is declared, it
is no longer possible to add variants to the enum. This is because match needs
to know exactly how many variants there are.
]#

enum TreeObject {
    TreeValue(Integer)
    TreeList(TreeObject...)

    define display {
        match self: {
            case TreeValue(v):
                stdout.write(v)

            case TreeList(l):
                stdout.write("[")

                var size = l.size() - 1

                for i in 0...size: {
                    l[i].display()
                    if i != size:
                        stdout.write(" ")
                }

                stdout.write("]")
        }
    }
}

stdout.write("The tree looks like this: ")
TreeList(
        TreeList(
            TreeValue(1), TreeValue(2)
        ),
        TreeList(
            TreeValue(3),
            TreeList(
                TreeValue(4)
            )
        ),
        TreeList(
            TreeList()
        )
    )
    .display()
stdout.write("\n")
