#[
This demo takes a value and runs it through a function that will perform
several transformations on the value. This demo's purpose is to show off Lily's
type-inference capabilities.
]#

define transform[A, B, C, D](
    value: A,
    f: Function(A => B),
    g: Function(B => C),
    h: Function(C => D))
    : D
{
    # This could also be written as
    # value |> f |> g |> h
    return h(g(f(value)))
}

define length[A](input: List[String]): Integer { return input.size() }

transform(
    10,
    #[
        A = Integer, B = ?, C = ?, D = ?
        Integer::to_s is defined as 'Function(Integer):String'
        B is set to String
    ]#
    Integer::to_s,

    #[
        A = Integer, B = String, C = ?, D = ?
        The lambda infers that the input (b) should be type B.
        The .concat(b) is useless to the final result, but proves that Lily
        knows that b = String.
        It then resolves B as being a string.
        C is set to List[String]
    ]#
    {|b| [b.concat(b)]},
    #[
        A = Integer, B = String, C = List[String], D = ?
        The length function above wants a list of something and will give an
        integer in return. It'll get C, which is List[String] (valid).
        D is set to Integer
    ]#
    length

    #[
        To prove that Lily knows what it's doing, try uncommenting this lambda
        and commenting out length.
        The input of the lambda is C, which is List[String].
    ]#
    # {|c| c + 5}
) |> print
