#[
100 doors is a basic problem that comes from Rosetta Code. The idea is to have
100 values that each represent a door. Each door is visited as many times as
its position in the array (door 2 twice, door 10 visited 10 times, etc.)

This example is loosely based off of Ruby's example, but with some alterations.
For one, this example uses a for loop since Lily's for loop is an integer-only
loop that runs decently fast (there's no 10.times here).
]#
var doors = list::fill(100, false)
 
for i in 0...99:
    for j in i...99 by i + 1:
        doors[j] = !doors[j]

# The list[integer] type is enforced here to prevent defaulting to list[any].
# This prevents needless wrapping of things in type 'any' when that does not
# need to happen.
var open_doors: list[integer] = []

doors.each_index{|i|
    if doors[i]:
        open_doors.push(i + 1)
}

printfmt("Open doors: %s\n", Dynamic(open_doors))
